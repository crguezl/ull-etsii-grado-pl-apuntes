<tex2html_file>#./chapter_descendente/descendente_en_perl.tex#
\label<<10455>>chapter:introcomp<<10455>>
Este capítulo tiene por objeto darte una visión global de la 
estructura de un compilador e introducirte en las técnicas básicas
de la construcción de compiladores usando Perl.
\begin<<13846>>tex2html_deferred<<13846>>\par\end<<13847>>tex2html_deferred<<13847>>
Puesto que no todos los alumnos que se incorporan en este capítulo 
han leído los anteriores y no necesariamente conocen Perl, en la sección
\ref<<10456>>section:lasbases<<10456>>
comenzamos haciendo un breve repaso a como construir un módulo en Perl.
Si quieres tener un conocimiento mas profundo
lee el capítulo sobre módulos en 
\externalref<<11884>>chapter:modulos<<11884>> \cite<<11885>>CasianoIntroAPerl<<11885>>. 
\begin<<13848>>tex2html_deferred<<13848>>\par\end<<13849>>tex2html_deferred<<13849>>
La sección 
\ref<<10458>>section:fases<<10458>>
describe las fases en las que -al menos conceptualmente-
se divide un compilador.
A continuación la sección 
\ref<<10459>>section:analisislexico<<10459>>
presenta la primera de dichas fases, el análisis léxico.
En la sección 
\ref<<10460>>section:conceptos<<10460>>
repasamos conceptos de análisis sintáctico 
que deberían ser familiares a cualquiera que haya 
seguido un curso en teoría de autómatas 
y lenguajes formales.
Antes de comenzar a traducir es conveniente tener un \emph<<10461>>esquema<<10461>> o estrategia
de traducción para cada constructo sintáctico. 
La sección 
\ref<<10462>>section:esquemas<<10462>>
introduce el concepto de esquema de traducción.
La fase de análisis sintáctico consiste en la construcción
del \emph<<10463>>árbol de análisis<<10463>> a partir de la \emph<<10464>>secuencia de unidades léxicas<<10464>>. 
Existen diversas estrategias para resolver esta fase.
En la sección 
\ref<<10465>>section:predictivo<<10465>>
introducimos la que posiblemente sea la mas sencilla de todas: el análisis
descendente predictivo recursivo.
En la sección
\ref<<10466>>section:recursionizquierda<<10466>>
abordamos una estrategia para transformar ciertas
gramáticas para las que dicho método no funciona.
\begin<<13850>>tex2html_deferred<<13850>>\par\end<<13851>>tex2html_deferred<<13851>>
Un analizador sintáctico implícitamente construye 
el árbol de análisis concreto. En muchas ocasiones
resulta mas rentable trabajar con una forma simplificada
(\emph<<10467>>abstracta<<10467>>) del árbol que contiene la misma información 
que aquél. La sección 
\ref<<10468>>section:aat<<10468>> trata de la construcción de los 
árboles de análisis abstractos.
\begin<<13852>>tex2html_deferred<<13852>>\par\end<<13853>>tex2html_deferred<<13853>>
\section<<10469>>Las Bases<<10469>>
\label<<10470>>section:lasbases<<10470>>
Puesto que no todos los alumnos que están interesados en esta sección
tienen conocimientos previos de Perl, en esta sección
comenzamos haciendo un breve repaso a como construir un módulo en Perl
y al mismo tiempo repasamos las características usadas del lenguaje.
Si quieres tener un conocimiento mas profundo
de como construir un módulo, lee el capítulo
sobre módulos en \externalref<<11886>>chapter:modulos<<11886>> \cite<<11887>>CasianoIntroAPerl<<11887>>.
\begin<<13854>>tex2html_deferred<<13854>>\par\end<<13855>>tex2html_deferred<<13855>>
 
  \paragraph<<11888>>Version<<11888>>
  \begin<<11889>>tabular<<11889>><<11890>>c<<11890>>
  \end<<11891>>tabular<<11891>>

\begin<<13856>>tex2html_deferred<<13856>>\par\end<<13857>>tex2html_deferred<<13857>>
El comportamiento de Perl puede variar ligeramente si la versión que tenemos instalada es 
antigua. Para ver la versión de Perl podemos hacer.
\begin<<13858>>tex2html_deferred<<13858>>\par\end<<13859>>tex2html_deferred<<13859>>
\begin<<10473>>tex2html_preform<<10473>><tex2html_verbatim_mark>verbatim5471#\end<<10474>>tex2html_preform<<10474>>
\begin<<13860>>tex2html_deferred<<13860>>\par\end<<13861>>tex2html_deferred<<13861>>
 
  \paragraph<<11892>>h2xs<<11892>>
  \begin<<11893>>tabular<<11893>><<11894>>c<<11894>>
  \end<<11895>>tabular<<11895>>

\begin<<13862>>tex2html_deferred<<13862>>\par\end<<13863>>tex2html_deferred<<13863>>
En primer lugar, construimos la estructura para nuestro proyecto de mini-lenguaje.
La mejor forma de comenzar a escribir un módulo es usando la herramienta Perl
<tex2html_verb_mark>1465<tex2html_verb_mark>. Supongamos que queremos construir un módulo <tex2html_verb_mark>1466<tex2html_verb_mark>. 
Los nombres de los módulos siguen un esquema de identificadores separados
por una pareja de <tex2html_verb_mark>1467<tex2html_verb_mark>. Para saber más sobre el esquema de nombres 
de los módulos y la forma en la que estos se asigna a ficheros del sistema 
operativo, lea la sección 
sobre introducción a los módulos \externalref<<11896>>section:introamodulos<<11896>> \cite<<11897>>CasianoIntroAPerl<<11897>>.
\begin<<13864>>tex2html_deferred<<13864>>\par\end<<13865>>tex2html_deferred<<13865>>
\begin<<10477>>tex2html_preform<<10477>><tex2html_verbatim_mark>verbatim5472#\end<<10478>>tex2html_preform<<10478>>
La herramienta <tex2html_verb_mark>1468<tex2html_verb_mark> fué concebida para ayudar en la transformación
de ficheros de cabecera de C en código Perl. La opción 
<tex2html_verb_mark>1469<tex2html_verb_mark> hace que se omita la  creación de subrutinas externas (<tex2html_verb_mark>1470<tex2html_verb_mark>)
La opción <tex2html_verb_mark>1471<tex2html_verb_mark> implica que el módulo no hará uso del <tex2html_verb_mark>1472<tex2html_verb_mark>.
La opción <tex2html_verb_mark>1473<tex2html_verb_mark> proporciona el nombre del módulo.
La llamada a <tex2html_verb_mark>1474<tex2html_verb_mark> crea la siguiente estructura de directorios y ficheros:
\begin<<10479>>tex2html_preform<<10479>><tex2html_verbatim_mark>verbatim5473#\end<<10480>>tex2html_preform<<10480>>
\begin<<13866>>tex2html_deferred<<13866>>\par\end<<13867>>tex2html_deferred<<13867>>
 
  \paragraph<<11898>>Generación del Makefile<<11898>>
  \begin<<11899>>tabular<<11899>><<11900>>c<<11900>>
  \end<<11901>>tabular<<11901>>

\begin<<13868>>tex2html_deferred<<13868>>\par\end<<13869>>tex2html_deferred<<13869>>
Después de esto tenemos un módulo ''funcional'' que no hace nada.
Lo podríamos instalar como si lo hubieramos descargado desde CPAN
(Véase \externalref<<11902>>section:instalacionamano<<11902>> \cite<<11903>>CasianoIntroAPerl<<11903>>).
\begin<<13870>>tex2html_deferred<<13870>>\par\end<<13871>>tex2html_deferred<<13871>>
Después cambiamos al directorio <tex2html_verb_mark>1475<tex2html_verb_mark> y hacemos <tex2html_verb_mark>1476<tex2html_verb_mark>.
\begin<<10483>>tex2html_preform<<10483>><tex2html_verbatim_mark>verbatim5474#\end<<10484>>tex2html_preform<<10484>>
Esto crea el fichero <tex2html_verb_mark>1477<tex2html_verb_mark> necesario para actualizar 
nuestra aplicación. Para saber más sobre <tex2html_verb_mark>1478<tex2html_verb_mark>
lea \externalref<<11904>>section:construccion<<11904>> \cite<<11905>>CasianoIntroAPerl<<11905>>.
\begin<<13872>>tex2html_deferred<<13872>>\par\end<<13873>>tex2html_deferred<<13873>>
 
  \paragraph<<11906>>Documentación<<11906>>
  \begin<<11907>>tabular<<11907>><<11908>>c<<11908>>
  \end<<11909>>tabular<<11909>>

\begin<<13874>>tex2html_deferred<<13874>>\par\end<<13875>>tex2html_deferred<<13875>>
Pasamos ahora a trabajar en el módulo. Primero escribimos
la parte relativa a la documentación. Para ello 
editamos <tex2html_verb_mark>1479<tex2html_verb_mark>:
\begin<<10487>>tex2html_preform<<10487>><tex2html_verbatim_mark>verbatim5475#\end<<10488>>tex2html_preform<<10488>>
y al final del mismo insertamos la documentación. Para saber más sobre el 
lenguajes de marcas de Perl (\emph<<10489>>pod<<10489>> por \emph<<10490>>plain old documentation<<10490>>)
lea \externalref<<11910>>section:pod<<11910>> \cite<<11911>>CasianoIntroAPerl<<11911>>. En este caso escribimos:
\begin<<10492>>tex2html_preform<<10492>><tex2html_verbatim_mark>verbatim5476#\end<<10493>>tex2html_preform<<10493>>
La documentación puede ser mostrada utilizando el comando <tex2html_verb_mark>1480<tex2html_verb_mark>.
\begin<<13876>>tex2html_deferred<<13876>>\par\end<<13877>>tex2html_deferred<<13877>>
<tex2html_verbatim_mark>rawhtml5477#
\begin<<13878>>tex2html_deferred<<13878>>\par\end<<13879>>tex2html_deferred<<13879>>
La forma en la que se controla la calidad de un módulo es mediante 
el desarrollo de pruebas. Las pruebas son programas perl que se sitúan en el directorio
<tex2html_verb_mark>1481<tex2html_verb_mark> y que tienen la extensión <tex2html_verb_mark>1482<tex2html_verb_mark>. Para ejecutar las pruebas
se escribe:
\begin<<13880>>tex2html_deferred<<13880>>\par\end<<13881>>tex2html_deferred<<13881>>
\begin<<10494>>tex2html_preform<<10494>><tex2html_verbatim_mark>verbatim5478#\end<<10495>>tex2html_preform<<10495>>
\begin<<13882>>tex2html_deferred<<13882>>\par\end<<13883>>tex2html_deferred<<13883>>
Vease la sección \externalref<<11912>>subsection:laspruebas<<11912>> \cite<<11913>>CasianoIntroAPerl<<11913>> de los apuntes de LHP para ams detalles.
\begin<<13884>>tex2html_deferred<<13884>>\par\end<<13885>>tex2html_deferred<<13885>>
\subsection<<11914>>Repaso: Las Bases<<11914>>
   \index<<11915>>Repaso!Las Bases<<11915>>
  
\label<<10498>>repaso:lasbases<<10498>>
\begin<<13886>>tex2html_deferred<<13886>>\par\end<<13887>>tex2html_deferred<<13887>>
Responda a las siguientes preguntas:
\begin<<13888>>tex2html_deferred<<13888>>\par\end<<13889>>tex2html_deferred<<13889>>
\begin<<10499>>enumerate<<10499>>
\item
¿Cómo puedo saber con que versión de Perl estoy trabajando?
\item
Cuando el intérprete Perl encuentra una sentencia 
\begin<<10500>>tex2html_preform<<10500>><tex2html_verbatim_mark>verbatim5479#\end<<10501>>tex2html_preform<<10501>>
¿Donde busca el fichero <tex2html_verb_mark>1483<tex2html_verb_mark>?
\item
¿Con que opción debo usar Perl para ejecutar un programa en la línea de comandos?
\item
¿Cómo se llama el programa que me permite crear el esqueleto 
para una distribución de un módulo? ¿Con que opciones debo llamarlo?
\item
Cuando se crea con <tex2html_verb_mark>1484<tex2html_verb_mark> el esqueleto para <tex2html_verb_mark>1485<tex2html_verb_mark>:
¿En que subdirectorio queda el fichero conteniendo el esqueleto del
módulo creado <tex2html_verb_mark>1486<tex2html_verb_mark>?
\item
¿Cuál es la función de <tex2html_verb_mark>1487<tex2html_verb_mark>?
\item
¿Qué es <tex2html_verb_mark>1488<tex2html_verb_mark>? ¿Cuál es su función?
¿Que significa la frase \emph<<10502>>looks good<<10502>>?
\item
¿Con que comando se crea el <tex2html_verb_mark>1489<tex2html_verb_mark> para trabajar en la plataforma
actual?
\item
¿Cómo se puede ver la documentación de un módulo?
\item 
¿Que hacen los siguientes comandos <tex2html_verb_mark>1490<tex2html_verb_mark>?
Repase 
\externalref<<11916>>subsection:comandodeparrafo<<11916>> \cite<<11917>>CasianoIntroAPerl<<11917>>
si tiene dudas.
\begin<<10504>>tex2html_preform<<10504>><tex2html_verbatim_mark>verbatim5480#\end<<10505>>tex2html_preform<<10505>>
\item
¿Que secuencia de comandos conocida como
\emph<<10506>>mantra de instalación<<10506>> es necesario ejecutar para 
instalar un módulo?
\item
¿Cual es la función del directorio <tex2html_verb_mark>1491<tex2html_verb_mark>?
\item
¿Que tipo deben tener los programas de prueba para que
<tex2html_verb_mark>1492<tex2html_verb_mark> los reconozca como pruebas?
\begin<<13890>>tex2html_deferred<<13890>>\par\end<<13891>>tex2html_deferred<<13891>>
\end<<10507>>enumerate<<10507>>
\begin<<13892>>tex2html_deferred<<13892>>\par\end<<13893>>tex2html_deferred<<13893>>
\subsection<<11921>>Práctica: Crear y documentar el Módulo <<11923>>\begin<<13894>>tex2html_deferred<<13894>>\tt\end<<13895>>tex2html_deferred<<13895>>PL::Tutu<<11923>><<11921>>
   \index<<11922>>Práctica!Crear y documentar el Módulo <<11924>>\begin<<13896>>tex2html_deferred<<13896>>\tt\end<<13897>>tex2html_deferred<<13897>>PL::Tutu<<11924>><<11922>>
  
\label<<10509>>practica:creacionydocdemodulo<<10509>>
Reproduzca los pasos explicados en la sección 
\ref<<10510>>section:lasbases<<10510>> creando el módulo <<10511>>\begin<<13898>>tex2html_deferred<<13898>>\tt\end<<13899>>tex2html_deferred<<13899>>PL::Tutu<<10511>>
y documentándolo. 
\begin<<10512>>itemize<<10512>>
\item
Compruebe que la documentación se muestra correctamente
\item
Compruebe que puede crear una distribución haciendo <tex2html_verb_mark>1493<tex2html_verb_mark>
\item
Compruebe que la distribución creada puede instalarse correctamente
siguiendo las instrucciones en 
\externalref<<11925>>section:instalacionamano<<11925>> \cite<<11926>>CasianoIntroAPerl<<11926>>.
\end<<10514>>itemize<<10514>>
\begin<<13900>>tex2html_deferred<<13900>>\par\end<<13901>>tex2html_deferred<<13901>>
\section<<10515>>Las Fases de un Compilador<<10515>>
\label<<10516>>section:fases<<10516>>
La estructura del compilador, descompuesto en fases, queda explicitada 
en el código de la subrutina <tex2html_verb_mark>1494<tex2html_verb_mark>:
\begin<<13902>>tex2html_deferred<<13902>>\par\end<<13903>>tex2html_deferred<<13903>>
 
  \paragraph<<11927>>Esquema del Compilador<<11927>>
  \begin<<11928>>tabular<<11928>><<11929>>c<<11929>>
  \end<<11930>>tabular<<11930>>

\begin<<13904>>tex2html_deferred<<13904>>\par\end<<13905>>tex2html_deferred<<13905>>
\begin<<10518>>tex2html_preform<<10518>><tex2html_verbatim_mark>verbatim5481#\end<<10519>>tex2html_preform<<10519>>
\begin<<13906>>tex2html_deferred<<13906>>\par\end<<13907>>tex2html_deferred<<13907>>
 
  \paragraph<<11931>>Añadiendo Ejecutables<<11931>>
  \begin<<11932>>tabular<<11932>><<11933>>c<<11933>>
  \end<<11934>>tabular<<11934>>

\begin<<13908>>tex2html_deferred<<13908>>\par\end<<13909>>tex2html_deferred<<13909>>
Vamos a añadir un \emph<<10521>>script<<10521>> que use el módulo
<tex2html_verb_mark>1495<tex2html_verb_mark> para asi poder ejecutar nuestro compilador:
\begin<<10522>>tex2html_preform<<10522>><tex2html_verbatim_mark>verbatim5482#\end<<10523>>tex2html_preform<<10523>>
A continuación creamos dos versiones del compilador <tex2html_verb_mark>1496<tex2html_verb_mark>
y <tex2html_verb_mark>1497<tex2html_verb_mark> y un programa de prueba <tex2html_verb_mark>1498<tex2html_verb_mark>:
\begin<<13910>>tex2html_deferred<<13910>>\par\end<<13911>>tex2html_deferred<<13911>>
\begin<<10524>>tex2html_preform<<10524>><tex2html_verbatim_mark>verbatim5483#\end<<10525>>tex2html_preform<<10525>>
\begin<<13912>>tex2html_deferred<<13912>>\par\end<<13913>>tex2html_deferred<<13913>>
 
  \paragraph<<11935>>Búsqueda de Librerías en Tiempo de Desarrollo<<11935>>
  \begin<<11936>>tabular<<11936>><<11937>>c<<11937>>
  \end<<11938>>tabular<<11938>>

\begin<<13914>>tex2html_deferred<<13914>>\par\end<<13915>>tex2html_deferred<<13915>>
El programa <tex2html_verb_mark>1499<tex2html_verb_mark> ilustra otra forma de conseguir que el intérprete
Perl busque por la librería que está siendo desarrollada, mediante el
uso de <tex2html_verb_mark>1500<tex2html_verb_mark>:
\begin<<13916>>tex2html_deferred<<13916>>\par\end<<13917>>tex2html_deferred<<13917>>
\begin<<10527>>tex2html_preform<<10527>><tex2html_verbatim_mark>verbatim5484#\end<<10528>>tex2html_preform<<10528>>
\begin<<13918>>tex2html_deferred<<13918>>\par\end<<13919>>tex2html_deferred<<13919>>
Una tercera forma (la que recomiendo):
\begin<<10529>>tex2html_preform<<10529>><tex2html_verbatim_mark>verbatim5485#\end<<10530>>tex2html_preform<<10530>>
\begin<<13920>>tex2html_deferred<<13920>>\par\end<<13921>>tex2html_deferred<<13921>>
 
  \paragraph<<11939>>Añadiendo Los Ejecutables al <<11943>>\begin<<13922>>tex2html_deferred<<13922>>\tt\end<<13923>>tex2html_deferred<<13923>>MANIFEST<<11943>><<11939>>
  \begin<<11940>>tabular<<11940>><<11941>>c<<11941>>
  \end<<11942>>tabular<<11942>>

\begin<<13924>>tex2html_deferred<<13924>>\par\end<<13925>>tex2html_deferred<<13925>>
Ahora tenemos que añadir estos ficheros en <tex2html_verb_mark>1501<tex2html_verb_mark> para que formen
parte del proyecto. En vez de eso lo que podemos hacer es crear un fichero
<tex2html_verb_mark>1502<tex2html_verb_mark>:
\begin<<10532>>tex2html_preform<<10532>><tex2html_verbatim_mark>verbatim5486#\end<<10533>>tex2html_preform<<10533>>
Ahora al hacer
\begin<<10534>>tex2html_preform<<10534>><tex2html_verbatim_mark>verbatim5487#\end<<10535>>tex2html_preform<<10535>>
se crea un fichero <tex2html_verb_mark>1503<tex2html_verb_mark> que contiene los caminos 
relativos de todos los ficheros
en la jerarquía cuyos nombres no casan con una de las expresiones
regulares en <tex2html_verb_mark>1504<tex2html_verb_mark>.
\begin<<13926>>tex2html_deferred<<13926>>\par\end<<13927>>tex2html_deferred<<13927>>
Para saber mas sobre <tex2html_verb_mark>1505<tex2html_verb_mark> léa 
\externalref<<11944>>subsection:MANIFEST<<11944>> \cite<<11945>>CasianoIntroAPerl<<11945>>.
\begin<<13928>>tex2html_deferred<<13928>>\par\end<<13929>>tex2html_deferred<<13929>>
No recomiendo el uso de <tex2html_verb_mark>1506<tex2html_verb_mark>. Prefiero un control manual de los
ficheros que integran la aplicacion.
\begin<<13930>>tex2html_deferred<<13930>>\par\end<<13931>>tex2html_deferred<<13931>>
 
  \paragraph<<11946>>Indicando al Sistema de Distribución que los Ficheros son Ejecutables<<11946>>
  \begin<<11947>>tabular<<11947>><<11948>>c<<11948>>
  \end<<11949>>tabular<<11949>>

\begin<<13932>>tex2html_deferred<<13932>>\par\end<<13933>>tex2html_deferred<<13933>>
Es necesario indicarle a Perl que los ficheros añadidos son ejecutables.
Esto se hace mediante el par\'ametro <tex2html_verb_mark>1507<tex2html_verb_mark> de <tex2html_verb_mark>1508<tex2html_verb_mark>:
\begin<<10538>>tex2html_preform<<10538>><tex2html_verbatim_mark>verbatim5488#\end<<10539>>tex2html_preform<<10539>>
Perl utilizará esa información durante la fase de instalación
para instalar los ejecutables en el \emph<<10540>>path<<10540>> de búsqueda.
\begin<<13934>>tex2html_deferred<<13934>>\par\end<<13935>>tex2html_deferred<<13935>>
 
  \paragraph<<11950>>Reconstrucci\'on de la aplicación<<11950>>
  \begin<<11951>>tabular<<11951>><<11952>>c<<11952>>
  \end<<11953>>tabular<<11953>>

\begin<<13936>>tex2html_deferred<<13936>>\par\end<<13937>>tex2html_deferred<<13937>>
A continuación hay que rehacer el <tex2html_verb_mark>1509<tex2html_verb_mark>:
\begin<<10542>>tex2html_preform<<10542>><tex2html_verbatim_mark>verbatim5489#\end<<10543>>tex2html_preform<<10543>>
\begin<<13938>>tex2html_deferred<<13938>>\par\end<<13939>>tex2html_deferred<<13939>>
Para crear una versión funcional hacemos <tex2html_verb_mark>1510<tex2html_verb_mark>:
\begin<<10544>>tex2html_preform<<10544>><tex2html_verbatim_mark>verbatim5490#\end<<10545>>tex2html_preform<<10545>>
\begin<<13940>>tex2html_deferred<<13940>>\par\end<<13941>>tex2html_deferred<<13941>>
Para crear el <tex2html_verb_mark>1511<tex2html_verb_mark> hacemos <tex2html_verb_mark>1512<tex2html_verb_mark>:
\begin<<10546>>tex2html_preform<<10546>><tex2html_verbatim_mark>verbatim5491#\end<<10547>>tex2html_preform<<10547>>
\begin<<13942>>tex2html_deferred<<13942>>\par\end<<13943>>tex2html_deferred<<13943>>
Comprobemos que el test de prueba generado automáticamente por
<tex2html_verb_mark>1513<tex2html_verb_mark> se pasa correctamente:
\begin<<10548>>tex2html_preform<<10548>><tex2html_verbatim_mark>verbatim5492#\end<<10549>>tex2html_preform<<10549>>
\begin<<13944>>tex2html_deferred<<13944>>\par\end<<13945>>tex2html_deferred<<13945>>
 
  \paragraph<<11954>>Ejecución<<11954>>
  \begin<<11955>>tabular<<11955>><<11956>>c<<11956>>
  \end<<11957>>tabular<<11957>>

\begin<<13946>>tex2html_deferred<<13946>>\par\end<<13947>>tex2html_deferred<<13947>>
Podemos ahora ejecutar los guiones:
\begin<<10551>>tex2html_preform<<10551>><tex2html_verbatim_mark>verbatim5493#\end<<10552>>tex2html_preform<<10552>>
\begin<<13948>>tex2html_deferred<<13948>>\par\end<<13949>>tex2html_deferred<<13949>>
Veamos los contenidos del programa fuente <tex2html_verb_mark>1514<tex2html_verb_mark>
que usaremos para hacer una prueba:
\begin<<10553>>tex2html_preform<<10553>><tex2html_verbatim_mark>verbatim5494#\end<<10554>>tex2html_preform<<10554>>
\begin<<13950>>tex2html_deferred<<13950>>\par\end<<13951>>tex2html_deferred<<13951>>
 
  \paragraph<<11958>>Construcción de una Distribución<<11958>>
  \begin<<11959>>tabular<<11959>><<11960>>c<<11960>>
  \end<<11961>>tabular<<11961>>

\begin<<13952>>tex2html_deferred<<13952>>\par\end<<13953>>tex2html_deferred<<13953>>
Para hacer una distribución instalable hacemos <tex2html_verb_mark>1515<tex2html_verb_mark>:
\begin<<10556>>tex2html_preform<<10556>><tex2html_verbatim_mark>verbatim5495#\end<<10557>>tex2html_preform<<10557>>
Después de esto tenemos en el directorio de trabajo
el fichero  <tex2html_verb_mark>1516<tex2html_verb_mark> con la distribución:
\begin<<10558>>tex2html_preform<<10558>><tex2html_verbatim_mark>verbatim5496#\end<<10559>>tex2html_preform<<10559>>
\begin<<13954>>tex2html_deferred<<13954>>\par\end<<13955>>tex2html_deferred<<13955>>
\subsection<<11962>>Repaso: Fases de un Compilador<<11962>>
   \index<<11963>>Repaso!Fases de un Compilador<<11963>>
  
\label<<10561>>repaso:fases<<10561>>
\begin<<10562>>enumerate<<10562>>
\item
¿Que hace la declaración 
<tex2html_verb_mark>1517<tex2html_verb_mark>?
\item
¿Cual es la función de la declaración <tex2html_verb_mark>1518<tex2html_verb_mark>?
\item
¿Cuál es la función de la declaración <tex2html_verb_mark>1519<tex2html_verb_mark>?
\item
¿Cuál es la función de la declaración <tex2html_verb_mark>1520<tex2html_verb_mark>?
\item
¿Que diferencia hay entre <tex2html_verb_mark>1521<tex2html_verb_mark> y <tex2html_verb_mark>1522<tex2html_verb_mark>?
\item
¿Cuál es la función de la declaración <tex2html_verb_mark>1523<tex2html_verb_mark>?
¿Que diferencia hay entre <tex2html_verb_mark>1524<tex2html_verb_mark> y <tex2html_verb_mark>1525<tex2html_verb_mark>?
\item
¿Qué hace la declaración <tex2html_verb_mark>1526<tex2html_verb_mark>? 
\item
¿Qué es una variable de paquete?
\item
¿Cuál es el nombre completo de una variable de paquete?
\item
¿En que variable especial se situán los argumentos pasados a una subrutina?
\item
¿Que hace la declaración <tex2html_verb_mark>1527<tex2html_verb_mark>?
\item
¿Cómo se declara una variable léxica?
\item
¿Cuál es el prefijo para los hashes?
\item
¿Cómo se hace referencia a un elemento de un hash <tex2html_verb_mark>1529<tex2html_verb_mark> de clave <tex2html_verb_mark>1530<tex2html_verb_mark>?
\item
¿Cómo se hace referencia a un elemento de un array <tex2html_verb_mark>1531<tex2html_verb_mark> de índice <tex2html_verb_mark>1532<tex2html_verb_mark>?
¿Que lugar ocupa ese elemento en el array?
\item
¿Cuál es el significado de <tex2html_verb_mark>1533<tex2html_verb_mark>?
\item
¿Cuál es el prefijo para las subrutinas?
\item
Señale la diferencia entre
\begin<<10563>>tex2html_preform<<10563>><tex2html_verbatim_mark>verbatim5497#\end<<10564>>tex2html_preform<<10564>>
y
\begin<<10565>>tex2html_preform<<10565>><tex2html_verbatim_mark>verbatim5498#\end<<10566>>tex2html_preform<<10566>>
Repase 
\externalref<<11964>>section:referencias<<11964>> \cite<<11965>>CasianoIntroAPerl<<11965>>.
\item
Toda referencia es un escalar: ¿Cierto o falso?
\item
Toda referencia es verdadera ¿Cierto o falso?
\item
¿Que diferencia hay entre <tex2html_verb_mark>1534<tex2html_verb_mark> y <tex2html_verb_mark>1535<tex2html_verb_mark>?
¿La línea <tex2html_verb_mark>1536<tex2html_verb_mark> se ejecuta en tiempo de compilación 
o en tiempo de ejecución?
\item
¿Que hace la línea 
<tex2html_verb_mark>1537<tex2html_verb_mark>?. Repáse 
\externalref<<11966>>section:herencia<<11966>> \cite<<11967>>CasianoIntroAPerl<<11967>>.
\begin<<13956>>tex2html_deferred<<13956>>\par\end<<13957>>tex2html_deferred<<13957>>
\item
¿Que hace la línea
<tex2html_verb_mark>1538<tex2html_verb_mark>?
\item
¿Que diferencia hay entre <tex2html_verb_mark>1539<tex2html_verb_mark> y <tex2html_verb_mark>1540<tex2html_verb_mark>?.
Repase \externalref<<11968>>section:exportacion<<11968>> \cite<<11969>>CasianoIntroAPerl<<11969>>.
\item
¿Que hace la línea
<tex2html_verb_mark>1541<tex2html_verb_mark>?
\item
¿Que valor tiene una variable no incializada? ¿y si es un array?
\item
¿Que es un array anónimo? 
(Repase \externalref<<11970>>section:anonimos<<11970>> \cite<<11971>>CasianoIntroAPerl<<11971>>)
\item
¿Que es un hash anónimo?
(Repase \externalref<<11972>>section:anonimos<<11972>> \cite<<11973>>CasianoIntroAPerl<<11973>>)
\item
¿Que hace el operador <tex2html_verb_mark>1542<tex2html_verb_mark>?.
Repase 
\externalref<<11974>>subsection:flechagrande<<11974>> \cite<<11975>>CasianoIntroAPerl<<11975>>.
\item
¿En que lugar se dejan los ejecutables asociados con una distribución?
¿Cómo se informa a Perl que se trata de ejecutables?
\item
¿Cuál es la función de <tex2html_verb_mark>1543<tex2html_verb_mark>?
¿Que hace <tex2html_verb_mark>1544<tex2html_verb_mark>?
\item
¿Que hace la opción <tex2html_verb_mark>1545<tex2html_verb_mark>?
¿Porqué la primera línea de <tex2html_verb_mark>1546<tex2html_verb_mark> comienza:\\ 
<tex2html_verb_mark>1547<tex2html_verb_mark>?
\item
¿Cómo puedo saber lo que hace el módulo <tex2html_verb_mark>1548<tex2html_verb_mark>?
¿Qué hace la línea <tex2html_verb_mark>1549<tex2html_verb_mark> en el programa <tex2html_verb_mark>1550<tex2html_verb_mark>?
\item
¿Que contiene la variable <tex2html_verb_mark>1551<tex2html_verb_mark>?
\item
¿Cómo se crea una distribución?
\item
¿Que devuelve <tex2html_verb_mark>1552<tex2html_verb_mark> en la línea 79?
Repase 
\externalref<<11976>>subsection:filetests<<11976>> \cite<<11977>>CasianoIntroAPerl<<11977>>.
\item
¿Cuál es la función de la variable mágica <tex2html_verb_mark>1553<tex2html_verb_mark>?
¿Que se leerá en la línea 86
\begin<<10574>>tex2html_preform<<10574>><tex2html_verbatim_mark>verbatim5499#\end<<10575>>tex2html_preform<<10575>>
\item
¿Que hace el operador <tex2html_verb_mark>1554<tex2html_verb_mark>? ¿Que relación hay entre <tex2html_verb_mark>1555<tex2html_verb_mark> y <tex2html_verb_mark>1556<tex2html_verb_mark>?.
\item
Si <tex2html_verb_mark>1557<tex2html_verb_mark> es una referencia a la cadena que va a contener el
código objeto, ¿Cómo se denota a la cadena referenciada por <tex2html_verb_mark>1558<tex2html_verb_mark>?
Explique la línea 
\begin<<10576>>tex2html_preform<<10576>><tex2html_verbatim_mark>verbatim5500#\end<<10577>>tex2html_preform<<10577>>
\end<<10578>>enumerate<<10578>>
\begin<<13958>>tex2html_deferred<<13958>>\par\end<<13959>>tex2html_deferred<<13959>>
\subsection<<11978>>Práctica: Fases de un Compilador<<11978>>
   \index<<11979>>Práctica!Fases de un Compilador<<11979>>
  
\label<<10580>>practica:fases<<10580>>
Reproduzca los pasos explicados en la sección
\ref<<10581>>section:fases<<10581>> extendiendo el módulo <tex2html_verb_mark>1559<tex2html_verb_mark>
con las funciones de compilación y los correspondientes
guiones de compilación.
\begin<<13960>>tex2html_deferred<<13960>>\par\end<<13961>>tex2html_deferred<<13961>>
Mejore el script <tex2html_verb_mark>1560<tex2html_verb_mark> para que acepte opciones desde la línea de comandos.
Debera soportar al menos las siguientes opciones:
\begin<<10582>>itemize<<10582>>
\item <tex2html_verb_mark>1561<tex2html_verb_mark> 
\begin<<13962>>tex2html_deferred<<13962>>\par\end<<13963>>tex2html_deferred<<13963>>
Muestra de forma concisa el comando de uso
\item <tex2html_verb_mark>1562<tex2html_verb_mark> 
\begin<<13964>>tex2html_deferred<<13964>>\par\end<<13965>>tex2html_deferred<<13965>>
Un resumen de cada opción disponible
\begin<<13966>>tex2html_deferred<<13966>>\par\end<<13967>>tex2html_deferred<<13967>>
\item <tex2html_verb_mark>1563<tex2html_verb_mark>
\begin<<13968>>tex2html_deferred<<13968>>\par\end<<13969>>tex2html_deferred<<13969>>
Muestra la versión del programa
\begin<<13970>>tex2html_deferred<<13970>>\par\end<<13971>>tex2html_deferred<<13971>>
\item <tex2html_verb_mark>1564<tex2html_verb_mark> 
\begin<<13972>>tex2html_deferred<<13972>>\par\end<<13973>>tex2html_deferred<<13973>>
Muestra la documentación
\end<<10583>>itemize<<10583>>
\begin<<13974>>tex2html_deferred<<13974>>\par\end<<13975>>tex2html_deferred<<13975>>
Use para ello el módulo  <<11980>>\begin<<13976>>tex2html_deferred<<13976>>\tt\end<<13977>>tex2html_deferred<<13977>>Getopt::Long<<11980>> .
Este módulo provee la función  <<11981>>\begin<<13978>>tex2html_deferred<<13978>>\tt\end<<13979>>tex2html_deferred<<13979>>GetOptions<<11981>>  la cual
se atiene a los estándares de especificación
de opciones en la línea de comandos POSIX y GNU.
Esta función soporta el uso del guión doble <tex2html_verb_mark>1565<tex2html_verb_mark>
y el simple así como admitir el prefijo mas corto
que deshace la ambiguedad entre las diferentes opciones.
\begin<<13980>>tex2html_deferred<<13980>>\par\end<<13981>>tex2html_deferred<<13981>>
La llamada a 
 <<11982>>\begin<<13982>>tex2html_deferred<<13982>>\tt\end<<13983>>tex2html_deferred<<13983>>GetOptions<<11982>>  analiza la l\'inea de comandos en
<tex2html_verb_mark>1566<tex2html_verb_mark>
inicializa la variable asociada de manera adecuada. Retorna un valor verdadero
si la l\'inea de comandos pudo ser procesada con
En caso contrario emitir\'a
un mensaje de error y devolver\'a falso. Recuerde hacer
<tex2html_verb_mark>1567<tex2html_verb_mark>
para obtener informaci\'on mas detallada
\begin<<13984>>tex2html_deferred<<13984>>\par\end<<13985>>tex2html_deferred<<13985>>
El siguiente ejemplo ilustra el uso de <tex2html_verb_mark>1568<tex2html_verb_mark>.
Se hace uso también del módulo (función  <<11983>>\begin<<13986>>tex2html_deferred<<13986>>\tt\end<<13987>>tex2html_deferred<<13987>>pod2usage<<11983>>  en la línea 63)
<tex2html_verb_mark>1569<tex2html_verb_mark> el cual permite la documentación empotrada.
\begin<<13988>>tex2html_deferred<<13988>>\par\end<<13989>>tex2html_deferred<<13989>>
\begin<<10588>>tex2html_preform<<10588>><tex2html_verbatim_mark>verbatim5501#\end<<10589>>tex2html_preform<<10589>>
\begin<<13990>>tex2html_deferred<<13990>>\par\end<<13991>>tex2html_deferred<<13991>>
Ahora podemos ejecutar el guión de múltiples formas:
\begin<<10590>>tex2html_preform<<10590>><tex2html_verbatim_mark>verbatim5502#\end<<10591>>tex2html_preform<<10591>>
\begin<<13992>>tex2html_deferred<<13992>>\par\end<<13993>>tex2html_deferred<<13993>>
La librería estandar de Perl incluye el módulo <tex2html_verb_mark>1570<tex2html_verb_mark>. 
No es el caso de <tex2html_verb_mark>1571<tex2html_verb_mark>. Descarge el módulo e instalelo
en un directorio local en el que tenga permisos. Si es preciso repase las secciones
\externalref<<11984>>section:instalacionamano<<11984>> \cite<<11985>>CasianoIntroAPerl<<11985>> y \externalref<<11986>>section:CPAN<<11986>> \cite<<11987>>CasianoIntroAPerl<<11987>>  de los apuntes de 
introducción a Perl.
\begin<<13994>>tex2html_deferred<<13994>>\par\end<<13995>>tex2html_deferred<<13995>>
\section<<10594>>Análisis Léxico<<10594>>
\label<<10595>>section:analisislexico<<10595>>
Comenzaremos con la parte mas sencilla del compilador: el analizador 
léxico. 
Habitualmente el término ``análisis léxico'' se refiere al tratamiento
de la entrada que produce como salida
la lista de \emph<<10596>>tokens<<10596>>. Un \emph<<10597>>token<<10597>> hace alusión 
a las unidades mas simples que tiene significado. Habitualmente 
un \emph<<10598>>token<<10598>> o lexema queda descrito por una expresión regular.
Léxico viene del griego \emph<<10599>>lexis<<10599>>, que significa ``palabra''.
Perl es, sobra decirlo, una herramienta eficaz para encontrar en que lugar 
de la cadena se produce un emparejamiento.
Sin embargo, en el análisis léxico, el problema es encontrar la subcadena
a partir de la última posición en la que se produjo un emparejamiento
y que es aceptada por una de las expresiones
regulares que definen los lexemas del lenguaje dado.
\begin<<13996>>tex2html_deferred<<13996>>\par\end<<13997>>tex2html_deferred<<13997>>
La estructura general del analizador léxico consiste en un bucle en el que se va
recorriendo la entrada, buscando por un emparejamiento con 
uno de los patrones/lexemas especificados y, cuando se encuentra, se retorna esa información
al analziador sintáctico. Como no tenemos escrito el analaizador sintáctico 
simplemente iremos añadiéndo los terminales al final de una lista.
\begin<<13998>>tex2html_deferred<<13998>>\par\end<<13999>>tex2html_deferred<<13999>>
Una iteración del bucle tiene la forma de una secuencia de condicionales
en las que se va comprobando si la entrada casa con cada una de las expresiones regulares
que definen los terminales del lenguaje. Las condiciones tienen un aspecto similar a este:
\begin<<14000>>tex2html_deferred<<14000>>\par\end<<14001>>tex2html_deferred<<14001>>
\begin<<10600>>tex2html_preform<<10600>><tex2html_verbatim_mark>verbatim5503#\end<<10601>>tex2html_preform<<10601>>
\begin<<14002>>tex2html_deferred<<14002>>\par\end<<14003>>tex2html_deferred<<14003>>
Una expresión como <tex2html_verb_mark>1572<tex2html_verb_mark> es una expresión regular.
Es conveniente que en este punto repase la introducción a las 
expresiones regulares en 
\externalref<<11988>>section:introregexp<<11988>> \cite<<11989>>CasianoIntroAPerl<<11989>>. 
\begin<<14004>>tex2html_deferred<<14004>>\par\end<<14005>>tex2html_deferred<<14005>>
 
  \paragraph<<11990>>El Operador de Binding<<11990>>
  \begin<<11991>>tabular<<11991>><<11992>>c<<11992>>
  \end<<11993>>tabular<<11993>>

\begin<<14006>>tex2html_deferred<<14006>>\par\end<<14007>>tex2html_deferred<<14007>>
Nótese que, puesto que no se menciona sobre que variable
se hace el \emph<<10604>>binding<<10604>> (no se usa ninguno de los operadores
de \emph<<10605>>binding<<10605>> <tex2html_verb_mark>1573<tex2html_verb_mark> y <tex2html_verb_mark>1574<tex2html_verb_mark>): se entiende que 
es sobre la variable por defecto <tex2html_verb_mark>1575<tex2html_verb_mark> sobre la que se 
hace el matching.
\begin<<14008>>tex2html_deferred<<14008>>\par\end<<14009>>tex2html_deferred<<14009>>
 
  \paragraph<<11994>>Casando a partir del Ültimo Emparejamiento<<11994>>
  \begin<<11995>>tabular<<11995>><<11996>>c<<11996>>
  \end<<11997>>tabular<<11997>>

\begin<<14010>>tex2html_deferred<<14010>>\par\end<<14011>>tex2html_deferred<<14011>>
El ancla <tex2html_verb_mark>1576<tex2html_verb_mark> 
casa con el punto en la cadena en el que terminó el último emparejamiento.
\begin<<14012>>tex2html_deferred<<14012>>\par\end<<14013>>tex2html_deferred<<14013>>
La expresión regular describiendo el patrón de interés se pone
entre paréntesis para usar la estrategia de los paréntesis
con memoria (véanse 
\ref<<10607>>section:variablesmagicasereg<<10607>>
y
\ref<<10608>>section:dolar1<<10608>>). 
\begin<<14014>>tex2html_deferred<<14014>>\par\end<<14015>>tex2html_deferred<<14015>>
Las opciones <tex2html_verb_mark>1577<tex2html_verb_mark> y <tex2html_verb_mark>1578<tex2html_verb_mark> son especialmente 
útiles para la construcción del analizador.
\begin<<14016>>tex2html_deferred<<14016>>\par\end<<14017>>tex2html_deferred<<14017>>
 
  \paragraph<<11998>>La opción <<12002>>\begin<<14018>>tex2html_deferred<<14018>>\tt\end<<14019>>tex2html_deferred<<14019>>g<<12002>><<11998>>
  \begin<<11999>>tabular<<11999>><<12000>>c<<12000>>
  \end<<12001>>tabular<<12001>>

\begin<<14020>>tex2html_deferred<<14020>>\par\end<<14021>>tex2html_deferred<<14021>>
\emph<<11756>>
Como lo usamos en un contexto escalar, la opción <<10610>>\begin<<14022>>tex2html_deferred<<14022>>\tt\end<<14023>>tex2html_deferred<<14023>>g<<10610>> itera sobre la cadena, devolviendo
cierto cada vez que casa, y falso cuando deja de casar.<<11756>> 
Se puede averiguar la posicion del emparejamiento
utilizando la función <tex2html_verb_mark>1579<tex2html_verb_mark>. 
(véase la sección \ref<<10611>>section:g<<10611>> para mas información sobre la opción <tex2html_verb_mark>1580<tex2html_verb_mark>).
\begin<<14024>>tex2html_deferred<<14024>>\par\end<<14025>>tex2html_deferred<<14025>>
 
  \paragraph<<12003>>La opción <<12007>>\begin<<14026>>tex2html_deferred<<14026>>\tt\end<<14027>>tex2html_deferred<<14027>>c<<12007>><<12003>>
  \begin<<12004>>tabular<<12004>><<12005>>c<<12005>>
  \end<<12006>>tabular<<12006>>

\begin<<14028>>tex2html_deferred<<14028>>\par\end<<14029>>tex2html_deferred<<14029>>
La opción
<tex2html_verb_mark>1581<tex2html_verb_mark> afecta a las operaciones de emparejamiento
con <tex2html_verb_mark>1582<tex2html_verb_mark> en un contexto escalar. Normalmente, \emph<<10613>>cuando una
búsqueda global escalar tiene lugar y no ocurre casamiento,
la posici\'on de comienzo de búsqueda es reestablecida<<10613>> al comienzo de
la cadena.
La opci\'on <tex2html_verb_mark>1583<tex2html_verb_mark> hace que la posici\'on inicial de 
emparejamiento permanezca donde la dej\'o el \'ultimo
emparejamiento con \'exito y no se vaya al comienzo. 
Al combinar esto con el ancla <tex2html_verb_mark>1584<tex2html_verb_mark>, la cuál
casa con el final del último emparejamiento, obtenemos que la combinación
\begin<<14030>>tex2html_deferred<<14030>>\par\end<<14031>>tex2html_deferred<<14031>>
\begin<<10614>>tex2html_preform<<10614>><tex2html_verbatim_mark>verbatim5504#\end<<10615>>tex2html_preform<<10615>>
\begin<<14032>>tex2html_deferred<<14032>>\par\end<<14033>>tex2html_deferred<<14033>>
logra el efecto deseado: Si la primera expresión regular
en la cadena <tex2html_verb_mark>1585<tex2html_verb_mark> fracasa, la posición de búsqueda no es inicializada
de nuevo gracias a la opción <tex2html_verb_mark>1586<tex2html_verb_mark> y el ancla <tex2html_verb_mark>1587<tex2html_verb_mark> sigue recordando
donde terminó el ultimo casamiento.
\begin<<14034>>tex2html_deferred<<14034>>\par\end<<14035>>tex2html_deferred<<14035>>
 
  \paragraph<<12008>>La opción <<12012>>\begin<<14036>>tex2html_deferred<<14036>>\tt\end<<14037>>tex2html_deferred<<14037>>i<<12012>><<12008>>
  \begin<<12009>>tabular<<12009>><<12010>>c<<12010>>
  \end<<12011>>tabular<<12011>>

\begin<<14038>>tex2html_deferred<<14038>>\par\end<<14039>>tex2html_deferred<<14039>>
Por último, la opción <tex2html_verb_mark>1588<tex2html_verb_mark> permite ignorar el tipo de letra (mayúsculas 
o minúsculas).
\begin<<14040>>tex2html_deferred<<14040>>\par\end<<14041>>tex2html_deferred<<14041>>
Repase la sección
\ref<<10617>>section:opciones<<10617>>
para ver algunas de las opciones mas usadas.
\begin<<14042>>tex2html_deferred<<14042>>\par\end<<14043>>tex2html_deferred<<14043>>
 
  \paragraph<<12013>>Código del Analizador Léxico<<12013>>
  \begin<<12014>>tabular<<12014>><<12015>>c<<12015>>
  \end<<12016>>tabular<<12016>>

\begin<<14044>>tex2html_deferred<<14044>>\par\end<<14045>>tex2html_deferred<<14045>>
Este es el código completo de la subrutina <tex2html_verb_mark>1589<tex2html_verb_mark> que se encarga
del análisis léxico:
\begin<<14046>>tex2html_deferred<<14046>>\par\end<<14047>>tex2html_deferred<<14047>>
\begin<<10619>>tex2html_preform<<10619>><tex2html_verbatim_mark>verbatim5505#\end<<10620>>tex2html_preform<<10620>>
\begin<<14048>>tex2html_deferred<<14048>>\par\end<<14049>>tex2html_deferred<<14049>>
 
  \paragraph<<12017>>Relación de corutina con el Analizador Sintáctico<<12017>>
  \begin<<12018>>tabular<<12018>><<12019>>c<<12019>>
  \end<<12020>>tabular<<12020>>

\begin<<14050>>tex2html_deferred<<14050>>\par\end<<14051>>tex2html_deferred<<14051>>
Si decidieramos establecer una relación de corutina con el analizador léxico los 
condicionales se pueden programar siguiendo secuencias con esta estructura:
\begin<<14052>>tex2html_deferred<<14052>>\par\end<<14053>>tex2html_deferred<<14053>>
\begin<<10622>>tex2html_preform<<10622>><tex2html_verbatim_mark>verbatim5506#\end<<10623>>tex2html_preform<<10623>>
\begin<<14054>>tex2html_deferred<<14054>>\par\end<<14055>>tex2html_deferred<<14055>>
 
  \paragraph<<12021>>Manejo de Errores<<12021>>
  \begin<<12022>>tabular<<12022>><<12023>>c<<12023>>
  \end<<12024>>tabular<<12024>>

\begin<<14056>>tex2html_deferred<<14056>>\par\end<<14057>>tex2html_deferred<<14057>>
Para completar el analizador solo quedan declarar 
las variables usadas y las subrutinas de manejo de errores:
\begin<<14058>>tex2html_deferred<<14058>>\par\end<<14059>>tex2html_deferred<<14059>>
\begin<<10625>>tex2html_preform<<10625>><tex2html_verbatim_mark>verbatim5507#\end<<10626>>tex2html_preform<<10626>>
\begin<<14060>>tex2html_deferred<<14060>>\par\end<<14061>>tex2html_deferred<<14061>>
El uso de <tex2html_verb_mark>1590<tex2html_verb_mark> es necesario porque hemos 
declarado al comienzo del módulo <tex2html_verb_mark>1591<tex2html_verb_mark>.
El pragma <<10627>>\begin<<14062>>tex2html_deferred<<14062>>\tt\end<<14063>>tex2html_deferred<<14063>>use strict<<10627>> le indica al compilador Perl 
que debe considerar como obligatorias un conjunto de reglas de
buen estilo de programación. Entre otras restricciones, el uso del
pragma implica que
todas las variables (no-mágicas) 
deben ser declaradas explícitamente (uso de <tex2html_verb_mark>1592<tex2html_verb_mark>, <tex2html_verb_mark>1593<tex2html_verb_mark>, etc.)
La declaración <tex2html_verb_mark>1594<tex2html_verb_mark> se describe en \externalref<<12025>>subsection:our<<12025>> \cite<<12026>>CasianoIntroAPerl<<12026>>.
\begin<<14064>>tex2html_deferred<<14064>>\par\end<<14065>>tex2html_deferred<<14065>>
\subsection<<12030>>Ejercicio: La opción <<12032>>\begin<<14066>>tex2html_deferred<<14066>>\tt\end<<14067>>tex2html_deferred<<14067>>g<<12032>><<12030>>
   \index<<12031>>Ejercicio!La opción <<12033>>\begin<<14068>>tex2html_deferred<<14068>>\tt\end<<14069>>tex2html_deferred<<14069>>g<<12033>><<12031>>
  
\begin<<14070>>tex2html_deferred<<14070>>\par\end<<14071>>tex2html_deferred<<14071>>
Explique cada una de las líneas que siguen:
\begin<<10630>>tex2html_preform<<10630>><tex2html_verbatim_mark>verbatim5508#\end<<10631>>tex2html_preform<<10631>>
\begin<<14072>>tex2html_deferred<<14072>>\par\end<<14073>>tex2html_deferred<<14073>>
\subsection<<12038>>Ejercicio: Opciones <<12040>>\begin<<14074>>tex2html_deferred<<14074>>\tt\end<<14075>>tex2html_deferred<<14075>>g<<12040>> y <<12041>>\begin<<14076>>tex2html_deferred<<14076>>\tt\end<<14077>>tex2html_deferred<<14077>>c<<12041>> en Expresiones Regulares<<12038>>
   \index<<12039>>Ejercicio!Opciones <<12042>>\begin<<14078>>tex2html_deferred<<14078>>\tt\end<<14079>>tex2html_deferred<<14079>>g<<12042>> y <<12043>>\begin<<14080>>tex2html_deferred<<14080>>\tt\end<<14081>>tex2html_deferred<<14081>>c<<12043>> en Expresiones Regulares<<12039>>
  
\begin<<14082>>tex2html_deferred<<14082>>\par\end<<14083>>tex2html_deferred<<14083>>
Explique cada una de las conductas que siguen
\begin<<10634>>itemize<<10634>>
\item
¿Porqué en la línea 18 se casa con la primera <tex2html_verb_mark>1595<tex2html_verb_mark>?
\begin<<10635>>tex2html_preform<<10635>><tex2html_verbatim_mark>verbatim5509#\end<<10636>>tex2html_preform<<10636>>
\begin<<14084>>tex2html_deferred<<14084>>\par\end<<14085>>tex2html_deferred<<14085>>
\item
¿Porqué en la línea 27 se casa con la última <tex2html_verb_mark>1596<tex2html_verb_mark>?
\begin<<10637>>tex2html_preform<<10637>><tex2html_verbatim_mark>verbatim5510#\end<<10638>>tex2html_preform<<10638>>
\begin<<14086>>tex2html_deferred<<14086>>\par\end<<14087>>tex2html_deferred<<14087>>
\item
¿Porqué en la línea 5 se produce casamiento y en la línea 8 no?
\begin<<10639>>tex2html_preform<<10639>><tex2html_verbatim_mark>verbatim5511#\end<<10640>>tex2html_preform<<10640>>
\end<<10641>>itemize<<10641>>
\begin<<14088>>tex2html_deferred<<14088>>\par\end<<14089>>tex2html_deferred<<14089>>
\subsection<<12044>>Ejercicio: El orden de las expresiones regulares<<12044>>
   \index<<12045>>Ejercicio!El orden de las expresiones regulares<<12045>>
  
¿Que ocurriría en la subrutina <tex2html_verb_mark>1597<tex2html_verb_mark> si el código en las líneas
17-19 que reconoce los identificadores se adelanta a la línea 8? 
¿Que ocurriría con el reconocimiento de las palabras reservadas como
<tex2html_verb_mark>1598<tex2html_verb_mark>? ¿Seguiría funcionando correctamente 
el analizador?
\begin<<14090>>tex2html_deferred<<14090>>\par\end<<14091>>tex2html_deferred<<14091>>
\subsection<<12046>>Ejercicio: Regexp para cadenas<<12046>>
   \index<<12047>>Ejercicio!Regexp para cadenas<<12047>>
  
En la rutina <tex2html_verb_mark>1599<tex2html_verb_mark>. ¿Es legal que una cadena correspondiente
al terminal <tex2html_verb_mark>1600<tex2html_verb_mark> contenga retornos de carro entre las comillas dobles?
\begin<<14092>>tex2html_deferred<<14092>>\par\end<<14093>>tex2html_deferred<<14093>>
\subsection<<12051>>Ejercicio: El <<12053>>\begin<<14094>>tex2html_deferred<<14094>>\tt\end<<14095>>tex2html_deferred<<14095>>or<<12053>> es vago<<12051>>
   \index<<12052>>Ejercicio!El <<12054>>\begin<<14096>>tex2html_deferred<<14096>>\tt\end<<14097>>tex2html_deferred<<14097>>or<<12054>> es vago<<12052>>
  
Explique el resultado de la siguiente sesión con el depurador:
\begin<<10645>>tex2html_preform<<10645>><tex2html_verbatim_mark>verbatim5512#\end<<10646>>tex2html_preform<<10646>>
Perl convierte la expresión regular en un NFA. A diferencia de lo 
que ocurre en otras herramientas, el NFA no es convertido en un DFA.
El NFA es entonces simulado. ¿Que está ocurriendo en la simulación? 
\begin<<14098>>tex2html_deferred<<14098>>\par\end<<14099>>tex2html_deferred<<14099>>
\subsection<<12055>>Práctica: Números de Línea, Errores, Cadenas y Comentarios<<12055>>
   \index<<12056>>Práctica!Números de Línea, Errores, Cadenas y Comentarios<<12056>>
  
\label<<10648>>practica:lineasyerrores<<10648>>
Extienda el analizador léxico para que:
\begin<<10649>>itemize<<10649>>
\item
Reescriba la expresión regular para las cadenas de manera que acepte comillas dobles 
escapadas <tex2html_verb_mark>1601<tex2html_verb_mark> en el interior de una cadena.
Por ejemplo en <tex2html_verb_mark>1602<tex2html_verb_mark>.
\begin<<14100>>tex2html_deferred<<14100>>\par\end<<14101>>tex2html_deferred<<14101>>
Analice esta solución ¿Es correcta?:
\begin<<10650>>tex2html_preform<<10650>><tex2html_verbatim_mark>verbatim5513#\end<<10651>>tex2html_preform<<10651>>
\begin<<14102>>tex2html_deferred<<14102>>\par\end<<14103>>tex2html_deferred<<14103>>
\item Consuma comentarios a la Perl: 
cualesquiera caracteres después de una almohadilla hasta el final 
de la línea (<tex2html_verb_mark>1603<tex2html_verb_mark>).
\item
Consuma comentarios no anidados a la \emph<<10652>>C<<10652>> (<tex2html_verb_mark>1604<tex2html_verb_mark>.).
Repase las secciones sobre expresiones regulares no ``greedy'' (p. ej. sección
\ref<<10653>>section:nogreedy<<10653>>) y la sección \ref<<10654>>section:x<<10654>>.
Recuerde que, en una expresión regular, 
la opción <tex2html_verb_mark>1605<tex2html_verb_mark> hace que el punto <tex2html_verb_mark>1606<tex2html_verb_mark> empareje con un 
retorno de carro <tex2html_verb_mark>1607<tex2html_verb_mark>.  Esto es, el punto ``casa'' con cualquier carácter.
\begin<<14104>>tex2html_deferred<<14104>>\par\end<<14105>>tex2html_deferred<<14105>>
Observe el siguiente ejemplo:
\begin<<10655>>tex2html_preform<<10655>><tex2html_verbatim_mark>verbatim5514#\end<<10656>>tex2html_preform<<10656>>
Cuando se ejecuta produce:
\begin<<10657>>tex2html_preform<<10657>><tex2html_verbatim_mark>verbatim5515#\end<<10658>>tex2html_preform<<10658>>
\begin<<14106>>tex2html_deferred<<14106>>\par\end<<14107>>tex2html_deferred<<14107>>
Explique la conducta.
\begin<<14108>>tex2html_deferred<<14108>>\par\end<<14109>>tex2html_deferred<<14109>>
\item
Números en punto flotante (como <tex2html_verb_mark>1608<tex2html_verb_mark> o <tex2html_verb_mark>1609<tex2html_verb_mark>).
El siguiente ejemplo intenta ayudarle en la búsqueda de la solución:
\begin<<10659>>tex2html_preform<<10659>><tex2html_verbatim_mark>verbatim5516#\end<<10660>>tex2html_preform<<10660>>
¿Sabría decir porque la respuesta al primer comando del depurador es
<tex2html_verb_mark>1610<tex2html_verb_mark>?.
\begin<<14110>>tex2html_deferred<<14110>>\par\end<<14111>>tex2html_deferred<<14111>>
\item
Tenga presente el posible conflicto entre los terminales <tex2html_verb_mark>1611<tex2html_verb_mark> y <tex2html_verb_mark>1612<tex2html_verb_mark>.
Si la entrada contiene <tex2html_verb_mark>1613<tex2html_verb_mark> el terminal debería ser <tex2html_verb_mark>1614<tex2html_verb_mark>
y no <tex2html_verb_mark>1615<tex2html_verb_mark>.
\begin<<14112>>tex2html_deferred<<14112>>\par\end<<14113>>tex2html_deferred<<14113>>
\item
En esta práctica si lo desea puede instalar y usar 
\htmladdnormallink<<10661>>el módulo<<10661>><<10662>>http://search.cpan.org/~abigail/Regexp-Common-2.120/lib/Regexp/Common.pm<<10662>>
 <<12057>>\begin<<14114>>tex2html_deferred<<14114>>\tt\end<<14115>>tex2html_deferred<<14115>>Regexp::Common<<12057>> 
\htmladdnormallink<<10664>>mantenido por<<10664>><<10665>>http://search.cpan.org/~abigail/<<10665>> 
\index<<12058>>Abigail<<12058>>\emph<<12059>>Abigail<<12059>> el cual provee expresiones regulares para las situaciones mas comunes: números, 
teléfonos, IP, códigos postales, listas, etc. Puede incluso usarlo para encontrar 
soluciones a las cuestiones planteadas en esta práctica:
\begin<<14116>>tex2html_deferred<<14116>>\par\end<<14117>>tex2html_deferred<<14117>>
\begin<<10667>>tex2html_preform<<10667>><tex2html_verbatim_mark>verbatim5517#\end<<10668>>tex2html_preform<<10668>>
Podemos hacer uso directo del hash <tex2html_verb_mark>1617<tex2html_verb_mark> directamente 
en las expresiones regulares aprovechando que estas interpolan
las variables en su interior:
 \begin<<10669>>tex2html_preform<<10669>><tex2html_verbatim_mark>verbatim5518#\end<<10670>>tex2html_preform<<10670>>
\item
Para mejorar la calidad de los mensajes de error extienda el par <tex2html_verb_mark>1618<tex2html_verb_mark>
devuelto por el <tex2html_verb_mark>1619<tex2html_verb_mark> a un par <tex2html_verb_mark>1620<tex2html_verb_mark> cuya
segunda componente es un array anónimo conteniendo 
el valor y el número de línea en el que aparece el terminal.
\begin<<14118>>tex2html_deferred<<14118>>\par\end<<14119>>tex2html_deferred<<14119>>
El siguiente extracto de un analizador léxico muestra como hacerlo:
\begin<<14120>>tex2html_deferred<<14120>>\par\end<<14121>>tex2html_deferred<<14121>>
\begin<<10671>>tex2html_preform<<10671>><tex2html_verbatim_mark>verbatim5519#\end<<10672>>tex2html_preform<<10672>>
El operador <tex2html_verb_mark>1621<tex2html_verb_mark> ha sido utilizado para contar los retornos de carro
(descrito en la sección 
\ref<<10673>>section:tr<<10673>>). El operador, ademas de reemplazar
devuelve el número de carácteres reeemplazados
o suprimidos: 
\begin<<10674>>tex2html_preform<<10674>><tex2html_verbatim_mark>verbatim5520#\end<<10675>>tex2html_preform<<10675>>
Para aprender soluciones alternativas consulte 
<tex2html_verb_mark>1622<tex2html_verb_mark>.
\item
Mejore sus mensajes de error ahora que lleva la cuenta de los números
de línea. En vez de usar las rutinas <tex2html_verb_mark>1623<tex2html_verb_mark> y <tex2html_verb_mark>1624<tex2html_verb_mark>
introducidas en la sección anterior escriba una sola rutina
que recibe el nivel de severidad del error (parámetro <tex2html_verb_mark>1625<tex2html_verb_mark>
en el siguiente ejemplo)
y ejecuta la acción apropiada. El código de <tex2html_verb_mark>1626<tex2html_verb_mark>
ilustra como hacerlo:
\begin<<10676>>tex2html_preform<<10676>><tex2html_verbatim_mark>verbatim5521#\end<<10677>>tex2html_preform<<10677>>
\begin<<14122>>tex2html_deferred<<14122>>\par\end<<14123>>tex2html_deferred<<14123>>
\end<<10678>>itemize<<10678>>
\begin<<14124>>tex2html_deferred<<14124>>\par\end<<14125>>tex2html_deferred<<14125>>
\section<<10679>>Pruebas para el Analizador Léxico<<10679>>
\label<<10680>>section:lexicomodular<<10680>>
Queremos separar/aislar las diferentes fases
del compilador en diferentes módulos. 
\begin<<14126>>tex2html_deferred<<14126>>\par\end<<14127>>tex2html_deferred<<14127>>
 
  \paragraph<<12060>>Módulo <<12064>>\begin<<14128>>tex2html_deferred<<14128>>\tt\end<<14129>>tex2html_deferred<<14129>>PL::Error<<12064>><<12060>>
  \begin<<12061>>tabular<<12061>><<12062>>c<<12062>>
  \end<<12063>>tabular<<12063>>

\begin<<14130>>tex2html_deferred<<14130>>\par\end<<14131>>tex2html_deferred<<14131>>
Para ello comenzamos creando un módulo 
conteniendo las rutinas de tratamiento de errores:
\begin<<10682>>tex2html_preform<<10682>><tex2html_verbatim_mark>verbatim5522#\end<<10683>>tex2html_preform<<10683>>
Observa como accedemos a la variable <tex2html_verb_mark>1627<tex2html_verb_mark> del paquete 
<tex2html_verb_mark>1628<tex2html_verb_mark>.
Para usar este módulo desde <tex2html_verb_mark>1629<tex2html_verb_mark>, tenemos que declarar su uso:
\begin<<10684>>tex2html_preform<<10684>><tex2html_verbatim_mark>verbatim5523#\end<<10685>>tex2html_preform<<10685>>
En la línea 8 hacemos <tex2html_verb_mark>1630<tex2html_verb_mark> y no <tex2html_verb_mark>1631<tex2html_verb_mark> ya que el módulo
lo hemos puesto en el directorio <tex2html_verb_mark>1632<tex2html_verb_mark>.
No olvides hacer <tex2html_verb_mark>1633<tex2html_verb_mark> para actualizar el fichero <tex2html_verb_mark>1634<tex2html_verb_mark>.
\begin<<14132>>tex2html_deferred<<14132>>\par\end<<14133>>tex2html_deferred<<14133>>
 
  \paragraph<<12065>>Módulo <<12069>>\begin<<14134>>tex2html_deferred<<14134>>\tt\end<<14135>>tex2html_deferred<<14135>>PL::Lexical::Analysis<<12069>><<12065>>
  \begin<<12066>>tabular<<12066>><<12067>>c<<12067>>
  \end<<12068>>tabular<<12068>>

\begin<<14136>>tex2html_deferred<<14136>>\par\end<<14137>>tex2html_deferred<<14137>>
Supongamos que además de modularizar el grupo de rutinas de tratamiento de errores
queremos hacer lo mismo con la parte del análisis léxico. Parece lógico que el 
fichero lo pongamos en un subdirectorio de <tex2html_verb_mark>1635<tex2html_verb_mark> por lo que cambiamos 
el nombre del módulo a <tex2html_verb_mark>1636<tex2html_verb_mark> quedando la jerarquía de ficheros
asi:
\begin<<10687>>tex2html_preform<<10687>><tex2html_verbatim_mark>verbatim5524#\end<<10688>>tex2html_preform<<10688>>
\begin<<14138>>tex2html_deferred<<14138>>\par\end<<14139>>tex2html_deferred<<14139>>
Por supuesto debemos modificar las correspondientes líneas en <tex2html_verb_mark>1637<tex2html_verb_mark>:
\begin<<14140>>tex2html_deferred<<14140>>\par\end<<14141>>tex2html_deferred<<14141>>
\begin<<10689>>tex2html_preform<<10689>><tex2html_verbatim_mark>verbatim5525#\end<<10690>>tex2html_preform<<10690>>
Observe que ahora <tex2html_verb_mark>1638<tex2html_verb_mark> devuelve 
ahora la
lista con los terminales y que <tex2html_verb_mark>1639<tex2html_verb_mark> se ha ocultado en 
<tex2html_verb_mark>1640<tex2html_verb_mark> como una variable léxica (línea 17).
En la línea 26 mostramos el contenido de la lista de terminales.
\begin<<14142>>tex2html_deferred<<14142>>\par\end<<14143>>tex2html_deferred<<14143>>
Sigue el listado del módulo conteniendo el analizador léxico.
Obsérve las líneas 6, 16 y 44.
\begin<<10691>>tex2html_preform<<10691>><tex2html_verbatim_mark>verbatim5526#\end<<10692>>tex2html_preform<<10692>>
\begin<<14144>>tex2html_deferred<<14144>>\par\end<<14145>>tex2html_deferred<<14145>>
 
  \paragraph<<12070>>El Programa Cliente<<12070>>
  \begin<<12071>>tabular<<12071>><<12072>>c<<12072>>
  \end<<12073>>tabular<<12073>>

\begin<<14146>>tex2html_deferred<<14146>>\par\end<<14147>>tex2html_deferred<<14147>>
Puesto que en el paquete <tex2html_verb_mark>1641<tex2html_verb_mark>
exportamos <tex2html_verb_mark>1642<tex2html_verb_mark> no es necesario llamar la rutina por el nombre 
completo desde <tex2html_verb_mark>1643<tex2html_verb_mark>. Podemos simplificar la línea en la
que se llama a <tex2html_verb_mark>1644<tex2html_verb_mark> que queda así:
\begin<<10694>>tex2html_preform<<10694>><tex2html_verbatim_mark>verbatim5527#\end<<10695>>tex2html_preform<<10695>>
De la misma forma, dado que <tex2html_verb_mark>1645<tex2html_verb_mark> exporta la función <tex2html_verb_mark>1646<tex2html_verb_mark>,
no es necesario llamarla por su nombre completo desde el guión <tex2html_verb_mark>1647<tex2html_verb_mark>. Reescribimos
la línea de llamada:
\begin<<10696>>tex2html_preform<<10696>><tex2html_verbatim_mark>verbatim5528#\end<<10697>>tex2html_preform<<10697>>
\begin<<14148>>tex2html_deferred<<14148>>\par\end<<14149>>tex2html_deferred<<14149>>
 
  \paragraph<<12074>>Actualización del MANIFEST<<12074>>
  \begin<<12075>>tabular<<12075>><<12076>>c<<12076>>
  \end<<12077>>tabular<<12077>>

\begin<<14150>>tex2html_deferred<<14150>>\par\end<<14151>>tex2html_deferred<<14151>>
Como siempre que se añaden o suprimen archivos es necesario actualizar 
<tex2html_verb_mark>1648<tex2html_verb_mark>:
\begin<<10699>>tex2html_preform<<10699>><tex2html_verbatim_mark>verbatim5529#\end<<10700>>tex2html_preform<<10700>>
\begin<<14152>>tex2html_deferred<<14152>>\par\end<<14153>>tex2html_deferred<<14153>>
\subsection<<10701>>Comprobando el Analizador Léxico<<10701>>
\label<<10702>>subsection:tests<<10702>>
Queremos comprobar si nuestro código funciona. ¿Cómo hacerlo?.
Lo adecuado es llevar una aproximación sistemática que permita validar
el código. 
\begin<<14154>>tex2html_deferred<<14154>>\par\end<<14155>>tex2html_deferred<<14155>>
 
  \paragraph<<12078>>Principios Básicos del Desarrollo de Pruebas<<12078>>
  \begin<<12079>>tabular<<12079>><<12080>>c<<12080>>
  \end<<12081>>tabular<<12081>>

\begin<<14156>>tex2html_deferred<<14156>>\par\end<<14157>>tex2html_deferred<<14157>>
En general, la filosofía aconsejable para realizar un banco
de pruebas de nuestro módulo es la que se articula en la metodología denominada
\index<<12082>>Extreme Programming<<12082>>\emph<<12083>>Extreme Programming<<12083>>, descrita en múltiples textos, en concreto en el 
libro de Scott \cite<<10705>>scott<<10705>>:
\begin<<10706>>itemize<<10706>>
\item
Todas las pruebas deben automatizarse
\item
Todos los fallos que se detecten deberían quedar traducidos en pruebas
\item
La aplicación debería pasar todas las pruebas después de cualquier modificación
importante y también al final del día
\item
El desarrollo de las pruebas debe preceder el desarrollo 
del código
\item
Todos los requerimientos deben ser expresados en forma de pruebas
\end<<10707>>itemize<<10707>>
\begin<<14158>>tex2html_deferred<<14158>>\par\end<<14159>>tex2html_deferred<<14159>>
 
  \paragraph<<12084>>La Jerarquía de Una Aplicación<<12084>>
  \begin<<12085>>tabular<<12085>><<12086>>c<<12086>>
  \end<<12087>>tabular<<12087>>

\begin<<14160>>tex2html_deferred<<14160>>\par\end<<14161>>tex2html_deferred<<14161>>
Pueden haber algunas diferencias entre el esquema que se describe aqui y su versión de Perl.
Lea detenidamente el capítulo 
\htmladdnormallink<<10709>>Test Now, test Forever<<10709>><<10710>>http://nereida.deioc.ull.es/~pl/cgi-bin/test_now_test_forever.pdf<<10710>>
 del libro de Scott \cite<<10711>>scott<<10711>> y el libro \cite<<10712>>perltesting<<10712>> de Ian Langworth y chromatic.
\begin<<14162>>tex2html_deferred<<14162>>\par\end<<14163>>tex2html_deferred<<14163>>
Si usas una versión de Perl posterior  la 5.8.0, entonces tu versión del programa
<tex2html_verb_mark>1649<tex2html_verb_mark> 
creará un subdirectorio <tex2html_verb_mark>1650<tex2html_verb_mark> en el que guardar los ficheros de prueba
Estos ficheros deberán 
ser programas Perl de prueba con el tipo <tex2html_verb_mark>1651<tex2html_verb_mark>. La utilidad
<tex2html_verb_mark>1652<tex2html_verb_mark> incluso deja un programa de prueba <tex2html_verb_mark>1653<tex2html_verb_mark> en ese directorio.
La jerarquía de ficheros con la que trabajamos actualmente es:
\begin<<10713>>tex2html_preform<<10713>><tex2html_verbatim_mark>verbatim5530#\end<<10714>>tex2html_preform<<10714>>
\begin<<14164>>tex2html_deferred<<14164>>\par\end<<14165>>tex2html_deferred<<14165>>
 
  \paragraph<<12088>>Un Ejemplo de Programa de Prueba<<12088>>
  \begin<<12089>>tabular<<12089>><<12090>>c<<12090>>
  \end<<12091>>tabular<<12091>>

\begin<<14166>>tex2html_deferred<<14166>>\par\end<<14167>>tex2html_deferred<<14167>>
Estos son los contenidos de nuestro primer test:
\begin<<10716>>tex2html_preform<<10716>><tex2html_verbatim_mark>verbatim5531#\end<<10717>>tex2html_preform<<10717>>
\begin<<14168>>tex2html_deferred<<14168>>\par\end<<14169>>tex2html_deferred<<14169>>
El nombre del fichero de prueba debe cumplir que:
\begin<<10718>>itemize<<10718>>
\item
Sea significativo del tipo de prueba
\item
Que los prefijos de los nombres <tex2html_verb_mark>1654<tex2html_verb_mark>, <tex2html_verb_mark>1655<tex2html_verb_mark>, \ldots nos garanticen
el orden de ejecución
\end<<10719>>itemize<<10719>>
\begin<<14170>>tex2html_deferred<<14170>>\par\end<<14171>>tex2html_deferred<<14171>>
 
  \paragraph<<12092>>Ejecución de Las Pruebas<<12092>>
  \begin<<12093>>tabular<<12093>><<12094>>c<<12094>>
  \end<<12095>>tabular<<12095>>

\begin<<14172>>tex2html_deferred<<14172>>\par\end<<14173>>tex2html_deferred<<14173>>
Ahora ejecutamos las pruebas:
\begin<<10721>>tex2html_preform<<10721>><tex2html_verbatim_mark>verbatim5532#\end<<10722>>tex2html_preform<<10722>>
O bien usamos <tex2html_verb_mark>1656<tex2html_verb_mark>:
\begin<<10723>>tex2html_preform<<10723>><tex2html_verbatim_mark>verbatim5533#\end<<10724>>tex2html_preform<<10724>>
También podemos añadir la opción <tex2html_verb_mark>1657<tex2html_verb_mark> a <tex2html_verb_mark>1658<tex2html_verb_mark>:
\begin<<10725>>tex2html_preform<<10725>><tex2html_verbatim_mark>verbatim5534#\end<<10726>>tex2html_preform<<10726>>
\begin<<14174>>tex2html_deferred<<14174>>\par\end<<14175>>tex2html_deferred<<14175>>
Repáse 
\externalref<<12096>>subsection:laspruebas<<12096>> \cite<<12097>>CasianoIntroAPerl<<12097>> para un mejor conocimiento
de la metodología de pruebas en Perl.
\begin<<14176>>tex2html_deferred<<14176>>\par\end<<14177>>tex2html_deferred<<14177>>
\subsubsection<<10728>>Versiones anteriores a la 5.8<<10728>>
En esta sección he usado la versión 5.6.1 de Perl.  
Creeemos un subdirectorio <tex2html_verb_mark>1659<tex2html_verb_mark> y en él un programa de prueba
<tex2html_verb_mark>1660<tex2html_verb_mark>:
\begin<<10729>>tex2html_preform<<10729>><tex2html_verbatim_mark>verbatim5535#\end<<10730>>tex2html_preform<<10730>>
Observa como la opción <tex2html_verb_mark>1661<tex2html_verb_mark> hace que se busque por las librerías en el directorio
padre del actual.
Cuando ejecutamos <tex2html_verb_mark>1662<tex2html_verb_mark> obtenemos la lista de terminales:
\begin<<10731>>tex2html_preform<<10731>><tex2html_verbatim_mark>verbatim5536#\end<<10732>>tex2html_preform<<10732>>
La última línea ha sido partida por razones de legibilidad, pero consituye 
una sóla línea.
Editemos el fichero <tex2html_verb_mark>1663<tex2html_verb_mark> en el directorio del módulo.
Sus contenidos son como sigue:
\begin<<10733>>tex2html_preform<<10733>><tex2html_verbatim_mark>verbatim5537#\end<<10734>>tex2html_preform<<10734>>
En la línea 9 se establece el número de pruebas a realizar. 
La primera prueba aparece en la línea 11. Puede parecer que no es una prueba,
¡pero lo es!. Si se ha alcanzado la línea 11 es que se pudo cargar
el módulo <tex2html_verb_mark>1664<tex2html_verb_mark> y eso ¡tiene algún mérito!.
\begin<<14178>>tex2html_deferred<<14178>>\par\end<<14179>>tex2html_deferred<<14179>>
Seguiremos el consejo de la línea 15 y escribiremos nuestra segunda
prueba al final del fichero <tex2html_verb_mark>1665<tex2html_verb_mark>:
\begin<<10735>>tex2html_preform<<10735>><tex2html_verbatim_mark>verbatim5538#\end<<10736>>tex2html_preform<<10736>>
La línea 22 ha sido partida por razones de legibilidad, pero constituye 
una sóla línea.
Ahora podemos ejecutar <tex2html_verb_mark>1666<tex2html_verb_mark> y comprobar que las dos
pruebas funcionan:
\begin<<10737>>tex2html_preform<<10737>><tex2html_verbatim_mark>verbatim5539#\end<<10738>>tex2html_preform<<10738>>
¿Recordaste cambiar la línea 9 de <tex2html_verb_mark>1667<tex2html_verb_mark>?
¿Añadiste los nuevos ficheros a la lista en <tex2html_verb_mark>1668<tex2html_verb_mark>?
\begin<<14180>>tex2html_deferred<<14180>>\par\end<<14181>>tex2html_deferred<<14181>>
\subsection<<12098>>Práctica: Pruebas en el Análisis Léxico<<12098>>
   \index<<12099>>Práctica!Pruebas en el Análisis Léxico<<12099>>
  
\label<<10740>>practica:pruebaslexico<<10740>>
Extienda su compilador para modularizar el analizador léxico
tal y como se explicó en la sección
\ref<<10741>>section:lexicomodular<<10741>>.
\begin<<10742>>enumerate<<10742>>
\item
Lea  los siguientes documentos
\begin<<10743>>itemize<<10743>>
\item
 <<12100>>\begin<<14182>>tex2html_deferred<<14182>>\tt\end<<14183>>tex2html_deferred<<14183>>Test::Tutorial<<12100>>  
(\htmladdnormallink<<10745>>Test::Tutorial - A tutorial about writing really basic tests<<10745>>
<<10746>>http://search.cpan.org/~nwclark/perl-5.8.8/lib/Test/Tutorial.pod<<10746>>)
por Michael Schwern. 
\begin<<14184>>tex2html_deferred<<14184>>\par\end<<14185>>tex2html_deferred<<14185>>
\item
\htmladdnormallink<<10747>>Test Now, test Forever<<10747>>
<<10748>>http://nereida.deioc.ull.es/~pl/cgi-bin/test_now_test_forever.pdf<<10748>>
'' del libro de Scott \cite<<10749>>scott<<10749>>.
\begin<<14186>>tex2html_deferred<<14186>>\par\end<<14187>>tex2html_deferred<<14187>>
\item
\htmladdnormallink<<10750>>Perl Testing Reference Card<<10750>>
<<10751>>perl_test_refcard.pdf<<10751>>
por Ian Langworth. 
\begin<<14188>>tex2html_deferred<<14188>>\par\end<<14189>>tex2html_deferred<<14189>>
\item
\htmladdnormallink<<10752>>Chapter 4: Distributing Your Tests (and Code)<<10752>>
<<10753>>http://www.oreilly.com/catalog/perltestingadn/chapter/ch04.pdf<<10753>>
del libro 
\htmladdnormallink<<10754>>Perl Testing: A Developer's Notebook<<10754>>
<<10755>>http://www.oreilly.com/catalog/perltestingadn/index.html<<10755>>
\begin<<14190>>tex2html_deferred<<14190>>\par\end<<14191>>tex2html_deferred<<14191>>
\end<<10756>>itemize<<10756>>
\begin<<14192>>tex2html_deferred<<14192>>\par\end<<14193>>tex2html_deferred<<14193>>
\item
Incluya la estrategia de pruebas de no regresión explicada en las secciones previas.
Dado que ahora la estructura del terminal es una estructura de datos mas compleja
<tex2html_verb_mark>1669<tex2html_verb_mark> no podrá usar <tex2html_verb_mark>1670<tex2html_verb_mark>, ya que este último sólo 
comprueba la igualdad entre escalares.
Use <tex2html_verb_mark>1671<tex2html_verb_mark> para comprobar que la estructura de datos devuelta por el
analizador léxico es igual a la esperada. Sigue un ejemplo:
\begin<<14194>>tex2html_deferred<<14194>>\par\end<<14195>>tex2html_deferred<<14195>>
\begin<<10757>>tex2html_preform<<10757>><tex2html_verbatim_mark>verbatim5540#\end<<10758>>tex2html_preform<<10758>>
\begin<<14196>>tex2html_deferred<<14196>>\par\end<<14197>>tex2html_deferred<<14197>>
\item
Extienda los tests con una prueba en la que la entrada contenga un carácter ilegal.
Obsérve que, tal y como esta escrito la rutina <tex2html_verb_mark>1672<tex2html_verb_mark>,
si la entrada tiene un carácter ilegal se ejecutarán las líneas 
\begin<<10759>>tex2html_preform<<10759>><tex2html_verbatim_mark>verbatim5541#\end<<10760>>tex2html_preform<<10760>>
lo que causa la parada del programa 
de prueba,
al ejecutarse <tex2html_verb_mark>1673<tex2html_verb_mark> el cuál llama a <tex2html_verb_mark>1674<tex2html_verb_mark>.
\begin<<10761>>tex2html_preform<<10761>><tex2html_verbatim_mark>verbatim5542#\end<<10762>>tex2html_preform<<10762>>
El objetivo es lograr que el programa de pruebas continúe ejecutando las subsiguientes 
pruebas.
\begin<<14198>>tex2html_deferred<<14198>>\par\end<<14199>>tex2html_deferred<<14199>>
Para ello puede usar <tex2html_verb_mark>1675<tex2html_verb_mark> 
o bien <tex2html_verb_mark>1676<tex2html_verb_mark> y la variable especial <tex2html_verb_mark>1677<tex2html_verb_mark> para controlar que el
programa <tex2html_verb_mark>1678<tex2html_verb_mark> no termine prematuramente.
Repase la sección \externalref<<12101>>subsection:controldeerrores<<12101>> \cite<<12102>>CasianoIntroAPerl<<12102>>,
el capítulo 
\externalref<<10764>>section:knappruebas<<10764>> y mas específicamente la sección
\externalref<<10765>>subsection:laspruebas<<10765>> del capítulo sobre construcción de módulos.
\item
Pruebe a dar como entrada un fichero vacío
\item
Pruebe a dar como entrada un fichero que no existe
\item
Pruebe a dar como entrada un fichero binario
\item
Si tiene sentido en su caso, llame a las subrutinas con mas argumentos (y también con menos) de los que esperan.
\item
Si tiene sentido en su caso, llame a las subrutinas con argumentos cuyo tipo no es el que se espera.
\begin<<14200>>tex2html_deferred<<14200>>\par\end<<14201>>tex2html_deferred<<14201>>
No use prototipos para lograrlo. No es una buena idea. Los prototipos en Perl
a menudo producen un preprocesado del parámetro. Escriba código que controle que 
la naturaleza del parámetro es la que se espera. Por ejemplo:
\begin<<14202>>tex2html_deferred<<14202>>\par\end<<14203>>tex2html_deferred<<14203>>
\begin<<10766>>tex2html_preform<<10766>><tex2html_verbatim_mark>verbatim5543#\end<<10767>>tex2html_preform<<10767>>
\item
Cambie los argumentos de orden (si es que se aplica a su código)
\item
Comentarios: pruebe con <tex2html_verb_mark>1679<tex2html_verb_mark>. Tambien con
comentarios anidados (debería producirse un error)
\item
Flotantes: compruebe su expresión regular con 0.0 0e0 .0 0 1.e-5 1.0e2 -2.0  . (un punto sólo)
\item
Cadenas. Pruebe con las cadenas
\begin<<10768>>tex2html_preform<<10768>><tex2html_verbatim_mark>verbatim5544#\end<<10769>>tex2html_preform<<10769>>
Pruebe también con una cadena con varias líneas y
otra que contenga un carácter de control en su interior.
\item
Convierta los fallos (bugs) que encontró durante el desarrollo en pruebas
\item
Compruebe la documentación usando el módulo
\htmladdnormallink<<10770>>Test::Pod<<10770>>
<<10771>>http://search.cpan.org/~petdance/Test-Pod-1.26/Pod.pm<<10771>>
de Andy Lester. Instálelo si es necesario.
\begin<<14204>>tex2html_deferred<<14204>>\par\end<<14205>>tex2html_deferred<<14205>>
\item
Utilice el módulo 
\htmladdnormallink<<10772>>Test::Warn<<10772>>
<<10773>>http://search.cpan.org/~bigj/Test-Warn-0.08/Warn.pm<<10773>>
para comprobar que los mensajes de warning (uso de <tex2html_verb_mark>1680<tex2html_verb_mark> and <tex2html_verb_mark>1681<tex2html_verb_mark>)
se muestran correctamente.
\begin<<14206>>tex2html_deferred<<14206>>\par\end<<14207>>tex2html_deferred<<14207>>
\item
Una prueba  <<12103>>\begin<<14208>>tex2html_deferred<<14208>>\tt\end<<14209>>tex2html_deferred<<14209>>SKIP<<12103>>  declara un bloque de pruebas
que - bajo ciertas circustancias - puede saltarse.
Puede ser que sepamos que ciertas pruebas 
sólo funcionan en ciertos sistemas operativos 
o que la prueba requiera que ciertos paquetes están instalados 
o que la máquina
disponga de ciertos recursos (por ejemplo, acceso a internet).
En tal caso queremos que los tests se consideren si se dan las circustancias
favorables pero que en otro caso se descarten sin protestas.
Consulte la documentación de los módulos <tex2html_verb_mark>1682<tex2html_verb_mark> y <tex2html_verb_mark>1683<tex2html_verb_mark>
sobre pruebas tipo <<10775>>\begin<<14210>>tex2html_deferred<<14210>>\tt\end<<14211>>tex2html_deferred<<14211>>SKIP<<10775>>. El ejemplo que sigue
declara un bloque de pruebas que pueden saltarse.
La llamada a <tex2html_verb_mark>1684<tex2html_verb_mark> indica cuantos tests hay,
bajo que condición saltarselos.
\begin<<10776>>tex2html_preform<<10776>><tex2html_verbatim_mark>verbatim5545#\end<<10777>>tex2html_preform<<10777>>
Si el usuario no dispone del módulo <tex2html_verb_mark>1685<tex2html_verb_mark> 
el bloque no será ejecutado.
El módulo <tex2html_verb_mark>1686<tex2html_verb_mark> producirá <tex2html_verb_mark>1687<tex2html_verb_mark>s que serán
interpretados por  <tex2html_verb_mark>1688<tex2html_verb_mark> como tests \emph<<10778>>skipped<<10778>>
pero <tex2html_verb_mark>1689<tex2html_verb_mark>.
\begin<<14212>>tex2html_deferred<<14212>>\par\end<<14213>>tex2html_deferred<<14213>>
Otra razón para usar una prueba <tex2html_verb_mark>1690<tex2html_verb_mark> es disponer de la posibilidad
de saltarse ciertos grupos de pruebas. Por ejemplo, aquellas que llevan
demasiado tiempo de ejecución y no son tan significativas que no se 
pueda prescindir de ellas cuando se introducen pequeños cambios en el código.
El siguiente código muestra como usando una variable de entorno <tex2html_verb_mark>1691<tex2html_verb_mark>
podemos controlar que pruebas se ejecutan. 
\begin<<10779>>tex2html_preform<<10779>><tex2html_verbatim_mark>verbatim5546#\end<<10780>>tex2html_preform<<10780>>
Introduzca una prueba <tex2html_verb_mark>1692<tex2html_verb_mark> similar a la anterior y otra que 
si el módulo
<tex2html_verb_mark>1693<tex2html_verb_mark> esta instalado comprueba
que la documentación esta bien escrita.
Estudie la documentación del módulo <tex2html_verb_mark>1694<tex2html_verb_mark>.
\begin<<14214>>tex2html_deferred<<14214>>\par\end<<14215>>tex2html_deferred<<14215>>
\item
Introduzca pruebas 
<tex2html_verb_mark>1695<tex2html_verb_mark> (que, por tanto, deben fallar) para las funciones que están por escribir
(<tex2html_verb_mark>1696<tex2html_verb_mark>, <tex2html_verb_mark>1697<tex2html_verb_mark>, <tex2html_verb_mark>1698<tex2html_verb_mark>, <tex2html_verb_mark>1699<tex2html_verb_mark>).
Repáse \externalref<<12104>>subsection:laspruebas<<12104>> \cite<<12105>>CasianoIntroAPerl<<12105>>. Sigue un ejemplo:
\begin<<14216>>tex2html_deferred<<14216>>\par\end<<14217>>tex2html_deferred<<14217>>
\begin<<10782>>tex2html_preform<<10782>><tex2html_verbatim_mark>verbatim5547#\end<<10783>>tex2html_preform<<10783>>
\begin<<14218>>tex2html_deferred<<14218>>\par\end<<14219>>tex2html_deferred<<14219>>
\item
Cuando compruebe el funcionamiento de su módulo 
\emph<<10784>>nunca descarte que el error pueda estar en
el código de la prueba<<10784>>. En palabras de Schwern
\begin<<14220>>tex2html_deferred<<14220>>\par\end<<14221>>tex2html_deferred<<14221>>
\begin<<10785>>verse<<10785>>
\begin<<10786>>quote<<10786>>
Code has bugs. Tests are code. Ergo, tests have bugs.\\ 
\begin<<14222>>tex2html_deferred<<14222>>\par\end<<14223>>tex2html_deferred<<14223>>
\flushright<<10787>>Michael Schwern<<10787>>
\end<<10788>>quote<<10788>>
\end<<10789>>verse<<10789>>
\begin<<14224>>tex2html_deferred<<14224>>\par\end<<14225>>tex2html_deferred<<14225>>
\item
Instale el módulo 
\htmladdnormallink<<10790>>Devel::Cover<<10790>><<10791>>http://search.cpan.org/~pjcj/Devel-Cover-0.59/lib/Devel/Cover.pm<<10791>>.
El módulo   <<12106>>\begin<<14226>>tex2html_deferred<<14226>>\tt\end<<14227>>tex2html_deferred<<14227>>Devel::Cover<<12106>>  ha sido
escrito por
\htmladdnormallink<<10793>>Paul Johnson<<10793>><<10794>>http://search.cpan.org/~pjcj/<<10794>> y proporciona 
estadísticas del cubrimiento alcanzado por una ejecución.
Para usarlo siga estos pasos:
\begin<<10795>>tex2html_preform<<10795>><tex2html_verbatim_mark>verbatim5548#\end<<10796>>tex2html_preform<<10796>>
La ejecución toma ahora mucho mas tiempo: ¡181 segundos frente a los 5 que toma la ejecución sin  <<12107>>\begin<<14228>>tex2html_deferred<<14228>>\tt\end<<14229>>tex2html_deferred<<14229>>cover<<12107>> !.
Al ejecutar <tex2html_verb_mark>1700<tex2html_verb_mark> de nuevo obtenemos una tabla con las estadísticas
de cubrimiento:
\begin<<14230>>tex2html_deferred<<14230>>\par\end<<14231>>tex2html_deferred<<14231>>
\begin<<10798>>tex2html_preform<<10798>><tex2html_verbatim_mark>verbatim5549#\end<<10799>>tex2html_preform<<10799>>
El 
\htmladdnormallink<<10800>>HTML generado<<10800>><<10801>>cover_db/coverage.html<<10801>>
nos permite tener una visión mas detallada de los niveles
de cubrimiento.
\begin<<14232>>tex2html_deferred<<14232>>\par\end<<14233>>tex2html_deferred<<14233>>
Para mejorar el cubrimiento de tu código comienza por el informe de
cubrimiento de subrutinas. Cualquier subrutina marcada como
no probada es un candidato a contener errores o incluso a ser <<10802>>\begin<<14234>>tex2html_deferred<<14234>>\it\end<<14235>>tex2html_deferred<<14235>>código
muerto<<10802>>.
\begin<<14236>>tex2html_deferred<<14236>>\par\end<<14237>>tex2html_deferred<<14237>>
Para poder hacer el cubrimiento del código usando Devel::Cover, si se usa una <tex2html_verb_mark>1701<tex2html_verb_mark> 
o <tex2html_verb_mark>1702<tex2html_verb_mark> se debe escribir:
\begin<<14238>>tex2html_deferred<<14238>>\par\end<<14239>>tex2html_deferred<<14239>>
\begin<<10803>>tex2html_preform<<10803>><tex2html_verbatim_mark>verbatim5550#\end<<10804>>tex2html_preform<<10804>>
Aún mas robusto - más independiente de la shell que usemos - es pasar las opciones en
<tex2html_verb_mark>1703<tex2html_verb_mark> como parámetro a <tex2html_verb_mark>1704<tex2html_verb_mark>:
\begin<<10805>>tex2html_preform<<10805>><tex2html_verbatim_mark>verbatim5551#\end<<10806>>tex2html_preform<<10806>>
\begin<<14240>>tex2html_deferred<<14240>>\par\end<<14241>>tex2html_deferred<<14241>>
Añade el informe de cubrimiento al <tex2html_verb_mark>1705<tex2html_verb_mark> para que se incluya en la distribución 
que subas. Si lo consideras conveniente añade un directorio informes en los que vayan los informes asociados
a esta práctica. Incluye en el <tex2html_verb_mark>1706<tex2html_verb_mark> o en la documentación una breve descripción
de donde están los informes.
\begin<<14242>>tex2html_deferred<<14242>>\par\end<<14243>>tex2html_deferred<<14243>>
\item
Se conoce con el nombre de \index<<12108>>perfilado<<12108>>\emph<<12109>>perfilado<<12109>> o \index<<12110>>profiling<<12110>>\emph<<12111>>profiling<<12111>> de
un programa al estudio de su rendimiento mediante un programa
(conocido como \index<<12112>>profiler<<12112>>\emph<<12113>>profiler<<12113>>) que monitoriza la ejecución del mismo
mediante una técnica que interrumpe cada cierto tiempo el programa
para comprobar en que punto de la ejecución se encuentra.
Las estadísticas acumuladas se vuelcan al final de la ejecución 
en un fichero que puede ser visualizado mediante la aplicación apropiada.
\begin<<14244>>tex2html_deferred<<14244>>\par\end<<14245>>tex2html_deferred<<14245>>
En Perl hay dos módulos que permiten realizar profiling. El mas antiguo es
 <<12114>>\begin<<14246>>tex2html_deferred<<14246>>\tt\end<<14247>>tex2html_deferred<<14247>>Devel::DProf<<12114>> . La aplicación para visualizar los resultados
se llama  <<12115>>\begin<<14248>>tex2html_deferred<<14248>>\tt\end<<14249>>tex2html_deferred<<14249>>dprofpp<<12115>> .
Sigue un ejemplo de uso:
\begin<<14250>>tex2html_deferred<<14250>>\par\end<<14251>>tex2html_deferred<<14251>>
\begin<<10812>>tex2html_preform<<10812>><tex2html_verbatim_mark>verbatim5552#\end<<10813>>tex2html_preform<<10813>>         
\begin<<14252>>tex2html_deferred<<14252>>\par\end<<14253>>tex2html_deferred<<14253>>
Tambien es posible usar el módulo  <<12116>>\begin<<14254>>tex2html_deferred<<14254>>\tt\end<<14255>>tex2html_deferred<<14255>>-MDevel::Profiler<<12116>> :
\begin<<10815>>tex2html_preform<<10815>><tex2html_verbatim_mark>verbatim5553#\end<<10816>>tex2html_preform<<10816>>
\begin<<14256>>tex2html_deferred<<14256>>\par\end<<14257>>tex2html_deferred<<14257>>
Presente un informe del perfil de su compilador. 
Añade el informe del perfil al <tex2html_verb_mark>1707<tex2html_verb_mark> para que se incluya en la distribución 
que subas.
\begin<<14258>>tex2html_deferred<<14258>>\par\end<<14259>>tex2html_deferred<<14259>>
\item
El módulo  <<12117>>\begin<<14260>>tex2html_deferred<<14260>>\tt\end<<14261>>tex2html_deferred<<14261>>Devel::Size<<12117>>  proporciona la posibilidad de
conocer cuanto ocupa una estructura de datos. Considere el siguiente
ejemplo:
\begin<<10818>>tex2html_preform<<10818>><tex2html_verbatim_mark>verbatim5554#\end<<10819>>tex2html_preform<<10819>>
Al ejecutarlo se obtiene esta salida:
\begin<<14262>>tex2html_deferred<<14262>>\par\end<<14263>>tex2html_deferred<<14263>>
\begin<<10820>>tex2html_preform<<10820>><tex2html_verbatim_mark>verbatim5555#\end<<10821>>tex2html_preform<<10821>>
Elabore un informe con el consumo de memoria de las variables mas importantes
de su programa.
Añadelo el informe al <tex2html_verb_mark>1708<tex2html_verb_mark> para que se incluya en la distribución 
que subas. Explica en el <tex2html_verb_mark>1709<tex2html_verb_mark> o en la documentación el significado 
de los ficheros de informe.
\begin<<14264>>tex2html_deferred<<14264>>\par\end<<14265>>tex2html_deferred<<14265>>
\end<<10822>>enumerate<<10822>>
\begin<<14266>>tex2html_deferred<<14266>>\par\end<<14267>>tex2html_deferred<<14267>>
\subsection<<12118>>Repaso: Pruebas en el Análisis Léxico<<12118>>
   \index<<12119>>Repaso!Pruebas en el Análisis Léxico<<12119>>
  
\begin<<10824>>enumerate<<10824>>
\item
¿Cuál es la diferencia entre los operadores <tex2html_verb_mark>1710<tex2html_verb_mark> y <tex2html_verb_mark>1711<tex2html_verb_mark>?
\item
¿Cuáles son los parámetros de la función <tex2html_verb_mark>1712<tex2html_verb_mark>?
\item
¿Cuáles son los parámetros de la función <tex2html_verb_mark>1713<tex2html_verb_mark>?
\item
¿Porqué es conveniente nombrar las pruebas con un nombre que empiece por
un número?
\item
¿Como puedo ejecutar los tests en modo \emph<<10825>>verbose<<10825>>?
\item
¿Como puedo probar un código que produce la detención del programa?
\item
¿Que contiene la variable <tex2html_verb_mark>1714<tex2html_verb_mark>?
\item
¿Que hace la función <tex2html_verb_mark>1715<tex2html_verb_mark>?
\item
¿Que contiene la variable <tex2html_verb_mark>1716<tex2html_verb_mark>? ¿Y <tex2html_verb_mark>1717<tex2html_verb_mark>?
(Consulte \ref<<10826>>section:variablesmagicasereg<<10826>>)
\item
¿Porqué la función <tex2html_verb_mark>1718<tex2html_verb_mark> es llamada dentro de un <tex2html_verb_mark>1719<tex2html_verb_mark>?
\item
¿Que es una prueba <tex2html_verb_mark>1720<tex2html_verb_mark>?
\item
¿Que es una prueba <tex2html_verb_mark>1721<tex2html_verb_mark>?
\item
¿Que hace la función <tex2html_verb_mark>1722<tex2html_verb_mark>?
¿A que módulo pertenece?
\item
¿Que hace el operador <tex2html_verb_mark>1723<tex2html_verb_mark>?
\item
¿Qué devuelve el operador <tex2html_verb_mark>1724<tex2html_verb_mark>?
\item
¿Que hace la opción <tex2html_verb_mark>1725<tex2html_verb_mark> de <tex2html_verb_mark>1726<tex2html_verb_mark>?
(consulte \ref<<10827>>section:tr<<10827>>)
\item
Explique la conducta de la siguiente sesión con el depurador:
\begin<<10828>>tex2html_preform<<10828>><tex2html_verbatim_mark>verbatim5556#\end<<10829>>tex2html_preform<<10829>>
\item
Supuesto que tuvieramos el operador menos en nuestro lenguaje y
dada la entrada <tex2html_verb_mark>1727<tex2html_verb_mark>, ¿Que devolverá su analizador léxico? 
¿Devuelve <tex2html_verb_mark>1728<tex2html_verb_mark> o bien <tex2html_verb_mark>1729<tex2html_verb_mark>?
(hemos simplificado el flujo eliminando los atributos).
\item
¿Que hace la llamada
<tex2html_verb_mark>1730<tex2html_verb_mark>?
\item
¿Que hace la función <tex2html_verb_mark>1731<tex2html_verb_mark>? ¿Qué argumentos tiene?
\item
Explique las causas de la siguiente conducta del depurador:
\begin<<10830>>tex2html_preform<<10830>><tex2html_verbatim_mark>verbatim5557#\end<<10831>>tex2html_preform<<10831>>
\item
¿Que diferencia hay entre <tex2html_verb_mark>1732<tex2html_verb_mark> e <tex2html_verb_mark>1733<tex2html_verb_mark>?
\begin<<14268>>tex2html_deferred<<14268>>\par\end<<14269>>tex2html_deferred<<14269>>
\item
¿Que argumentos recibe la función <tex2html_verb_mark>1734<tex2html_verb_mark>?
¿En que módulo se encuentra?
\begin<<14270>>tex2html_deferred<<14270>>\par\end<<14271>>tex2html_deferred<<14271>>
\item
¿Que hace el comando
<tex2html_verb_mark>1735<tex2html_verb_mark>?
\begin<<14272>>tex2html_deferred<<14272>>\par\end<<14273>>tex2html_deferred<<14273>>
\item
¿Cómo se interpreta el cubrimiento de las sentencias? ¿y de las subrutinas?
¿y de las ramas? ¿y las condiciones lógicas?
¿En cual de estos factores es realista y deseable lograr un cubrimiento
del \%100 con nuestras pruebas?
\begin<<14274>>tex2html_deferred<<14274>>\par\end<<14275>>tex2html_deferred<<14275>>
\item
¿Que pasa si después de haber desarrollado un número de pruebas
cambio la interfaz de mi API?
\begin<<14276>>tex2html_deferred<<14276>>\par\end<<14277>>tex2html_deferred<<14277>>
\item
¿Que hace el comando <tex2html_verb_mark>1736<tex2html_verb_mark>? ¿Para que sirve?
\end<<10832>>enumerate<<10832>>
\begin<<14278>>tex2html_deferred<<14278>>\par\end<<14279>>tex2html_deferred<<14279>>
\section<<10833>>Conceptos Básicos para el Análisis Sintáctico<<10833>>
\label<<10834>>section:conceptos<<10834>>
Suponemos que el lector de esta sección ha realizado con éxito
un curso en teoría de autómatas y lenguajes formales.
Las siguientes definiciones repasan los conceptos mas importantes.
\begin<<14280>>tex2html_deferred<<14280>>\par\end<<14281>>tex2html_deferred<<14281>>
\begin<<11776>>theorem_type<<11776>>[definition][definition][section][][][]
Dado un conjunto \begin<<12268>>tex2html_wrap_inline<<12268>>$A$\end<<12269>>tex2html_wrap_inline<<12269>>, se define \begin<<12270>>tex2html_wrap_inline<<12270>>$A^*$\end<<12271>>tex2html_wrap_inline<<12271>>\space el cierre de Kleene de \begin<<12272>>tex2html_wrap_inline<<12272>>$A$\end<<12273>>tex2html_wrap_inline<<12273>>\space como:
\begin<<10836>>math<<10836>>
A^* = \cup_<<10837>>n=0<<10837>>^<<10838>>\infty<<10838>> A^n
\end<<10839>>math<<10839>>
\begin<<14282>>tex2html_deferred<<14282>>\par\end<<14283>>tex2html_deferred<<14283>>
Se admite que \begin<<12274>>tex2html_wrap_inline<<12274>>$A^0 = \{ \epsilon \}$\end<<12275>>tex2html_wrap_inline<<12275>>, donde \begin<<12276>>tex2html_wrap_inline<<12276>>$\epsilon$\end<<12277>>tex2html_wrap_inline<<12277>>\space denota la palabra vacía, esto es
la palabra que tiene longitud cero, formada por cero símbolos del conjunto base \begin<<12278>>tex2html_wrap_inline<<12278>>$A$\end<<12279>>tex2html_wrap_inline<<12279>>.\end<<11777>>theorem_type<<11777>>
\begin<<14284>>tex2html_deferred<<14284>>\par\end<<14285>>tex2html_deferred<<14285>>
\begin<<11778>>theorem_type<<11778>>[definition][definition][section][][][]
Una gramática \begin<<12280>>tex2html_wrap_inline<<12280>>$G$\end<<12281>>tex2html_wrap_inline<<12281>>\space es una cuaterna \begin<<12282>>tex2html_wrap_inline<<12282>>$G =(\Sigma,V,P,S)$\end<<12283>>tex2html_wrap_inline<<12283>>. 
\begin<<12284>>tex2html_wrap_inline<<12284>>$\Sigma$\end<<12285>>tex2html_wrap_inline<<12285>>\space es el conjunto de terminales. \begin<<12286>>tex2html_wrap_inline<<12286>>$V$\end<<12287>>tex2html_wrap_inline<<12287>>\space es un conjunto (disjunto de \begin<<12288>>tex2html_wrap_inline<<12288>>$\Sigma$\end<<12289>>tex2html_wrap_inline<<12289>>)
que se denomina conjunto de \emph<<10842>>variables sintácticas<<10842>> o \emph<<10843>>categorías gramáticales<<10843>>,
P es un conjunto de pares de \begin<<12290>>tex2html_wrap_inline<<12290>>$V \times (V \cup \Sigma )^*$\end<<12291>>tex2html_wrap_inline<<12291>>. En vez de escribir
un par usando la notación \begin<<12292>>tex2html_wrap_inline<<12292>>$(A, \alpha) \in P$\end<<12293>>tex2html_wrap_inline<<12293>>\space se escribe \begin<<12294>>tex2html_wrap_inline<<12294>>$A \rightarrow \alpha$\end<<12295>>tex2html_wrap_inline<<12295>>.
Un elemento de \begin<<12296>>tex2html_wrap_inline<<12296>>$P$\end<<12297>>tex2html_wrap_inline<<12297>>\space se denomina producción. Por último, \begin<<12298>>tex2html_wrap_inline<<12298>>$S$\end<<12299>>tex2html_wrap_inline<<12299>>\space es un símbolo del conjunto
\begin<<12300>>tex2html_wrap_inline<<12300>>$V$\end<<12301>>tex2html_wrap_inline<<12301>>\space que se denomina símbolo de arranque.\end<<11779>>theorem_type<<11779>>
\begin<<14286>>tex2html_deferred<<14286>>\par\end<<14287>>tex2html_deferred<<14287>>
\begin<<11780>>theorem_type<<11780>>[definition][definition][section][][][]
Dada una gramática \begin<<12302>>tex2html_wrap_inline<<12302>>$G=(\Sigma,V,P,S)$\end<<12303>>tex2html_wrap_inline<<12303>>\space y \begin<<12304>>tex2html_wrap_inline<<12304>>$\mu = \alpha A \beta \in (V \cup \Sigma)^*$\end<<12305>>tex2html_wrap_inline<<12305>>
una frase formada por variables y terminales y \begin<<12306>>tex2html_wrap_inline<<12306>>$A \rightarrow \gamma$\end<<12307>>tex2html_wrap_inline<<12307>>\space una producción de 
\begin<<12308>>tex2html_wrap_inline<<12308>>$P$\end<<12309>>tex2html_wrap_inline<<12309>>, decimos que  \begin<<12310>>tex2html_wrap_inline<<12310>>$\mu$\end<<12311>>tex2html_wrap_inline<<12311>>\space deriva en un paso en  \begin<<12312>>tex2html_wrap_inline<<12312>>$\alpha \gamma \beta$\end<<12313>>tex2html_wrap_inline<<12313>>. Esto es, derivar 
una cadena \begin<<12314>>tex2html_wrap_inline<<12314>>$\alpha A \beta$\end<<12315>>tex2html_wrap_inline<<12315>>\space es sustituir 
una variable sintáctica \begin<<12316>>tex2html_wrap_inline<<12316>>$A$\end<<12317>>tex2html_wrap_inline<<12317>>\space de \begin<<12318>>tex2html_wrap_inline<<12318>>$V$\end<<12319>>tex2html_wrap_inline<<12319>>\space por la parte derecha \begin<<12320>>tex2html_wrap_inline<<12320>>$\gamma$\end<<12321>>tex2html_wrap_inline<<12321>>\space de una de sus reglas de producción.
Se dice que \begin<<12322>>tex2html_wrap_inline<<12322>>$\mu$\end<<12323>>tex2html_wrap_inline<<12323>>\space deriva en \begin<<12324>>tex2html_wrap_inline<<12324>>$n$\end<<12325>>tex2html_wrap_inline<<12325>>\space pasos en \begin<<12326>>tex2html_wrap_inline<<12326>>$\delta$\end<<12327>>tex2html_wrap_inline<<12327>>\space si deriva en \begin<<12328>>tex2html_wrap_inline<<12328>>$n-1$\end<<12329>>tex2html_wrap_inline<<12329>>\space pasos en una cadena
\begin<<12330>>tex2html_wrap_inline<<12330>>$\alpha A \beta$\end<<12331>>tex2html_wrap_inline<<12331>>\space la cual deriva en un paso en \begin<<12332>>tex2html_wrap_inline<<12332>>$\delta$\end<<12333>>tex2html_wrap_inline<<12333>>. Se escribe entonces
que \begin<<12334>>tex2html_wrap_inline<<12334>>$\mu  \stackrel<<10846>>*<<10846>><<10847>>\Longrightarrow<<10847>>  \delta$\end<<12335>>tex2html_wrap_inline<<12335>>. Una cadena deriva en 0 pasos en si misma.
\begin<<14288>>tex2html_deferred<<14288>>\par\end<<14289>>tex2html_deferred<<14289>>\end<<11781>>theorem_type<<11781>>
\begin<<14290>>tex2html_deferred<<14290>>\par\end<<14291>>tex2html_deferred<<14291>>
\begin<<11782>>theorem_type<<11782>>[definition][definition][section][][][]
\label<<10850>>definition:lenguajegenerado<<10850>>
Dada una gramática \begin<<12336>>tex2html_wrap_inline<<12336>>$G=(\Sigma,V,P,S)$\end<<12337>>tex2html_wrap_inline<<12337>>\space se denota por \begin<<12338>>tex2html_wrap_inline<<12338>>$L(G)$\end<<12339>>tex2html_wrap_inline<<12339>>\space o lenguaje
generado por \begin<<12340>>tex2html_wrap_inline<<12340>>$G$\end<<12341>>tex2html_wrap_inline<<12341>>\space al lenguaje:
\begin<<14292>>tex2html_deferred<<14292>>\par\end<<14293>>tex2html_deferred<<14293>>
\begin<<10851>>center<<10851>>
\begin<<12342>>tex2html_wrap_inline<<12342>>$L(G) = \{ x \in \Sigma^* : S \stackrel<<10852>>*<<10852>><<10853>>\Longrightarrow<<10853>> x \}$\end<<12343>>tex2html_wrap_inline<<12343>>
\end<<10854>>center<<10854>>
\begin<<14294>>tex2html_deferred<<14294>>\par\end<<14295>>tex2html_deferred<<14295>>
Esto es, el lenguaje generado por la gramática \begin<<12344>>tex2html_wrap_inline<<12344>>$G$\end<<12345>>tex2html_wrap_inline<<12345>>\space esta formado por las cadenas
de terminales que pueden ser derivados desde el símbolo de arranque.\end<<11783>>theorem_type<<11783>>
\begin<<14296>>tex2html_deferred<<14296>>\par\end<<14297>>tex2html_deferred<<14297>>
\begin<<11784>>theorem_type<<11784>>[definition][definition][section][][][]
Una derivación que comienza en el símbolo de arranque y termina en una secuencia
formada por sólo terminales de \begin<<12346>>tex2html_wrap_inline<<12346>>$\Sigma$\end<<12347>>tex2html_wrap_inline<<12347>>\space se dice \emph<<10857>>completa<<10857>>.
\begin<<14298>>tex2html_deferred<<14298>>\par\end<<14299>>tex2html_deferred<<14299>>
Una derivación \begin<<12348>>tex2html_wrap_inline<<12348>>$\mu  \stackrel<<10858>>*<<10858>><<10859>>\Longrightarrow<<10859>>  \delta$\end<<12349>>tex2html_wrap_inline<<12349>> 
en la cual en cada paso \begin<<12350>>tex2html_wrap_inline<<12350>>$\alpha A x$\end<<12351>>tex2html_wrap_inline<<12351>>\space la regla de producción aplicada \begin<<12352>>tex2html_wrap_inline<<12352>>$A \rightarrow \gamma$\end<<12353>>tex2html_wrap_inline<<12353>>
se aplica en la variable sintáctica mas a la derecha se dice \emph<<10860>>una derivación a derechas<<10860>>
\begin<<14300>>tex2html_deferred<<14300>>\par\end<<14301>>tex2html_deferred<<14301>>
Una derivación \begin<<12354>>tex2html_wrap_inline<<12354>>$\mu  \stackrel<<10861>>*<<10861>><<10862>>\Longrightarrow<<10862>>  \delta$\end<<12355>>tex2html_wrap_inline<<12355>> 
en la cual en cada paso \begin<<12356>>tex2html_wrap_inline<<12356>>$x A \alpha$\end<<12357>>tex2html_wrap_inline<<12357>>\space la regla de producción aplicada \begin<<12358>>tex2html_wrap_inline<<12358>>$A \rightarrow \gamma$\end<<12359>>tex2html_wrap_inline<<12359>>
se aplica en la variable sintáctica mas a la izquierda se dice \emph<<10863>>una derivación a izquierdas<<10863>>\end<<11785>>theorem_type<<11785>>
\begin<<14302>>tex2html_deferred<<14302>>\par\end<<14303>>tex2html_deferred<<14303>>
\begin<<11786>>theorem_type<<11786>>[definition][definition][section][][][]
Observe que una derivación puede ser representada como un árbol cuyos nodos
están etiquetados en \begin<<12360>>tex2html_wrap_inline<<12360>>$V \cup \Sigma$\end<<12361>>tex2html_wrap_inline<<12361>>. La aplicación de la regla de 
producción \begin<<12362>>tex2html_wrap_inline<<12362>>$A \rightarrow \gamma$\end<<12363>>tex2html_wrap_inline<<12363>>\space se traduce en asignar como hijos del nodo etiquetado con \begin<<12364>>tex2html_wrap_inline<<12364>>$A$\end<<12365>>tex2html_wrap_inline<<12365>>
a los nodos etiquetados con los símbolos \begin<<12366>>tex2html_wrap_inline<<12366>>$X_1 \ldots X_n$\end<<12367>>tex2html_wrap_inline<<12367>>\space que constituyen
la frase \begin<<12368>>tex2html_wrap_inline<<12368>>$\gamma = X_1 \ldots X_n$\end<<12369>>tex2html_wrap_inline<<12369>>.  
Este árbol se llama \index<<12120>>árbol sintáctico concreto<<12120>>\emph<<12121>>árbol sintáctico concreto<<12121>> asociado 
con la derivación.\end<<11787>>theorem_type<<11787>>
\begin<<14304>>tex2html_deferred<<14304>>\par\end<<14305>>tex2html_deferred<<14305>>
\begin<<11788>>theorem_type<<11788>>[definition][definition][section][][][]
\label<<10869>>definition:arbolconcreto<<10869>>
Observe que, dada una frase \begin<<12370>>tex2html_wrap_inline<<12370>>$x \in L(G)$\end<<12371>>tex2html_wrap_inline<<12371>>\space una derivación desde el
símbolo de arranque da lugar a  un árbol. Ese árbol tiene como raíz el 
símbolo de arranque y como hojas los terminales 
\begin<<12372>>tex2html_wrap_inline<<12372>>$x_1 \ldots x_n$\end<<12373>>tex2html_wrap_inline<<12373>>\space que forman \begin<<12374>>tex2html_wrap_inline<<12374>>$x$\end<<12375>>tex2html_wrap_inline<<12375>>. Dicho árbol se denomina \emph<<10870>>árbol
de análisis sintáctico concreto<<10870>> de \begin<<12376>>tex2html_wrap_inline<<12376>>$x$\end<<12377>>tex2html_wrap_inline<<12377>>. Una derivación determina
una forma de recorrido del árbol de análisis sintáctico concreto.\end<<11789>>theorem_type<<11789>>
\begin<<14306>>tex2html_deferred<<14306>>\par\end<<14307>>tex2html_deferred<<14307>>
\begin<<11790>>theorem_type<<11790>>[definition][definition][section][][][]
Una gramática \begin<<12378>>tex2html_wrap_inline<<12378>>$G$\end<<12379>>tex2html_wrap_inline<<12379>>\space se dice ambigua si existe alguna frase \begin<<12380>>tex2html_wrap_inline<<12380>>$x \in L(G)$\end<<12381>>tex2html_wrap_inline<<12381>>
con al menos dos árboles sintácticos. 
Es claro que esta definición es equivalente a afirmar que existe 
alguna frase \begin<<12382>>tex2html_wrap_inline<<12382>>$x \in L(G)$\end<<12383>>tex2html_wrap_inline<<12383>>\space para la cual existen dos derivaciones a 
izquierda (derecha) distintas.\end<<11791>>theorem_type<<11791>>
\begin<<14308>>tex2html_deferred<<14308>>\par\end<<14309>>tex2html_deferred<<14309>>
\subsection<<10874>>Ejercicio<<10874>>
\label<<10875>>ejercicio:tutugrammar<<10875>>
Dada la gramática con producciones:
\begin<<14310>>tex2html_deferred<<14310>>\par\end<<14311>>tex2html_deferred<<14311>>
\vspace<<10876>>0.5cm<<10876>>
\begin<<10877>>tabular<<10877>><<10878>>l<<10878>>
program      \begin<<12384>>tex2html_wrap_inline<<12384>>$\rightarrow$\end<<12385>>tex2html_wrap_inline<<12385>>\space  declarations  statements         \begin<<12386>>tex2html_wrap_inline<<12386>>$|$\end<<12387>>tex2html_wrap_inline<<12387>>\space statements\\ 
declarations \begin<<12388>>tex2html_wrap_inline<<12388>>$\rightarrow$\end<<12389>>tex2html_wrap_inline<<12389>>\space declaration  ';'  declarations    \begin<<12390>>tex2html_wrap_inline<<12390>>$|$\end<<12391>>tex2html_wrap_inline<<12391>>\space declaration ';'\\ 
declaration  \begin<<12392>>tex2html_wrap_inline<<12392>>$\rightarrow$\end<<12393>>tex2html_wrap_inline<<12393>>\space INT  idlist                       \begin<<12394>>tex2html_wrap_inline<<12394>>$|$\end<<12395>>tex2html_wrap_inline<<12395>>\space STRING   idlist\\ 
statements   \begin<<12396>>tex2html_wrap_inline<<12396>>$\rightarrow$\end<<12397>>tex2html_wrap_inline<<12397>>\space statement  ';'  statements        \begin<<12398>>tex2html_wrap_inline<<12398>>$|$\end<<12399>>tex2html_wrap_inline<<12399>>\space statement\\ 
statement    \begin<<12400>>tex2html_wrap_inline<<12400>>$\rightarrow$\end<<12401>>tex2html_wrap_inline<<12401>>\space ID '=' expression                 \begin<<12402>>tex2html_wrap_inline<<12402>>$|$\end<<12403>>tex2html_wrap_inline<<12403>>\space P  expression\\ 
expression   \begin<<12404>>tex2html_wrap_inline<<12404>>$\rightarrow$\end<<12405>>tex2html_wrap_inline<<12405>>\space term '+' expression               \begin<<12406>>tex2html_wrap_inline<<12406>>$|$\end<<12407>>tex2html_wrap_inline<<12407>>\space term\\ 
term         \begin<<12408>>tex2html_wrap_inline<<12408>>$\rightarrow$\end<<12409>>tex2html_wrap_inline<<12409>>\space factor '*' term                   \begin<<12410>>tex2html_wrap_inline<<12410>>$|$\end<<12411>>tex2html_wrap_inline<<12411>>\space factor\\ 
factor       \begin<<12412>>tex2html_wrap_inline<<12412>>$\rightarrow$\end<<12413>>tex2html_wrap_inline<<12413>>\space '(' expression ')' \begin<<12414>>tex2html_wrap_inline<<12414>>$|$\end<<12415>>tex2html_wrap_inline<<12415>>\space ID \begin<<12416>>tex2html_wrap_inline<<12416>>$|$\end<<12417>>tex2html_wrap_inline<<12417>>\space NUM \begin<<12418>>tex2html_wrap_inline<<12418>>$|$\end<<12419>>tex2html_wrap_inline<<12419>>\space STR\\ 
idlist       \begin<<12420>>tex2html_wrap_inline<<12420>>$\rightarrow$\end<<12421>>tex2html_wrap_inline<<12421>>\space ID ',' idlist \begin<<12422>>tex2html_wrap_inline<<12422>>$|$\end<<12423>>tex2html_wrap_inline<<12423>>\space ID
\end<<10879>>tabular<<10879>>
\vspace<<10880>>0.25cm<<10880>>
\begin<<14312>>tex2html_deferred<<14312>>\par\end<<14313>>tex2html_deferred<<14313>>
En esta gramática, \begin<<12424>>tex2html_wrap_inline<<12424>>$\Sigma$\end<<12425>>tex2html_wrap_inline<<12425>>\space esta formado por los caracteres entre comillas simples y 
los símbolos cuyos identificadores están en mayúsculas. Los restantes identificadores
corresponden a elementos de \begin<<12426>>tex2html_wrap_inline<<12426>>$V$\end<<12427>>tex2html_wrap_inline<<12427>>. El símbolo de arranque es \begin<<12428>>tex2html_wrap_inline<<12428>>$S =$\end<<12429>>tex2html_wrap_inline<<12429>>\space program.
\begin<<14314>>tex2html_deferred<<14314>>\par\end<<14315>>tex2html_deferred<<14315>>
Conteste a las siguientes cuestiones:
\begin<<14316>>tex2html_deferred<<14316>>\par\end<<14317>>tex2html_deferred<<14317>>
\begin<<10881>>enumerate<<10881>>
\item
Describa con palabras el lenguaje generado.
\item
\label<<10882>>ejer:arbol<<10882>>
Construya el árbol de análisis sintáctico
concreto para cuatro frases del lenguaje.
\item
Señale a que recorridos del árbol corresponden las respectivas
derivaciones a izquierda y a derecha en el apartado \ref<<10883>>ejer:arbol<<10883>>.
\item
¿Es ambigua esta gramática?. Justifique su respuesta.
\end<<10884>>enumerate<<10884>>
\begin<<14318>>tex2html_deferred<<14318>>\par\end<<14319>>tex2html_deferred<<14319>>
\section<<10885>>Análisis Sintáctico Predictivo Recursivo<<10885>>
\label<<10886>>section:predictivo<<10886>>
La siguiente fase en la construcción del analizador es la fase de 
análisis sintáctico. Esta toma como entrada el flujo de terminales
y construye como salida el árbol de análisis sintáctico abstracto.
\begin<<14320>>tex2html_deferred<<14320>>\par\end<<14321>>tex2html_deferred<<14321>>
El árbol de análisis sintáctico abstracto es una representación  compactada del árbol 
de análisis sintáctico concreto que contiene la misma información que éste.
\begin<<14322>>tex2html_deferred<<14322>>\par\end<<14323>>tex2html_deferred<<14323>>
Existen diferentes métodos de análisis sintáctico. La mayoría caen en una de dos categorías:
ascendentes y descendentes. Los ascendentes construyen el árbol desde las hojas
hacia la raíz. Los descendentes lo hacen en modo inverso. El que describiremos
aqui es uno de los mas sencillos: se denomina método de análisis predictivo descendente 
recursivo.
\begin<<14324>>tex2html_deferred<<14324>>\par\end<<14325>>tex2html_deferred<<14325>>
\subsection<<10887>>Introducción<<10887>>
\label<<10888>>subsection:introduccion<<10888>>
En este método se asocia una subrutina con cada variable sintáctica \begin<<12430>>tex2html_wrap_inline<<12430>>$A \in V$\end<<12431>>tex2html_wrap_inline<<12431>>. Dicha subrutina 
(que llamaremos <tex2html_verb_mark>1737<tex2html_verb_mark>) reconocerá el lenguaje generado desde la variable \begin<<12432>>tex2html_wrap_inline<<12432>>$A$\end<<12433>>tex2html_wrap_inline<<12433>>:
\begin<<14326>>tex2html_deferred<<14326>>\par\end<<14327>>tex2html_deferred<<14327>>
\begin<<10889>>center<<10889>>
\begin<<12434>>tex2html_wrap_inline<<12434>>$L_A(G) = \{ x \in \Sigma^* : A \stackrel<<10890>>*<<10890>><<10891>>\Longrightarrow<<10891>> x \}$\end<<12435>>tex2html_wrap_inline<<12435>>
\end<<10892>>center<<10892>>
\begin<<14328>>tex2html_deferred<<14328>>\par\end<<14329>>tex2html_deferred<<14329>>
En este método se escribe una rutina <tex2html_verb_mark>1738<tex2html_verb_mark> por variable sintáctica \begin<<12436>>tex2html_wrap_inline<<12436>>$A \in V$\end<<12437>>tex2html_wrap_inline<<12437>>. 
Se le da a la rutina asociada el mismo nombre que a la variable sintáctica
asociada. La función de la rutina <tex2html_verb_mark>1739<tex2html_verb_mark> asociada con la variable
\begin<<12438>>tex2html_wrap_inline<<12438>>$A \in V$\end<<12439>>tex2html_wrap_inline<<12439>>\space es reconocer el lenguaje \begin<<12440>>tex2html_wrap_inline<<12440>>$L(A)$\end<<12441>>tex2html_wrap_inline<<12441>>\space generado por \begin<<12442>>tex2html_wrap_inline<<12442>>$A$\end<<12443>>tex2html_wrap_inline<<12443>>.
La estrategia general que sigue la rutina <tex2html_verb_mark>1740<tex2html_verb_mark> para reconocer
\begin<<12444>>tex2html_wrap_inline<<12444>>$L(A)$\end<<12445>>tex2html_wrap_inline<<12445>>\space es decidir en términos del terminal \begin<<12446>>tex2html_wrap_inline<<12446>>$a$\end<<12447>>tex2html_wrap_inline<<12447>>\space en la entrada
que regla de producción concreta \begin<<12448>>tex2html_wrap_inline<<12448>>$A \rightarrow \alpha$\end<<12449>>tex2html_wrap_inline<<12449>>\space se aplica para
a continuación comprobar que la entrada que sigue pertenece al lenguaje generado por 
\begin<<12450>>tex2html_wrap_inline<<12450>>$\alpha$\end<<12451>>tex2html_wrap_inline<<12451>>. 
En un analizador predictivo descendente recursivo (APDR) se asume que el símbolo que actualmente 
esta siendo observado (denotado <tex2html_verb_mark>1741<tex2html_verb_mark>) permite determinar unívocamente
que producción de \begin<<12452>>tex2html_wrap_inline<<12452>>$A$\end<<12453>>tex2html_wrap_inline<<12453>>\space hay que aplicar. 
Una vez que se ha determinado que la regla por la que continuar la derivación
es \begin<<12454>>tex2html_wrap_inline<<12454>>$A \rightarrow \alpha$\end<<12455>>tex2html_wrap_inline<<12455>>\space se procede a reconocer \begin<<12456>>tex2html_wrap_inline<<12456>>$L_<<10893>>\alpha<<10893>>(G)$\end<<12457>>tex2html_wrap_inline<<12457>>,
el lenguaje generado por \begin<<12458>>tex2html_wrap_inline<<12458>>$\alpha$\end<<12459>>tex2html_wrap_inline<<12459>>. Si \begin<<12460>>tex2html_wrap_inline<<12460>>$\alpha = X_1 \ldots X_n$\end<<12461>>tex2html_wrap_inline<<12461>>,
las apariciones de terminales \begin<<12462>>tex2html_wrap_inline<<12462>>$X_i$\end<<12463>>tex2html_wrap_inline<<12463>>\space en \begin<<12464>>tex2html_wrap_inline<<12464>>$\alpha$\end<<12465>>tex2html_wrap_inline<<12465>>\space son emparejadas
con los terminales en la entrada mientras que las apariciones de variables \begin<<12466>>tex2html_wrap_inline<<12466>>$X_i = B$\end<<12467>>tex2html_wrap_inline<<12467>>
en \begin<<12468>>tex2html_wrap_inline<<12468>>$\alpha$\end<<12469>>tex2html_wrap_inline<<12469>>\space se traducen en llamadas a la correspondiente subrutina asociada con <tex2html_verb_mark>1742<tex2html_verb_mark>.
\begin<<14330>>tex2html_deferred<<14330>>\par\end<<14331>>tex2html_deferred<<14331>>
Para ilustrar el método,
simplificaremos la gramática presentada en el ejercicio
\ref<<10894>>ejercicio:tutugrammar<<10894>> eliminando las declaraciones:
\begin<<14332>>tex2html_deferred<<14332>>\par\end<<14333>>tex2html_deferred<<14333>>
\vspace<<10895>>0.25cm<<10895>>
\begin<<10896>>tabular<<10896>><<10897>>l<<10897>>
statements   \begin<<12470>>tex2html_wrap_inline<<12470>>$\rightarrow$\end<<12471>>tex2html_wrap_inline<<12471>>\space statement  ';'  statements        \begin<<12472>>tex2html_wrap_inline<<12472>>$|$\end<<12473>>tex2html_wrap_inline<<12473>>\space statement\\ 
statement    \begin<<12474>>tex2html_wrap_inline<<12474>>$\rightarrow$\end<<12475>>tex2html_wrap_inline<<12475>>\space ID '=' expression                 \begin<<12476>>tex2html_wrap_inline<<12476>>$|$\end<<12477>>tex2html_wrap_inline<<12477>>\space P  expression\\ 
expression   \begin<<12478>>tex2html_wrap_inline<<12478>>$\rightarrow$\end<<12479>>tex2html_wrap_inline<<12479>>\space term '+' expression               \begin<<12480>>tex2html_wrap_inline<<12480>>$|$\end<<12481>>tex2html_wrap_inline<<12481>>\space term\\ 
term         \begin<<12482>>tex2html_wrap_inline<<12482>>$\rightarrow$\end<<12483>>tex2html_wrap_inline<<12483>>\space factor '*' term                   \begin<<12484>>tex2html_wrap_inline<<12484>>$|$\end<<12485>>tex2html_wrap_inline<<12485>>\space factor\\ 
factor       \begin<<12486>>tex2html_wrap_inline<<12486>>$\rightarrow$\end<<12487>>tex2html_wrap_inline<<12487>>\space '(' expression ')' \begin<<12488>>tex2html_wrap_inline<<12488>>$|$\end<<12489>>tex2html_wrap_inline<<12489>>\space ID \begin<<12490>>tex2html_wrap_inline<<12490>>$|$\end<<12491>>tex2html_wrap_inline<<12491>>\space NUM
\end<<10898>>tabular<<10898>>
\vspace<<10899>>0.25cm<<10899>>
\begin<<14334>>tex2html_deferred<<14334>>\par\end<<14335>>tex2html_deferred<<14335>>
La secuencia de llamadas cuando se procesa la entrada mediante 
el siguiente programa construye ``implícitamente'' el árbol 
de análisis sintáctico concreto.
\begin<<14336>>tex2html_deferred<<14336>>\par\end<<14337>>tex2html_deferred<<14337>>
Dado que estamos usando <tex2html_verb_mark>1743<tex2html_verb_mark> se requiere prototipar las funciones
al comienzo del fichero:
\begin<<10900>>tex2html_preform<<10900>><tex2html_verbatim_mark>verbatim5558#\end<<10901>>tex2html_preform<<10901>>
\begin<<14338>>tex2html_deferred<<14338>>\par\end<<14339>>tex2html_deferred<<14339>>
Para saber mas sobre prototipos consulte \externalref<<12122>>section:prototipos<<12122>> \cite<<12123>>CasianoIntroAPerl<<12123>>.
\begin<<14340>>tex2html_deferred<<14340>>\par\end<<14341>>tex2html_deferred<<14341>>
\begin<<11792>>theorem_type<<11792>>[program][program][section][][][]
\label<<10904>>program:adrp<<10904>>
\begin<<10905>>tex2html_preform<<10905>><tex2html_verbatim_mark>verbatim5559#\end<<10906>>tex2html_preform<<10906>>\end<<11793>>theorem_type<<11793>>
\begin<<14342>>tex2html_deferred<<14342>>\par\end<<14343>>tex2html_deferred<<14343>>
Como vemos en el ejemplo, el análisis predictivo confía en que, si estamos
ejecutando la entrada del procedimiento <tex2html_verb_mark>1744<tex2html_verb_mark>,
el cuál está asociado con la variable \begin<<12492>>tex2html_wrap_inline<<12492>>$A \in V$\end<<12493>>tex2html_wrap_inline<<12493>>, el símbolo terminal
que esta en la entrada \begin<<12494>>tex2html_wrap_inline<<12494>>$a$\end<<12495>>tex2html_wrap_inline<<12495>>\space  determine de manera unívoca la regla
de producción \begin<<12496>>tex2html_wrap_inline<<12496>>$A \rightarrow a \alpha$\end<<12497>>tex2html_wrap_inline<<12497>>\space que debe ser procesada.
\begin<<14344>>tex2html_deferred<<14344>>\par\end<<14345>>tex2html_deferred<<14345>>
Si se piensa, esta condición requiere que todas las partes derechas \begin<<12498>>tex2html_wrap_inline<<12498>>$\alpha$\end<<12499>>tex2html_wrap_inline<<12499>>\space de
las reglas \begin<<12500>>tex2html_wrap_inline<<12500>>$A \rightarrow \alpha$\end<<12501>>tex2html_wrap_inline<<12501>>\space de \begin<<12502>>tex2html_wrap_inline<<12502>>$A$\end<<12503>>tex2html_wrap_inline<<12503>>\space ``comiencen'' por diferentes símbolos.
Para formalizar esta idea, introduciremos el concepto de
conjunto \begin<<12504>>tex2html_wrap_inline<<12504>>$FIRST(\alpha)$\end<<12505>>tex2html_wrap_inline<<12505>>:
\begin<<14346>>tex2html_deferred<<14346>>\par\end<<14347>>tex2html_deferred<<14347>>
\begin<<11794>>theorem_type<<11794>>[definition][definition][section][][][]
Dada una gramática 
\begin<<12506>>tex2html_wrap_inline<<12506>>$G=(\Sigma,V,P,S)$\end<<12507>>tex2html_wrap_inline<<12507>>\space y un símbolo \begin<<12508>>tex2html_wrap_inline<<12508>>$\alpha \in (V \cup \Sigma)^*$\end<<12509>>tex2html_wrap_inline<<12509>>\space se define el conjunto 
\begin<<12510>>tex2html_wrap_inline<<12510>>$FIRST(\alpha)$\end<<12511>>tex2html_wrap_inline<<12511>>\space como:
\begin<<14348>>tex2html_deferred<<14348>>\par\end<<14349>>tex2html_deferred<<14349>>
\begin<<12512>>tex2html_wrap_inline<<12512>>$FIRST(\alpha) = \left \{ b \in \Sigma :  \alpha  \stackrel<<10909>>*<<10909>><<10910>>\Longrightarrow<<10910>>  b \beta \right \}
\cup N(\alpha)$\end<<12513>>tex2html_wrap_inline<<12513>> 
\begin<<14350>>tex2html_deferred<<14350>>\par\end<<14351>>tex2html_deferred<<14351>>
\noindent donde:
\begin<<14352>>tex2html_deferred<<14352>>\par\end<<14353>>tex2html_deferred<<14353>>
\begin<<12516>>tex2html_wrap_inline<<12516>>$N(\alpha) = \left \{ \begin<<10911>>array<<10911>><<10912>>ll<<10912>>
                         \left \{ \epsilon \right \};SPMamp; \mbox<<11764>>si \begin<<12514>>tex2html_wrap_inline<<12514>>$\alpha \stackrel<<10913>>*<<10913>><<10914>>\Longrightarrow<<10914>> \epsilon$\end<<12515>>tex2html_wrap_inline<<12515>><<11764>> \\ 
                         \emptyset ;SPMamp; \mbox<<10915>>en otro caso<<10915>> 
                      \end<<10916>>array<<10916>>
             \right. $\end<<12517>>tex2html_wrap_inline<<12517>> 
\begin<<14354>>tex2html_deferred<<14354>>\par\end<<14355>>tex2html_deferred<<14355>>\end<<11795>>theorem_type<<11795>>
\begin<<14356>>tex2html_deferred<<14356>>\par\end<<14357>>tex2html_deferred<<14357>>
Podemos reformular ahora nuestra afirmación anterior en estos términos:
Si \begin<<12518>>tex2html_wrap_inline<<12518>>$A \rightarrow \gamma_1 \mid \ldots \mid \gamma_n$\end<<12519>>tex2html_wrap_inline<<12519>>\space y los conjuntos \begin<<12520>>tex2html_wrap_inline<<12520>>$FIRST(\gamma_i)$\end<<12521>>tex2html_wrap_inline<<12521>>\space son 
disjuntos podemos construir el procedimiento para la variable \begin<<12522>>tex2html_wrap_inline<<12522>>$A$\end<<12523>>tex2html_wrap_inline<<12523>>\space siguiendo
este seudocódigo:
\begin<<14358>>tex2html_deferred<<14358>>\par\end<<14359>>tex2html_deferred<<14359>>
\begin<<10918>>tex2html_preform<<10918>><tex2html_verbatim_mark>verbatim5560#\end<<10919>>tex2html_preform<<10919>>
\begin<<14360>>tex2html_deferred<<14360>>\par\end<<14361>>tex2html_deferred<<14361>>
Donde si \begin<<12524>>tex2html_wrap_inline<<12524>>$\gamma_j$\end<<12525>>tex2html_wrap_inline<<12525>>\space es \begin<<12526>>tex2html_wrap_inline<<12526>>$X_1 \ldots X_k$\end<<12527>>tex2html_wrap_inline<<12527>>\space el código <tex2html_verb_mark>1745<tex2html_verb_mark> consiste
en una secuencia \begin<<12528>>tex2html_wrap_inline<<12528>>$i = 1 \ldots k$\end<<12529>>tex2html_wrap_inline<<12529>>\space de llamadas de uno de estos dos tipos:
\begin<<10920>>itemize<<10920>>
\item
Llamar a la subrutina <tex2html_verb_mark>1746<tex2html_verb_mark> si \begin<<12530>>tex2html_wrap_inline<<12530>>$X_i$\end<<12531>>tex2html_wrap_inline<<12531>>\space es una variable sintáctica
\item
Hacer una llamada a <tex2html_verb_mark>1747<tex2html_verb_mark> si \begin<<12532>>tex2html_wrap_inline<<12532>>$X_i$\end<<12533>>tex2html_wrap_inline<<12533>>\space es un terminal
\end<<10921>>itemize<<10921>>
\begin<<14362>>tex2html_deferred<<14362>>\par\end<<14363>>tex2html_deferred<<14363>>
\subsection<<12124>>Ejercicio: Recorrido del árbol en un ADPR<<12124>>
   \index<<12125>>Ejercicio!Recorrido del árbol en un ADPR<<12125>>
  
¿En que forma es recorrido el árbol de análisis sintáctico concreto en un 
analizador descendente predictivo recursivo? ¿En que orden son visitados los nodos?
\begin<<14364>>tex2html_deferred<<14364>>\par\end<<14365>>tex2html_deferred<<14365>>
\subsection<<12126>>Ejercicio: Factores Comunes<<12126>>
   \index<<12127>>Ejercicio!Factores Comunes<<12127>>
  
En el programa \ref<<10924>>program:adrp<<10924>> el reconocimiento de las categorías gramáticales
statements, expression y term (líneas 19-27) difiere del resto. Observe las reglas:
\begin<<14366>>tex2html_deferred<<14366>>\par\end<<14367>>tex2html_deferred<<14367>>
\vspace<<10925>>0.25cm<<10925>>
\begin<<10926>>tabular<<10926>><<10927>>l<<10927>>
statements   \begin<<12534>>tex2html_wrap_inline<<12534>>$\rightarrow$\end<<12535>>tex2html_wrap_inline<<12535>>\space statement  ';'  statements        \begin<<12536>>tex2html_wrap_inline<<12536>>$|$\end<<12537>>tex2html_wrap_inline<<12537>>\space statement\\ 
expression   \begin<<12538>>tex2html_wrap_inline<<12538>>$\rightarrow$\end<<12539>>tex2html_wrap_inline<<12539>>\space term '+' expression               \begin<<12540>>tex2html_wrap_inline<<12540>>$|$\end<<12541>>tex2html_wrap_inline<<12541>>\space term\\ 
term         \begin<<12542>>tex2html_wrap_inline<<12542>>$\rightarrow$\end<<12543>>tex2html_wrap_inline<<12543>>\space factor '*' term                   \begin<<12544>>tex2html_wrap_inline<<12544>>$|$\end<<12545>>tex2html_wrap_inline<<12545>>\space factor\\ 
\end<<10928>>tabular<<10928>>
\vspace<<10929>>0.25cm<<10929>>
\begin<<14368>>tex2html_deferred<<14368>>\par\end<<14369>>tex2html_deferred<<14369>>
¿Son disjuntos los conjuntos \begin<<12546>>tex2html_wrap_inline<<12546>>$FIRST(\gamma_i)$\end<<12547>>tex2html_wrap_inline<<12547>>\space para las partes derechas de las reglas
de statements?
¿Son disjuntos los conjuntos \begin<<12548>>tex2html_wrap_inline<<12548>>$FIRST(\gamma_i)$\end<<12549>>tex2html_wrap_inline<<12549>>\space para las partes derechas de las reglas
de expression?
¿Son disjuntos los conjuntos \begin<<12550>>tex2html_wrap_inline<<12550>>$FIRST(\gamma_i)$\end<<12551>>tex2html_wrap_inline<<12551>>\space para las partes derechas de las reglas
de term?
\begin<<14370>>tex2html_deferred<<14370>>\par\end<<14371>>tex2html_deferred<<14371>>
Si se tiene una variable con producciones:
\begin<<14372>>tex2html_deferred<<14372>>\par\end<<14373>>tex2html_deferred<<14373>>
\begin<<10930>>tabular<<10930>><<10931>>l<<10931>>
\begin<<12552>>tex2html_wrap_inline<<12552>>$A   \rightarrow \alpha \beta \mid \alpha \gamma$\end<<12553>>tex2html_wrap_inline<<12553>>
\end<<10932>>tabular<<10932>>
\begin<<14374>>tex2html_deferred<<14374>>\par\end<<14375>>tex2html_deferred<<14375>>
Las dos producciones tienen un \index<<12128>>máximo factor común<<12128>>\emph<<12129>>máximo factor común<<12129>> en la izquierda
de su parte derecha \begin<<12554>>tex2html_wrap_inline<<12554>>$\alpha$\end<<12555>>tex2html_wrap_inline<<12555>>. Asumimos que \begin<<12556>>tex2html_wrap_inline<<12556>>$FIRST(\beta) \cap FIRST(\gamma) = \emptyset$\end<<12557>>tex2html_wrap_inline<<12557>>.
\begin<<10934>>enumerate<<10934>>
\item
¿Cómo puede modificarse la gramática para obtener una nueva gramática que cumpla la condición de que las partes derechas tienen conjuntos \begin<<12558>>tex2html_wrap_inline<<12558>>$FIRST(\gamma_i)$\end<<12559>>tex2html_wrap_inline<<12559>>\space disjuntos?
\item
¿Puede modificarse la técnica APDR para que funcione sobre gramáticas con este tipo 
de producciones?. Observe el código asociado con statements, expression  y term.
¿Cómo sería el esquema general?
\end<<10935>>enumerate<<10935>>
\begin<<14376>>tex2html_deferred<<14376>>\par\end<<14377>>tex2html_deferred<<14377>>
\subsection<<10936>>Derivaciones a vacío<<10936>>
Surge un problema cuando \begin<<12560>>tex2html_wrap_inline<<12560>>$A \rightarrow \gamma_1 \mid \ldots \mid \gamma_n$\end<<12561>>tex2html_wrap_inline<<12561>>
y la palabra vacía está en alguno de los conjuntos
\begin<<12562>>tex2html_wrap_inline<<12562>>$FIRST(\gamma_i)$\end<<12563>>tex2html_wrap_inline<<12563>>. ¿Que hacer entonces? 
\begin<<14378>>tex2html_deferred<<14378>>\par\end<<14379>>tex2html_deferred<<14379>>
Nótese que si \begin<<12564>>tex2html_wrap_inline<<12564>>$A \rightarrow \gamma$\end<<12565>>tex2html_wrap_inline<<12565>>\space y \begin<<12566>>tex2html_wrap_inline<<12566>>$\epsilon \in FIRST(\gamma)$\end<<12567>>tex2html_wrap_inline<<12567>>\space es porque existe una derivación
\begin<<12568>>tex2html_wrap_inline<<12568>>$\gamma \stackrel<<10937>>*<<10937>><<10938>>\Longrightarrow<<10938>> \epsilon$\end<<12569>>tex2html_wrap_inline<<12569>>. ¿Que terminales podemos 
legalmente encontrarnos cuando estamos en la subrutina <tex2html_verb_mark>1748<tex2html_verb_mark>?
Consideremos una derivación desde el símbolo de arranque en la que se 
use la producción \begin<<12570>>tex2html_wrap_inline<<12570>>$A \rightarrow \gamma$\end<<12571>>tex2html_wrap_inline<<12571>>. Dicha derivación forzosamente
tendrá la forma:
\begin<<14380>>tex2html_deferred<<14380>>\par\end<<14381>>tex2html_deferred<<14381>>
\begin<<10939>>center<<10939>>
\begin<<12572>>tex2html_wrap_inline<<12572>>$S \stackrel<<10940>>*<<10940>><<10941>>\Longrightarrow<<10941>> \beta A\ a \mu \Longrightarrow \beta \gamma\ a \mu \stackrel<<10942>>*<<10942>><<10943>>\Longrightarrow<<10943>> \beta\ a \mu$\end<<12573>>tex2html_wrap_inline<<12573>>.
\end<<10944>>center<<10944>>
\begin<<14382>>tex2html_deferred<<14382>>\par\end<<14383>>tex2html_deferred<<14383>>
Cualquier terminal \begin<<12574>>tex2html_wrap_inline<<12574>>$a \in \Sigma$\end<<12575>>tex2html_wrap_inline<<12575>>\space que pueda aparecer en una derivación desde 
el símbolo de arranque inmediatamente a continuación  de la variable \begin<<12576>>tex2html_wrap_inline<<12576>>$A$\end<<12577>>tex2html_wrap_inline<<12577>> 
es susceptible de ser visto
cuando se esta analizando \begin<<12578>>tex2html_wrap_inline<<12578>>$A$\end<<12579>>tex2html_wrap_inline<<12579>>\space y se aplicó 
\begin<<12580>>tex2html_wrap_inline<<12580>>$A \rightarrow \gamma$\end<<12581>>tex2html_wrap_inline<<12581>>\space con \begin<<12582>>tex2html_wrap_inline<<12582>>$\gamma \stackrel<<10945>>*<<10945>><<10946>>\Longrightarrow<<10946>> \epsilon$\end<<12583>>tex2html_wrap_inline<<12583>>.
Esto nos lleva a la definición del conjunto \begin<<12584>>tex2html_wrap_inline<<12584>>$FOLLOW(A)$\end<<12585>>tex2html_wrap_inline<<12585>>\space como conjunto
de terminales que pueden aparecer a continuación de \begin<<12586>>tex2html_wrap_inline<<12586>>$A$\end<<12587>>tex2html_wrap_inline<<12587>>\space en una derivación 
desde el símbolo de arranque:
\begin<<14384>>tex2html_deferred<<14384>>\par\end<<14385>>tex2html_deferred<<14385>>
\begin<<11796>>theorem_type<<11796>>[definition][definition][section][][][]
Dada una gramática \begin<<12588>>tex2html_wrap_inline<<12588>>$G=(\Sigma,V,P,S)$\end<<12589>>tex2html_wrap_inline<<12589>>\space y una variable \begin<<12590>>tex2html_wrap_inline<<12590>>$A \in V$\end<<12591>>tex2html_wrap_inline<<12591>> 
se define el conjunto \begin<<12592>>tex2html_wrap_inline<<12592>>$FOLLOW(A)$\end<<12593>>tex2html_wrap_inline<<12593>>\space como: 
\begin<<14386>>tex2html_deferred<<14386>>\par\end<<14387>>tex2html_deferred<<14387>>
\begin<<12594>>tex2html_wrap_inline<<12594>>$FOLLOW(A) = \left \{ b \in \Sigma :  \exists\ S  \stackrel<<10948>>*<<10948>><<10949>>\Longrightarrow<<10949>>  \alpha A b \beta \right \} \cup E(A)$\end<<12595>>tex2html_wrap_inline<<12595>>
\begin<<14388>>tex2html_deferred<<14388>>\par\end<<14389>>tex2html_deferred<<14389>>
\noindent donde
\begin<<14390>>tex2html_deferred<<14390>>\par\end<<14391>>tex2html_deferred<<14391>>
\begin<<12598>>tex2html_wrap_inline<<12598>>$E(A) = \left \{ \begin<<10950>>array<<10950>><<10951>>ll<<10951>>
                         \{ \$  \};SPMamp; \mbox<<11765>>si \begin<<12596>>tex2html_wrap_inline<<12596>>$S \stackrel<<10952>>*<<10952>><<10953>>\Longrightarrow<<10953>> \alpha A$\end<<12597>>tex2html_wrap_inline<<12597>><<11765>> \\ 
                         \emptyset ;SPMamp; \mbox<<10954>>en otro caso<<10954>> 
                      \end<<10955>>array<<10955>>
             \right. $\end<<12599>>tex2html_wrap_inline<<12599>> 
\begin<<14392>>tex2html_deferred<<14392>>\par\end<<14393>>tex2html_deferred<<14393>>\end<<11797>>theorem_type<<11797>>
Aqui \begin<<12600>>tex2html_wrap_inline<<12600>>$\$$\end<<12601>>tex2html_wrap_inline<<12601>>\space denota el final de la entrada (que se corresponde en el código Perl anterior 
con el terminal <tex2html_verb_mark>1749<tex2html_verb_mark>).
\begin<<14394>>tex2html_deferred<<14394>>\par\end<<14395>>tex2html_deferred<<14395>>
Si \begin<<12602>>tex2html_wrap_inline<<12602>>$A \rightarrow \gamma_1 \mid \ldots \mid \gamma_n$\end<<12603>>tex2html_wrap_inline<<12603>>\space dado que los conjuntos \begin<<12604>>tex2html_wrap_inline<<12604>>$FIRST(\gamma_i)$\end<<12605>>tex2html_wrap_inline<<12605>> 
han de ser disjuntos para que un analizador predictivo APDR funcione, sólo una parte derecha
puede contener la palabra vacía en su \begin<<12606>>tex2html_wrap_inline<<12606>>$FIRST$\end<<12607>>tex2html_wrap_inline<<12607>>. Supongamos que es \begin<<12608>>tex2html_wrap_inline<<12608>>$\gamma_n$\end<<12609>>tex2html_wrap_inline<<12609>>.
Podemos reformular la construcción del procedimiento para la variable \begin<<12610>>tex2html_wrap_inline<<12610>>$A$\end<<12611>>tex2html_wrap_inline<<12611>>\space siguiendo
este seudocódigo:
\begin<<14396>>tex2html_deferred<<14396>>\par\end<<14397>>tex2html_deferred<<14397>>
\begin<<10957>>tex2html_preform<<10957>><tex2html_verbatim_mark>verbatim5561#\end<<10958>>tex2html_preform<<10958>>
\begin<<14398>>tex2html_deferred<<14398>>\par\end<<14399>>tex2html_deferred<<14399>>
Un caso particular de \begin<<12612>>tex2html_wrap_inline<<12612>>$\gamma_n \stackrel<<10959>>*<<10959>><<10960>>\Longrightarrow<<10960>> \epsilon$\end<<12613>>tex2html_wrap_inline<<12613>> 
es que \begin<<12614>>tex2html_wrap_inline<<12614>>$\gamma_n = \epsilon$\end<<12615>>tex2html_wrap_inline<<12615>>. En tal caso, y como
es obvio, el significado de <tex2html_verb_mark>1750<tex2html_verb_mark> 
es equivalente a ejecutar una sentencia vacía.
\begin<<14400>>tex2html_deferred<<14400>>\par\end<<14401>>tex2html_deferred<<14401>>
\subsection<<10961>>Construcción de los conjuntos de Primeros y Siguientes<<10961>>
\begin<<14402>>tex2html_deferred<<14402>>\par\end<<14403>>tex2html_deferred<<14403>>
\begin<<11798>>theorem_type<<11798>>[algorithm][algorithm][section][][][]
Construcción de los conjuntos \begin<<12616>>tex2html_wrap_inline<<12616>>$FIRST(X)$\end<<12617>>tex2html_wrap_inline<<12617>>
\begin<<14404>>tex2html_deferred<<14404>>\par\end<<14405>>tex2html_deferred<<14405>>
Repita el siguiente conjunto de reglas hasta que no se puedan añadir mas símbolos terminales o  a ningún conjunto \begin<<12618>>tex2html_wrap_inline<<12618>>$FIRST(X)$\end<<12619>>tex2html_wrap_inline<<12619>>:
\begin<<10963>>enumerate<<10963>>
\item
\begin<<12620>>tex2html_wrap_inline<<12620>>$Si\ X \in \Sigma\ entonces\ FIRST(X) = <<10964>>X<<10964>>$\end<<12621>>tex2html_wrap_inline<<12621>>
\item
\begin<<12622>>tex2html_wrap_inline<<12622>>$Si\ X \rightarrow \epsilon\ entonces\ FIRST(X) =  FIRST(X) \cup \{ \epsilon \}$\end<<12623>>tex2html_wrap_inline<<12623>>
\item
\begin<<12624>>tex2html_wrap_inline<<12624>>$Si X \in V \ y\ X \rightarrow Y_1 Y_2 \cdots Y_k \in P\ entonces$\end<<12625>>tex2html_wrap_inline<<12625>>
\begin<<10965>>eqnarray<<10965>>
;SPMamp;;SPMamp;i = 1; \nonumber\\ 
;SPMamp;;SPMamp;hacer \nonumber\\ 
;SPMamp;;SPMamp;\ \ FIRST(X) = FIRST(X) \cup FIRST^*(Y_i); \nonumber\\ 
;SPMamp;;SPMamp;\ \ i++; \nonumber\\ 
;SPMamp;;SPMamp;mientras\ (i \leq k\ y\ \epsilon \in FIRST(Y_i)) \nonumber 
\end<<10966>>eqnarray<<10966>>
\item
Añadir \begin<<12626>>tex2html_wrap_inline<<12626>>$\epsilon$\end<<12627>>tex2html_wrap_inline<<12627>>\space a \begin<<12628>>tex2html_wrap_inline<<12628>>$FIRST(X)$\end<<12629>>tex2html_wrap_inline<<12629>>\space si \begin<<12630>>tex2html_wrap_inline<<12630>>$i \geq k$\end<<12631>>tex2html_wrap_inline<<12631>>\space y \begin<<12632>>tex2html_wrap_inline<<12632>>$\epsilon \in FIRST(Y_k)$\end<<12633>>tex2html_wrap_inline<<12633>>
\end<<10967>>enumerate<<10967>>\end<<11799>>theorem_type<<11799>>
Aqui \begin<<12634>>tex2html_wrap_inline<<12634>>$FIRST^*(Y)$\end<<12635>>tex2html_wrap_inline<<12635>>\space denota al conjunto \begin<<12636>>tex2html_wrap_inline<<12636>>$FIRST(Y) - \{ \epsilon \}$\end<<12637>>tex2html_wrap_inline<<12637>>.
\begin<<14406>>tex2html_deferred<<14406>>\par\end<<14407>>tex2html_deferred<<14407>>
Este algoritmo puede ser extendido para calcular 
\begin<<12638>>tex2html_wrap_inline<<12638>>$FIRST(\alpha)$\end<<12639>>tex2html_wrap_inline<<12639>>\space para \begin<<12640>>tex2html_wrap_inline<<12640>>$\alpha = X_1 X_2 \cdots X_n \in (V \cup \Sigma)^*$\end<<12641>>tex2html_wrap_inline<<12641>>.
El esquema es anólogo al de un símbolo individual.
\begin<<14408>>tex2html_deferred<<14408>>\par\end<<14409>>tex2html_deferred<<14409>>
\begin<<11800>>theorem_type<<11800>>[algorithm][algorithm][section][][][]
Construcción del conjunto \begin<<12642>>tex2html_wrap_inline<<12642>>$FIRST(\alpha)$\end<<12643>>tex2html_wrap_inline<<12643>> 
\begin<<14410>>tex2html_deferred<<14410>>\par\end<<14411>>tex2html_deferred<<14411>>
Repita siguiente conjunto de reglas hasta que no se puedan añadir mas
símbolos terminales o  a ningún conjunto \begin<<12644>>tex2html_wrap_inline<<12644>>$FIRST(\alpha)$\end<<12645>>tex2html_wrap_inline<<12645>>:
\begin<<10970>>eqnarray<<10970>>
;SPMamp;;SPMamp;i = 1; \nonumber\\ 
;SPMamp;;SPMamp;FIRST(\alpha) = \emptyset; \nonumber\\ 
;SPMamp;;SPMamp;hacer \nonumber\\ 
;SPMamp;;SPMamp;\ \ FIRST(\alpha) = FIRST(\alpha) \cup FIRST^*(X_i); \nonumber\\ 
;SPMamp;;SPMamp;\ \ i++; \nonumber\\ 
;SPMamp;;SPMamp;mientras\ (i \leq n\ y\ \epsilon \in FIRST(X_i)) \nonumber 
\end<<10971>>eqnarray<<10971>>\end<<11801>>theorem_type<<11801>>
\begin<<14412>>tex2html_deferred<<14412>>\par\end<<14413>>tex2html_deferred<<14413>>
\begin<<11802>>theorem_type<<11802>>[algorithm][algorithm][section][][][]
Construcción de los conjuntos \begin<<12646>>tex2html_wrap_inline<<12646>>$FOLLOW(A)\ \forall A \in V$\end<<12647>>tex2html_wrap_inline<<12647>>: 
\begin<<14414>>tex2html_deferred<<14414>>\par\end<<14415>>tex2html_deferred<<14415>>
Repetir los siguientes pasos hasta que ninguno de los conjuntos \begin<<12648>>tex2html_wrap_inline<<12648>>$FOLLOW$\end<<12649>>tex2html_wrap_inline<<12649>>\space cambie:
\begin<<10974>>enumerate<<10974>> 
\item 
\begin<<12650>>tex2html_wrap_inline<<12650>>$FOLLOW(S) = \{\$\} $\end<<12651>>tex2html_wrap_inline<<12651>>\space  (\begin<<12652>>tex2html_wrap_inline<<12652>>$\$$\end<<12653>>tex2html_wrap_inline<<12653>>\space representa el final de la entrada)
\item
\begin<<12654>>tex2html_wrap_inline<<12654>>$Si\ A \rightarrow \alpha B \beta\ entonces$\end<<12655>>tex2html_wrap_inline<<12655>>
\begin<<12264>>displaymath<<12264>> FOLLOW(B) =  FOLLOW(B) \cup (FIRST(\beta) - \{\epsilon\})\end<<12266>>displaymath<<12266>>
\item
\begin<<12656>>tex2html_wrap_inline<<12656>>$Si\ A \rightarrow \alpha B\ o\ A \rightarrow \alpha B \beta\ y\ \epsilon \in FIRST(\beta)\  entonces$\end<<12657>>tex2html_wrap_inline<<12657>>
\begin<<12265>>displaymath<<12265>> FOLLOW(B) = FOLLOW(B) \cup FOLLOW(A)\end<<12267>>displaymath<<12267>>
\end<<10975>>enumerate<<10975>>\end<<11803>>theorem_type<<11803>>
\begin<<14416>>tex2html_deferred<<14416>>\par\end<<14417>>tex2html_deferred<<14417>>
\subsection<<12130>>Ejercicio: Construir los \begin<<12658>>tex2html_wrap_inline<<12658>>$FIRST$\end<<12659>>tex2html_wrap_inline<<12659>><<12130>>
   \index<<12131>>Ejercicio!Construir los \begin<<12660>>tex2html_wrap_inline<<12660>>$FIRST$\end<<12661>>tex2html_wrap_inline<<12661>><<12131>>
  
Construya los conjuntos \begin<<12662>>tex2html_wrap_inline<<12662>>$FIRST$\end<<12663>>tex2html_wrap_inline<<12663>>\space de las partes derechas de las reglas de 
producción de la gramática presentada en el ejercicio \ref<<10978>>ejercicio:tutugrammar<<10978>>.
\begin<<14418>>tex2html_deferred<<14418>>\par\end<<14419>>tex2html_deferred<<14419>>
\subsection<<12132>>Ejercicio: Calcular los \begin<<12664>>tex2html_wrap_inline<<12664>>$FOLLOW$\end<<12665>>tex2html_wrap_inline<<12665>><<12132>>
   \index<<12133>>Ejercicio!Calcular los \begin<<12666>>tex2html_wrap_inline<<12666>>$FOLLOW$\end<<12667>>tex2html_wrap_inline<<12667>><<12133>>
  
Modificamos la gramática de la sección 
\ref<<10980>>subsection:introduccion<<10980>>
para que admita la sentencia vacía:
\begin<<14420>>tex2html_deferred<<14420>>\par\end<<14421>>tex2html_deferred<<14421>>
\vspace<<10981>>0.25cm<<10981>>
\begin<<10982>>tabular<<10982>><<10983>>l<<10983>>
statements   \begin<<12668>>tex2html_wrap_inline<<12668>>$\rightarrow$\end<<12669>>tex2html_wrap_inline<<12669>>\space statement  ';'  statements        \begin<<12670>>tex2html_wrap_inline<<12670>>$|$\end<<12671>>tex2html_wrap_inline<<12671>>\space statement\\ 
statement    \begin<<12672>>tex2html_wrap_inline<<12672>>$\rightarrow$\end<<12673>>tex2html_wrap_inline<<12673>>\space ID '=' expression                 \begin<<12674>>tex2html_wrap_inline<<12674>>$|$\end<<12675>>tex2html_wrap_inline<<12675>>\space P  expression \begin<<12676>>tex2html_wrap_inline<<12676>>$|\ \epsilon$\end<<12677>>tex2html_wrap_inline<<12677>>\\ 
expression   \begin<<12678>>tex2html_wrap_inline<<12678>>$\rightarrow$\end<<12679>>tex2html_wrap_inline<<12679>>\space term '+' expression               \begin<<12680>>tex2html_wrap_inline<<12680>>$|$\end<<12681>>tex2html_wrap_inline<<12681>>\space term\\ 
term         \begin<<12682>>tex2html_wrap_inline<<12682>>$\rightarrow$\end<<12683>>tex2html_wrap_inline<<12683>>\space factor '*' term                   \begin<<12684>>tex2html_wrap_inline<<12684>>$|$\end<<12685>>tex2html_wrap_inline<<12685>>\space factor\\ 
factor       \begin<<12686>>tex2html_wrap_inline<<12686>>$\rightarrow$\end<<12687>>tex2html_wrap_inline<<12687>>\space '(' expression ')' \begin<<12688>>tex2html_wrap_inline<<12688>>$|$\end<<12689>>tex2html_wrap_inline<<12689>>\space ID \begin<<12690>>tex2html_wrap_inline<<12690>>$|$\end<<12691>>tex2html_wrap_inline<<12691>>\space NUM
\end<<10984>>tabular<<10984>>
\vspace<<10985>>0.25cm<<10985>>
\begin<<14422>>tex2html_deferred<<14422>>\par\end<<14423>>tex2html_deferred<<14423>>
Calcule los conjuntos \begin<<12692>>tex2html_wrap_inline<<12692>>$FOLLOW$\end<<12693>>tex2html_wrap_inline<<12693>>. ¿Es la nueva gramática susceptible
de ser analizada por un analizador predictivo descendente recursivo?
¿Cómo sería el código para la subrutina <tex2html_verb_mark>1751<tex2html_verb_mark>?. Escríbalo.
\begin<<14424>>tex2html_deferred<<14424>>\par\end<<14425>>tex2html_deferred<<14425>>
\subsection<<12134>>Práctica: Construcción de los FIRST y los FOLLOW<<12134>>
   \index<<12135>>Práctica!Construcción de los FIRST y los FOLLOW<<12135>>
  
\label<<10987>>practica:firstandfollow<<10987>>
He escrito un módulo llamado 
\htmladdnormallink<<10988>>Grammar<<10988>><<10989>>Grammar-0.02.tar.gz<<10989>> 
que provee la función
<tex2html_verb_mark>1752<tex2html_verb_mark> la cual recibe una cadena conteniendo la
gramática en formato <tex2html_verb_mark>1753<tex2html_verb_mark> o <tex2html_verb_mark>1754<tex2html_verb_mark> y devuelve una referencia a un
hash conteniendo la información pertinente para el tratamiento de 
la gramática. 
Para instalar el módulo tenga en cuenta que depende del módulo <tex2html_verb_mark>1755<tex2html_verb_mark>.
\begin<<14426>>tex2html_deferred<<14426>>\par\end<<14427>>tex2html_deferred<<14427>>
Para ilustrar el uso vea los ejemplos en el directorio <tex2html_verb_mark>1756<tex2html_verb_mark>.
En concreto veamos el programa <tex2html_verb_mark>1757<tex2html_verb_mark>.
\begin<<10990>>tex2html_preform<<10990>><tex2html_verbatim_mark>verbatim5562#\end<<10991>>tex2html_preform<<10991>>
Vamos a darle como entrada la gramática en el fichero <tex2html_verb_mark>1758<tex2html_verb_mark>
conteniendo una gramática:
\begin<<10992>>tex2html_preform<<10992>><tex2html_verbatim_mark>verbatim5563#\end<<10993>>tex2html_preform<<10993>>
\begin<<14428>>tex2html_deferred<<14428>>\par\end<<14429>>tex2html_deferred<<14429>>
Las gramáticas aceptadas por <tex2html_verb_mark>1759<tex2html_verb_mark> se adaptan a la sintáxis de
las gramáticas reconocidas por <tex2html_verb_mark>1760<tex2html_verb_mark>.
Una gramática (normalmente con tipo  <tex2html_verb_mark>1761<tex2html_verb_mark>) consta de tres partes: la cabeza, el cuerpo
y la cola. Cada una de las partes va separada de las otras por el
símbolo <tex2html_verb_mark>1763<tex2html_verb_mark> en una línea aparte. Así, el <tex2html_verb_mark>1764<tex2html_verb_mark> de la línea 1
separa la cabeza del cuerpo. En la cabecera se colocan 
las declaraciones de terminales (directiva <tex2html_verb_mark>1766<tex2html_verb_mark>), 
cual es el símbolo de arranque (directiva <tex2html_verb_mark>1768<tex2html_verb_mark>), etc.
El cuerpo contiene las reglas de la gramática y
las acciones asociadas. Por último, la cola  en nuestro caso no es
usada y es vacía. En general, la cola 
contiene las rutinas de soporte al código que aparece en las acciones 
asi como, posiblemente, rutinas para el análisis léxico 
y el tratamiento de errores. 
\begin<<14430>>tex2html_deferred<<14430>>\par\end<<14431>>tex2html_deferred<<14431>>
La salida de <tex2html_verb_mark>1769<tex2html_verb_mark> es una referencia a un hash cuyas entradas
vienen explicadas por los comentarios.
\begin<<10994>>tex2html_preform<<10994>><tex2html_verbatim_mark>verbatim5564#\end<<10995>>tex2html_preform<<10995>>
Usando la estructura devuelta por la función <tex2html_verb_mark>1770<tex2html_verb_mark> escriba un módulo
que provea funciones para computar los <tex2html_verb_mark>1771<tex2html_verb_mark> y los <tex2html_verb_mark>1772<tex2html_verb_mark> de las variables
sintácticas de la gramática. No olvide escribir la documentación. 
Incluya una prueba por cada una de las gramáticas que figuran en el directorio <tex2html_verb_mark>1773<tex2html_verb_mark>
del módulo <tex2html_verb_mark>1774<tex2html_verb_mark>.
\begin<<14432>>tex2html_deferred<<14432>>\par\end<<14433>>tex2html_deferred<<14433>>
Puede encontrar la práctica \emph<<10996>>casi hecha<<10996>> en
\htmladdnormallink<<10997>>PL::FirstFollow<<10997>><<10998>>PL-FirstFollow-0.02.tar.gz<<10998>>.
Asegúrese de entender el algoritmo usado.
Aumente el número de pruebas y haga un análisis de cubrimiento.
\begin<<14434>>tex2html_deferred<<14434>>\par\end<<14435>>tex2html_deferred<<14435>>
\subsection<<10999>>Gramáticas LL(1)<<10999>>
Una gramática \begin<<12694>>tex2html_wrap_inline<<12694>>$G = (\Sigma, V, P, S)$\end<<12695>>tex2html_wrap_inline<<12695>>\space cuyo lenguaje generado 
\begin<<12696>>tex2html_wrap_inline<<12696>>$L(G)$\end<<12697>>tex2html_wrap_inline<<12697>>\space puede ser analizado por un 
analizador sintáctico descendente recursivo predictivo
se denomina \index<<12136>>LL(1)<<12136>>\emph<<12137>>LL(1)<<12137>>. Una gramática es LL(1) si y sólo si 
para cualesquiera dos
producciones \begin<<12698>>tex2html_wrap_inline<<12698>>$A \rightarrow \alpha$\end<<12699>>tex2html_wrap_inline<<12699>>\space y \begin<<12700>>tex2html_wrap_inline<<12700>>$A \rightarrow \beta$\end<<12701>>tex2html_wrap_inline<<12701>>\space de
\begin<<12702>>tex2html_wrap_inline<<12702>>$G$\end<<12703>>tex2html_wrap_inline<<12703>>\space se cumple:
\begin<<11001>>enumerate<<11001>>
\item
\begin<<12704>>tex2html_wrap_inline<<12704>>$FIRST(\alpha) \cap FIRST(\beta) = \emptyset$\end<<12705>>tex2html_wrap_inline<<12705>>
\item
Si \begin<<12706>>tex2html_wrap_inline<<12706>>$\epsilon \in FIRST(\alpha)$\end<<12707>>tex2html_wrap_inline<<12707>>, entonces \begin<<12708>>tex2html_wrap_inline<<12708>>$FIRST(\alpha) \cap FOLLOW(A) = \emptyset$\end<<12709>>tex2html_wrap_inline<<12709>>
\end<<11002>>enumerate<<11002>>
\begin<<14436>>tex2html_deferred<<14436>>\par\end<<14437>>tex2html_deferred<<14437>>
¿De donde viene el nombre LL(1)? La primera L hace alusión al hecho de que 
el flujo de terminales se lee de izquierda a derecha, accediendo a la entrada
por su izquierda (\emph<<11003>>Left<<11003>>). La segunda L se refiere a que el método
de análisis predictivo construye una derivación a izquierdas. El número
entre paréntesis indica el número de terminales que debemos consultar para
decidir que regla de producción se aplica. Asi, en una gramática LL(2) la decisión 
final de que producción elegir se hace consultando los dos terminales a la entrada.
\begin<<14438>>tex2html_deferred<<14438>>\par\end<<14439>>tex2html_deferred<<14439>>
\subsection<<12138>>Ejercicio: Caracterización de una gramática LL(1) <<12138>>
   \index<<12139>>Ejercicio!Caracterización de una gramática LL(1) <<12139>>
  
Cuando se dice que una gramática es LL(1) si, y sólo si:
\begin<<11005>>enumerate<<11005>>
\item
\begin<<12710>>tex2html_wrap_inline<<12710>>$FIRST(\alpha) \cap FIRST(\beta) = \emptyset$\end<<12711>>tex2html_wrap_inline<<12711>>
\item
Si \begin<<12712>>tex2html_wrap_inline<<12712>>$\epsilon \in FIRST(\alpha)$\end<<12713>>tex2html_wrap_inline<<12713>>, entonces \begin<<12714>>tex2html_wrap_inline<<12714>>$FIRST(\alpha) \cap FOLLOW(A) = \emptyset$\end<<12715>>tex2html_wrap_inline<<12715>>
\end<<11006>>enumerate<<11006>>
se asume que los conjuntos \begin<<12716>>tex2html_wrap_inline<<12716>>$FIRST(\alpha)$\end<<12717>>tex2html_wrap_inline<<12717>>\space no son vacíos.
\begin<<11007>>itemize<<11007>>
\item
¿Que se puede decir de la regla  \begin<<12718>>tex2html_wrap_inline<<12718>>$A \rightarrow \alpha$\end<<12719>>tex2html_wrap_inline<<12719>>\space si
\begin<<12720>>tex2html_wrap_inline<<12720>>$FIRST(\alpha) = \emptyset$\end<<12721>>tex2html_wrap_inline<<12721>>?
\item
¿Que se puede decir de la variable \begin<<12722>>tex2html_wrap_inline<<12722>>$A$\end<<12723>>tex2html_wrap_inline<<12723>>\space si \begin<<12724>>tex2html_wrap_inline<<12724>>$FOLLOW(A) = \emptyset$\end<<12725>>tex2html_wrap_inline<<12725>>?
\end<<11008>>itemize<<11008>>
\begin<<14440>>tex2html_deferred<<14440>>\par\end<<14441>>tex2html_deferred<<14441>>
\subsection<<12140>>Ejercicio: Ambiguedad y LL(1)<<12140>>
   \index<<12141>>Ejercicio!Ambiguedad y LL(1)<<12141>>
  
¿Puede una gramática LL(1) ser ambigua?.
Razone su respuesta.
\begin<<14442>>tex2html_deferred<<14442>>\par\end<<14443>>tex2html_deferred<<14443>>
\subsection<<12142>>Práctica: Un analizador APDR<<12142>>
   \index<<12143>>Práctica!Un analizador APDR<<12143>>
  
\label<<11011>>practica:APDR<<11011>>
\begin<<14444>>tex2html_deferred<<14444>>\par\end<<14445>>tex2html_deferred<<14445>>
Siguiendo con la construcción del compilador para el lenguaje Tutu, escriba un 
analizador APDR para la siguiente gramática. Reutilice el código de las
prácticas de las secciones anteriores 
(\ref<<11012>>section:analisislexico<<11012>>
y
\ref<<11013>>section:lexicomodular<<11013>>).
\begin<<14446>>tex2html_deferred<<14446>>\par\end<<14447>>tex2html_deferred<<14447>>
\vspace<<11014>>0.5cm<<11014>>
\begin<<11015>>tabular<<11015>><<11016>>l<<11016>>
program      \begin<<12726>>tex2html_wrap_inline<<12726>>$\rightarrow$\end<<12727>>tex2html_wrap_inline<<12727>>\space  declarations  statements         \begin<<12728>>tex2html_wrap_inline<<12728>>$|$\end<<12729>>tex2html_wrap_inline<<12729>>\space statements\\ 
declarations \begin<<12730>>tex2html_wrap_inline<<12730>>$\rightarrow$\end<<12731>>tex2html_wrap_inline<<12731>>\space declaration  ';'  declarations    \begin<<12732>>tex2html_wrap_inline<<12732>>$|$\end<<12733>>tex2html_wrap_inline<<12733>>\space declaration ';'\\ 
declaration  \begin<<12734>>tex2html_wrap_inline<<12734>>$\rightarrow$\end<<12735>>tex2html_wrap_inline<<12735>>\space INT  idlist                       \begin<<12736>>tex2html_wrap_inline<<12736>>$|$\end<<12737>>tex2html_wrap_inline<<12737>>\space STRING   idlist\\ 
statements   \begin<<12738>>tex2html_wrap_inline<<12738>>$\rightarrow$\end<<12739>>tex2html_wrap_inline<<12739>>\space statement  ';'  statements        \begin<<12740>>tex2html_wrap_inline<<12740>>$|$\end<<12741>>tex2html_wrap_inline<<12741>>\space statement\\ 
statement    \begin<<12742>>tex2html_wrap_inline<<12742>>$\rightarrow$\end<<12743>>tex2html_wrap_inline<<12743>>\space ID '=' expression                 \begin<<12744>>tex2html_wrap_inline<<12744>>$|$\end<<12745>>tex2html_wrap_inline<<12745>>\space P  expression \begin<<12746>>tex2html_wrap_inline<<12746>>$|\ \epsilon$\end<<12747>>tex2html_wrap_inline<<12747>>\\ 
expression   \begin<<12748>>tex2html_wrap_inline<<12748>>$\rightarrow$\end<<12749>>tex2html_wrap_inline<<12749>>\space term '+' expression               \begin<<12750>>tex2html_wrap_inline<<12750>>$|$\end<<12751>>tex2html_wrap_inline<<12751>>\space term\\ 
term         \begin<<12752>>tex2html_wrap_inline<<12752>>$\rightarrow$\end<<12753>>tex2html_wrap_inline<<12753>>\space factor '*' term                   \begin<<12754>>tex2html_wrap_inline<<12754>>$|$\end<<12755>>tex2html_wrap_inline<<12755>>\space factor\\ 
factor       \begin<<12756>>tex2html_wrap_inline<<12756>>$\rightarrow$\end<<12757>>tex2html_wrap_inline<<12757>>\space '(' expression ')' \begin<<12758>>tex2html_wrap_inline<<12758>>$|$\end<<12759>>tex2html_wrap_inline<<12759>>\space ID \begin<<12760>>tex2html_wrap_inline<<12760>>$|$\end<<12761>>tex2html_wrap_inline<<12761>>\space NUM \begin<<12762>>tex2html_wrap_inline<<12762>>$|$\end<<12763>>tex2html_wrap_inline<<12763>>\space STR\\ 
idlist       \begin<<12764>>tex2html_wrap_inline<<12764>>$\rightarrow$\end<<12765>>tex2html_wrap_inline<<12765>>\space ID ',' idlist \begin<<12766>>tex2html_wrap_inline<<12766>>$|$\end<<12767>>tex2html_wrap_inline<<12767>>\space ID
\end<<11017>>tabular<<11017>>
\vspace<<11018>>0.25cm<<11018>>
\begin<<14448>>tex2html_deferred<<14448>>\par\end<<14449>>tex2html_deferred<<14449>>
\subsection<<12144>>Práctica: Generación Automática de Analizadores Predictivos<<12144>>
   \index<<12145>>Práctica!Generación Automática de Analizadores Predictivos<<12145>>
  
\label<<11020>>practica:GAP<<11020>>
\begin<<14450>>tex2html_deferred<<14450>>\par\end<<14451>>tex2html_deferred<<14451>>
\paragraph<<11021>>Objetivo<<11021>>
Escriba un módulo <tex2html_verb_mark>1775<tex2html_verb_mark> que provea una subrutina <tex2html_verb_mark>1776<tex2html_verb_mark> para
la generación automática de un APDR supuesto que la gramática de entrada es 
LL(1). 
\begin<<14452>>tex2html_deferred<<14452>>\par\end<<14453>>tex2html_deferred<<14453>>
La subrutina <tex2html_verb_mark>1777<tex2html_verb_mark> recibe como entrada la gramática según la estructura de
datos generada  por la función <tex2html_verb_mark>1778<tex2html_verb_mark> de la versión 0.3 del módulo
\htmladdnormallink<<11022>>Grammar<<11022>><<11023>>Grammar-0.03.tar.gz<<11023>>. 
\begin<<14454>>tex2html_deferred<<14454>>\par\end<<14455>>tex2html_deferred<<14455>>
\paragraph<<11766>>El Módulo <<11024>>\begin<<14456>>tex2html_deferred<<14456>>\tt\end<<14457>>tex2html_deferred<<14457>>Grammar<<11024>><<11766>>
\begin<<14458>>tex2html_deferred<<14458>>\par\end<<14459>>tex2html_deferred<<14459>>
La estructura de datos generada  por la función <tex2html_verb_mark>1779<tex2html_verb_mark>
se explicó en la práctica  
\ref<<11025>>practica:firstandfollow<<11025>>.
La estructura ha sido extendida
en esta versión para incluir el código que se sitúe en la zona de cola.
Por ejemplo, dada la gramática de entrada:
\begin<<14460>>tex2html_deferred<<14460>>\par\end<<14461>>tex2html_deferred<<14461>>
\begin<<11026>>tex2html_preform<<11026>><tex2html_verbatim_mark>verbatim5565#\end<<11027>>tex2html_preform<<11027>>
se genera la siguiente estructura de datos:
\begin<<11028>>tex2html_preform<<11028>><tex2html_verbatim_mark>verbatim5566#\end<<11029>>tex2html_preform<<11029>>
\begin<<14462>>tex2html_deferred<<14462>>\par\end<<14463>>tex2html_deferred<<14463>>
Asi pues la entrada con clave <tex2html_verb_mark>1780<tex2html_verb_mark> contiene el código auxiliar de
cola. Este código debe ser incluido por su programa dentro del texto del
paquete generado por <tex2html_verb_mark>1781<tex2html_verb_mark>.
\begin<<14464>>tex2html_deferred<<14464>>\par\end<<14465>>tex2html_deferred<<14465>>
\paragraph<<11767>>Descripción del objetivo: La función <<11030>>\begin<<14466>>tex2html_deferred<<14466>>\tt\end<<14467>>tex2html_deferred<<14467>>gap<<11030>><<11767>>
\begin<<14468>>tex2html_deferred<<14468>>\par\end<<14469>>tex2html_deferred<<14469>>
La función <tex2html_verb_mark>1782<tex2html_verb_mark> también recibe como entrada el nombre 
del package:
\begin<<11031>>tex2html_preform<<11031>><tex2html_verbatim_mark>verbatim5567#\end<<11032>>tex2html_preform<<11032>>
La función <tex2html_verb_mark>1783<tex2html_verb_mark> retorna
una cadena conteniendo el <tex2html_verb_mark>1784<tex2html_verb_mark> en el que estan las subrutinas del
analizador sintáctico. 
\begin<<14470>>tex2html_deferred<<14470>>\par\end<<14471>>tex2html_deferred<<14471>>
La idea es que dicha cadena se salvará en un fichero
con nombre <tex2html_verb_mark>1785<tex2html_verb_mark> que podrá posteriormente ser usado 
(<tex2html_verb_mark>1786<tex2html_verb_mark>) por un programa que necesite analizar entradas
que se conforman de acuerdo a la especificación de la gramática.
\begin<<14472>>tex2html_deferred<<14472>>\par\end<<14473>>tex2html_deferred<<14473>>
\paragraph<<11768>>Descripción del objetivo: La función <<11033>>\begin<<14474>>tex2html_deferred<<14474>>\tt\end<<14475>>tex2html_deferred<<14475>>parser<<11033>><<11768>>
La rutina principal del paquete generado se ha de llamar
<tex2html_verb_mark>1787<tex2html_verb_mark> (esto es, su nombre completo es: <tex2html_verb_mark>1788<tex2html_verb_mark>. 
Evidentemente <tex2html_verb_mark>1789<tex2html_verb_mark> debe ser un nombre Perl válido).
Ninguna subrutina deberá ser exportada sino que deberán ser llamadas
por su nombre completo.
\begin<<14476>>tex2html_deferred<<14476>>\par\end<<14477>>tex2html_deferred<<14477>>
La subrutina <tex2html_verb_mark>1790<tex2html_verb_mark> recibe como argumento el array de 
terminales, obtiene el primer terminal y llama a la subrutina
asociada con el símbolo de arranque. Los terminales están representados
como parejas \begin<<12768>>tex2html_wrap_inline<<12768>>$(terminal, atributo)$\end<<12769>>tex2html_wrap_inline<<12769>>.
\begin<<14478>>tex2html_deferred<<14478>>\par\end<<14479>>tex2html_deferred<<14479>>
Observe que, una vez que la cadena <tex2html_verb_mark>1791<tex2html_verb_mark> conteniendo el paquete ha sido 
generada y salvada en un fichero con nombre <tex2html_verb_mark>1792<tex2html_verb_mark>, podemos escribir
un programa cliente:
\begin<<14480>>tex2html_deferred<<14480>>\par\end<<14481>>tex2html_deferred<<14481>>
\begin<<11034>>tex2html_preform<<11034>><tex2html_verbatim_mark>verbatim5568#\end<<11035>>tex2html_preform<<11035>>
\begin<<14482>>tex2html_deferred<<14482>>\par\end<<14483>>tex2html_deferred<<14483>>
Este programa espera una entrada desde fichero o <tex2html_verb_mark>1793<tex2html_verb_mark> e
informa si dicha entrada es sintácticamente correcta o no
para la gramática en cuestión.
\begin<<14484>>tex2html_deferred<<14484>>\par\end<<14485>>tex2html_deferred<<14485>>
\paragraph<<11769>>Cálculo de los First y los Follow con <<11036>>\begin<<14486>>tex2html_deferred<<14486>>\tt\end<<14487>>tex2html_deferred<<14487>>PL::FirstFollow<<11036>><<11769>>
\begin<<14488>>tex2html_deferred<<14488>>\par\end<<14489>>tex2html_deferred<<14489>>
Para facilitar la escritura de <tex2html_verb_mark>1794<tex2html_verb_mark> pueden hacer uso 
del módulo \htmladdnormallink<<11037>>PL::FirstFollow<<11037>><<11038>>PL-FirstFollow-0.02.tar.gz<<11038>>
el cual calcula los \begin<<12770>>tex2html_wrap_inline<<12770>>$FIRST$\end<<12771>>tex2html_wrap_inline<<12771>>\space y los \begin<<12772>>tex2html_wrap_inline<<12772>>$FOLLOW$\end<<12773>>tex2html_wrap_inline<<12773>>. El módulo  <<12146>>\begin<<14490>>tex2html_deferred<<14490>>\tt\end<<14491>>tex2html_deferred<<14491>>PL::FirstFollow<<12146>> 
depende de 
\htmladdnormallink<<11040>>Set::Scalar<<11040>><<11041>>http://search.cpan.org/~jhi/Set-Scalar-1.20/lib/Set/Scalar.pm<<11041>>
escrito por 
\htmladdnormallink<<11042>>Jarkko Hietaniemi<<11042>><<11043>>http://search.cpan.org/~jhi/<<11043>>: instálelo primero.
\begin<<14492>>tex2html_deferred<<14492>>\par\end<<14493>>tex2html_deferred<<14493>>
Deberá familiarizarse con <<11044>>\begin<<14494>>tex2html_deferred<<14494>>\tt\end<<14495>>tex2html_deferred<<14495>>PL::FirstFollow<<11044>>, rellenar la
documentación de todas las subrutinas (apariciones de <tex2html_verb_mark>1795<tex2html_verb_mark> en el texto)
y escribir la documentación siguiendo el template que se provee. 
\emph<<11045>>Rellene los fragmentos de código que se han sustituido por 
signos de interrogación<<11045>>.
Haga un estudio de cubrimiento
y añada pruebas para mejorar el actual. El actual cubrimiento es:
\begin<<11046>>tex2html_preform<<11046>><tex2html_verbatim_mark>verbatim5569#\end<<11047>>tex2html_preform<<11047>>
Si observa un fallo en  <<12147>>\begin<<14496>>tex2html_deferred<<14496>>\tt\end<<14497>>tex2html_deferred<<14497>>PL::FirstFollow<<12147>>  háganoslo saber y
además de resolverlo escriba una prueba para detectar el fallo.
\begin<<14498>>tex2html_deferred<<14498>>\par\end<<14499>>tex2html_deferred<<14499>>
Haga un estudio de profiling de su aplicación.
\paragraph<<11049>>Uso de Templates<<11049>>
\begin<<14500>>tex2html_deferred<<14500>>\par\end<<14501>>tex2html_deferred<<14501>>
Un módulo que puede facilitar la escritura de esta práctica 
es 
\htmladdnormallink<<11050>>Text::Template<<11050>><<11051>>http://search.cpan.org/~mjd/Text-Template-1.44/lib/Text/Template.pm<<11051>>
debido a 
\htmladdnormallink<<11052>>Mark Jason Dominus<<11052>><<11053>>http://search.cpan.org/~mjd/<<11053>>.
El siguiente ejemplo de uso es un fragmento de  un traductor - que nunca acabo de terminar
- que toma con fuente 
un fichero en el formato que usa Moodle para los cuestionarios (conocido como 
formato GIFT) y lo convierte en un cuestionario \begin<<14502>>tex2html_deferred<<14502>>\LaTeX\end<<14503>>tex2html_deferred<<14503>><<11054>><<11054>>:
\begin<<14504>>tex2html_deferred<<14504>>\par\end<<14505>>tex2html_deferred<<14505>>
\begin<<11055>>tex2html_preform<<11055>><tex2html_verbatim_mark>verbatim5570#\end<<11056>>tex2html_preform<<11056>>
En la línea 55 se crea el template. El template se lee desde el fichero
<tex2html_verb_mark>1796<tex2html_verb_mark> cuyo contenido es una mezcla
de texto (en este caso texto \begin<<14506>>tex2html_deferred<<14506>>\LaTeX\end<<14507>>tex2html_deferred<<14507>><<11057>><<11057>> y HTML) con código Perl:
El código Perl aparece acotado entre los delimitadores <tex2html_verb_mark>1798<tex2html_verb_mark>
y <tex2html_verb_mark>1800<tex2html_verb_mark>.
\begin<<14508>>tex2html_deferred<<14508>>\par\end<<14509>>tex2html_deferred<<14509>>
\begin<<11058>>tex2html_preform<<11058>><tex2html_verbatim_mark>verbatim5571#\end<<11059>>tex2html_preform<<11059>>
\begin<<14510>>tex2html_deferred<<14510>>\par\end<<14511>>tex2html_deferred<<14511>>
El template se rellena en las líneas 87-94. En esa llamada
se ejecuta el código Perl incrustado en el esqueleto
y su resultado se inserta en la posición que ocupa en el texto.
\begin<<14512>>tex2html_deferred<<14512>>\par\end<<14513>>tex2html_deferred<<14513>>
\paragraph<<11770>>Concatenación y Documentos <<11060>>\begin<<14514>>tex2html_deferred<<14514>>\tt\end<<14515>>tex2html_deferred<<14515>>HERE<<11060>><<11770>>
Cuando concatene sangre adecuadamente las concatenaciones:
\begin<<11061>>tex2html_preform<<11061>><tex2html_verbatim_mark>verbatim5572#\end<<11062>>tex2html_preform<<11062>>
ponga el punto al principio de la siguiente línea, no al final.
\begin<<14516>>tex2html_deferred<<14516>>\par\end<<14517>>tex2html_deferred<<14517>>
Pero cuando el número de líneas es grande 
es mejor
usar un \index<<12148>>here document<<12148>>\emph<<12149>>here document<<12149>>
o \index<<12150>>documento aqui<<12150>>\emph<<12151>>documento aqui<<12151>>. Veamos un ejemplo:
\begin<<11065>>tex2html_preform<<11065>><tex2html_verbatim_mark>verbatim5573#\end<<11066>>tex2html_preform<<11066>>
Para definir un ``documento aqui'' 
se escribe la etiqueta entrecomillada y precedida de <tex2html_verb_mark>1801<tex2html_verb_mark> y 
sigue el texto que consituye el \emph<<11067>>here document<<11067>>
que se delimita por una línea en blanco que empieza por la etiqueta.
Al documento aquí se le trata como una cadena de doble comilla si
la etiqueta aparece en doble comilla y como de comilla simple
si la etiqueta esta  entre comillas simples.
Observe que el punto y coma se escribe despues 
de la primera aparición 
de la etiqueta.
\begin<<14518>>tex2html_deferred<<14518>>\par\end<<14519>>tex2html_deferred<<14519>>
Un problema con el uso de los heredoc es que rompen la estructura normal
del sangrado:
\begin<<11068>>tex2html_preform<<11068>><tex2html_verbatim_mark>verbatim5574#\end<<11069>>tex2html_preform<<11069>>
Es mejor que cada heredoc se aisle en una subrutina y se parametrice con
las variables que van a ser interpoladas:
\begin<<11070>>tex2html_preform<<11070>><tex2html_verbatim_mark>verbatim5575#\end<<11071>>tex2html_preform<<11071>>
\begin<<14520>>tex2html_deferred<<14520>>\par\end<<14521>>tex2html_deferred<<14521>>
que mas tarde puede ser llamado con los valores de interpolación adecuados:
\begin<<14522>>tex2html_deferred<<14522>>\par\end<<14523>>tex2html_deferred<<14523>>
\begin<<11072>>tex2html_preform<<11072>><tex2html_verbatim_mark>verbatim5576#\end<<11073>>tex2html_preform<<11073>>
Véase  el libro de Conway  Perl Best Practices
\cite<<11074>>bestpractices<<11074>>
para mas detalles sobre buenas prácticas de programación con heredocs.
\begin<<14524>>tex2html_deferred<<14524>>\par\end<<14525>>tex2html_deferred<<14525>>
\paragraph<<11075>>Descarga de los Módulos Necesarios<<11075>>
\begin<<11076>>itemize<<11076>>
\item
El módulo  <<12152>>\begin<<14526>>tex2html_deferred<<14526>>\tt\end<<14527>>tex2html_deferred<<14527>>Grammar<<12152>> : 
\htmladdnormallink
<<11771>>http://nereida.deioc.ull.es/\~<<11078>><<11078>>pl/perlexamples/Grammar-0.03.tar.gz<<11771>>
<<11079>>http://nereida.deioc.ull.es/~pl/perlexamples/Grammar-0.03.tar.gz<<11079>>
\begin<<14528>>tex2html_deferred<<14528>>\par\end<<14529>>tex2html_deferred<<14529>>
\item
El módulo  <<12153>>\begin<<14530>>tex2html_deferred<<14530>>\tt\end<<14531>>tex2html_deferred<<14531>>PL::FirstFollow<<12153>> :
\htmladdnormallink
<<11772>>http://nereida.deioc.ull.es/\~<<11081>><<11081>>pl/perlexamples/PL-FirstFollow-0.02.tar.gz<<11772>>
<<11082>>http://nereida.deioc.ull.es/~pl/perlexamples/PL-FirstFollow-0.02.tar.gz<<11082>>
\end<<11083>>itemize<<11083>>
\begin<<14532>>tex2html_deferred<<14532>>\par\end<<14533>>tex2html_deferred<<14533>>
\section<<11084>>Esquemas de Traducción<<11084>>
\label<<11085>>section:esquemas<<11085>>
\begin<<11804>>theorem_type<<11804>>[definition][definition][section][][][]
Un \index<<12154>>esquema de traducción<<12154>>\emph<<12155>>esquema de traducción<<12155>> es una gramática independiente del contexto
en la cual se han insertado fragmentos de código en las partes derechas
de sus reglas de producción. Los fragmentos de código asi insertados 
se denominan \index<<12156>>acciones semánticas<<12156>>\emph<<12157>>acciones semánticas<<12157>>. Dichos fragmentos actúan, calculan
y modifican los atributos asociados con los nodos del árbol sintáctico. 
El orden en que se evalúan los fragmentos
es el de un recorrido primero-profundo del árbol de análisis sintáctico.\end<<11805>>theorem_type<<11805>>
Obsérvese que, en general, para poder aplicar un esquema de traducción hay 
que construir el árbol sintáctico y después aplicar las acciones empotradas
en las reglas en el orden de recorrido primero-profundo. Por supuesto, si 
la gramática es ambigua una frase podría tener dos árboles y la ejecución de las
acciones para ellos podría dar lugar a diferentes resultados. Si se quiere
evitar la multiplicidad de resultados (interpretaciones semánticas)
es necesario precisar de que árbol sintáctico concreto se esta hablando.
\begin<<14534>>tex2html_deferred<<14534>>\par\end<<14535>>tex2html_deferred<<14535>>
Por ejemplo, si en la regla \begin<<12774>>tex2html_wrap_inline<<12774>>$A \rightarrow \alpha \beta $\end<<12775>>tex2html_wrap_inline<<12775>>
insertamos un fragmento de código:
\begin<<14536>>tex2html_deferred<<14536>>\par\end<<14537>>tex2html_deferred<<14537>>
\begin<<11090>>center<<11090>>
\begin<<12776>>tex2html_wrap_inline<<12776>>$A \rightarrow \alpha \{ action \} \beta $\end<<12777>>tex2html_wrap_inline<<12777>>
\end<<11091>>center<<11091>>
\begin<<14538>>tex2html_deferred<<14538>>\par\end<<14539>>tex2html_deferred<<14539>>
La acción \begin<<12778>>tex2html_wrap_inline<<12778>>$\{ action \}$\end<<12779>>tex2html_wrap_inline<<12779>>\space se ejecutará después de todas las acciones
asociadas con el recorrido del subárbol de \begin<<12780>>tex2html_wrap_inline<<12780>>$\alpha$\end<<12781>>tex2html_wrap_inline<<12781>>\space y antes que todas
las acciones asociadas con el recorrido del subárbol \begin<<12782>>tex2html_wrap_inline<<12782>>$\beta$\end<<12783>>tex2html_wrap_inline<<12783>>.
\begin<<14540>>tex2html_deferred<<14540>>\par\end<<14541>>tex2html_deferred<<14541>>
El siguiente esquema de traducción recibe como entrada una expresión en infijo
y produce como salida su traducción a postfijo para expresiones aritmeticas con sólo 
restas de números:
\begin<<14542>>tex2html_deferred<<14542>>\par\end<<14543>>tex2html_deferred<<14543>>
\vspace<<11092>>0.5cm<<11092>>
\begin<<11093>>tabular<<11093>><<11094>>ll<<11094>>
\begin<<12784>>tex2html_wrap_inline<<12784>>$expr   \rightarrow expr_1  -  NUM$\end<<12785>>tex2html_wrap_inline<<12785>>\space  ;SPMamp; <tex2html_verb_mark>1802<tex2html_verb_mark> \\ 
\begin<<12786>>tex2html_wrap_inline<<12786>>$expr   \rightarrow NUM$\end<<12787>>tex2html_wrap_inline<<12787>>\space             ;SPMamp; <tex2html_verb_mark>1803<tex2html_verb_mark>
\end<<11095>>tabular<<11095>>
\vspace<<11096>>0.5cm<<11096>>
\begin<<14544>>tex2html_deferred<<14544>>\par\end<<14545>>tex2html_deferred<<14545>>
Las apariciones de variables sintácticas en una regla de producción se indexan
como se ve en el ejemplo, para distinguir de que nodo del árbol de análisis estamos
hablando. Cuando hablemos del atributo de un nodo utilizaremos una indexación tipo
\emph<<11097>>hash<<11097>>. Aquí <tex2html_verb_mark>1804<tex2html_verb_mark> es un atributo de los nodos de tipo \begin<<12788>>tex2html_wrap_inline<<12788>>$NUM$\end<<12789>>tex2html_wrap_inline<<12789>>\space denotando
su valor numérico y para accederlo escribiremos <tex2html_verb_mark>1805<tex2html_verb_mark>.
Análogamente <tex2html_verb_mark>1806<tex2html_verb_mark> denota el atributo ``traducción'' de
los nodos de tipo \begin<<12790>>tex2html_wrap_inline<<12790>>$expr$\end<<12791>>tex2html_wrap_inline<<12791>>.
\begin<<14546>>tex2html_deferred<<14546>>\par\end<<14547>>tex2html_deferred<<14547>>
\begin<<11806>>theorem_type<<11806>>[exercise][exercise][section][][][]
Muestre la secuencia de acciones a la
que da lugar el esquema de traducción anterior 
para la frase 7 -5 -4.\end<<11807>>theorem_type<<11807>>
\begin<<14548>>tex2html_deferred<<14548>>\par\end<<14549>>tex2html_deferred<<14549>>
En este ejemplo, el cómputo del atributo <tex2html_verb_mark>1807<tex2html_verb_mark> depende de los atributos
en los nodos hijos, o lo que es lo mismo, depende de los atributos de los símbolos
en la parte derecha de la regla de producción. Esto ocurre a menudo y motiva la siguiente
definición:
\begin<<14550>>tex2html_deferred<<14550>>\par\end<<14551>>tex2html_deferred<<14551>>
\begin<<11808>>theorem_type<<11808>>[definition][definition][section][][][]
Un atributo tal que su valor en un nodo
puede ser computado en términos de los atributos de los hijos del nodo se dice
que es un \index<<12158>>atributo sintetizado<<12158>>\emph<<12159>>atributo sintetizado<<12159>>.\end<<11809>>theorem_type<<11809>>
\begin<<14552>>tex2html_deferred<<14552>>\par\end<<14553>>tex2html_deferred<<14553>>
\begin<<11810>>theorem_type<<11810>>[example][example][section][][][]
\label<<11104>>example:typesandts<<11104>>
Un ejemplo de atributo heredado es el tipo de las variables en las declaraciones:
\begin<<14554>>tex2html_deferred<<14554>>\par\end<<14555>>tex2html_deferred<<14555>>
\vspace<<11105>>0.5cm<<11105>>
\begin<<11106>>tabular<<11106>><<11107>>ll<<11107>>
\begin<<12792>>tex2html_wrap_inline<<12792>>$decl   \rightarrow type$\end<<12793>>tex2html_wrap_inline<<12793>>\space <tex2html_verb_mark>1808<tex2html_verb_mark> \begin<<12794>>tex2html_wrap_inline<<12794>>$list$\end<<12795>>tex2html_wrap_inline<<12795>>\\ 
\begin<<12796>>tex2html_wrap_inline<<12796>>$type   \rightarrow INT$\end<<12797>>tex2html_wrap_inline<<12797>>\space <tex2html_verb_mark>1809<tex2html_verb_mark>\\ 
\begin<<12798>>tex2html_wrap_inline<<12798>>$type   \rightarrow STRING$\end<<12799>>tex2html_wrap_inline<<12799>>\space <tex2html_verb_mark>1810<tex2html_verb_mark>\\ 
\begin<<12800>>tex2html_wrap_inline<<12800>>$list   \rightarrow ID$\end<<12801>>tex2html_wrap_inline<<12801>>\space , <tex2html_verb_mark>1811<tex2html_verb_mark> \begin<<12802>>tex2html_wrap_inline<<12802>>$list_1$\end<<12803>>tex2html_wrap_inline<<12803>>\\ 
\begin<<12804>>tex2html_wrap_inline<<12804>>$list   \rightarrow ID$\end<<12805>>tex2html_wrap_inline<<12805>>\space <tex2html_verb_mark>1812<tex2html_verb_mark>
\end<<11108>>tabular<<11108>>
\vspace<<11109>>0.5cm<<11109>>\end<<11811>>theorem_type<<11811>>
\begin<<14556>>tex2html_deferred<<14556>>\par\end<<14557>>tex2html_deferred<<14557>>
\begin<<11812>>theorem_type<<11812>>[definition][definition][section][][][]
Un \index<<12160>>atributo heredado<<12160>>\emph<<12161>>atributo heredado<<12161>> es aquel cuyo valor se computa a partir de los
valores de sus hermanos y de su padre.\end<<11813>>theorem_type<<11813>>
\begin<<14558>>tex2html_deferred<<14558>>\par\end<<14559>>tex2html_deferred<<14559>>
\begin<<11814>>theorem_type<<11814>>[exercise][exercise][section][][][]
Escriba un esquema de traducción que convierta expresiones en infijo con los 
operadores <tex2html_verb_mark>1813<tex2html_verb_mark> y números en expresiones en postfijo. Explique el significado
de los atributos elegidos.\end<<11815>>theorem_type<<11815>>
\begin<<14560>>tex2html_deferred<<14560>>\par\end<<14561>>tex2html_deferred<<14561>>
\begin<<11116>>alltt<<11116>>
\begin<<14562>>tex2html_deferred<<14562>>\par\end<<14563>>tex2html_deferred<<14563>>
\section<<11117>>Recursión por la Izquierda<<11117>>
\label<<11118>>section:recursionizquierda<<11118>>
\begin<<14564>>tex2html_deferred<<14564>>\par\end<<14565>>tex2html_deferred<<14565>>
\begin<<11816>>theorem_type<<11816>>[definition][definition][section][][][]
Una \index<<12162>>gramática es recursiva por la izquierda<<12162>>\emph<<12163>>gramática es recursiva por la izquierda<<12163>> cuando existe una derivación
\begin<<12806>>tex2html_wrap_inline<<12806>>$A \stackrel<<11121>>*<<11121>><<11122>>\Longrightarrow<<11122>> A \alpha$\end<<12807>>tex2html_wrap_inline<<12807>>. 
\begin<<14566>>tex2html_deferred<<14566>>\par\end<<14567>>tex2html_deferred<<14567>>
En particular, es recursiva por la izquierda si contiene
una regla de producción de la forma \begin<<12808>>tex2html_wrap_inline<<12808>>$A \rightarrow A \alpha$\end<<12809>>tex2html_wrap_inline<<12809>>. 
En este caso se dice que la recursión por la izquierda es directa.\end<<11817>>theorem_type<<11817>>
\begin<<14568>>tex2html_deferred<<14568>>\par\end<<14569>>tex2html_deferred<<14569>>
Cuando la gramática es \index<<12164>>recursiva por la izquierda<<12164>>\emph<<12165>>recursiva por la izquierda<<12165>>, 
el método 
de análisis recursivo descendente predictivo no funciona. 
En ese caso, el procedimiento
<tex2html_verb_mark>1814<tex2html_verb_mark> asociado con \begin<<12810>>tex2html_wrap_inline<<12810>>$A$\end<<12811>>tex2html_wrap_inline<<12811>>\space ciclaría para siempre sin llegar a consumir ningún 
terminal. 
\begin<<14570>>tex2html_deferred<<14570>>\par\end<<14571>>tex2html_deferred<<14571>>
\subsection<<11125>>Eliminación de la Recursión por la Izquierda en la Gramática<<11125>>
\label<<11126>>subsection:eliminaleftrec<<11126>>
Es posible modificar la gramática para eliminar la recursión por 
la izquierda. En este apartado nos limitaremos al caso de recursión 
por la izquierda directa. 
La generalización al caso de recursión por la izquierda no-directa
se reduce a la iteración de la solución propuesta 
para el caso directo.
\begin<<14572>>tex2html_deferred<<14572>>\par\end<<14573>>tex2html_deferred<<14573>>
Consideremos una variable \begin<<12812>>tex2html_wrap_inline<<12812>>$A$\end<<12813>>tex2html_wrap_inline<<12813>>\space con dos producciones:
\begin<<14574>>tex2html_deferred<<14574>>\par\end<<14575>>tex2html_deferred<<14575>>
\vspace<<11127>>0.25cm<<11127>>
\begin<<11128>>center<<11128>>
\begin<<11129>>tabular<<11129>><<11130>>ll<<11130>>
\begin<<12814>>tex2html_wrap_inline<<12814>>$A   \rightarrow A \alpha$\end<<12815>>tex2html_wrap_inline<<12815>>\space  ;SPMamp; \begin<<12816>>tex2html_wrap_inline<<12816>>$|\ \beta$\end<<12817>>tex2html_wrap_inline<<12817>>\space  
\end<<11131>>tabular<<11131>>
\end<<11132>>center<<11132>>
\begin<<14576>>tex2html_deferred<<14576>>\par\end<<14577>>tex2html_deferred<<14577>>
\noindent donde \begin<<12818>>tex2html_wrap_inline<<12818>>$\alpha, \beta \in (V \cup \Sigma)^*$\end<<12819>>tex2html_wrap_inline<<12819>>\space no comienzan por \begin<<12820>>tex2html_wrap_inline<<12820>>$A$\end<<12821>>tex2html_wrap_inline<<12821>>.
Estas dos producciones pueden ser sustituidas por:
\begin<<14578>>tex2html_deferred<<14578>>\par\end<<14579>>tex2html_deferred<<14579>>
\vspace<<11133>>0.25cm<<11133>>
\begin<<11134>>center<<11134>>
\begin<<11135>>tabular<<11135>><<11136>>ll<<11136>>
\begin<<12822>>tex2html_wrap_inline<<12822>>$A   \rightarrow \beta R$\end<<12823>>tex2html_wrap_inline<<12823>>\space  ;SPMamp;\\ 
\begin<<12824>>tex2html_wrap_inline<<12824>>$R   \rightarrow  \alpha R$\end<<12825>>tex2html_wrap_inline<<12825>>\space ;SPMamp;\begin<<12826>>tex2html_wrap_inline<<12826>>$|\ \epsilon$\end<<12827>>tex2html_wrap_inline<<12827>>
\end<<11137>>tabular<<11137>>
\end<<11138>>center<<11138>>
\begin<<14580>>tex2html_deferred<<14580>>\par\end<<14581>>tex2html_deferred<<14581>>
\noindent
eliminando así la recursión por la izquierda.
\begin<<14582>>tex2html_deferred<<14582>>\par\end<<14583>>tex2html_deferred<<14583>>
\begin<<11818>>theorem_type<<11818>>[definition][definition][section][][][]
La producción \begin<<12828>>tex2html_wrap_inline<<12828>>$R   \rightarrow  \alpha R$\end<<12829>>tex2html_wrap_inline<<12829>>\space se dice \index<<12166>>recursiva por la derecha<<12166>>\emph<<12167>>recursiva por la derecha<<12167>>.\end<<11819>>theorem_type<<11819>>
\begin<<14584>>tex2html_deferred<<14584>>\par\end<<14585>>tex2html_deferred<<14585>>
Las producciones recursivas por la derecha dan lugar a árboles
que se hunden hacia la derecha. Es mas difícil traducir desde esta clase
de árboles operadores como el menos, que son asociativos a izquierdas.
\begin<<14586>>tex2html_deferred<<14586>>\par\end<<14587>>tex2html_deferred<<14587>>
\begin<<11820>>theorem_type<<11820>>[exercise][exercise][section][][][]
Elimine la recursión por la izquierda de la gramática 
\begin<<14588>>tex2html_deferred<<14588>>\par\end<<14589>>tex2html_deferred<<14589>>
\vspace<<11143>>0.5cm<<11143>>
\begin<<11144>>tabular<<11144>><<11145>>l<<11145>>
\begin<<12830>>tex2html_wrap_inline<<12830>>$expr   \rightarrow expr  -  NUM$\end<<12831>>tex2html_wrap_inline<<12831>>\space  \\ 
\begin<<12832>>tex2html_wrap_inline<<12832>>$expr   \rightarrow NUM$\end<<12833>>tex2html_wrap_inline<<12833>>\space            
\end<<11146>>tabular<<11146>>
\vspace<<11147>>0.5cm<<11147>>
\begin<<14590>>tex2html_deferred<<14590>>\par\end<<14591>>tex2html_deferred<<14591>>\end<<11821>>theorem_type<<11821>>
\begin<<14592>>tex2html_deferred<<14592>>\par\end<<14593>>tex2html_deferred<<14593>>
\begin<<11822>>theorem_type<<11822>>[exercise][exercise][section][][][]
¿Que hay de erróneo en este esquema de traducción?
\begin<<14594>>tex2html_deferred<<14594>>\par\end<<14595>>tex2html_deferred<<14595>>
\vspace<<11150>>0.5cm<<11150>>
\begin<<11151>>tabular<<11151>><<11152>>ll<<11152>>
\begin<<12834>>tex2html_wrap_inline<<12834>>$expr   \rightarrow NUM - expr_1$\end<<12835>>tex2html_wrap_inline<<12835>>\space  ;SPMamp; <tex2html_verb_mark>1815<tex2html_verb_mark> \\ 
\begin<<12836>>tex2html_wrap_inline<<12836>>$expr   \rightarrow NUM$\end<<12837>>tex2html_wrap_inline<<12837>>\space           ;SPMamp; <tex2html_verb_mark>1816<tex2html_verb_mark>
\end<<11153>>tabular<<11153>>
\vspace<<11154>>0.5cm<<11154>>\end<<11823>>theorem_type<<11823>>
\begin<<14596>>tex2html_deferred<<14596>>\par\end<<14597>>tex2html_deferred<<14597>>
\begin<<11824>>theorem_type<<11824>>[exercise][exercise][section][][][]
Dado el esquema de traducción:
\begin<<14598>>tex2html_deferred<<14598>>\par\end<<14599>>tex2html_deferred<<14599>>
\vspace<<11157>>0.25cm<<11157>>
\begin<<11158>>tabular<<11158>><<11159>>ll<<11159>>
\begin<<12838>>tex2html_wrap_inline<<12838>>$e   \rightarrow\ NUM\ r$\end<<12839>>tex2html_wrap_inline<<12839>>\space    ;SPMamp; <tex2html_verb_mark>1817<tex2html_verb_mark> \\ 
\begin<<12840>>tex2html_wrap_inline<<12840>>$r   \rightarrow - e$\end<<12841>>tex2html_wrap_inline<<12841>>\space       ;SPMamp; <tex2html_verb_mark>1818<tex2html_verb_mark>\\ 
\begin<<12842>>tex2html_wrap_inline<<12842>>$r   \rightarrow \epsilon$\end<<12843>>tex2html_wrap_inline<<12843>>\space  ;SPMamp; <tex2html_verb_mark>1819<tex2html_verb_mark>
\end<<11160>>tabular<<11160>>
\vspace<<11161>>0.5cm<<11161>>
\begin<<14600>>tex2html_deferred<<14600>>\par\end<<14601>>tex2html_deferred<<14601>>
¿Cuál es el lenguaje generado por la gramática? ¿Puede el lenguaje
ser analizado por un APDR?
¿Cual es la traducción de 4-5-6? ¿Es un esquema de traducción adecuado 
para traducir de infijo a postfijo?
¿Cuál es la traducción si cambiamos el anterior esquema por este otro?:
\begin<<14602>>tex2html_deferred<<14602>>\par\end<<14603>>tex2html_deferred<<14603>>
\vspace<<11162>>0.25cm<<11162>>
\begin<<11163>>tabular<<11163>><<11164>>ll<<11164>>
\begin<<12844>>tex2html_wrap_inline<<12844>>$e   \rightarrow NUM\  r$\end<<12845>>tex2html_wrap_inline<<12845>>\space    ;SPMamp; <tex2html_verb_mark>1820<tex2html_verb_mark> \\ 
\begin<<12846>>tex2html_wrap_inline<<12846>>$r   \rightarrow - e$\end<<12847>>tex2html_wrap_inline<<12847>>\space       ;SPMamp; <tex2html_verb_mark>1821<tex2html_verb_mark>\\ 
\begin<<12848>>tex2html_wrap_inline<<12848>>$r   \rightarrow \epsilon$\end<<12849>>tex2html_wrap_inline<<12849>>\space  ;SPMamp; <tex2html_verb_mark>1822<tex2html_verb_mark>
\end<<11165>>tabular<<11165>>
\vspace<<11166>>0.5cm<<11166>>\end<<11825>>theorem_type<<11825>>
\begin<<14604>>tex2html_deferred<<14604>>\par\end<<14605>>tex2html_deferred<<14605>>
\subsection<<11168>>Eliminación de la Recursión por la Izquierda en un Esquema de Traducción<<11168>>
\label<<11169>>subsection:eliminarecesquem<<11169>>
La eliminación de la recursión por la izquierda es sólo un paso: debe 
ser extendida a esquemas de traducción, 
de manera que no sólo se preserve el lenguaje
sino la secuencia de acciones. Supongamos que tenemos un esquema de
traducción de la forma:
\begin<<14606>>tex2html_deferred<<14606>>\par\end<<14607>>tex2html_deferred<<14607>>
\vspace<<11170>>0.25cm<<11170>>
\begin<<11171>>tabular<<11171>><<11172>>ll<<11172>>
\begin<<12850>>tex2html_wrap_inline<<12850>>$A   \rightarrow A \alpha$\end<<12851>>tex2html_wrap_inline<<12851>>\space  ;SPMamp; <tex2html_verb_mark>1823<tex2html_verb_mark>\\ 
\begin<<12852>>tex2html_wrap_inline<<12852>>$A   \rightarrow A \beta$\end<<12853>>tex2html_wrap_inline<<12853>>\space   ;SPMamp; <tex2html_verb_mark>1824<tex2html_verb_mark>\\ 
\begin<<12854>>tex2html_wrap_inline<<12854>>$A   \rightarrow \gamma$\end<<12855>>tex2html_wrap_inline<<12855>>\space    ;SPMamp; <tex2html_verb_mark>1825<tex2html_verb_mark>
\end<<11173>>tabular<<11173>>
\vspace<<11174>>0.25cm<<11174>>
\begin<<14608>>tex2html_deferred<<14608>>\par\end<<14609>>tex2html_deferred<<14609>>
\noindent para una sentencia como \begin<<12856>>tex2html_wrap_inline<<12856>>$\gamma \beta \alpha$\end<<12857>>tex2html_wrap_inline<<12857>>\space la secuencia de
acciones será: 
\begin<<14610>>tex2html_deferred<<14610>>\par\end<<14611>>tex2html_deferred<<14611>>
\begin<<11175>>center<<11175>>
<tex2html_verb_mark>1826<tex2html_verb_mark>
\end<<11176>>center<<11176>>
\begin<<14612>>tex2html_deferred<<14612>>\par\end<<14613>>tex2html_deferred<<14613>>
¿Cómo construir un esquema de traducción para la gramática resultante
de eliminar la recursión por la izquierda que ejecute las acciones
asociadas en el mismo orden?. Supongamos para simplificar,
que las acciones no dependen
de atributos ni computan atributos, sino que actúan sobre
variables globales. En tal caso, la siguiente
ubicación de las acciones da lugar a que se ejecuten en el mismo
orden:
\begin<<14614>>tex2html_deferred<<14614>>\par\end<<14615>>tex2html_deferred<<14615>>
\vspace<<11177>>0.25cm<<11177>>
\begin<<11178>>tabular<<11178>><<11179>>l<<11179>>
\begin<<12858>>tex2html_wrap_inline<<12858>>$A   \rightarrow \gamma$\end<<12859>>tex2html_wrap_inline<<12859>>\space <tex2html_verb_mark>1827<tex2html_verb_mark> \begin<<12860>>tex2html_wrap_inline<<12860>>$R$\end<<12861>>tex2html_wrap_inline<<12861>>\\ 
\begin<<12862>>tex2html_wrap_inline<<12862>>$R   \rightarrow \beta$\end<<12863>>tex2html_wrap_inline<<12863>>\space <tex2html_verb_mark>1828<tex2html_verb_mark> \begin<<12864>>tex2html_wrap_inline<<12864>>$R$\end<<12865>>tex2html_wrap_inline<<12865>>\\ 
\begin<<12866>>tex2html_wrap_inline<<12866>>$R   \rightarrow \alpha$\end<<12867>>tex2html_wrap_inline<<12867>>\space <tex2html_verb_mark>1829<tex2html_verb_mark> \begin<<12868>>tex2html_wrap_inline<<12868>>$R$\end<<12869>>tex2html_wrap_inline<<12869>>\\ 
\begin<<12870>>tex2html_wrap_inline<<12870>>$R   \rightarrow \epsilon$\end<<12871>>tex2html_wrap_inline<<12871>>\space  
\end<<11180>>tabular<<11180>>
\begin<<14616>>tex2html_deferred<<14616>>\par\end<<14617>>tex2html_deferred<<14617>>
Si hay atributos en juego, la estrategia para construir un
esquema de traducción equivalente para la gramática resultante
de eliminar la recursividad por la izquierda se complica.
Consideremos de nuevo el esquema de traducción de infijo a
postfijo de expresiones aritméticas de restas:
\begin<<14618>>tex2html_deferred<<14618>>\par\end<<14619>>tex2html_deferred<<14619>>
\vspace<<11181>>0.5cm<<11181>>
\begin<<11182>>tabular<<11182>><<11183>>ll<<11183>>
\begin<<12872>>tex2html_wrap_inline<<12872>>$expr   \rightarrow expr_1  -  NUM$\end<<12873>>tex2html_wrap_inline<<12873>>\space  ;SPMamp; <tex2html_verb_mark>1830<tex2html_verb_mark> \\ 
\begin<<12874>>tex2html_wrap_inline<<12874>>$expr   \rightarrow NUM$\end<<12875>>tex2html_wrap_inline<<12875>>\space             ;SPMamp; <tex2html_verb_mark>1831<tex2html_verb_mark>
\end<<11184>>tabular<<11184>>
\vspace<<11185>>0.5cm<<11185>>
\begin<<14620>>tex2html_deferred<<14620>>\par\end<<14621>>tex2html_deferred<<14621>>
En este caso introducimos un atributo <tex2html_verb_mark>1832<tex2html_verb_mark> para los nodos de la clase
\begin<<12876>>tex2html_wrap_inline<<12876>>$r$\end<<12877>>tex2html_wrap_inline<<12877>>\space el cuál 
acumula la traducción a postfijo hasta el momento. Observe como
este atributo se computa en un nodo \begin<<12878>>tex2html_wrap_inline<<12878>>$r$\end<<12879>>tex2html_wrap_inline<<12879>>\space a partir del
correspondiente atributo del el padre y/o de los hermanos del nodo:
\begin<<14622>>tex2html_deferred<<14622>>\par\end<<14623>>tex2html_deferred<<14623>>
\vspace<<11186>>0.5cm<<11186>>
\noindent
\begin<<12880>>tex2html_wrap_inline<<12880>>$expr   \rightarrow NUM$\end<<12881>>tex2html_wrap_inline<<12881>>\space <tex2html_verb_mark>1833<tex2html_verb_mark>  \begin<<12882>>tex2html_wrap_inline<<12882>>$r$\end<<12883>>tex2html_wrap_inline<<12883>>\space <tex2html_verb_mark>1834<tex2html_verb_mark> \\ 
\begin<<12884>>tex2html_wrap_inline<<12884>>$r   \rightarrow - NUM$\end<<12885>>tex2html_wrap_inline<<12885>>\space <tex2html_verb_mark>1835<tex2html_verb_mark> \begin<<12886>>tex2html_wrap_inline<<12886>>$r_1$\end<<12887>>tex2html_wrap_inline<<12887>>\space <tex2html_verb_mark>1836<tex2html_verb_mark>\\ 
\begin<<12888>>tex2html_wrap_inline<<12888>>$r \rightarrow \epsilon$\end<<12889>>tex2html_wrap_inline<<12889>>\space <tex2html_verb_mark>1837<tex2html_verb_mark>
\vspace<<11187>>0.5cm<<11187>>
\begin<<14624>>tex2html_deferred<<14624>>\par\end<<14625>>tex2html_deferred<<14625>>
El atributo <tex2html_verb_mark>1838<tex2html_verb_mark> es un ejemplo de atributo heredado.
\begin<<14626>>tex2html_deferred<<14626>>\par\end<<14627>>tex2html_deferred<<14627>>
\subsection<<11188>>Ejercicio<<11188>>
Calcule los valores de los atributos
cuando se aplica el esquema de traducción anterior
a la frase <tex2html_verb_mark>1839<tex2html_verb_mark>. 
\begin<<14628>>tex2html_deferred<<14628>>\par\end<<14629>>tex2html_deferred<<14629>>
\subsection<<11189>>Convirtiendo el Esquema en un Analizador Predictivo<<11189>>
A partir del esquema propuesto, que se basa en una fase de
descenso con un atributo heredado y una de ascenso con un atributo
sintetizado:
\begin<<14630>>tex2html_deferred<<14630>>\par\end<<14631>>tex2html_deferred<<14631>>
\vspace<<11190>>0.5cm<<11190>>
\noindent
\begin<<12890>>tex2html_wrap_inline<<12890>>$expr   \rightarrow NUM$\end<<12891>>tex2html_wrap_inline<<12891>>\space <tex2html_verb_mark>1840<tex2html_verb_mark>  \begin<<12892>>tex2html_wrap_inline<<12892>>$r$\end<<12893>>tex2html_wrap_inline<<12893>>\space <tex2html_verb_mark>1841<tex2html_verb_mark> \\ 
\begin<<12894>>tex2html_wrap_inline<<12894>>$r   \rightarrow - NUM$\end<<12895>>tex2html_wrap_inline<<12895>>\space <tex2html_verb_mark>1842<tex2html_verb_mark> \begin<<12896>>tex2html_wrap_inline<<12896>>$r_1$\end<<12897>>tex2html_wrap_inline<<12897>>\space <tex2html_verb_mark>1843<tex2html_verb_mark>\\ 
\begin<<12898>>tex2html_wrap_inline<<12898>>$r \rightarrow \epsilon$\end<<12899>>tex2html_wrap_inline<<12899>>\space <tex2html_verb_mark>1844<tex2html_verb_mark>
\vspace<<11191>>0.5cm<<11191>>
\begin<<14632>>tex2html_deferred<<14632>>\par\end<<14633>>tex2html_deferred<<14633>>
es posible construir un APDR que ejecuta las acciones semánticas
en los puntos indicados por el esquema de traducción. El atributo heredado
se convierte en un parámetro de entrada a la subrutina asociada con la variable
sintáctica:
\begin<<14634>>tex2html_deferred<<14634>>\par\end<<14635>>tex2html_deferred<<14635>>
\begin<<11192>>tex2html_preform<<11192>><tex2html_verbatim_mark>verbatim5577#\end<<11193>>tex2html_preform<<11193>>
\begin<<14636>>tex2html_deferred<<14636>>\par\end<<14637>>tex2html_deferred<<14637>>
\subsection<<11194>>Ejercicio<<11194>>
Generalize la estrategia anterior 
para eliminar la recursividad por la izquierda al siguiente esquema de 
traducción genérico recursivo por la izquierda y
con un atributo sintetizado \begin<<12900>>tex2html_wrap_inline<<12900>>$A^s$\end<<12901>>tex2html_wrap_inline<<12901>>:
\begin<<14638>>tex2html_deferred<<14638>>\par\end<<14639>>tex2html_deferred<<14639>>
\vspace<<11195>>0.5cm<<11195>>
\begin<<11196>>tabular<<11196>><<11197>>ll<<11197>>
\begin<<12902>>tex2html_wrap_inline<<12902>>$A   \rightarrow A_1 X_1 X_2 X_3$\end<<12903>>tex2html_wrap_inline<<12903>>\space  ;SPMamp; \begin<<12904>>tex2html_wrap_inline<<12904>>$ \{ A^s = f_X(A^s_1, X_1^s, X_2^s, X_3^s) \}$\end<<12905>>tex2html_wrap_inline<<12905>>\space \\ 
\begin<<12906>>tex2html_wrap_inline<<12906>>$A   \rightarrow A_1 Y_1 Y_2 Y_3$\end<<12907>>tex2html_wrap_inline<<12907>>\space  ;SPMamp; \begin<<12908>>tex2html_wrap_inline<<12908>>$ \{ A^s = f_Y(A^s_1, Y_1^s, Y_2^s, Y_3^s) \}$\end<<12909>>tex2html_wrap_inline<<12909>>\space \\ 
\begin<<12910>>tex2html_wrap_inline<<12910>>$A   \rightarrow Z_1 Z_2 Z_3$\end<<12911>>tex2html_wrap_inline<<12911>>\space      ;SPMamp; \begin<<12912>>tex2html_wrap_inline<<12912>>$ \{ A^s = f_Z(Z_1^s, Z_2^s, Z_3^s) \}$\end<<12913>>tex2html_wrap_inline<<12913>>
\end<<11198>>tabular<<11198>>
\vspace<<11199>>0.5cm<<11199>>
\begin<<14640>>tex2html_deferred<<14640>>\par\end<<14641>>tex2html_deferred<<14641>>
donde \begin<<12914>>tex2html_wrap_inline<<12914>>$f_X, f_Y$\end<<12915>>tex2html_wrap_inline<<12915>>\space y \begin<<12916>>tex2html_wrap_inline<<12916>>$f_Z$\end<<12917>>tex2html_wrap_inline<<12917>>\space son funciones cualesquiera.
\begin<<14642>>tex2html_deferred<<14642>>\par\end<<14643>>tex2html_deferred<<14643>>
\subsection<<12168>>Práctica: Eliminación de la Recursividad por la Izquierda<<12168>>
   \index<<12169>>Práctica!Eliminación de la Recursividad por la Izquierda<<12169>>
  
\label<<11201>>practica:recizq<<11201>>
En esta práctica  vamos a 
extender las fases de análisis léxico y sintáctico del 
compilador del lenguaje Tutu cuya gramática se definió
en el ejercicio \ref<<11202>>ejercicio:tutugrammar<<11202>> 
con expresiones que incluyen diferencias 
y divisiones. Además construiremos una representación
del árbol sintáctico concreto.
Para ello consideremos el siguiente esquema de traducción
recursivo por la izquierda (en concreto las reglas recursivas
por la izquierda son las 10, 11, 13 y 14):
\begin<<14644>>tex2html_deferred<<14644>>\par\end<<14645>>tex2html_deferred<<14645>>
\vspace<<11203>>0.5cm<<11203>>
\begin<<11204>>small<<11204>>
\begin<<11205>>tabular<<11205>><<11206>>|r|ll|<<11206>>
\hline
0 ;SPMamp; p  \begin<<12918>>tex2html_wrap_inline<<12918>>$\rightarrow$\end<<12919>>tex2html_wrap_inline<<12919>>\space  ds  ss     ;SPMamp; <tex2html_verb_mark>1845<tex2html_verb_mark>\\ 
\hline
1 ;SPMamp; p  \begin<<12920>>tex2html_wrap_inline<<12920>>$\rightarrow$\end<<12921>>tex2html_wrap_inline<<12921>>\space  ss         ;SPMamp; <tex2html_verb_mark>1846<tex2html_verb_mark>\\ 
\hline
2 ;SPMamp; ds \begin<<12922>>tex2html_wrap_inline<<12922>>$\rightarrow$\end<<12923>>tex2html_wrap_inline<<12923>>\space d  ';'  ds  ;SPMamp; <tex2html_verb_mark>1847<tex2html_verb_mark>\\ 
\hline
3 ;SPMamp; ds \begin<<12924>>tex2html_wrap_inline<<12924>>$\rightarrow$\end<<12925>>tex2html_wrap_inline<<12925>>\space  d ';'      ;SPMamp; <tex2html_verb_mark>1848<tex2html_verb_mark>\\ 
\hline
4 ;SPMamp; d  \begin<<12926>>tex2html_wrap_inline<<12926>>$\rightarrow$\end<<12927>>tex2html_wrap_inline<<12927>>\space INT  il     ;SPMamp; <tex2html_verb_mark>1849<tex2html_verb_mark>\\ 
\hline
5 ;SPMamp; d  \begin<<12928>>tex2html_wrap_inline<<12928>>$\rightarrow$\end<<12929>>tex2html_wrap_inline<<12929>>\space  STRING  il ;SPMamp; <tex2html_verb_mark>1850<tex2html_verb_mark>\\ 
\hline
6 ;SPMamp; ss \begin<<12930>>tex2html_wrap_inline<<12930>>$\rightarrow$\end<<12931>>tex2html_wrap_inline<<12931>>\space s  ';'  ss  ;SPMamp; <tex2html_verb_mark>1851<tex2html_verb_mark>\\ 
\hline
7 ;SPMamp; ss \begin<<12932>>tex2html_wrap_inline<<12932>>$\rightarrow$\end<<12933>>tex2html_wrap_inline<<12933>>\space  s          ;SPMamp; <tex2html_verb_mark>1852<tex2html_verb_mark>\\ 
\hline
8 ;SPMamp; s  \begin<<12934>>tex2html_wrap_inline<<12934>>$\rightarrow$\end<<12935>>tex2html_wrap_inline<<12935>>\space ID '=' e    ;SPMamp; <tex2html_verb_mark>1853<tex2html_verb_mark>\\ 
\hline
9 ;SPMamp; s  \begin<<12936>>tex2html_wrap_inline<<12936>>$\rightarrow$\end<<12937>>tex2html_wrap_inline<<12937>>\space  P  e       ;SPMamp; <tex2html_verb_mark>1854<tex2html_verb_mark>\\ 
\hline
10 ;SPMamp; e \begin<<12938>>tex2html_wrap_inline<<12938>>$\rightarrow$\end<<12939>>tex2html_wrap_inline<<12939>>\space e1 '+' t    ;SPMamp; <tex2html_verb_mark>1855<tex2html_verb_mark>\\ 
\hline
11 ;SPMamp; e \begin<<12940>>tex2html_wrap_inline<<12940>>$\rightarrow$\end<<12941>>tex2html_wrap_inline<<12941>>\space e1 '-' t    ;SPMamp; <tex2html_verb_mark>1856<tex2html_verb_mark>\\ 
\hline
12 ;SPMamp; e \begin<<12942>>tex2html_wrap_inline<<12942>>$\rightarrow$\end<<12943>>tex2html_wrap_inline<<12943>>\space t           ;SPMamp; <tex2html_verb_mark>1857<tex2html_verb_mark>\\ 
\hline
13 ;SPMamp; t \begin<<12944>>tex2html_wrap_inline<<12944>>$\rightarrow$\end<<12945>>tex2html_wrap_inline<<12945>>\space t1 '*' f    ;SPMamp; <tex2html_verb_mark>1858<tex2html_verb_mark>\\ 
\hline
14 ;SPMamp; t \begin<<12946>>tex2html_wrap_inline<<12946>>$\rightarrow$\end<<12947>>tex2html_wrap_inline<<12947>>\space t '/' f     ;SPMamp; <tex2html_verb_mark>1859<tex2html_verb_mark>\\ 
\hline
15 ;SPMamp; t \begin<<12948>>tex2html_wrap_inline<<12948>>$\rightarrow$\end<<12949>>tex2html_wrap_inline<<12949>>\space f           ;SPMamp; <tex2html_verb_mark>1860<tex2html_verb_mark>\\ 
\hline
16 ;SPMamp; f \begin<<12950>>tex2html_wrap_inline<<12950>>$\rightarrow$\end<<12951>>tex2html_wrap_inline<<12951>>\space '(' e ')'   ;SPMamp; <tex2html_verb_mark>1861<tex2html_verb_mark>\\ 
\hline
17 ;SPMamp; f \begin<<12952>>tex2html_wrap_inline<<12952>>$\rightarrow$\end<<12953>>tex2html_wrap_inline<<12953>>\space  ID         ;SPMamp; <tex2html_verb_mark>1862<tex2html_verb_mark>\\ 
\hline
18 ;SPMamp; f \begin<<12954>>tex2html_wrap_inline<<12954>>$\rightarrow$\end<<12955>>tex2html_wrap_inline<<12955>>\space  NUM        ;SPMamp; <tex2html_verb_mark>1863<tex2html_verb_mark>\\ 
\hline
19 ;SPMamp; f \begin<<12956>>tex2html_wrap_inline<<12956>>$\rightarrow$\end<<12957>>tex2html_wrap_inline<<12957>>\space  STR        ;SPMamp; <tex2html_verb_mark>1864<tex2html_verb_mark>\\ 
\hline
20 ;SPMamp; il \begin<<12958>>tex2html_wrap_inline<<12958>>$\rightarrow$\end<<12959>>tex2html_wrap_inline<<12959>>\space ID ',' il  ;SPMamp; <tex2html_verb_mark>1865<tex2html_verb_mark>\\  
\hline
21 ;SPMamp; il \begin<<12960>>tex2html_wrap_inline<<12960>>$\rightarrow$\end<<12961>>tex2html_wrap_inline<<12961>>\space ID         ;SPMamp; <tex2html_verb_mark>1866<tex2html_verb_mark>\\ 
\hline
22 ;SPMamp; s \begin<<12962>>tex2html_wrap_inline<<12962>>$\rightarrow \epsilon$\end<<12963>>tex2html_wrap_inline<<12963>>\space    ;SPMamp;  <tex2html_verb_mark>1867<tex2html_verb_mark>\\ 
\hline
\end<<11207>>tabular<<11207>>
\end<<11208>>small<<11208>>
\vspace<<11209>>0.25cm<<11209>>
\begin<<14646>>tex2html_deferred<<14646>>\par\end<<14647>>tex2html_deferred<<14647>>
Por razones de espacio hemos abreviado los nombres de las variables.
El atributo <tex2html_verb_mark>1868<tex2html_verb_mark> (por \emph<<11210>>tree<<11210>>) es una referencia a un hash.
La entrada <tex2html_verb_mark>1869<tex2html_verb_mark> contiene el número de la regla en juego.
Hay una entrada por símbolo en la parte derecha. El atributo <tex2html_verb_mark>1870<tex2html_verb_mark> de 
<tex2html_verb_mark>1871<tex2html_verb_mark> es la cadena asociada con el identificador. 
El atributo <tex2html_verb_mark>1872<tex2html_verb_mark> de <tex2html_verb_mark>1873<tex2html_verb_mark> es el valor numérico asociado con el terminal.
Se trata de, siguiendo la metodología explicada en la sección anterior,
construir un analizador descendente predictivo recursivo que sea equivalente
al esquema anterior. Elimine la recursión por la izquierda. Traslade las acciones a los
lugares convenientes en el nuevo esquema e introduzca los atributos heredados que sean necesarios.
Genere pruebas siguiendo la metodología 
explicada en la sección \ref<<11211>>subsection:tests<<11211>>. ¡Note que el árbol que debe producir 
es el de la gramática inicial, ¡No el de la gramática transformada!
\begin<<14648>>tex2html_deferred<<14648>>\par\end<<14649>>tex2html_deferred<<14649>>
\section<<11212>>Árbol de Análisis Abstracto<<11212>>
\label<<11213>>section:aat<<11213>>
\subsection<<11214>>Lenguajes Árbol y Gramáticas Árbol<<11214>>
\label<<11215>>subsection:lenguajesarbol<<11215>>
Un \index<<12170>>árbol de análisis abstracto<<12170>>\emph<<12171>>árbol de análisis abstracto<<12171>>  (denotado \index<<12172>>AAA<<12172>>\emph<<12173>>AAA<<12173>>, en
inglés \index<<12174>>abstract syntax tree<<12174>>\emph<<12175>>abstract syntax tree<<12175>> o \index<<12176>>AST<<12176>>\emph<<12177>>AST<<12177>>) 
porta la misma información que
el árbol de análisis sintáctico pero de forma mas condensada, eliminándose
terminales y producciones que no aportan información.
\begin<<14650>>tex2html_deferred<<14650>>\par\end<<14651>>tex2html_deferred<<14651>>
\begin<<11826>>theorem_type<<11826>>[definition][definition][section][][][]
Un \index<<12178>>alfabeto con función de aridad<<12178>>\emph<<12179>>alfabeto con función de aridad<<12179>> es un par \begin<<12964>>tex2html_wrap_inline<<12964>>$(\Sigma, \rho)$\end<<12965>>tex2html_wrap_inline<<12965>>
donde \begin<<12966>>tex2html_wrap_inline<<12966>>$\Sigma$\end<<12967>>tex2html_wrap_inline<<12967>>\space es un conjunto finito y
\begin<<12968>>tex2html_wrap_inline<<12968>>$\rho$\end<<12969>>tex2html_wrap_inline<<12969>>\space es una función \begin<<12970>>tex2html_wrap_inline<<12970>>$\rho: \Sigma \rightarrow \mathds<<11222>>N<<11222>>_0$\end<<12971>>tex2html_wrap_inline<<12971>>, denominada 
\index<<12180>>función de aridad<<12180>>\emph<<12181>>función de aridad<<12181>>.
Denotamos por \begin<<12972>>tex2html_wrap_inline<<12972>>$\Sigma_k = \{ a \in \Sigma :\ \rho(a) = k \}$\end<<12973>>tex2html_wrap_inline<<12973>>.
\begin<<14652>>tex2html_deferred<<14652>>\par\end<<14653>>tex2html_deferred<<14653>>
Definimos el \index<<12182>>lenguaje árbol homogéneo<<12182>>\emph<<12183>>lenguaje árbol homogéneo<<12183>> \begin<<12974>>tex2html_wrap_inline<<12974>>$B(\Sigma)$\end<<12975>>tex2html_wrap_inline<<12975>>\space sobre \begin<<12976>>tex2html_wrap_inline<<12976>>$\Sigma$\end<<12977>>tex2html_wrap_inline<<12977>>\space inductivamente:
\begin<<11225>>itemize<<11225>>
\item
Todos los elementos de aridad 0 están en \begin<<12978>>tex2html_wrap_inline<<12978>>$B(\Sigma)$\end<<12979>>tex2html_wrap_inline<<12979>>: \begin<<12980>>tex2html_wrap_inline<<12980>>$a \in  \Sigma_0$\end<<12981>>tex2html_wrap_inline<<12981>>
implica \begin<<12982>>tex2html_wrap_inline<<12982>>$a \in B(\Sigma)$\end<<12983>>tex2html_wrap_inline<<12983>>
\item
Si \begin<<12984>>tex2html_wrap_inline<<12984>>$b_1, \ldots , b_k \in B(\Sigma)$\end<<12985>>tex2html_wrap_inline<<12985>>\space y \begin<<12986>>tex2html_wrap_inline<<12986>>$f \in \Sigma_k$\end<<12987>>tex2html_wrap_inline<<12987>>\space es un elemento
\begin<<12988>>tex2html_wrap_inline<<12988>>$k$\end<<12989>>tex2html_wrap_inline<<12989>>-ario, entonces \begin<<12990>>tex2html_wrap_inline<<12990>>$f(b_1, \ldots , b_k) \in B(\Sigma)$\end<<12991>>tex2html_wrap_inline<<12991>>
\end<<11226>>itemize<<11226>>
Los elementos de \begin<<12992>>tex2html_wrap_inline<<12992>>$B(\Sigma)$\end<<12993>>tex2html_wrap_inline<<12993>>\space se llaman  \index<<12184>>árboles<<12184>>\emph<<12185>>árboles<<12185>> o \index<<12186>>términos<<12186>>\emph<<12187>>términos<<12187>>.\end<<11827>>theorem_type<<11827>>
\begin<<14654>>tex2html_deferred<<14654>>\par\end<<14655>>tex2html_deferred<<14655>>
\begin<<11828>>theorem_type<<11828>>[example][example][section][][][]
Sea \begin<<12994>>tex2html_wrap_inline<<12994>>$\Sigma = \{A, CONS, NIL \}$\end<<12995>>tex2html_wrap_inline<<12995>>\space con \begin<<12996>>tex2html_wrap_inline<<12996>>$\rho(A) = \rho(NIL) = 0, \rho(CONS) = 2$\end<<12997>>tex2html_wrap_inline<<12997>>. 
Entonces 
\begin<<14656>>tex2html_deferred<<14656>>\par\end<<14657>>tex2html_deferred<<14657>>
\begin<<12998>>tex2html_wrap_inline<<12998>>$B(\Sigma) = \{ A, NIL, CONS(A,NIL), CONS(NIL, A), CONS(A, A), CONS(NIL,NIL), \ldots \}$\end<<12999>>tex2html_wrap_inline<<12999>>\end<<11829>>theorem_type<<11829>>
\begin<<14658>>tex2html_deferred<<14658>>\par\end<<14659>>tex2html_deferred<<14659>>
\begin<<11830>>theorem_type<<11830>>[example][example][section][][][]
\label<<11233>>example:tutuast<<11233>>
Una versión simplificada del alfabeto con aridad en el que estan basados
los árboles construidos por el compilador de Tutu es:
\begin<<14660>>tex2html_deferred<<14660>>\par\end<<14661>>tex2html_deferred<<14661>>
\begin<<11234>>tabular<<11234>><<11235>>l<<11235>>
\begin<<13000>>tex2html_wrap_inline<<13000>>$\Sigma = \{ID, NUM, LEFTVALUE, STR, PLUS, TIMES, ASSIGN, PRINT \}$\end<<13001>>tex2html_wrap_inline<<13001>>\\ 
\begin<<13002>>tex2html_wrap_inline<<13002>>$\rho(ID) = \rho(NUM) = \rho(LEFTVALUE) = \rho(STR) = 0$\end<<13003>>tex2html_wrap_inline<<13003>>\\ 
\begin<<13004>>tex2html_wrap_inline<<13004>>$\rho(PRINT) = 1$\end<<13005>>tex2html_wrap_inline<<13005>>\\ 
\begin<<13006>>tex2html_wrap_inline<<13006>>$\rho(PLUS) = \rho(TIMES) = \rho(ASSIGN) = 2$\end<<13007>>tex2html_wrap_inline<<13007>>.
\end<<11236>>tabular<<11236>>
\begin<<14662>>tex2html_deferred<<14662>>\par\end<<14663>>tex2html_deferred<<14663>>
Observe que los elementos en \begin<<13008>>tex2html_wrap_inline<<13008>>$B(\Sigma)$\end<<13009>>tex2html_wrap_inline<<13009>>\space no necesariamente son 
árboles ``correctos''. Por ejemplo, el árbol
\begin<<13010>>tex2html_wrap_inline<<13010>>$ASSIGN(NUM, PRINT(ID))$\end<<13011>>tex2html_wrap_inline<<13011>>
es un elemento de \begin<<13012>>tex2html_wrap_inline<<13012>>$B(\Sigma)$\end<<13013>>tex2html_wrap_inline<<13013>>.\end<<11831>>theorem_type<<11831>>
\begin<<14664>>tex2html_deferred<<14664>>\par\end<<14665>>tex2html_deferred<<14665>>
\begin<<11832>>theorem_type<<11832>>[definition][definition][section][][][]
Una \index<<12188>>gramática árbol regular<<12188>>\emph<<12189>>gramática árbol regular<<12189>> es una cuadrupla \begin<<13014>>tex2html_wrap_inline<<13014>>$((\Sigma, \rho), N, P, S)$\end<<13015>>tex2html_wrap_inline<<13015>>, 
donde:
\begin<<11240>>itemize<<11240>>
\item
\begin<<13016>>tex2html_wrap_inline<<13016>>$(\Sigma, \rho)$\end<<13017>>tex2html_wrap_inline<<13017>>\space es un alfabeto con aricidad \begin<<13018>>tex2html_wrap_inline<<13018>>$\rho: \Sigma \rightarrow \mathds<<11241>>N<<11241>>$\end<<13019>>tex2html_wrap_inline<<13019>>
\item
\begin<<13020>>tex2html_wrap_inline<<13020>>$N$\end<<13021>>tex2html_wrap_inline<<13021>>\space es un conjunto finito de variables sintácticas o no terminales
\item
\begin<<13022>>tex2html_wrap_inline<<13022>>$P$\end<<13023>>tex2html_wrap_inline<<13023>>\space es un conjunto finito de reglas de producción de la forma
\begin<<13024>>tex2html_wrap_inline<<13024>>$X \rightarrow s$\end<<13025>>tex2html_wrap_inline<<13025>>\space con \begin<<13026>>tex2html_wrap_inline<<13026>>$X \in N$\end<<13027>>tex2html_wrap_inline<<13027>>\space y \begin<<13028>>tex2html_wrap_inline<<13028>>$s \in B(\Sigma \cup N)$\end<<13029>>tex2html_wrap_inline<<13029>>
\item
\begin<<13030>>tex2html_wrap_inline<<13030>>$S \in N$\end<<13031>>tex2html_wrap_inline<<13031>>\space es la variable o símbolo de arranque
\end<<11242>>itemize<<11242>>
\begin<<14666>>tex2html_deferred<<14666>>\par\end<<14667>>tex2html_deferred<<14667>>\end<<11833>>theorem_type<<11833>>
\begin<<14668>>tex2html_deferred<<14668>>\par\end<<14669>>tex2html_deferred<<14669>>
\begin<<11834>>theorem_type<<11834>>[definition][definition][section][][][]
Dada una gramática \begin<<13032>>tex2html_wrap_inline<<13032>>$(\Sigma, N, P, S)$\end<<13033>>tex2html_wrap_inline<<13033>>,
se dice que un árbol \begin<<13034>>tex2html_wrap_inline<<13034>>$t \in B(\Sigma \cup N)$\end<<13035>>tex2html_wrap_inline<<13035>>\space es del tipo \begin<<13036>>tex2html_wrap_inline<<13036>>$(X_1, \ldots X_k)$\end<<13037>>tex2html_wrap_inline<<13037>>
si el \begin<<13038>>tex2html_wrap_inline<<13038>>$j$\end<<13039>>tex2html_wrap_inline<<13039>>-ésimo noterminal, contando desde la izquierda, que aparece en \begin<<13040>>tex2html_wrap_inline<<13040>>$t$\end<<13041>>tex2html_wrap_inline<<13041>>
es \begin<<13042>>tex2html_wrap_inline<<13042>>$X_j \in N$\end<<13043>>tex2html_wrap_inline<<13043>>. 
\begin<<14670>>tex2html_deferred<<14670>>\par\end<<14671>>tex2html_deferred<<14671>>
Si \begin<<13044>>tex2html_wrap_inline<<13044>>$p = X \rightarrow s$\end<<13045>>tex2html_wrap_inline<<13045>>\space es una producción y \begin<<13046>>tex2html_wrap_inline<<13046>>$s$\end<<13047>>tex2html_wrap_inline<<13047>>\space es de tipo \begin<<13048>>tex2html_wrap_inline<<13048>>$(X_1, \ldots X_n)$\end<<13049>>tex2html_wrap_inline<<13049>>,
diremos que la producción \begin<<13050>>tex2html_wrap_inline<<13050>>$p$\end<<13051>>tex2html_wrap_inline<<13051>>\space es de tipo \begin<<13052>>tex2html_wrap_inline<<13052>>$(X_1, \ldots X_n) \rightarrow X$\end<<13053>>tex2html_wrap_inline<<13053>>.\end<<11835>>theorem_type<<11835>>
\begin<<14672>>tex2html_deferred<<14672>>\par\end<<14673>>tex2html_deferred<<14673>>
\begin<<11836>>theorem_type<<11836>>[definition][definition][section][][][]
Consideremos un árbol  \begin<<13054>>tex2html_wrap_inline<<13054>>$t \in B(\Sigma \cup N)$\end<<13055>>tex2html_wrap_inline<<13055>>
que sea del tipo \begin<<13056>>tex2html_wrap_inline<<13056>>$(X_1, \ldots X_n)$\end<<13057>>tex2html_wrap_inline<<13057>>, esto es las variables sintácticas
en el árbol leídas de izquierda a derecha son \begin<<13058>>tex2html_wrap_inline<<13058>>$(X_1, \ldots X_n)$\end<<13059>>tex2html_wrap_inline<<13059>>.
\begin<<14674>>tex2html_deferred<<14674>>\par\end<<14675>>tex2html_deferred<<14675>>
\begin<<11247>>itemize<<11247>>
\item
Si \begin<<13060>>tex2html_wrap_inline<<13060>>$X_i \rightarrow s_i \in P$\end<<13061>>tex2html_wrap_inline<<13061>>\space para algún \begin<<13062>>tex2html_wrap_inline<<13062>>$i$\end<<13063>>tex2html_wrap_inline<<13063>>, entonces 
decimos que el árbol \begin<<13064>>tex2html_wrap_inline<<13064>>$t$\end<<13065>>tex2html_wrap_inline<<13065>>\space \index<<12190>>deriva en un paso en el árbol<<12190>>\emph<<12191>>deriva en un paso en el árbol<<12191>>
\begin<<13066>>tex2html_wrap_inline<<13066>>$t'$\end<<13067>>tex2html_wrap_inline<<13067>>\space resultante de sustituir el nodo \begin<<13068>>tex2html_wrap_inline<<13068>>$X_i$\end<<13069>>tex2html_wrap_inline<<13069>>\space por el árbol \begin<<13070>>tex2html_wrap_inline<<13070>>$s_i$\end<<13071>>tex2html_wrap_inline<<13071>>\space y escribiremos
\begin<<13072>>tex2html_wrap_inline<<13072>>$t \Longrightarrow t'$\end<<13073>>tex2html_wrap_inline<<13073>>.  Esto es, \begin<<13074>>tex2html_wrap_inline<<13074>>$t' = t\{X_i/s_i\}$\end<<13075>>tex2html_wrap_inline<<13075>>
\item
Todo árbol deriva en cero pasos
en si mismo \begin<<13076>>tex2html_wrap_inline<<13076>>$t \stackrel<<11249>>0<<11249>><<11250>>\Longrightarrow<<11250>> t$\end<<13077>>tex2html_wrap_inline<<13077>>. 
\item
Decimos que un árbol \begin<<13078>>tex2html_wrap_inline<<13078>>$t$\end<<13079>>tex2html_wrap_inline<<13079>>\space deriva en \begin<<13080>>tex2html_wrap_inline<<13080>>$n$\end<<13081>>tex2html_wrap_inline<<13081>>\space pasos en el árbol \begin<<13082>>tex2html_wrap_inline<<13082>>$t'$\end<<13083>>tex2html_wrap_inline<<13083>>
y escribimos \begin<<13084>>tex2html_wrap_inline<<13084>>$t \stackrel<<11251>>n<<11251>><<11252>>\Longrightarrow<<11252>> t'$\end<<13085>>tex2html_wrap_inline<<13085>>
si \begin<<13086>>tex2html_wrap_inline<<13086>>$t$\end<<13087>>tex2html_wrap_inline<<13087>>\space deriva en un paso en un árbol \begin<<13088>>tex2html_wrap_inline<<13088>>$t''$\end<<13089>>tex2html_wrap_inline<<13089>>\space el cuál deriva en \begin<<13090>>tex2html_wrap_inline<<13090>>$n-1$\end<<13091>>tex2html_wrap_inline<<13091>>\space pasos en \begin<<13092>>tex2html_wrap_inline<<13092>>$t'$\end<<13093>>tex2html_wrap_inline<<13093>>.
En general, si \begin<<13094>>tex2html_wrap_inline<<13094>>$t$\end<<13095>>tex2html_wrap_inline<<13095>>\space deriva en un cierto número de pasos en \begin<<13096>>tex2html_wrap_inline<<13096>>$t'$\end<<13097>>tex2html_wrap_inline<<13097>>\space escribiremos
\begin<<13098>>tex2html_wrap_inline<<13098>>$t \stackrel<<11253>>*<<11253>><<11254>>\Longrightarrow<<11254>> t'$\end<<13099>>tex2html_wrap_inline<<13099>>.
\end<<11255>>itemize<<11255>>\end<<11837>>theorem_type<<11837>>
\begin<<14676>>tex2html_deferred<<14676>>\par\end<<14677>>tex2html_deferred<<14677>>
\begin<<11838>>theorem_type<<11838>>[definition][definition][section][][][]
Se define el \index<<12192>>lenguaje árbol generado por una gramática<<12192>>\emph<<12193>>lenguaje árbol generado por una gramática<<12193>> \begin<<13100>>tex2html_wrap_inline<<13100>>$G = (\Sigma, N, P, S)$\end<<13101>>tex2html_wrap_inline<<13101>>
como el lenguaje \begin<<13102>>tex2html_wrap_inline<<13102>>$L(G) = \{ t \in B(\Sigma): \exists S \stackrel<<11259>>*<<11259>><<11260>>\Longrightarrow<<11260>> t \}$\end<<13103>>tex2html_wrap_inline<<13103>>.\end<<11839>>theorem_type<<11839>>
\begin<<14678>>tex2html_deferred<<14678>>\par\end<<14679>>tex2html_deferred<<14679>>
\begin<<11840>>theorem_type<<11840>>[example][example][section][][][]
\label<<11263>>example:listtreegrammar<<11263>>
Sea \begin<<13104>>tex2html_wrap_inline<<13104>>$G = (\Sigma, V, P, S)$\end<<13105>>tex2html_wrap_inline<<13105>>\space con
\begin<<13106>>tex2html_wrap_inline<<13106>>$\Sigma = \{A, CONS, NIL \}$\end<<13107>>tex2html_wrap_inline<<13107>>\space y \begin<<13108>>tex2html_wrap_inline<<13108>>$\rho(A) = \rho(NIL) = 0, \rho(CONS) = 2$\end<<13109>>tex2html_wrap_inline<<13109>>
y sea \begin<<13110>>tex2html_wrap_inline<<13110>>$V = \{ E, L \}$\end<<13111>>tex2html_wrap_inline<<13111>>. El conjunto de producciones \begin<<13112>>tex2html_wrap_inline<<13112>>$P$\end<<13113>>tex2html_wrap_inline<<13113>>\space es:
\begin<<14680>>tex2html_deferred<<14680>>\par\end<<14681>>tex2html_deferred<<14681>>
\begin<<11264>>center<<11264>>
\begin<<13114>>tex2html_wrap_inline<<13114>>$P_1 = \{ L \rightarrow NIL, L \rightarrow CONS(E,L),E \rightarrow a \}$\end<<13115>>tex2html_wrap_inline<<13115>>
\end<<11265>>center<<11265>>
\begin<<14682>>tex2html_deferred<<14682>>\par\end<<14683>>tex2html_deferred<<14683>>
La producción \begin<<13116>>tex2html_wrap_inline<<13116>>$L \rightarrow CONS(E,L)$\end<<13117>>tex2html_wrap_inline<<13117>>\space es del tipo \begin<<13118>>tex2html_wrap_inline<<13118>>$(E,L) \rightarrow L$\end<<13119>>tex2html_wrap_inline<<13119>>. 
\begin<<14684>>tex2html_deferred<<14684>>\par\end<<14685>>tex2html_deferred<<14685>>
Informalmente, el lenguaje generado por \begin<<13120>>tex2html_wrap_inline<<13120>>$G$\end<<13121>>tex2html_wrap_inline<<13121>>\space se obtiene realizando sustituciones
sucesivas (derivando) desde el símbolo de arranque hasta producir un
árbol cuyos nodos estén etiquetados con elementos de \begin<<13122>>tex2html_wrap_inline<<13122>>$\Sigma$\end<<13123>>tex2html_wrap_inline<<13123>>. Debería ser claro
que, en este ejemplo, \begin<<13124>>tex2html_wrap_inline<<13124>>$L(G)$\end<<13125>>tex2html_wrap_inline<<13125>>\space es el conjunto de las listas en \begin<<13126>>tex2html_wrap_inline<<13126>>$A$\end<<13127>>tex2html_wrap_inline<<13127>>, incluyendo la lista vacía:
\begin<<14686>>tex2html_deferred<<14686>>\par\end<<14687>>tex2html_deferred<<14687>>
\begin<<11266>>center<<11266>>
\begin<<13128>>tex2html_wrap_inline<<13128>>$L(G) = \{ NIL, CONS(A, NIL), CONS(A, CONS(A,NIL)), \ldots \}$\end<<13129>>tex2html_wrap_inline<<13129>>
\end<<11267>>center<<11267>>
\begin<<14688>>tex2html_deferred<<14688>>\par\end<<14689>>tex2html_deferred<<14689>>\end<<11841>>theorem_type<<11841>>
\begin<<14690>>tex2html_deferred<<14690>>\par\end<<14691>>tex2html_deferred<<14691>>
\begin<<11842>>theorem_type<<11842>>[exercise][exercise][section][][][]
Construya una derivación para el árbol \begin<<13130>>tex2html_wrap_inline<<13130>>$CONS(A, CONS(A,NIL))$\end<<13131>>tex2html_wrap_inline<<13131>>.
¿De que tipo es el árbol \begin<<13132>>tex2html_wrap_inline<<13132>>$CONS(E, CONS(A, CONS(E,L)))$\end<<13133>>tex2html_wrap_inline<<13133>>?.\end<<11843>>theorem_type<<11843>>
\begin<<14692>>tex2html_deferred<<14692>>\par\end<<14693>>tex2html_deferred<<14693>>
Cuando hablamos del AAA producido por un analizador sintáctico,
estamos en realidad hablando de un lenguaje árbol cuya definición 
precisa debe hacerse a través de una gramática
árbol regular.
Mediante las gramáticas árbol regulares disponemos de un mecanismo para
describir formalmente el lenguaje de los 
AAA que producirá el analizador sintáctico
para las sentencias Tutu.
\begin<<14694>>tex2html_deferred<<14694>>\par\end<<14695>>tex2html_deferred<<14695>>
\begin<<11844>>theorem_type<<11844>>[example][example][section][][][]
\label<<11272>>example:tututreegrammar<<11272>>
Sea \begin<<13134>>tex2html_wrap_inline<<13134>>$G = (\Sigma, V, P, S)$\end<<13135>>tex2html_wrap_inline<<13135>>\space con
\begin<<14696>>tex2html_deferred<<14696>>\par\end<<14697>>tex2html_deferred<<14697>>
\begin<<11273>>center<<11273>>
\begin<<11274>>tabular<<11274>><<11275>>l<<11275>>
\begin<<13136>>tex2html_wrap_inline<<13136>>$\Sigma = \{ID, NUM, LEFTVALUE, STR, PLUS, TIMES, ASSIGN, PRINT \}$\end<<13137>>tex2html_wrap_inline<<13137>>\\ 
\begin<<13138>>tex2html_wrap_inline<<13138>>$\rho(ID) = \rho(NUM) = \rho(LEFTVALUE) = \rho(STR) = 0$\end<<13139>>tex2html_wrap_inline<<13139>>\\ 
\begin<<13140>>tex2html_wrap_inline<<13140>>$\rho(PRINT) = 1$\end<<13141>>tex2html_wrap_inline<<13141>>\\ 
\begin<<13142>>tex2html_wrap_inline<<13142>>$\rho(PLUS) = \rho(TIMES) = \rho(ASSIGN) = 2$\end<<13143>>tex2html_wrap_inline<<13143>>\\ 
\begin<<13144>>tex2html_wrap_inline<<13144>>$V = \{ st, expr \}$\end<<13145>>tex2html_wrap_inline<<13145>>\\ 
\end<<11276>>tabular<<11276>>
\end<<11277>>center<<11277>>
y las producciones:
\begin<<14698>>tex2html_deferred<<14698>>\par\end<<14699>>tex2html_deferred<<14699>>
\begin<<11278>>center<<11278>>
\begin<<11279>>tabular<<11279>><<11280>>lll<<11280>>
\begin<<13146>>tex2html_wrap_inline<<13146>>$P =$\end<<13147>>tex2html_wrap_inline<<13147>>\space    ;SPMamp;\begin<<13148>>tex2html_wrap_inline<<13148>>$\{$\end<<13149>>tex2html_wrap_inline<<13149>>\space      ;SPMamp;\\ 
         ;SPMamp; \begin<<13150>>tex2html_wrap_inline<<13150>>$st$\end<<13151>>tex2html_wrap_inline<<13151>>\space     ;SPMamp;\begin<<13152>>tex2html_wrap_inline<<13152>>$\rightarrow ASSIGN(LEFTVALUE, expr)$\end<<13153>>tex2html_wrap_inline<<13153>>\\ 
         ;SPMamp; \begin<<13154>>tex2html_wrap_inline<<13154>>$st$\end<<13155>>tex2html_wrap_inline<<13155>>\space     ;SPMamp;\begin<<13156>>tex2html_wrap_inline<<13156>>$\rightarrow PRINT(expr)$\end<<13157>>tex2html_wrap_inline<<13157>>\\ 
         ;SPMamp; \begin<<13158>>tex2html_wrap_inline<<13158>>$expr$\end<<13159>>tex2html_wrap_inline<<13159>>\space   ;SPMamp;\begin<<13160>>tex2html_wrap_inline<<13160>>$\rightarrow PLUS(expr, expr)$\end<<13161>>tex2html_wrap_inline<<13161>>\\ 
         ;SPMamp; \begin<<13162>>tex2html_wrap_inline<<13162>>$expr$\end<<13163>>tex2html_wrap_inline<<13163>>\space   ;SPMamp;\begin<<13164>>tex2html_wrap_inline<<13164>>$\rightarrow TIMES(expr, expr)$\end<<13165>>tex2html_wrap_inline<<13165>>\\ 
         ;SPMamp; \begin<<13166>>tex2html_wrap_inline<<13166>>$expr$\end<<13167>>tex2html_wrap_inline<<13167>>\space   ;SPMamp;\begin<<13168>>tex2html_wrap_inline<<13168>>$\rightarrow NUM$\end<<13169>>tex2html_wrap_inline<<13169>>\\ 
         ;SPMamp; \begin<<13170>>tex2html_wrap_inline<<13170>>$expr$\end<<13171>>tex2html_wrap_inline<<13171>>\space   ;SPMamp;\begin<<13172>>tex2html_wrap_inline<<13172>>$\rightarrow ID$\end<<13173>>tex2html_wrap_inline<<13173>>\\ 
         ;SPMamp; \begin<<13174>>tex2html_wrap_inline<<13174>>$expr$\end<<13175>>tex2html_wrap_inline<<13175>>\space   ;SPMamp;\begin<<13176>>tex2html_wrap_inline<<13176>>$\rightarrow STR$\end<<13177>>tex2html_wrap_inline<<13177>>\\ 
         ;SPMamp;\begin<<13178>>tex2html_wrap_inline<<13178>>$\}$\end<<13179>>tex2html_wrap_inline<<13179>>\space      ;SPMamp; 
\end<<11281>>tabular<<11281>>
\end<<11282>>center<<11282>>
\begin<<14700>>tex2html_deferred<<14700>>\par\end<<14701>>tex2html_deferred<<14701>>
Entonces el lenguaje \begin<<13180>>tex2html_wrap_inline<<13180>>$L(G)$\end<<13181>>tex2html_wrap_inline<<13181>>\space contiene árboles
como el siguiente: 
\begin<<14702>>tex2html_deferred<<14702>>\par\end<<14703>>tex2html_deferred<<14703>>
\begin<<11283>>tabular<<11283>><<11284>>llll<<11284>>
\begin<<13182>>tex2html_wrap_inline<<13182>>$ASSIGN$\end<<13183>>tex2html_wrap_inline<<13183>>\space  ;SPMamp; \begin<<13184>>tex2html_wrap_inline<<13184>>$($\end<<13185>>tex2html_wrap_inline<<13185>>\space          ;SPMamp;         ;SPMamp;\\ 
          ;SPMamp; \begin<<13186>>tex2html_wrap_inline<<13186>>$LEFTVALUE$\end<<13187>>tex2html_wrap_inline<<13187>>, ;SPMamp;   ;SPMamp;\\ 
          ;SPMamp; \begin<<13188>>tex2html_wrap_inline<<13188>>$PLUS$\end<<13189>>tex2html_wrap_inline<<13189>>\space       ;SPMamp; \begin<<13190>>tex2html_wrap_inline<<13190>>$($\end<<13191>>tex2html_wrap_inline<<13191>>\space     ;SPMamp;\\ 
          ;SPMamp;              ;SPMamp; \begin<<13192>>tex2html_wrap_inline<<13192>>$ID$\end<<13193>>tex2html_wrap_inline<<13193>>,   ;SPMamp; \\ 
          ;SPMamp;              ;SPMamp; \begin<<13194>>tex2html_wrap_inline<<13194>>$TIMES$\end<<13195>>tex2html_wrap_inline<<13195>>\space ;SPMamp; \begin<<13196>>tex2html_wrap_inline<<13196>>$($\end<<13197>>tex2html_wrap_inline<<13197>>\\ 
          ;SPMamp;              ;SPMamp;         ;SPMamp; \begin<<13198>>tex2html_wrap_inline<<13198>>$NUM$\end<<13199>>tex2html_wrap_inline<<13199>>,\\ 
          ;SPMamp;              ;SPMamp;         ;SPMamp; \begin<<13200>>tex2html_wrap_inline<<13200>>$ID$\end<<13201>>tex2html_wrap_inline<<13201>>\\ 
          ;SPMamp;              ;SPMamp;         ;SPMamp; \begin<<13202>>tex2html_wrap_inline<<13202>>$)$\end<<13203>>tex2html_wrap_inline<<13203>>\\ 
          ;SPMamp;              ;SPMamp; \begin<<13204>>tex2html_wrap_inline<<13204>>$)$\end<<13205>>tex2html_wrap_inline<<13205>>\space     ;SPMamp;\\ 
          ;SPMamp; \begin<<13206>>tex2html_wrap_inline<<13206>>$)$\end<<13207>>tex2html_wrap_inline<<13207>>\space          ;SPMamp;         ;SPMamp;
\end<<11285>>tabular<<11285>>
\begin<<14704>>tex2html_deferred<<14704>>\par\end<<14705>>tex2html_deferred<<14705>>
El cual podría corresponderse con una sentencia como
<tex2html_verb_mark>1874<tex2html_verb_mark>.
\begin<<14706>>tex2html_deferred<<14706>>\par\end<<14707>>tex2html_deferred<<14707>>
El lenguaje de árboles descrito por esta gramática árbol 
es el lenguaje de los AAA de las sentencias de Tutu.\end<<11845>>theorem_type<<11845>>
\begin<<14708>>tex2html_deferred<<14708>>\par\end<<14709>>tex2html_deferred<<14709>>
\begin<<11846>>theorem_type<<11846>>[exercise][exercise][section][][][]
Redefina el concepto de árbol de análisis concreto dado
en la definición \ref<<11288>>definition:arbolconcreto<<11288>> utilizando el
concepto de gramática árbol. Con mas precisión,
dada una gramática \begin<<13208>>tex2html_wrap_inline<<13208>>$G = (\Sigma, V, P, S)$\end<<13209>>tex2html_wrap_inline<<13209>>\space defina una gramática
árbol \begin<<13210>>tex2html_wrap_inline<<13210>>$T = (\Omega, N, R, U)$\end<<13211>>tex2html_wrap_inline<<13211>>\space tal que \begin<<13212>>tex2html_wrap_inline<<13212>>$L(T)$\end<<13213>>tex2html_wrap_inline<<13213>>\space sea el lenguaje 
de los árboles concretos de \begin<<13214>>tex2html_wrap_inline<<13214>>$G$\end<<13215>>tex2html_wrap_inline<<13215>>. Puesto que las partes 
derechas de las reglas de producción de \begin<<13216>>tex2html_wrap_inline<<13216>>$P$\end<<13217>>tex2html_wrap_inline<<13217>>\space pueden ser 
de distinta longitud, existe un problema con
la aricidad de los elementos de \begin<<13218>>tex2html_wrap_inline<<13218>>$\Omega$\end<<13219>>tex2html_wrap_inline<<13219>>. Discuta posibles
soluciones.\end<<11847>>theorem_type<<11847>>
\begin<<14710>>tex2html_deferred<<14710>>\par\end<<14711>>tex2html_deferred<<14711>>
\begin<<11848>>theorem_type<<11848>>[exercise][exercise][section][][][]
¿Cómo son los árboles sintácticos en las derivaciones árbol?
Dibuje varios árboles sintácticos para las gramáticas 
introducidas en los ejemplos 
\ref<<11291>>example:listtreegrammar<<11291>>
y \ref<<11292>>example:tututreegrammar<<11292>>.
\begin<<14712>>tex2html_deferred<<14712>>\par\end<<14713>>tex2html_deferred<<14713>>
Intente dar una definición formal del concepto de árbol de análisis
sintáctico asociado con una derivación en una gramática árbol\end<<11849>>theorem_type<<11849>>
\begin<<14714>>tex2html_deferred<<14714>>\par\end<<14715>>tex2html_deferred<<14715>>
\begin<<11850>>theorem_type<<11850>>[definition][definition][section][][][]
\label<<11295>>definition:dewey<<11295>>
La notación de Dewey es una forma de especificar los subárboles
de un árbol \begin<<13220>>tex2html_wrap_inline<<13220>>$t \in B(\Sigma)$\end<<13221>>tex2html_wrap_inline<<13221>>. La notación sigue el mismo
esquema que la numeración de secciones en un texto: 
es una palabra formada por números separados
por puntos. Así <<11296>>\begin<<14716>>tex2html_deferred<<14716>>\it\end<<14717>>tex2html_deferred<<14717>>t/2.1.3 <<11296>>
denota al tercer hijo del primer hijo del segundo hijo
del árbol \begin<<13222>>tex2html_wrap_inline<<13222>>$t$\end<<13223>>tex2html_wrap_inline<<13223>>.
La definición formal sería:
\begin<<11297>>itemize<<11297>>
\item
\begin<<13224>>tex2html_wrap_inline<<13224>>$t/\epsilon = t$\end<<13225>>tex2html_wrap_inline<<13225>>
\item
Si \begin<<13226>>tex2html_wrap_inline<<13226>>$t = a(t_1, \ldots t_k)$\end<<13227>>tex2html_wrap_inline<<13227>>\space y \begin<<13228>>tex2html_wrap_inline<<13228>>$j \in \{ 1 \ldots k \}$\end<<13229>>tex2html_wrap_inline<<13229>>\space y \begin<<13230>>tex2html_wrap_inline<<13230>>$n$\end<<13231>>tex2html_wrap_inline<<13231>>\space es una 
cadena de números y puntos, se define 
inductivamente el subárbol \begin<<13232>>tex2html_wrap_inline<<13232>>$t/j.n$\end<<13233>>tex2html_wrap_inline<<13233>>\space como el subárbol \begin<<13234>>tex2html_wrap_inline<<13234>>$n$\end<<13235>>tex2html_wrap_inline<<13235>>-ésimo del
\begin<<13236>>tex2html_wrap_inline<<13236>>$j$\end<<13237>>tex2html_wrap_inline<<13237>>-ésimo subárbol de \begin<<13238>>tex2html_wrap_inline<<13238>>$t$\end<<13239>>tex2html_wrap_inline<<13239>>. Esto es: \begin<<13240>>tex2html_wrap_inline<<13240>>$t/j.n = t_j/n$\end<<13241>>tex2html_wrap_inline<<13241>>
\end<<11298>>itemize<<11298>>\end<<11851>>theorem_type<<11851>>
\begin<<14718>>tex2html_deferred<<14718>>\par\end<<14719>>tex2html_deferred<<14719>>
\begin<<11852>>theorem_type<<11852>>[exercise][exercise][section][][][]
Sea el árbol:
\begin<<14720>>tex2html_deferred<<14720>>\par\end<<14721>>tex2html_deferred<<14721>>
\vspace<<11301>>0.5cm<<11301>>
\begin<<11302>>tabular<<11302>><<11303>>llll<<11303>>
\begin<<13242>>tex2html_wrap_inline<<13242>>$t = ASSIGN$\end<<13243>>tex2html_wrap_inline<<13243>>\space  ;SPMamp; \begin<<13244>>tex2html_wrap_inline<<13244>>$($\end<<13245>>tex2html_wrap_inline<<13245>>\space          ;SPMamp;         ;SPMamp;\\ 
          ;SPMamp; \begin<<13246>>tex2html_wrap_inline<<13246>>$LEFTVALUE$\end<<13247>>tex2html_wrap_inline<<13247>>, ;SPMamp;   ;SPMamp;\\ 
          ;SPMamp; \begin<<13248>>tex2html_wrap_inline<<13248>>$PLUS$\end<<13249>>tex2html_wrap_inline<<13249>>\space       ;SPMamp; \begin<<13250>>tex2html_wrap_inline<<13250>>$($\end<<13251>>tex2html_wrap_inline<<13251>>\space     ;SPMamp;\\ 
          ;SPMamp;              ;SPMamp; \begin<<13252>>tex2html_wrap_inline<<13252>>$ID$\end<<13253>>tex2html_wrap_inline<<13253>>,   ;SPMamp; \\ 
          ;SPMamp;              ;SPMamp; \begin<<13254>>tex2html_wrap_inline<<13254>>$TIMES$\end<<13255>>tex2html_wrap_inline<<13255>>\space ;SPMamp; \begin<<13256>>tex2html_wrap_inline<<13256>>$($\end<<13257>>tex2html_wrap_inline<<13257>>\\ 
          ;SPMamp;              ;SPMamp;         ;SPMamp; \begin<<13258>>tex2html_wrap_inline<<13258>>$NUM$\end<<13259>>tex2html_wrap_inline<<13259>>,\\ 
          ;SPMamp;              ;SPMamp;         ;SPMamp; \begin<<13260>>tex2html_wrap_inline<<13260>>$ID$\end<<13261>>tex2html_wrap_inline<<13261>>\\ 
          ;SPMamp;              ;SPMamp;         ;SPMamp; \begin<<13262>>tex2html_wrap_inline<<13262>>$)$\end<<13263>>tex2html_wrap_inline<<13263>>\\ 
          ;SPMamp;              ;SPMamp; \begin<<13264>>tex2html_wrap_inline<<13264>>$)$\end<<13265>>tex2html_wrap_inline<<13265>>\space     ;SPMamp;\\ 
          ;SPMamp; \begin<<13266>>tex2html_wrap_inline<<13266>>$)$\end<<13267>>tex2html_wrap_inline<<13267>>\space          ;SPMamp;         ;SPMamp;
\end<<11304>>tabular<<11304>>
\begin<<14722>>tex2html_deferred<<14722>>\par\end<<14723>>tex2html_deferred<<14723>>
\vspace<<11305>>0.5cm<<11305>>
Calcule los subárboles \begin<<13268>>tex2html_wrap_inline<<13268>>$t/\epsilon$\end<<13269>>tex2html_wrap_inline<<13269>>, \begin<<13270>>tex2html_wrap_inline<<13270>>$t/2\ldotp2\ldotp1$\end<<13271>>tex2html_wrap_inline<<13271>>, \begin<<13272>>tex2html_wrap_inline<<13272>>$t/2\ldotp1$\end<<13273>>tex2html_wrap_inline<<13273>>\space y \begin<<13274>>tex2html_wrap_inline<<13274>>$t/2\ldotp1\ldotp2$\end<<13275>>tex2html_wrap_inline<<13275>>.\end<<11853>>theorem_type<<11853>>
\begin<<14724>>tex2html_deferred<<14724>>\par\end<<14725>>tex2html_deferred<<14725>>
\subsection<<11307>>Realización del AAA para Tutu en Perl<<11307>>
En la sección 
\ref<<11308>>subsection:introduccion<<11308>>
nos limitamos a realizar un recorrido del árbol
de análisis sintáctico concreto. En esta sección construimos un 
\index<<12194>>árbol de análisis sintáctico abstracto<<12194>>\emph<<12195>>árbol de análisis sintáctico abstracto<<12195>>. Este proceso puede
verse como \emph<<11310>>la traducción desde el lenguaje de árboles concretos
hasta el lenguaje de árboles abstractos<<11310>>.
\begin<<14726>>tex2html_deferred<<14726>>\par\end<<14727>>tex2html_deferred<<14727>>
\begin<<11854>>theorem_type<<11854>>[definition][definition][section][][][]
\label<<11312>>definition:tutuast<<11312>>
La gramática árbol extendida que especifica los árboles AAA
para el compilador de Tutu es esta:
\begin<<14728>>tex2html_deferred<<14728>>\par\end<<14729>>tex2html_deferred<<14729>>
\begin<<11313>>center<<11313>>
\begin<<11314>>tabular<<11314>><<11315>>l|ll<<11315>>
  1 ;SPMamp; \begin<<13276>>tex2html_wrap_inline<<13276>>$prog$\end<<13277>>tex2html_wrap_inline<<13277>>\space   ;SPMamp;\begin<<13278>>tex2html_wrap_inline<<13278>>$\rightarrow PROGRAM(decls, sts)$\end<<13279>>tex2html_wrap_inline<<13279>>\\ 
  2 ;SPMamp; \begin<<13280>>tex2html_wrap_inline<<13280>>$decls$\end<<13281>>tex2html_wrap_inline<<13281>>\space  ;SPMamp;\begin<<13282>>tex2html_wrap_inline<<13282>>$\rightarrow$\end<<13283>>tex2html_wrap_inline<<13283>>\space list \begin<<13284>>tex2html_wrap_inline<<13284>>$decl$\end<<13285>>tex2html_wrap_inline<<13285>>\\ 
  3 ;SPMamp; \begin<<13286>>tex2html_wrap_inline<<13286>>$sts$\end<<13287>>tex2html_wrap_inline<<13287>>\space    ;SPMamp;\begin<<13288>>tex2html_wrap_inline<<13288>>$\rightarrow$\end<<13289>>tex2html_wrap_inline<<13289>>\space list \begin<<13290>>tex2html_wrap_inline<<13290>>$st$\end<<13291>>tex2html_wrap_inline<<13291>>\\ 
  4 ;SPMamp; \begin<<13292>>tex2html_wrap_inline<<13292>>$decl$\end<<13293>>tex2html_wrap_inline<<13293>>\space   ;SPMamp;\begin<<13294>>tex2html_wrap_inline<<13294>>$\rightarrow INT(idlist)$\end<<13295>>tex2html_wrap_inline<<13295>>\\ 
  5 ;SPMamp; \begin<<13296>>tex2html_wrap_inline<<13296>>$decl$\end<<13297>>tex2html_wrap_inline<<13297>>\space   ;SPMamp;\begin<<13298>>tex2html_wrap_inline<<13298>>$\rightarrow STRING(idlist)$\end<<13299>>tex2html_wrap_inline<<13299>>\\ 
  6 ;SPMamp; \begin<<13300>>tex2html_wrap_inline<<13300>>$idlist$\end<<13301>>tex2html_wrap_inline<<13301>>\space ;SPMamp;\begin<<13302>>tex2html_wrap_inline<<13302>>$\rightarrow$\end<<13303>>tex2html_wrap_inline<<13303>>\space list \begin<<13304>>tex2html_wrap_inline<<13304>>$SIMPLEID$\end<<13305>>tex2html_wrap_inline<<13305>>\\ 
  7 ;SPMamp; \begin<<13306>>tex2html_wrap_inline<<13306>>$st$\end<<13307>>tex2html_wrap_inline<<13307>>\space     ;SPMamp;\begin<<13308>>tex2html_wrap_inline<<13308>>$\rightarrow ASSIGN(LEFTVALUE, expr)$\end<<13309>>tex2html_wrap_inline<<13309>>\\ 
  8 ;SPMamp; \begin<<13310>>tex2html_wrap_inline<<13310>>$st$\end<<13311>>tex2html_wrap_inline<<13311>>\space     ;SPMamp;\begin<<13312>>tex2html_wrap_inline<<13312>>$\rightarrow PRINT(expr)$\end<<13313>>tex2html_wrap_inline<<13313>>\\ 
  9 ;SPMamp; \begin<<13314>>tex2html_wrap_inline<<13314>>$expr$\end<<13315>>tex2html_wrap_inline<<13315>>\space   ;SPMamp;\begin<<13316>>tex2html_wrap_inline<<13316>>$\rightarrow PLUS(expr, expr)$\end<<13317>>tex2html_wrap_inline<<13317>>\\ 
 10 ;SPMamp; \begin<<13318>>tex2html_wrap_inline<<13318>>$expr$\end<<13319>>tex2html_wrap_inline<<13319>>\space   ;SPMamp;\begin<<13320>>tex2html_wrap_inline<<13320>>$\rightarrow TIMES(expr, expr)$\end<<13321>>tex2html_wrap_inline<<13321>>\\ 
 11 ;SPMamp; \begin<<13322>>tex2html_wrap_inline<<13322>>$expr$\end<<13323>>tex2html_wrap_inline<<13323>>\space   ;SPMamp;\begin<<13324>>tex2html_wrap_inline<<13324>>$\rightarrow NUM$\end<<13325>>tex2html_wrap_inline<<13325>>\\ 
 12 ;SPMamp; \begin<<13326>>tex2html_wrap_inline<<13326>>$expr$\end<<13327>>tex2html_wrap_inline<<13327>>\space   ;SPMamp;\begin<<13328>>tex2html_wrap_inline<<13328>>$\rightarrow ID$\end<<13329>>tex2html_wrap_inline<<13329>>\\ 
 13 ;SPMamp; \begin<<13330>>tex2html_wrap_inline<<13330>>$expr$\end<<13331>>tex2html_wrap_inline<<13331>>\space   ;SPMamp;\begin<<13332>>tex2html_wrap_inline<<13332>>$\rightarrow STR$\end<<13333>>tex2html_wrap_inline<<13333>>\\ 
\end<<11316>>tabular<<11316>>
\end<<11317>>center<<11317>>\end<<11855>>theorem_type<<11855>>
\begin<<14730>>tex2html_deferred<<14730>>\par\end<<14731>>tex2html_deferred<<14731>>
Hemos extendido el concepto de gramática 
árbol con el concepto de \index<<12196>>lista de no terminales<<12196>>\emph<<12197>>lista de no terminales<<12197>>. 
A la hora de construir las estructuras de datos
las listas de variables se van a traducir por listas de árboles.
\begin<<14732>>tex2html_deferred<<14732>>\par\end<<14733>>tex2html_deferred<<14733>>
Por ejemplo, un árbol abstracto para el programa
\begin<<14734>>tex2html_deferred<<14734>>\par\end<<14735>>tex2html_deferred<<14735>>
\begin<<11320>>tex2html_preform<<11320>><tex2html_verbatim_mark>verbatim5578#\end<<11321>>tex2html_preform<<11321>>
\begin<<14736>>tex2html_deferred<<14736>>\par\end<<14737>>tex2html_deferred<<14737>>
Sería de la forma:
\begin<<14738>>tex2html_deferred<<14738>>\par\end<<14739>>tex2html_deferred<<14739>>
\begin<<11322>>tex2html_preform<<11322>><tex2html_verbatim_mark>verbatim5579#\end<<11323>>tex2html_preform<<11323>>
\begin<<14740>>tex2html_deferred<<14740>>\par\end<<14741>>tex2html_deferred<<14741>>
Donde los corchetes indican listas y los paréntesis tuplas.
\begin<<14742>>tex2html_deferred<<14742>>\par\end<<14743>>tex2html_deferred<<14743>>
Para llevar a cabo la traducción deberemos 
tomar decisiones sobre que forma de representación nos conviene.
Cada nodo del AAA va a ser un objeto y la clase indicará si es un nodo
suma, producto, una declaración, una asignación, etc. 
\begin<<14744>>tex2html_deferred<<14744>>\par\end<<14745>>tex2html_deferred<<14745>>
Cada nodo del árbol AAA va a ser un objeto. 
De este modo el acceso a los atributos del nodo se hará a través de
los métodos asociados. Además, el procedimiento de traducción
al lenguaje objetivo depende del tipo de nodo. Así por ejemplo,
el método \emph<<11324>>traducción<<11324>>
es diferente para un nodo de tipo \begin<<13334>>tex2html_wrap_inline<<13334>>$PLUS$\end<<13335>>tex2html_wrap_inline<<13335>>\space que para otro de tipo \begin<<13336>>tex2html_wrap_inline<<13336>>$ASSIGN$\end<<13337>>tex2html_wrap_inline<<13337>>.
\begin<<14746>>tex2html_deferred<<14746>>\par\end<<14747>>tex2html_deferred<<14747>>
Resumamos antes de entrar en detalle, la forma de manejar los
objetos en Perl:
\begin<<14748>>tex2html_deferred<<14748>>\par\end<<14749>>tex2html_deferred<<14749>>
\begin<<11325>>itemize<<11325>>
\item
Para crear una \index<<12198>>clase<<12198>>\emph<<12199>>clase<<12199>> se construye un ``package'':
\begin<<11327>>tex2html_preform<<11327>><tex2html_verbatim_mark>verbatim5580#\end<<11328>>tex2html_preform<<11328>>
\item
Para crea un \index<<12200>>método<<12200>>\emph<<12201>>método<<12201>> se escribe una subrutina:
\begin<<11330>>tex2html_preform<<11330>><tex2html_verbatim_mark>verbatim5581#\end<<11331>>tex2html_preform<<11331>>
el primer argumento de un método suele ser la referencia al 
objeto en cuestión.
\item
Para crear un \index<<12202>>objeto<<12202>>\emph<<12203>>objeto<<12203>>, se bendice (``bless'') una referencia.
Los objetos Perl son datos normales como hashes y arrays que han sido 
``bendecidos'' en un paquete. Por ejemplo:
\begin<<11333>>tex2html_preform<<11333>><tex2html_verbatim_mark>verbatim5582#\end<<11334>>tex2html_preform<<11334>>
crea un objeto referenciado por <tex2html_verb_mark>1875<tex2html_verb_mark> que pertenece a la clase <tex2html_verb_mark>1876<tex2html_verb_mark>.
Los métodos del objeto son las subrutinas que aparecen en el <tex2html_verb_mark>1877<tex2html_verb_mark>.
\item
Para referirse a un método de un objeto se usa la sintáxis ``flecha'':
\begin<<11335>>tex2html_preform<<11335>><tex2html_verbatim_mark>verbatim5583#\end<<11336>>tex2html_preform<<11336>>
Cuando se usa la sintáxis flecha, el primer argumento de la rutina es 
la referencia al objeto, esto es, la llamada anterior es equivalente a
<tex2html_verb_mark>1878<tex2html_verb_mark>
\item
Constructores: En Perl son rutinas que retornan una referencia a un objeto 
recién creado e inicializado
\begin<<11337>>tex2html_preform<<11337>><tex2html_verbatim_mark>verbatim5584#\end<<11338>>tex2html_preform<<11338>>
Normalmente se llaman usando la sintáxis flecha, pero a la izquierda de la
flecha va el nombre de la clase. Por ejemplo:
\begin<<14750>>tex2html_deferred<<14750>>\par\end<<14751>>tex2html_deferred<<14751>>
<tex2html_verb_mark>1879<tex2html_verb_mark> 
\begin<<14752>>tex2html_deferred<<14752>>\par\end<<14753>>tex2html_deferred<<14753>>
En este caso,
el primer argumento es el nombre de la clase. La llamada anterior es
equivalente a 
\begin<<14754>>tex2html_deferred<<14754>>\par\end<<14755>>tex2html_deferred<<14755>>
<tex2html_verb_mark>1880<tex2html_verb_mark>
\end<<11339>>itemize<<11339>>
\begin<<14756>>tex2html_deferred<<14756>>\par\end<<14757>>tex2html_deferred<<14757>>
Volviendo a nuestro problema de crear el AAA, para crear los 
objetos de las diferentes clases de nodos
usaremos el módulo  <tex2html_verb_mark>1881<tex2html_verb_mark>
(véase la línea 9):
\begin<<14758>>tex2html_deferred<<14758>>\par\end<<14759>>tex2html_deferred<<14759>>
\begin<<11340>>tex2html_preform<<11340>><tex2html_verbatim_mark>verbatim5585#\end<<11341>>tex2html_preform<<11341>>
\begin<<14760>>tex2html_deferred<<14760>>\par\end<<14761>>tex2html_deferred<<14761>>
Hemos aislado la fase de análisis sintáctica en un módulo
aparte denominado <tex2html_verb_mark>1882<tex2html_verb_mark>.
La dependencia se actualiza en <tex2html_verb_mark>1883<tex2html_verb_mark>:
\begin<<11342>>tex2html_preform<<11342>><tex2html_verbatim_mark>verbatim5586#\end<<11343>>tex2html_preform<<11343>>
Se actualiza también MANIFEST:
\begin<<11344>>tex2html_preform<<11344>><tex2html_verbatim_mark>verbatim5587#\end<<11345>>tex2html_preform<<11345>>
\begin<<14762>>tex2html_deferred<<14762>>\par\end<<14763>>tex2html_deferred<<14763>>
Ahora <tex2html_verb_mark>1884<tex2html_verb_mark> llama a <tex2html_verb_mark>1885<tex2html_verb_mark> pasándole
como argumento la lista de terminales <tex2html_verb_mark>1886<tex2html_verb_mark>. La función <tex2html_verb_mark>1887<tex2html_verb_mark>
devuelve el AAA:
\begin<<11346>>tex2html_preform<<11346>><tex2html_verbatim_mark>verbatim5588#\end<<11347>>tex2html_preform<<11347>>
El módulo <tex2html_verb_mark>1888<tex2html_verb_mark>
permite crear constructores y métodos de acceso.
El módulo no viene con la distribución de Perl, así que, en general, deberá 
descargarlo desde CPAN e instalarlo.
Así definimos que existe una clase de nodos <tex2html_verb_mark>1889<tex2html_verb_mark>
que nuestro AAA va a tener:
\begin<<14764>>tex2html_deferred<<14764>>\par\end<<14765>>tex2html_deferred<<14765>>
\begin<<11348>>tex2html_preform<<11348>><tex2html_verbatim_mark>verbatim5589#\end<<11349>>tex2html_preform<<11349>>
\begin<<14766>>tex2html_deferred<<14766>>\par\end<<14767>>tex2html_deferred<<14767>>
El uso de los argumentos <tex2html_verb_mark>1890<tex2html_verb_mark>
hace que se cree un objeto de tipo hash  con claves 
<tex2html_verb_mark>1891<tex2html_verb_mark> y <tex2html_verb_mark>1892<tex2html_verb_mark> así como métodos <tex2html_verb_mark>1893<tex2html_verb_mark>
y <tex2html_verb_mark>1894<tex2html_verb_mark> que cuando se llaman con un argumento devuelven
el valor y cuando se llaman con dos argumentos modifican el
valor correspondiente. 
La clave <tex2html_verb_mark>1895<tex2html_verb_mark> produce métodos de acceso
y modificación de los atributos del objeto que
tienen la forma:
\begin<<14768>>tex2html_deferred<<14768>>\par\end<<14769>>tex2html_deferred<<14769>>
\begin<<11350>>tex2html_preform<<11350>><tex2html_verbatim_mark>verbatim5590#\end<<11351>>tex2html_preform<<11351>>
\begin<<14770>>tex2html_deferred<<14770>>\par\end<<14771>>tex2html_deferred<<14771>>
Asi mismo el uso de <tex2html_verb_mark>1896<tex2html_verb_mark>
genera un constructor cuyo nombre
será <tex2html_verb_mark>1897<tex2html_verb_mark> y que cuando es llamado inicializará el
objeto con los argumentos con nombre especificados en la llamada.
El constructor construído (vaya retruécano) cuando se usa la clave
<tex2html_verb_mark>1898<tex2html_verb_mark> tiene el siguiente aspecto:
\begin<<14772>>tex2html_deferred<<14772>>\par\end<<14773>>tex2html_deferred<<14773>>
\begin<<11352>>tex2html_preform<<11352>><tex2html_verbatim_mark>verbatim5591#\end<<11353>>tex2html_preform<<11353>>
\begin<<14774>>tex2html_deferred<<14774>>\par\end<<14775>>tex2html_deferred<<14775>>
Ahora podemos crear objetos de la clase <tex2html_verb_mark>1899<tex2html_verb_mark> haciendo:
\begin<<11354>>tex2html_preform<<11354>><tex2html_verbatim_mark>verbatim5592#\end<<11355>>tex2html_preform<<11355>>
Cada uno de estos objetos es un hash con las correspondientes
claves para el nombre y el tipo.
\begin<<14776>>tex2html_deferred<<14776>>\par\end<<14777>>tex2html_deferred<<14777>>
Otros tipos de nodos del AAA son:
\begin<<14778>>tex2html_deferred<<14778>>\par\end<<14779>>tex2html_deferred<<14779>>
\begin<<11356>>tex2html_preform<<11356>><tex2html_verbatim_mark>verbatim5593#\end<<11357>>tex2html_preform<<11357>>
\begin<<14780>>tex2html_deferred<<14780>>\par\end<<14781>>tex2html_deferred<<14781>>
Hemos extendido el concepto de gramática 
árbol con el concepto de \index<<12204>>lista de no terminales<<12204>>\emph<<12205>>lista de no terminales<<12205>>. 
A la hora de construir las estructuras de datos
las listas de variables se van a traducir por listas de árboles.
Los tipos de nodos (\begin<<13338>>tex2html_wrap_inline<<13338>>$ASSIGN$\end<<13339>>tex2html_wrap_inline<<13339>>, \begin<<13340>>tex2html_wrap_inline<<13340>>$PRINT$\end<<13341>>tex2html_wrap_inline<<13341>>, \ldots )
se traducen en nombres de clases. Hemos hecho
una excepción con \begin<<13342>>tex2html_wrap_inline<<13342>>$SIMPLEID$\end<<13343>>tex2html_wrap_inline<<13343>>\space el cual es simplemente una 
variable cadena conteniendo el identificador correspondiente.
\begin<<14782>>tex2html_deferred<<14782>>\par\end<<14783>>tex2html_deferred<<14783>>
El siguiente esquema de traducción resume la idea para una gramática 
simplificada: cada vez que encontremos un nodo en el árbol sintáctico 
concreto con una operación crearemos un nodo en el AAA cuya clase
viene definida por el tipo de operación. Para los terminales
creamos igualmente nodos indicando de que clase de terminal 
se trata. El atributo nodo lo denotaremos por <tex2html_verb_mark>1900<tex2html_verb_mark>:
\begin<<14784>>tex2html_deferred<<14784>>\par\end<<14785>>tex2html_deferred<<14785>>
\vspace<<11359>>0.25cm<<11359>>
\begin<<11360>>tabular<<11360>><<11361>>ll<<11361>>
\begin<<13344>>tex2html_wrap_inline<<13344>>$e   \rightarrow\ e_1 + f$\end<<13345>>tex2html_wrap_inline<<13345>>\space  ;SPMamp; <tex2html_verb_mark>1901<tex2html_verb_mark> \\ 
\begin<<13346>>tex2html_wrap_inline<<13346>>$f   \rightarrow NUM$\end<<13347>>tex2html_wrap_inline<<13347>>\space       ;SPMamp; <tex2html_verb_mark>1902<tex2html_verb_mark>\\ 
\begin<<13348>>tex2html_wrap_inline<<13348>>$f   \rightarrow ID$\end<<13349>>tex2html_wrap_inline<<13349>>\space        ;SPMamp; <tex2html_verb_mark>1903<tex2html_verb_mark>
\end<<11362>>tabular<<11362>>
\vspace<<11363>>0.5cm<<11363>>
\begin<<14786>>tex2html_deferred<<14786>>\par\end<<14787>>tex2html_deferred<<14787>>
La estructura de cada rutina sigue siendo la misma, 
sólo que ampliada con las acciones para la construcción de los
correspondientes nodos. Veamos por ejemplo, como modificamos
la subrutina factor:
\begin<<14788>>tex2html_deferred<<14788>>\par\end<<14789>>tex2html_deferred<<14789>>
\begin<<11364>>tex2html_preform<<11364>><tex2html_verbatim_mark>verbatim5594#\end<<11365>>tex2html_preform<<11365>>
\begin<<14790>>tex2html_deferred<<14790>>\par\end<<14791>>tex2html_deferred<<14791>>
\subsection<<11366>>AAA: Otros tipos de nodos<<11366>>
Hemos optado por que las rutinas asociadas a variables sintácticas que 
describen listas de subcategorías devuelvan 
las correspondientes listas de nodos. Teníamos tres variables tipo lista.
Las reglas para las listas eran:
\begin<<14792>>tex2html_deferred<<14792>>\par\end<<14793>>tex2html_deferred<<14793>>
\vspace<<11367>>0.25cm<<11367>>
\begin<<11368>>center<<11368>>
\begin<<11369>>tabular<<11369>><<11370>>|l||l|<<11370>>
\hline
Gramática de los Árboles de Tutu       ;SPMamp; Gramática del lenguaje Tutu\\ 
\hline
\begin<<13350>>tex2html_wrap_inline<<13350>>$decls$\end<<13351>>tex2html_wrap_inline<<13351>>\space  \begin<<13352>>tex2html_wrap_inline<<13352>>$\rightarrow list\ decl$\end<<13353>>tex2html_wrap_inline<<13353>>\space ;SPMamp; declarations \begin<<13354>>tex2html_wrap_inline<<13354>>$\rightarrow$\end<<13355>>tex2html_wrap_inline<<13355>>\space declaration  ';'  declarations    \begin<<13356>>tex2html_wrap_inline<<13356>>$|$\end<<13357>>tex2html_wrap_inline<<13357>>\space declaration ';'\\ 
\hline
\begin<<13358>>tex2html_wrap_inline<<13358>>$sts$\end<<13359>>tex2html_wrap_inline<<13359>>\space    \begin<<13360>>tex2html_wrap_inline<<13360>>$\rightarrow list\ st$\end<<13361>>tex2html_wrap_inline<<13361>>\space ;SPMamp; statements   \begin<<13362>>tex2html_wrap_inline<<13362>>$\rightarrow$\end<<13363>>tex2html_wrap_inline<<13363>>\space statement  ';'  statements        \begin<<13364>>tex2html_wrap_inline<<13364>>$|$\end<<13365>>tex2html_wrap_inline<<13365>>\space statement\\ 
\hline
\begin<<13366>>tex2html_wrap_inline<<13366>>$idlist$\end<<13367>>tex2html_wrap_inline<<13367>>\space \begin<<13368>>tex2html_wrap_inline<<13368>>$\rightarrow list\ SIMPLEID$\end<<13369>>tex2html_wrap_inline<<13369>>\space ;SPMamp; idlist       \begin<<13370>>tex2html_wrap_inline<<13370>>$\rightarrow$\end<<13371>>tex2html_wrap_inline<<13371>>\space ID ',' idlist \begin<<13372>>tex2html_wrap_inline<<13372>>$|$\end<<13373>>tex2html_wrap_inline<<13373>>\space ID\\ 
\hline
\end<<11371>>tabular<<11371>>
\end<<11372>>center<<11372>>
\begin<<14794>>tex2html_deferred<<14794>>\par\end<<14795>>tex2html_deferred<<14795>>
En este caso las subrutinas asociadas no devuelven
objetos sino listas de objetos. 
Esto da lugar a una compactación del AAA.
Veánse los códigos de <tex2html_verb_mark>1904<tex2html_verb_mark> y <tex2html_verb_mark>1905<tex2html_verb_mark>:
\begin<<11373>>tex2html_preform<<11373>><tex2html_verbatim_mark>verbatim5595#\end<<11374>>tex2html_preform<<11374>>
\begin<<14796>>tex2html_deferred<<14796>>\par\end<<14797>>tex2html_deferred<<14797>>
\subsection<<11375>>Declaraciones<<11375>>
 Los nodos del tipo declaration no existen propiamente, son nodos 
de la clase \begin<<13374>>tex2html_wrap_inline<<13374>>$INT$\end<<13375>>tex2html_wrap_inline<<13375>>\space o de la clase \begin<<13376>>tex2html_wrap_inline<<13376>>$STRING$\end<<13377>>tex2html_wrap_inline<<13377>>. 
La parte de la gramática árbol de la que hablamos es:
\begin<<14798>>tex2html_deferred<<14798>>\par\end<<14799>>tex2html_deferred<<14799>>
\begin<<11376>>center<<11376>>
\begin<<11377>>tabular<<11377>><<11378>>l|ll<<11378>>
  2 ;SPMamp; \begin<<13378>>tex2html_wrap_inline<<13378>>$decls$\end<<13379>>tex2html_wrap_inline<<13379>>\space  ;SPMamp;\begin<<13380>>tex2html_wrap_inline<<13380>>$\rightarrow$\end<<13381>>tex2html_wrap_inline<<13381>>\space list \begin<<13382>>tex2html_wrap_inline<<13382>>$decl$\end<<13383>>tex2html_wrap_inline<<13383>>\\ 
  4 ;SPMamp; \begin<<13384>>tex2html_wrap_inline<<13384>>$decl$\end<<13385>>tex2html_wrap_inline<<13385>>\space   ;SPMamp;\begin<<13386>>tex2html_wrap_inline<<13386>>$\rightarrow INT(idlist)$\end<<13387>>tex2html_wrap_inline<<13387>>\\ 
  5 ;SPMamp; \begin<<13388>>tex2html_wrap_inline<<13388>>$decl$\end<<13389>>tex2html_wrap_inline<<13389>>\space   ;SPMamp;\begin<<13390>>tex2html_wrap_inline<<13390>>$\rightarrow STRING(idlist)$\end<<13391>>tex2html_wrap_inline<<13391>>\\ 
  6 ;SPMamp; \begin<<13392>>tex2html_wrap_inline<<13392>>$idlist$\end<<13393>>tex2html_wrap_inline<<13393>>\space ;SPMamp;\begin<<13394>>tex2html_wrap_inline<<13394>>$\rightarrow$\end<<13395>>tex2html_wrap_inline<<13395>>\space list \begin<<13396>>tex2html_wrap_inline<<13396>>$SIMPLEID$\end<<13397>>tex2html_wrap_inline<<13397>>\\ 
\end<<11379>>tabular<<11379>>
\end<<11380>>center<<11380>>
\begin<<14800>>tex2html_deferred<<14800>>\par\end<<14801>>tex2html_deferred<<14801>>
Los nodos declaration son un hash con una clave <tex2html_verb_mark>1906<tex2html_verb_mark> la cual
apunta a la estructura de datos/objeto
describiendo el tipo. La otra clave del hash <tex2html_verb_mark>1907<tex2html_verb_mark> apunta  a una 
lista de identificadores. Los elementos de esta lista son simples
identificadores (identificados en la gramática árbol anterior 
como \begin<<13398>>tex2html_wrap_inline<<13398>>$SIMPLEID$\end<<13399>>tex2html_wrap_inline<<13399>>\space y no como objetos \begin<<13400>>tex2html_wrap_inline<<13400>>$ID$\end<<13401>>tex2html_wrap_inline<<13401>>).
La parte de la gramática implicada en las declaraciones es:
\begin<<14802>>tex2html_deferred<<14802>>\par\end<<14803>>tex2html_deferred<<14803>>
\vspace<<11381>>0.5cm<<11381>>
\begin<<11382>>tabular<<11382>><<11383>>l<<11383>>
declaration  \begin<<13402>>tex2html_wrap_inline<<13402>>$\rightarrow$\end<<13403>>tex2html_wrap_inline<<13403>>\space INT  idlist   \begin<<13404>>tex2html_wrap_inline<<13404>>$|$\end<<13405>>tex2html_wrap_inline<<13405>>\space STRING   idlist\\ 
idlist       \begin<<13406>>tex2html_wrap_inline<<13406>>$\rightarrow$\end<<13407>>tex2html_wrap_inline<<13407>>\space ID ',' idlist \begin<<13408>>tex2html_wrap_inline<<13408>>$|$\end<<13409>>tex2html_wrap_inline<<13409>>\space ID
\end<<11384>>tabular<<11384>>
\vspace<<11385>>0.25cm<<11385>>
\begin<<14804>>tex2html_deferred<<14804>>\par\end<<14805>>tex2html_deferred<<14805>>
Así pues, el código construye un nodo de la clase 
<tex2html_verb_mark>1908<tex2html_verb_mark> o <tex2html_verb_mark>1909<tex2html_verb_mark> según sea el caso.
\begin<<14806>>tex2html_deferred<<14806>>\par\end<<14807>>tex2html_deferred<<14807>>
\begin<<11386>>tex2html_preform<<11386>><tex2html_verbatim_mark>verbatim5596#\end<<11387>>tex2html_preform<<11387>>
Observe la llamada <tex2html_verb_mark>1910<tex2html_verb_mark>
en la cual la clase se usa a través de una referencia simbólica.
\begin<<14808>>tex2html_deferred<<14808>>\par\end<<14809>>tex2html_deferred<<14809>>
\subsection<<12206>>Práctica: Arbol de Análisis Abstracto<<12206>>
   \index<<12207>>Práctica!Arbol de Análisis Abstracto<<12207>>
  
\label<<11389>>practica:AAA<<11389>>
Complete la fase de análisis sintáctico para la gramática  de Tutu extendida 
con sentencias de bloque (vea las reglas 1,2,3 y 11)
construyendo el AAA según el lenguaje árbol especificado  
por una gramática árbol que extienda la dada en la definición 
\ref<<11390>>definition:tutuast<<11390>>.
Genere pruebas, usando <tex2html_verb_mark>1911<tex2html_verb_mark> 
para comprobar el correcto funcionamiento de su analizador sobre las mismas.
Utilize el módulo <tex2html_verb_mark>1912<tex2html_verb_mark> para volcar las estructuras de datos
resultantes.
\begin<<14810>>tex2html_deferred<<14810>>\par\end<<14811>>tex2html_deferred<<14811>>
\vspace<<11391>>0.5cm<<11391>>
\begin<<11392>>small<<11392>>
\begin<<11393>>center<<11393>>
\begin<<11394>>tabular<<11394>><<11395>>|r|l|<<11395>>
\hline
1 ;SPMamp;  p  \begin<<13410>>tex2html_wrap_inline<<13410>>$\rightarrow$\end<<13411>>tex2html_wrap_inline<<13411>>\space  b     \\ 
\hline
2 ;SPMamp;  b  \begin<<13412>>tex2html_wrap_inline<<13412>>$\rightarrow$\end<<13413>>tex2html_wrap_inline<<13413>>\space  ds  ss     \\ 
\hline
3 ;SPMamp;  b  \begin<<13414>>tex2html_wrap_inline<<13414>>$\rightarrow$\end<<13415>>tex2html_wrap_inline<<13415>>\space  ss         \\ 
\hline
4 ;SPMamp;  ds \begin<<13416>>tex2html_wrap_inline<<13416>>$\rightarrow$\end<<13417>>tex2html_wrap_inline<<13417>>\space d  ';'  ds  \\ 
\hline
5 ;SPMamp;  ds \begin<<13418>>tex2html_wrap_inline<<13418>>$\rightarrow$\end<<13419>>tex2html_wrap_inline<<13419>>\space  d ';'      \\ 
\hline
6 ;SPMamp;  d  \begin<<13420>>tex2html_wrap_inline<<13420>>$\rightarrow$\end<<13421>>tex2html_wrap_inline<<13421>>\space INT  il     \\ 
\hline
7 ;SPMamp;  d  \begin<<13422>>tex2html_wrap_inline<<13422>>$\rightarrow$\end<<13423>>tex2html_wrap_inline<<13423>>\space  STRING  il \\ 
\hline
8 ;SPMamp;  ss \begin<<13424>>tex2html_wrap_inline<<13424>>$\rightarrow$\end<<13425>>tex2html_wrap_inline<<13425>>\space s  ';'  ss  \\ 
\hline
9 ;SPMamp;  ss \begin<<13426>>tex2html_wrap_inline<<13426>>$\rightarrow$\end<<13427>>tex2html_wrap_inline<<13427>>\space  s          \\ 
\hline
10 ;SPMamp;  s  \begin<<13428>>tex2html_wrap_inline<<13428>>$\rightarrow$\end<<13429>>tex2html_wrap_inline<<13429>>\space ID = e   \\ 
\hline
11 ;SPMamp;  s  \begin<<13430>>tex2html_wrap_inline<<13430>>$\rightarrow$\end<<13431>>tex2html_wrap_inline<<13431>>\space '\{' b '\}'   \\ 
\hline
12 ;SPMamp;  s  \begin<<13432>>tex2html_wrap_inline<<13432>>$\rightarrow$\end<<13433>>tex2html_wrap_inline<<13433>>\space  P  e       \\ 
\hline
13 ;SPMamp;  s \begin<<13434>>tex2html_wrap_inline<<13434>>$\rightarrow \epsilon$\end<<13435>>tex2html_wrap_inline<<13435>>\space    \\ 
\hline
14 ;SPMamp;  e \begin<<13436>>tex2html_wrap_inline<<13436>>$\rightarrow$\end<<13437>>tex2html_wrap_inline<<13437>>\space e1 '+' t    \\ 
\hline
15 ;SPMamp;  e \begin<<13438>>tex2html_wrap_inline<<13438>>$\rightarrow$\end<<13439>>tex2html_wrap_inline<<13439>>\space e1 '-' t    \\ 
\hline
16 ;SPMamp;  e \begin<<13440>>tex2html_wrap_inline<<13440>>$\rightarrow$\end<<13441>>tex2html_wrap_inline<<13441>>\space t           \\ 
\hline
17 ;SPMamp;  t \begin<<13442>>tex2html_wrap_inline<<13442>>$\rightarrow$\end<<13443>>tex2html_wrap_inline<<13443>>\space t1 '*' f    \\ 
\hline
18 ;SPMamp;  t \begin<<13444>>tex2html_wrap_inline<<13444>>$\rightarrow$\end<<13445>>tex2html_wrap_inline<<13445>>\space t '/' f     \\ 
\hline
19 ;SPMamp;  t \begin<<13446>>tex2html_wrap_inline<<13446>>$\rightarrow$\end<<13447>>tex2html_wrap_inline<<13447>>\space f           \\ 
\hline
20 ;SPMamp;  f \begin<<13448>>tex2html_wrap_inline<<13448>>$\rightarrow$\end<<13449>>tex2html_wrap_inline<<13449>>\space '(' e ')'   \\ 
\hline
21 ;SPMamp;  f \begin<<13450>>tex2html_wrap_inline<<13450>>$\rightarrow$\end<<13451>>tex2html_wrap_inline<<13451>>\space  ID         \\ 
\hline
22 ;SPMamp;  f \begin<<13452>>tex2html_wrap_inline<<13452>>$\rightarrow$\end<<13453>>tex2html_wrap_inline<<13453>>\space  NUM        \\ 
\hline
23 ;SPMamp;  f \begin<<13454>>tex2html_wrap_inline<<13454>>$\rightarrow$\end<<13455>>tex2html_wrap_inline<<13455>>\space  STR        \\ 
\hline
24 ;SPMamp;  il \begin<<13456>>tex2html_wrap_inline<<13456>>$\rightarrow$\end<<13457>>tex2html_wrap_inline<<13457>>\space ID ',' il  \\ 
\hline
25 ;SPMamp;  il \begin<<13458>>tex2html_wrap_inline<<13458>>$\rightarrow$\end<<13459>>tex2html_wrap_inline<<13459>>\space ID         \\ 
\hline
\end<<11396>>tabular<<11396>>
\end<<11397>>center<<11397>>
\end<<11398>>small<<11398>>
\vspace<<11399>>0.25cm<<11399>>
\begin<<14812>>tex2html_deferred<<14812>>\par\end<<14813>>tex2html_deferred<<14813>>
\section<<11400>>Análisis Semántico<<11400>>
Hay quien dice que el análisis semántico es la determinación 
de aquellas propiedades que, siendo dependientes del contexto, pueden ser
computadas estáticamente en tiempo de compilación para cualquier programa
correcto. Entre estas propiedades
están: la comprobación de que las variables son declaradas,
la compatibilidad de tipos
en las expresiones, el correcto uso de las llamadas a función asi
como el ámbito y visibilidad de las variables.
La fase de análisis semántico puede verse como una fase de ``adornado''
o ``etiquetado'' del AAA, en la cual los atributos de los nodos
del AAA son computados.
\begin<<14814>>tex2html_deferred<<14814>>\par\end<<14815>>tex2html_deferred<<14815>>
Aunque la veamos como una fase separada del análisis sintáctico, puede
en numerosas ocasiones llevarse a cabo al mismo tiempo que se construye
el árbol. Así lo hacemos en este ejemplo: incrustamos la acción semántica
en la correspondiente rutina de análisis sintáctico. Así, en la rutina <tex2html_verb_mark>1913<tex2html_verb_mark>, una vez 
que hemos obtenido los dos operandos, comprobamos que son de tipo numérico
llamando (línea 8) a 
\begin<<14816>>tex2html_deferred<<14816>>\par\end<<14817>>tex2html_deferred<<14817>>
\begin<<11401>>center<<11401>>
<tex2html_verb_mark>1914<tex2html_verb_mark>:
\end<<11402>>center<<11402>>
\begin<<14818>>tex2html_deferred<<14818>>\par\end<<14819>>tex2html_deferred<<14819>>
Observe como aparece un nuevo atributo <tex2html_verb_mark>1915<tex2html_verb_mark> decorando el nodo
creado (línea 9):
\begin<<14820>>tex2html_deferred<<14820>>\par\end<<14821>>tex2html_deferred<<14821>>
\begin<<11403>>tex2html_preform<<11403>><tex2html_verbatim_mark>verbatim5597#\end<<11404>>tex2html_preform<<11404>>
\begin<<14822>>tex2html_deferred<<14822>>\par\end<<14823>>tex2html_deferred<<14823>>
En el manejo de errores de tipo, un tipo especial <tex2html_verb_mark>1916<tex2html_verb_mark>
es usado para indicar un error de tipo:
\begin<<14824>>tex2html_deferred<<14824>>\par\end<<14825>>tex2html_deferred<<14825>>
\begin<<11405>>tex2html_preform<<11405>><tex2html_verbatim_mark>verbatim5598#\end<<11406>>tex2html_preform<<11406>>
La subrutina <tex2html_verb_mark>1917<tex2html_verb_mark> comprueba que los
dos operandos son de tipo numérico y devuelve el correspondiente
tipo. Si ha ocurrido un error de tipo, intenta encontrar 
un tipo conveniente para el operando:
\begin<<14826>>tex2html_deferred<<14826>>\par\end<<14827>>tex2html_deferred<<14827>>
\begin<<11407>>tex2html_preform<<11407>><tex2html_verbatim_mark>verbatim5599#\end<<11408>>tex2html_preform<<11408>>
\begin<<14828>>tex2html_deferred<<14828>>\par\end<<14829>>tex2html_deferred<<14829>>
Es parte del análisis semántico la declaración de tipos:
\begin<<14830>>tex2html_deferred<<14830>>\par\end<<14831>>tex2html_deferred<<14831>>
\begin<<11409>>tex2html_preform<<11409>><tex2html_verbatim_mark>verbatim5600#\end<<11410>>tex2html_preform<<11410>>
Para ello se utiliza una tabla de símbolos que es un hash <tex2html_verb_mark>1919<tex2html_verb_mark>
indexado en los identificadores del programa:
\begin<<14832>>tex2html_deferred<<14832>>\par\end<<14833>>tex2html_deferred<<14833>>
\begin<<11411>>tex2html_preform<<11411>><tex2html_verbatim_mark>verbatim5601#\end<<11412>>tex2html_preform<<11412>>
\begin<<14834>>tex2html_deferred<<14834>>\par\end<<14835>>tex2html_deferred<<14835>>
Cada vez que aparece una variable en el código, bien en un factor o en 
una asignación, comprobamos que ha sido declarada:
\begin<<14836>>tex2html_deferred<<14836>>\par\end<<14837>>tex2html_deferred<<14837>>
\begin<<11413>>tex2html_preform<<11413>><tex2html_verbatim_mark>verbatim5602#\end<<11414>>tex2html_preform<<11414>>
\begin<<14838>>tex2html_deferred<<14838>>\par\end<<14839>>tex2html_deferred<<14839>>
La función <tex2html_verb_mark>1920<tex2html_verb_mark> devuelve el atributo
<tex2html_verb_mark>1921<tex2html_verb_mark> de la correspondiente entrada en la tabla de 
símbolos.
\begin<<14840>>tex2html_deferred<<14840>>\par\end<<14841>>tex2html_deferred<<14841>>
\begin<<11415>>tex2html_preform<<11415>><tex2html_verbatim_mark>verbatim5603#\end<<11416>>tex2html_preform<<11416>>
\begin<<14842>>tex2html_deferred<<14842>>\par\end<<14843>>tex2html_deferred<<14843>>
\subsection<<12208>>Práctica: Declaraciones Automáticas<<12208>>
   \index<<12209>>Práctica!Declaraciones Automáticas<<12209>>
  
\begin<<14844>>tex2html_deferred<<14844>>\par\end<<14845>>tex2html_deferred<<14845>>
Modifique la subrutina <tex2html_verb_mark>1922<tex2html_verb_mark> para que cuando
una variable no haya sido declarada se declare ``sobre la marcha''. 
¿Puede utilizar 
información dependiente del contexto para decidir cual es la mejor forma
de declararla?
\begin<<14846>>tex2html_deferred<<14846>>\par\end<<14847>>tex2html_deferred<<14847>>
\subsection<<12210>>Práctica: Análisis Semántico<<12210>>
   \index<<12211>>Práctica!Análisis Semántico<<12211>>
  
\label<<11419>>practica:analisis_semantico<<11419>>
Extienda el código de la práctica 
\ref<<11420>>practica:AAA<<11420>>
para comprobar la compatibilidad de tipos.
\begin<<14848>>tex2html_deferred<<14848>>\par\end<<14849>>tex2html_deferred<<14849>>
\vspace<<11421>>0.5cm<<11421>>
\begin<<11422>>small<<11422>>
\begin<<11423>>center<<11423>>
\begin<<11424>>tabular<<11424>><<11425>>|r|l|<<11425>>
\hline
1 ;SPMamp;  p  \begin<<13460>>tex2html_wrap_inline<<13460>>$\rightarrow$\end<<13461>>tex2html_wrap_inline<<13461>>\space  b     \\ 
\hline
2 ;SPMamp;  b  \begin<<13462>>tex2html_wrap_inline<<13462>>$\rightarrow$\end<<13463>>tex2html_wrap_inline<<13463>>\space  ds  ss     \\ 
\hline
3 ;SPMamp;  b  \begin<<13464>>tex2html_wrap_inline<<13464>>$\rightarrow$\end<<13465>>tex2html_wrap_inline<<13465>>\space  ss         \\ 
\hline
4 ;SPMamp;  ds \begin<<13466>>tex2html_wrap_inline<<13466>>$\rightarrow$\end<<13467>>tex2html_wrap_inline<<13467>>\space d  ';'  ds  \\ 
\hline
5 ;SPMamp;  ds \begin<<13468>>tex2html_wrap_inline<<13468>>$\rightarrow$\end<<13469>>tex2html_wrap_inline<<13469>>\space  d ';'      \\ 
\hline
6 ;SPMamp;  d  \begin<<13470>>tex2html_wrap_inline<<13470>>$\rightarrow$\end<<13471>>tex2html_wrap_inline<<13471>>\space INT  il     \\ 
\hline
7 ;SPMamp;  d  \begin<<13472>>tex2html_wrap_inline<<13472>>$\rightarrow$\end<<13473>>tex2html_wrap_inline<<13473>>\space  STRING  il \\ 
\hline
8 ;SPMamp;  ss \begin<<13474>>tex2html_wrap_inline<<13474>>$\rightarrow$\end<<13475>>tex2html_wrap_inline<<13475>>\space s  ';'  ss  \\ 
\hline
9 ;SPMamp;  ss \begin<<13476>>tex2html_wrap_inline<<13476>>$\rightarrow$\end<<13477>>tex2html_wrap_inline<<13477>>\space  s          \\ 
\hline
10 ;SPMamp;  s  \begin<<13478>>tex2html_wrap_inline<<13478>>$\rightarrow$\end<<13479>>tex2html_wrap_inline<<13479>>\space  ID '=' e   \\ 
\hline
11 ;SPMamp;  s  \begin<<13480>>tex2html_wrap_inline<<13480>>$\rightarrow$\end<<13481>>tex2html_wrap_inline<<13481>>\space '\{' b '\}'   \\ 
\hline
12 ;SPMamp;  s  \begin<<13482>>tex2html_wrap_inline<<13482>>$\rightarrow$\end<<13483>>tex2html_wrap_inline<<13483>>\space  P  e       \\ 
\hline
13 ;SPMamp;  s \begin<<13484>>tex2html_wrap_inline<<13484>>$\rightarrow \epsilon$\end<<13485>>tex2html_wrap_inline<<13485>>\space    \\ 
\hline
14 ;SPMamp;  e \begin<<13486>>tex2html_wrap_inline<<13486>>$\rightarrow$\end<<13487>>tex2html_wrap_inline<<13487>>\space e1 '+' t    \\ 
\hline
15 ;SPMamp;  e \begin<<13488>>tex2html_wrap_inline<<13488>>$\rightarrow$\end<<13489>>tex2html_wrap_inline<<13489>>\space e1 '-' t    \\ 
\hline
16 ;SPMamp;  e \begin<<13490>>tex2html_wrap_inline<<13490>>$\rightarrow$\end<<13491>>tex2html_wrap_inline<<13491>>\space t           \\ 
\hline
17 ;SPMamp;  t \begin<<13492>>tex2html_wrap_inline<<13492>>$\rightarrow$\end<<13493>>tex2html_wrap_inline<<13493>>\space t1 '*' f    \\ 
\hline
18 ;SPMamp;  t \begin<<13494>>tex2html_wrap_inline<<13494>>$\rightarrow$\end<<13495>>tex2html_wrap_inline<<13495>>\space t '/' f     \\ 
\hline
19 ;SPMamp;  t \begin<<13496>>tex2html_wrap_inline<<13496>>$\rightarrow$\end<<13497>>tex2html_wrap_inline<<13497>>\space f           \\ 
\hline
20 ;SPMamp;  f \begin<<13498>>tex2html_wrap_inline<<13498>>$\rightarrow$\end<<13499>>tex2html_wrap_inline<<13499>>\space '(' e ')'   \\ 
\hline
21 ;SPMamp;  f \begin<<13500>>tex2html_wrap_inline<<13500>>$\rightarrow$\end<<13501>>tex2html_wrap_inline<<13501>>\space  ID         \\ 
\hline
22 ;SPMamp;  f \begin<<13502>>tex2html_wrap_inline<<13502>>$\rightarrow$\end<<13503>>tex2html_wrap_inline<<13503>>\space  NUM        \\ 
\hline
23 ;SPMamp;  f \begin<<13504>>tex2html_wrap_inline<<13504>>$\rightarrow$\end<<13505>>tex2html_wrap_inline<<13505>>\space  STR        \\ 
\hline
24 ;SPMamp;  il \begin<<13506>>tex2html_wrap_inline<<13506>>$\rightarrow$\end<<13507>>tex2html_wrap_inline<<13507>>\space ID ',' il  \\ 
\hline
25 ;SPMamp;  il \begin<<13508>>tex2html_wrap_inline<<13508>>$\rightarrow$\end<<13509>>tex2html_wrap_inline<<13509>>\space ID         \\ 
\hline
\end<<11426>>tabular<<11426>>
\end<<11427>>center<<11427>>
\end<<11428>>small<<11428>>
\vspace<<11429>>0.25cm<<11429>>
En cuanto a las sentencias de bloque,
se pretende que el ámbito y visibilidad de las variables sea como en el lenguaje
C, esto es, las declaraciones mas internas con el mismo identificador
ocultan las mas externas. Así:
\begin<<14850>>tex2html_deferred<<14850>>\par\end<<14851>>tex2html_deferred<<14851>>
\begin<<11430>>tex2html_preform<<11430>><tex2html_verbatim_mark>verbatim5604#\end<<11431>>tex2html_preform<<11431>>
\begin<<14852>>tex2html_deferred<<14852>>\par\end<<14853>>tex2html_deferred<<14853>>
Imprimiría 5 y 4. Para traducir esta sentencia es necesario 
\emph<<11432>>usar una lista/pila de referencias a tablas de símbolos. Cada 
sentencia compuesta o bloque tendrá
su propia tabla de símbolos<<11432>>. Los identificadores se búscan
en la lista de referencias a tablas de símbolos, primero 
en la última tabla de símbolos insertada y sino se encuentra
se busca en la penúltima insertada, etc.
\begin<<14854>>tex2html_deferred<<14854>>\par\end<<14855>>tex2html_deferred<<14855>>
Guarde como un atributo del identificador (\begin<<13510>>tex2html_wrap_inline<<13510>>$SYMTABLE$\end<<13511>>tex2html_wrap_inline<<13511>>) 
la referencia a la tabla de símbolos
a la que pertenece. Guarde como un atributo del nodo bloque (\begin<<13512>>tex2html_wrap_inline<<13512>>$BLOCK$\end<<13513>>tex2html_wrap_inline<<13513>>) 
la referencia a la tabla de símbolos asociada.
\begin<<14856>>tex2html_deferred<<14856>>\par\end<<14857>>tex2html_deferred<<14857>>
\section<<11433>>Optimización Independiente de la Máquina<<11433>>
\label<<11434>>section:optimizacion<<11434>>
En esta fase se hace un análisis del árbol, sometiéndolo a transformaciones 
que aumenten la eficiencia del código final producido. 
\begin<<14858>>tex2html_deferred<<14858>>\par\end<<14859>>tex2html_deferred<<14859>>
Ejemplos de tareas que se pueden llevar a cabo en esta fase son: 
\begin<<11435>>itemize<<11435>>
\item
Extracción del interior de un bucle de cálculos que son invariantes del bucle
\item
Plegado de constantes: computar las expresiones constantes en tiempo de compilación,
no de ejecución
\item
Propagación de las constantes: si se sabe que una variable  en un punto del programa
tiene un valor constante <tex2html_verb_mark>1923<tex2html_verb_mark>, se puede sustituir su uso por el de la constante
\item
Eliminación de computaciones redundantes, cuando la misma expresión aparece repetidas
veces con los mismos valores de las variables
\item
La eliminación de código ``muerto'': código que se sabe que nunca podrá ser ejecutado
\end<<11436>>itemize<<11436>>
\begin<<14860>>tex2html_deferred<<14860>>\par\end<<14861>>tex2html_deferred<<14861>>
En nuestro primer ejemplo, reduciremos esta fase a realizar una tarea de plegado
de las constantes. Primero lo haremos mediante la rutina
\begin<<14862>>tex2html_deferred<<14862>>\par\end<<14863>>tex2html_deferred<<14863>>
\begin<<11437>>center<<11437>>
\begin<<11438>>tex2html_preform<<11438>><tex2html_verbatim_mark>verbatim5605#\end<<11439>>tex2html_preform<<11439>>
\end<<11440>>center<<11440>>
\begin<<14864>>tex2html_deferred<<14864>>\par\end<<14865>>tex2html_deferred<<14865>>
En esta fase transformamos los AAA: si tenemos un árbol de la forma 
OPERATION(left, right), esto es, su raíz es una operación,
primero plegamos los subárboles left y right, y si se han
transformado en constantes numéricas, entonces plegamos el nodo
que pasa a ser numérico:
\begin<<14866>>tex2html_deferred<<14866>>\par\end<<14867>>tex2html_deferred<<14867>>
\begin<<11441>>tex2html_preform<<11441>><tex2html_verbatim_mark>verbatim5606#\end<<11442>>tex2html_preform<<11442>>
\begin<<14868>>tex2html_deferred<<14868>>\par\end<<14869>>tex2html_deferred<<14869>>
El plegado de las operaciones binarias se ha delegado
en la subrutina <tex2html_verb_mark>1924<tex2html_verb_mark>. En las líneas 3 y 6 se comprueba
que se trata de un nodo de tipo operación. Si es así se procede
a su plegado. Una vez plegados los dos subárboles hijo comprobamos
en la línea 9 que los hijos actuales son de la clase <tex2html_verb_mark>1925<tex2html_verb_mark>.
Si es el caso, en la línea 10 cambiamos el nodo por el resultado de operar
los dos hijos. Los nodos han sido
extendidos con un método <tex2html_verb_mark>1926<tex2html_verb_mark> que determina si 
se trata de un nodo operación binaria o no. Para ello 
se han introducido nuevas clases de nodos: la clase <tex2html_verb_mark>1927<tex2html_verb_mark>
está en la raíz de la jerarquía de herencia, las clases <tex2html_verb_mark>1928<tex2html_verb_mark>
y <tex2html_verb_mark>1929<tex2html_verb_mark> se usan para representar los nodos hoja y binarios
y heredan de la anterior.
Una clase informa a Perl que desea heredar de otra clase añadiendo 
el nombre de esa clase a la variable <tex2html_verb_mark>1930<tex2html_verb_mark> de su paquete.
La herencia en Perl determina la forma de búsqueda de un método. Si el objeto
no se puede encontrar en la clase, recursivamente y en orden primero-profundo
se busca en las clases de las cuales esta hereda, esto es en las clases
especificadas en el vector <tex2html_verb_mark>1931<tex2html_verb_mark>.
\begin<<14870>>tex2html_deferred<<14870>>\par\end<<14871>>tex2html_deferred<<14871>>
\begin<<11443>>tex2html_preform<<11443>><tex2html_verbatim_mark>verbatim5607#\end<<11444>>tex2html_preform<<11444>>
Así pues, los objetos de la clase <tex2html_verb_mark>1932<tex2html_verb_mark> tienen acceso 
al método <tex2html_verb_mark>1933<tex2html_verb_mark>.
\begin<<14872>>tex2html_deferred<<14872>>\par\end<<14873>>tex2html_deferred<<14873>>
Ahora hacemos que las clases <tex2html_verb_mark>1934<tex2html_verb_mark> y <tex2html_verb_mark>1935<tex2html_verb_mark> 
hereden de la clase <tex2html_verb_mark>1936<tex2html_verb_mark>:
\begin<<11445>>tex2html_preform<<11445>><tex2html_verbatim_mark>verbatim5608#\end<<11446>>tex2html_preform<<11446>>
\begin<<14874>>tex2html_deferred<<14874>>\par\end<<14875>>tex2html_deferred<<14875>>
Obsérvese que en las líneas 4 y 7 del código del plegado
de nodos de operación se ha accedido directamente 
al dato en vez de usar el método para modificar el atributo, 
saltándonos lo que la buena programación
orientada a objetos indica. La forma en la que esta escrito
hace que, por ejemplo, <tex2html_verb_mark>1937<tex2html_verb_mark> sea modificado. 
Recuérdese que en Perl
\emph<<11447>>los argumentos son alias de los parámetros<<11447>>.
\begin<<14876>>tex2html_deferred<<14876>>\par\end<<14877>>tex2html_deferred<<14877>>
La subrutina <tex2html_verb_mark>1938<tex2html_verb_mark> es la encargada 
de crear el nuevo nodo con el resultado de operar los
hijos izquierdo y derecho:
\begin<<14878>>tex2html_deferred<<14878>>\par\end<<14879>>tex2html_deferred<<14879>>
\begin<<11448>>tex2html_preform<<11448>><tex2html_verbatim_mark>verbatim5609#\end<<11449>>tex2html_preform<<11449>>
\begin<<14880>>tex2html_deferred<<14880>>\par\end<<14881>>tex2html_deferred<<14881>>
En la línea 4 se usa el método <tex2html_verb_mark>1939<tex2html_verb_mark> asociado 
con un nodo operación. 
\begin<<14882>>tex2html_deferred<<14882>>\par\end<<14883>>tex2html_deferred<<14883>>
Plegar una sentencia de impresión es plegar la expresión
a imprimir:
\begin<<11450>>tex2html_preform<<11450>><tex2html_verbatim_mark>verbatim5610#\end<<11451>>tex2html_preform<<11451>>
Plegar una sentencia de asignación es plegar
la parte derecha de la asignación:
\begin<<11452>>tex2html_preform<<11452>><tex2html_verbatim_mark>verbatim5611#\end<<11453>>tex2html_preform<<11453>>
de nuevo, hemos accedido a los campos en vez de usar los métodos.
\begin<<14884>>tex2html_deferred<<14884>>\par\end<<14885>>tex2html_deferred<<14885>>
Las restantes operaciones de plegado son triviales:
\begin<<11454>>tex2html_preform<<11454>><tex2html_verbatim_mark>verbatim5612#\end<<11455>>tex2html_preform<<11455>>
Por último, para plegar todas las expresiones
recorremos la lista de sentencias del programa
y las plegamos una a una.
\begin<<14886>>tex2html_deferred<<14886>>\par\end<<14887>>tex2html_deferred<<14887>>
\begin<<11456>>tex2html_preform<<11456>><tex2html_verbatim_mark>verbatim5613#\end<<11457>>tex2html_preform<<11457>>
\begin<<14888>>tex2html_deferred<<14888>>\par\end<<14889>>tex2html_deferred<<14889>>
\subsection<<12212>>Práctica: Plegado de las Constantes<<12212>>
   \index<<12213>>Práctica!Plegado de las Constantes<<12213>>
  
Complete su proyecto de compilador de Tutu 
con la fase de plegado de las constantes siguiendo 
la metodología explicada 
en los párrafos previos. Mejore la jerarquía de 
clases con una clase abstracta <tex2html_verb_mark>1940<tex2html_verb_mark> que represente a los nodos
que se corresponden con operaciones binarias. Defina el método
abstracto <tex2html_verb_mark>1941<tex2html_verb_mark> en dicha clase. 
Un \index<<12214>>método abstracto<<12214>>\emph<<12215>>método abstracto<<12215>> es uno que, mas que proveer un servicio 
representa un servicio o categoría.
La idea es que al definir un clase base abstracta se indica un conjunto de métodos
que deberían estar definidos en todas las clases que heredan de la clase base abstracta.
Es como una declaración de interfaz que indica la necesidad de definir su funcionalidad
en las clases descendientes, pero que no se define en la clase base.
Un método abstracto debe producir una excepción con el mensaje de error adecuado
si no se ha redefinido en la clase desendiente. 
\begin<<14890>>tex2html_deferred<<14890>>\par\end<<14891>>tex2html_deferred<<14891>>
Para ello use la clave 
<tex2html_verb_mark>1942<tex2html_verb_mark> del módulo <tex2html_verb_mark>1943<tex2html_verb_mark>. Consulte 
la documentación del módulo <tex2html_verb_mark>1944<tex2html_verb_mark>. Consulte 
\externalref<<12216>>subsection:abstractos<<12216>> \cite<<12217>>CasianoIntroAPerl<<12217>>
para saber más sobre clases abstractas.
\begin<<14892>>tex2html_deferred<<14892>>\par\end<<14893>>tex2html_deferred<<14893>>
\section<<11461>>Patrones Árbol y Transformaciones Árbol<<11461>>
\label<<11462>>section:patronesarbol<<11462>>
En la fase de optimización presentada en la sección
\ref<<11463>>section:optimizacion<<11463>> transformabamos el programa 
en su representación intermedia, como un AAA
decorado, para obtener otro AAA decorado.
\begin<<14894>>tex2html_deferred<<14894>>\par\end<<14895>>tex2html_deferred<<14895>>
Una transformación de un programa puede ser descrita
como un conjunto de \index<<12218>>reglas de transformación<<12218>>\emph<<12219>>reglas de transformación<<12219>> 
o \index<<12220>>esquema de traducción árbol<<12220>>\emph<<12221>>esquema de traducción árbol<<12221>>
sobre el árbol abstracto que representa el programa.
\begin<<14896>>tex2html_deferred<<14896>>\par\end<<14897>>tex2html_deferred<<14897>>
Antes de seguir, es conveniente que repase los conceptos
en la sección 
\ref<<11466>>subsection:lenguajesarbol<<11466>>
sobre lenguajes y gramáticas árbol.
\begin<<14898>>tex2html_deferred<<14898>>\par\end<<14899>>tex2html_deferred<<14899>>
En su forma mas sencilla, estas reglas de transformación
vienen definidas
por ternas \begin<<13514>>tex2html_wrap_inline<<13514>>$(p, e, action)$\end<<13515>>tex2html_wrap_inline<<13515>>, donde la primera componente de la
terna \begin<<13516>>tex2html_wrap_inline<<13516>>$p$\end<<13517>>tex2html_wrap_inline<<13517>>\space es un \index<<12222>>patrón árbol<<12222>>\emph<<12223>>patrón árbol<<12223>> que dice que árboles
deben ser seleccionados. La segunda componente 
\begin<<13518>>tex2html_wrap_inline<<13518>>$e$\end<<13519>>tex2html_wrap_inline<<13519>>\space dice cómo debe transformarse el árbol que casa con el patrón
\begin<<13520>>tex2html_wrap_inline<<13520>>$p$\end<<13521>>tex2html_wrap_inline<<13521>>. La acción \begin<<13522>>tex2html_wrap_inline<<13522>>$action$\end<<13523>>tex2html_wrap_inline<<13523>>\space indica como deben
computarse los atributos del árbol transformado
a partir de los atributos 
del árbol que casa con el patrón \begin<<13524>>tex2html_wrap_inline<<13524>>$p$\end<<13525>>tex2html_wrap_inline<<13525>>.
Una forma de representar este esquema sería:
\begin<<14900>>tex2html_deferred<<14900>>\par\end<<14901>>tex2html_deferred<<14901>>
\begin<<11468>>center<<11468>>
\begin<<13526>>tex2html_wrap_inline<<13526>>$p \Longrightarrow e$\end<<13527>>tex2html_wrap_inline<<13527>>\space  <tex2html_verb_mark>1945<tex2html_verb_mark>
\end<<11469>>center<<11469>>
\begin<<14902>>tex2html_deferred<<14902>>\par\end<<14903>>tex2html_deferred<<14903>>
Por ejemplo:
\begin<<14904>>tex2html_deferred<<14904>>\par\end<<14905>>tex2html_deferred<<14905>>
\vspace<<11470>>0.25cm<<11470>>
\begin<<13528>>tex2html_wrap_inline<<13528>>$PLUS(NUM_1, NUM_2) \Longrightarrow NUM_3$\end<<13529>>tex2html_wrap_inline<<13529>>\space <tex2html_verb_mark>1946<tex2html_verb_mark>
\vspace<<11471>>0.25cm<<11471>>
\begin<<14906>>tex2html_deferred<<14906>>\par\end<<14907>>tex2html_deferred<<14907>>
cuyo significado es que dondequiera que haya un nódo del AAA que case 
con el \index<<12224>>patrón de entrada<<12224>>\emph<<12225>>patrón de entrada<<12225>> \begin<<13530>>tex2html_wrap_inline<<13530>>$PLUS(NUM, NUM)$\end<<13531>>tex2html_wrap_inline<<13531>>\space deberá sustituirse
el subárbol \begin<<13532>>tex2html_wrap_inline<<13532>>$PLUS(NUM, NUM)$\end<<13533>>tex2html_wrap_inline<<13533>>\space por el subárbol \begin<<13534>>tex2html_wrap_inline<<13534>>$NUM$\end<<13535>>tex2html_wrap_inline<<13535>>. Al igual que en los 
esquemas de traducción, enumeramos las apariciones de los símbolos,
para distinguirlos en la parte semántica. La acción indica 
como deben recomputarse los atributos para el nuevo árbol:
El atributo <tex2html_verb_mark>1947<tex2html_verb_mark> del árbol resultante es la suma de los atributos
<tex2html_verb_mark>1948<tex2html_verb_mark> de los operandos en el árbol que ha casado.
La transformación se repite hasta que se produce la \index<<12226>>normalización del árbol<<12226>>\emph<<12227>>normalización del árbol<<12227>>.
\begin<<14908>>tex2html_deferred<<14908>>\par\end<<14909>>tex2html_deferred<<14909>>
Las reglas de ``casamiento''  de árboles pueden ser mas complejas, 
haciendo alusión a propiedades de los atributos, por ejemplo
\begin<<14910>>tex2html_deferred<<14910>>\par\end<<14911>>tex2html_deferred<<14911>>
\vspace<<11474>>0.25cm<<11474>>
\begin<<13536>>tex2html_wrap_inline<<13536>>$ASSIGN(LEFTVALUE, x)\ and$\end<<13537>>tex2html_wrap_inline<<13537>>\space <tex2html_verb_mark>1949<tex2html_verb_mark> \begin<<13538>>tex2html_wrap_inline<<13538>>$\Longrightarrow NIL$\end<<13539>>tex2html_wrap_inline<<13539>>
\vspace<<11475>>0.25cm<<11475>>
\begin<<14912>>tex2html_deferred<<14912>>\par\end<<14913>>tex2html_deferred<<14913>>
indica que se pueden eliminar aquellos árboles de tipo asignación
en los cuáles la variable asociada con el nodo \begin<<13540>>tex2html_wrap_inline<<13540>>$LEFTVALUE$\end<<13541>>tex2html_wrap_inline<<13541>>
no se usa posteriormente. 
\begin<<14914>>tex2html_deferred<<14914>>\par\end<<14915>>tex2html_deferred<<14915>>
Otros ejemplos con variables \begin<<13542>>tex2html_wrap_inline<<13542>>$S_1$\end<<13543>>tex2html_wrap_inline<<13543>>\space y \begin<<13544>>tex2html_wrap_inline<<13544>>$S_2$\end<<13545>>tex2html_wrap_inline<<13545>>:
\begin<<14916>>tex2html_deferred<<14916>>\par\end<<14917>>tex2html_deferred<<14917>>
\begin<<11476>>center<<11476>>
\begin<<13546>>tex2html_wrap_inline<<13546>>$IFELSE(NUM, S_1, S_2)$\end<<13547>>tex2html_wrap_inline<<13547>>\space and <tex2html_verb_mark>1950<tex2html_verb_mark> \begin<<13548>>tex2html_wrap_inline<<13548>>$\Longrightarrow S_1$\end<<13549>>tex2html_wrap_inline<<13549>>\\  
\begin<<13550>>tex2html_wrap_inline<<13550>>$IFELSE(NUM, S_1, S_2)$\end<<13551>>tex2html_wrap_inline<<13551>>\space and <tex2html_verb_mark>1951<tex2html_verb_mark> \begin<<13552>>tex2html_wrap_inline<<13552>>$\Longrightarrow S_2$\end<<13553>>tex2html_wrap_inline<<13553>> 
\end<<11477>>center<<11477>>
\begin<<14918>>tex2html_deferred<<14918>>\par\end<<14919>>tex2html_deferred<<14919>>
Observe que en el patrón de entrada \begin<<13554>>tex2html_wrap_inline<<13554>>$ASSIGN(LEFTVALUE, x)$\end<<13555>>tex2html_wrap_inline<<13555>>\space aparece un
``comodín'': la variable-árbol \begin<<13556>>tex2html_wrap_inline<<13556>>$x$\end<<13557>>tex2html_wrap_inline<<13557>>, que hace que el árbol
patrón \begin<<13558>>tex2html_wrap_inline<<13558>>$ASSIGN(LEFTVALUE, x)$\end<<13559>>tex2html_wrap_inline<<13559>>\space case con cualquier árbol de asignación,
independientemente de la forma que tenga su subárbol derecho.
\begin<<14920>>tex2html_deferred<<14920>>\par\end<<14921>>tex2html_deferred<<14921>>
Las siguientes definiciones formalizan una aproximación simplificada 
al significado de los conceptos \index<<12228>>patrones árbol<<12228>>\emph<<12229>>patrones árbol<<12229>> y
\index<<12230>>casamiento de árboles<<12230>>\emph<<12231>>casamiento de árboles<<12231>>.
\begin<<14922>>tex2html_deferred<<14922>>\par\end<<14923>>tex2html_deferred<<14923>>
\begin<<11856>>theorem_type<<11856>>[definition][definition][section][][][]
Sea \begin<<13560>>tex2html_wrap_inline<<13560>>$(\Sigma, \rho)$\end<<13561>>tex2html_wrap_inline<<13561>>\space un alfabeto con función de aridad
y un conjunto (puede ser infinito) 
de variables \begin<<13562>>tex2html_wrap_inline<<13562>>$V =\{ x_1, x_2, \ldots \}$\end<<13563>>tex2html_wrap_inline<<13563>>. 
Las variables tienen
aridad cero: 
\begin<<14924>>tex2html_deferred<<14924>>\par\end<<14925>>tex2html_deferred<<14925>>
\begin<<11481>>center<<11481>>
\begin<<13564>>tex2html_wrap_inline<<13564>>$\rho(x) = 0\ \forall x \in V$\end<<13565>>tex2html_wrap_inline<<13565>>. 
\end<<11482>>center<<11482>>
\begin<<14926>>tex2html_deferred<<14926>>\par\end<<14927>>tex2html_deferred<<14927>>
Un elemento de \begin<<13566>>tex2html_wrap_inline<<13566>>$B(V \cup \Sigma)$\end<<13567>>tex2html_wrap_inline<<13567>>
se denomina \index<<12232>>patrón<<12232>>\emph<<12233>>patrón<<12233>> sobre \begin<<13568>>tex2html_wrap_inline<<13568>>$\Sigma$\end<<13569>>tex2html_wrap_inline<<13569>>.\end<<11857>>theorem_type<<11857>>
\begin<<14928>>tex2html_deferred<<14928>>\par\end<<14929>>tex2html_deferred<<14929>>
\begin<<11858>>theorem_type<<11858>>[definition][definition][section][][][]
Se dice que un
patrón es un \index<<12234>>patrón lineal<<12234>>\emph<<12235>>patrón lineal<<12235>> si ninguna variable se repite.\end<<11859>>theorem_type<<11859>>
\begin<<14930>>tex2html_deferred<<14930>>\par\end<<14931>>tex2html_deferred<<14931>>
\begin<<11860>>theorem_type<<11860>>[definition][definition][section][][][]
Se dice que un patrón es de tipo \begin<<13570>>tex2html_wrap_inline<<13570>>$(x_1, \ldots x_k)$\end<<13571>>tex2html_wrap_inline<<13571>>\space si las variables
que aparecen en el patrón leidas de izquierda a derecha en el árbol
son \begin<<13572>>tex2html_wrap_inline<<13572>>$x_1, \ldots x_k$\end<<13573>>tex2html_wrap_inline<<13573>>.\end<<11861>>theorem_type<<11861>>
\begin<<14932>>tex2html_deferred<<14932>>\par\end<<14933>>tex2html_deferred<<14933>>
\begin<<11862>>theorem_type<<11862>>[example][example][section][][][]
Sea \begin<<13574>>tex2html_wrap_inline<<13574>>$\Sigma = \{A, CONS, NIL \}$\end<<13575>>tex2html_wrap_inline<<13575>>\space con \begin<<13576>>tex2html_wrap_inline<<13576>>$\rho(A) = \rho(NIL) = 0, \rho(CONS) = 2$\end<<13577>>tex2html_wrap_inline<<13577>>
y sea \begin<<13578>>tex2html_wrap_inline<<13578>>$V = \{ x \}$\end<<13579>>tex2html_wrap_inline<<13579>>. Los siguientes árboles son ejemplos de 
patrones sobre \begin<<13580>>tex2html_wrap_inline<<13580>>$\Sigma$\end<<13581>>tex2html_wrap_inline<<13581>>:
\begin<<14934>>tex2html_deferred<<14934>>\par\end<<14935>>tex2html_deferred<<14935>>
\begin<<11491>>center<<11491>>
\{ \begin<<13582>>tex2html_wrap_inline<<13582>>$x, CONS(A, x), CONS(A, CONS(x, NIL)), \ldots \}$\end<<13583>>tex2html_wrap_inline<<13583>>
\end<<11492>>center<<11492>>
\begin<<14936>>tex2html_deferred<<14936>>\par\end<<14937>>tex2html_deferred<<14937>>
El patrón \begin<<13584>>tex2html_wrap_inline<<13584>>$CONS(x, CONS(x, NIL))$\end<<13585>>tex2html_wrap_inline<<13585>>\space es un ejemplo de patrón no lineal.
La idea es que un patrón lineal como éste ``fuerza'' a que los árboles \begin<<13586>>tex2html_wrap_inline<<13586>>$t$\end<<13587>>tex2html_wrap_inline<<13587>>
que casen con el patrón deben tener iguales los dos correspondientes
subárboles \begin<<13588>>tex2html_wrap_inline<<13588>>$t/1$\end<<13589>>tex2html_wrap_inline<<13589>>\space y \begin<<13590>>tex2html_wrap_inline<<13590>>$t/2 \ldotp 1$\end<<13591>>tex2html_wrap_inline<<13591>>\space situados en las posiciones de las variables
\begin<<14938>>tex2html_deferred<<14938>>\footnote<<11773>>Repase la notación de Dewey introducida en 
la definición \ref<<11493>>definition:dewey<<11493>><<11773>>\end<<14939>>tex2html_deferred<<14939>>
\begin<<14940>>tex2html_deferred<<14940>>\par\end<<14941>>tex2html_deferred<<14941>>\end<<11863>>theorem_type<<11863>>
\begin<<14942>>tex2html_deferred<<14942>>\par\end<<14943>>tex2html_deferred<<14943>>
\begin<<11864>>theorem_type<<11864>>[exercise][exercise][section][][][]
Dado la gramática árbol:
\begin<<14944>>tex2html_deferred<<14944>>\par\end<<14945>>tex2html_deferred<<14945>>
\begin<<11496>>center<<11496>>
\begin<<13592>>tex2html_wrap_inline<<13592>>$S \rightarrow S_1(a, S, b)$\end<<13593>>tex2html_wrap_inline<<13593>>\\ 
\begin<<13594>>tex2html_wrap_inline<<13594>>$S \rightarrow S_2(NIL)$\end<<13595>>tex2html_wrap_inline<<13595>> 
\end<<11497>>center<<11497>>
\begin<<14946>>tex2html_deferred<<14946>>\par\end<<14947>>tex2html_deferred<<14947>>
\noindent la cuál genera los árboles concretos para la gramática
\begin<<14948>>tex2html_deferred<<14948>>\par\end<<14949>>tex2html_deferred<<14949>>
\begin<<11498>>center<<11498>>
\begin<<13596>>tex2html_wrap_inline<<13596>>$S \rightarrow aSb$\end<<13597>>tex2html_wrap_inline<<13597>>\space  \begin<<13598>>tex2html_wrap_inline<<13598>>$|$\end<<13599>>tex2html_wrap_inline<<13599>>\space \begin<<13600>>tex2html_wrap_inline<<13600>>$\epsilon$\end<<13601>>tex2html_wrap_inline<<13601>>
\end<<11499>>center<<11499>>
\begin<<14950>>tex2html_deferred<<14950>>\par\end<<14951>>tex2html_deferred<<14951>>
\noindent ¿Es \begin<<13602>>tex2html_wrap_inline<<13602>>$S_1(a, X(NIL), b)$\end<<13603>>tex2html_wrap_inline<<13603>>\space un patrón árbol sobre el conjunto de variables \begin<<13604>>tex2html_wrap_inline<<13604>>$\{X, Y\}$\end<<13605>>tex2html_wrap_inline<<13605>>?
¿Lo es \begin<<13606>>tex2html_wrap_inline<<13606>>$S_1(X, Y, a)$\end<<13607>>tex2html_wrap_inline<<13607>>? ¿Es \begin<<13608>>tex2html_wrap_inline<<13608>>$S_1(X, Y, Y)$\end<<13609>>tex2html_wrap_inline<<13609>>\space un patrón árbol?\end<<11865>>theorem_type<<11865>>
\begin<<14952>>tex2html_deferred<<14952>>\par\end<<14953>>tex2html_deferred<<14953>>
\begin<<11866>>theorem_type<<11866>>[example][example][section][][][]
Ejemplos de patrones para el AAA definido en el ejemplo
\ref<<11502>>example:tutuast<<11502>> para el lenguaje Tutu son:
\begin<<14954>>tex2html_deferred<<14954>>\par\end<<14955>>tex2html_deferred<<14955>>
\begin<<11503>>center<<11503>>
\begin<<13610>>tex2html_wrap_inline<<13610>>$x, y, PLUS(x, y), ASSIGN(x, TIMES(y,ID)), PRINT(y) \ldots$\end<<13611>>tex2html_wrap_inline<<13611>>
\end<<11504>>center<<11504>>
\begin<<14956>>tex2html_deferred<<14956>>\par\end<<14957>>tex2html_deferred<<14957>>
considerando el conjunto de variables \begin<<13612>>tex2html_wrap_inline<<13612>>$V = \{ x, y \}$\end<<13613>>tex2html_wrap_inline<<13613>>. El patrón 
\begin<<13614>>tex2html_wrap_inline<<13614>>$ASSIGN(x, TIMES(y,ID))$\end<<13615>>tex2html_wrap_inline<<13615>>\space es del tipo \begin<<13616>>tex2html_wrap_inline<<13616>>$(x, y)$\end<<13617>>tex2html_wrap_inline<<13617>>.\end<<11867>>theorem_type<<11867>>
\begin<<14958>>tex2html_deferred<<14958>>\par\end<<14959>>tex2html_deferred<<14959>>
\begin<<11868>>theorem_type<<11868>>[definition][definition][section][][][]
Una \index<<12236>>sustitución<<12236>>\emph<<12237>>sustitución<<12237>> es una aplicación \begin<<13618>>tex2html_wrap_inline<<13618>>$\theta$\end<<13619>>tex2html_wrap_inline<<13619>>\space que asigna variables
a patrones \begin<<13620>>tex2html_wrap_inline<<13620>>$\theta: V \rightarrow B(V \cup \Sigma)$\end<<13621>>tex2html_wrap_inline<<13621>>.
\begin<<14960>>tex2html_deferred<<14960>>\par\end<<14961>>tex2html_deferred<<14961>>
Tal función puede ser naturalmente extendida de las variables
a los árboles: los nodos (hoja) etiquetados con dichas variables son sustituidos
por los correspondientes subárboles.
\begin<<14962>>tex2html_deferred<<14962>>\par\end<<14963>>tex2html_deferred<<14963>>
\begin<<11508>>center<<11508>>
\begin<<11509>>tabular<<11509>><<11510>>l<<11510>>
\begin<<13622>>tex2html_wrap_inline<<13622>>$\theta : B(V \cup \Sigma) \rightarrow B(V \cup \Sigma)$\end<<13623>>tex2html_wrap_inline<<13623>>\\ 
\begin<<13628>>tex2html_wrap_inline<<13628>>$t \theta = \left \{ \begin<<11511>>array<<11511>><<11512>>ll<<11512>>
                         x \theta ;SPMamp; \mbox<<11513>>si \begin<<13624>>tex2html_wrap_inline<<13624>>$t = x \in V$\end<<13625>>tex2html_wrap_inline<<13625>><<11513>>\\ 
                         a(t_1  \theta, \ldots, t_k \theta) ;SPMamp; \mbox<<11514>>si \begin<<13626>>tex2html_wrap_inline<<13626>>$t = a(t_1, \ldots, t_k)$\end<<13627>>tex2html_wrap_inline<<13627>><<11514>> 
                      \end<<11515>>array<<11515>>
             \right. $\end<<13629>>tex2html_wrap_inline<<13629>> 
\end<<11516>>tabular<<11516>>
\end<<11517>>center<<11517>>
\begin<<14964>>tex2html_deferred<<14964>>\par\end<<14965>>tex2html_deferred<<14965>>
Obsérvese que, al revés de lo que es costumbre, la aplicación 
de la sustitución \begin<<13630>>tex2html_wrap_inline<<13630>>$\theta$\end<<13631>>tex2html_wrap_inline<<13631>>\space al patrón se escribe por detrás: \begin<<13632>>tex2html_wrap_inline<<13632>>$t \theta$\end<<13633>>tex2html_wrap_inline<<13633>>.
\begin<<14966>>tex2html_deferred<<14966>>\par\end<<14967>>tex2html_deferred<<14967>>
También se escribe \begin<<13634>>tex2html_wrap_inline<<13634>>$t \theta = t\{x_1/x_1 \theta, \ldots x_k/x_k \theta\}$\end<<13635>>tex2html_wrap_inline<<13635>>\space si las variables
que aparecen en \begin<<13636>>tex2html_wrap_inline<<13636>>$t$\end<<13637>>tex2html_wrap_inline<<13637>>\space de izquierda a derecha son \begin<<13638>>tex2html_wrap_inline<<13638>>$x_1, \ldots x_k$\end<<13639>>tex2html_wrap_inline<<13639>>.\end<<11869>>theorem_type<<11869>>
\begin<<14968>>tex2html_deferred<<14968>>\par\end<<14969>>tex2html_deferred<<14969>>
\begin<<11870>>theorem_type<<11870>>[example][example][section][][][]
Si aplicamos la sustitución  \begin<<13640>>tex2html_wrap_inline<<13640>>$\theta = \{x/A, y/CONS(A, NIL)\}$\end<<13641>>tex2html_wrap_inline<<13641>>
al patrón \begin<<13642>>tex2html_wrap_inline<<13642>>$CONS(x, y)$\end<<13643>>tex2html_wrap_inline<<13643>>\space obtenemos el árbol \begin<<13644>>tex2html_wrap_inline<<13644>>$CONS(A, CONS(A, NIL))$\end<<13645>>tex2html_wrap_inline<<13645>>.
En efecto:
\begin<<14970>>tex2html_deferred<<14970>>\par\end<<14971>>tex2html_deferred<<14971>>
\begin<<11520>>center<<11520>>
\begin<<13646>>tex2html_wrap_inline<<13646>>$CONS(x, y)\theta = CONS(x\theta, y\theta) = CONS(A, CONS(A, NIL))$\end<<13647>>tex2html_wrap_inline<<13647>>
\end<<11521>>center<<11521>>
\begin<<14972>>tex2html_deferred<<14972>>\par\end<<14973>>tex2html_deferred<<14973>>\end<<11871>>theorem_type<<11871>>
\begin<<14974>>tex2html_deferred<<14974>>\par\end<<14975>>tex2html_deferred<<14975>>
\begin<<11872>>theorem_type<<11872>>[example][example][section][][][]
Si aplicamos la sustitución  \begin<<13648>>tex2html_wrap_inline<<13648>>$\theta = \{x/PLUS(NUM, x), y/TIMES(ID, NUM)\}$\end<<13649>>tex2html_wrap_inline<<13649>>
al patrón \begin<<13650>>tex2html_wrap_inline<<13650>>$PLUS(x, y)$\end<<13651>>tex2html_wrap_inline<<13651>>\space obtenemos el árbol \begin<<13652>>tex2html_wrap_inline<<13652>>$PLUS(PLUS(NUM,x), TIMES(ID, NUM))$\end<<13653>>tex2html_wrap_inline<<13653>>:
\begin<<14976>>tex2html_deferred<<14976>>\par\end<<14977>>tex2html_deferred<<14977>>
\begin<<11524>>center<<11524>>
\begin<<13654>>tex2html_wrap_inline<<13654>>$PLUS(x, y)\theta = PLUS(x\theta, y\theta) = PLUS(PLUS(NUM,x), TIMES(ID, NUM))$\end<<13655>>tex2html_wrap_inline<<13655>>
\end<<11525>>center<<11525>>
\begin<<14978>>tex2html_deferred<<14978>>\par\end<<14979>>tex2html_deferred<<14979>>\end<<11873>>theorem_type<<11873>>
\begin<<14980>>tex2html_deferred<<14980>>\par\end<<14981>>tex2html_deferred<<14981>>
\begin<<11874>>theorem_type<<11874>>[definition][definition][section][][][]
Se dice que un patrón \begin<<13656>>tex2html_wrap_inline<<13656>>$\tau \in B(V \cup \Sigma)$\end<<13657>>tex2html_wrap_inline<<13657>>\space con variables
\begin<<13658>>tex2html_wrap_inline<<13658>>$x_1, \ldots x_k$\end<<13659>>tex2html_wrap_inline<<13659>>\space \index<<12238>>casa con un árbol<<12238>>\emph<<12239>>casa con un árbol<<12239>>
\begin<<13660>>tex2html_wrap_inline<<13660>>$t \in B(\Sigma)$\end<<13661>>tex2html_wrap_inline<<13661>>\space si existe una sustitución de \begin<<13662>>tex2html_wrap_inline<<13662>>$\tau$\end<<13663>>tex2html_wrap_inline<<13663>>\space que produce \begin<<13664>>tex2html_wrap_inline<<13664>>$t$\end<<13665>>tex2html_wrap_inline<<13665>>, esto
es, si existen \begin<<13666>>tex2html_wrap_inline<<13666>>$t_1, \ldots t_k \in B(\Sigma)$\end<<13667>>tex2html_wrap_inline<<13667>>\space tales que 
\begin<<13668>>tex2html_wrap_inline<<13668>>$t = \tau \{x_1/t_1, \ldots x_k/t_k\}$\end<<13669>>tex2html_wrap_inline<<13669>>. 
También se dice que \begin<<13670>>tex2html_wrap_inline<<13670>>$\tau$\end<<13671>>tex2html_wrap_inline<<13671>>\space \index<<12240>>casa con la sustitución<<12240>>\emph<<12241>>casa con la sustitución<<12241>>
\begin<<13672>>tex2html_wrap_inline<<13672>>$\{x_1/t_1, \ldots x_k/t_k\}$\end<<13673>>tex2html_wrap_inline<<13673>>.\end<<11875>>theorem_type<<11875>>
\begin<<14982>>tex2html_deferred<<14982>>\par\end<<14983>>tex2html_deferred<<14983>>
\begin<<11876>>theorem_type<<11876>>[example][example][section][][][]
El patrón \begin<<13674>>tex2html_wrap_inline<<13674>>$\tau = CONS(x, NIL)$\end<<13675>>tex2html_wrap_inline<<13675>>\space casa con el árbol \begin<<13676>>tex2html_wrap_inline<<13676>>$t = CONS(CONS(A,NIL),NIL)$\end<<13677>>tex2html_wrap_inline<<13677>> 
y con el subárbol  \begin<<13678>>tex2html_wrap_inline<<13678>>$t \ldotp 1$\end<<13679>>tex2html_wrap_inline<<13679>>. Las respectivas sustituciones son \begin<<13680>>tex2html_wrap_inline<<13680>>$t\{x/CONS(A,NIL)\}$\end<<13681>>tex2html_wrap_inline<<13681>>\space y 
\begin<<13682>>tex2html_wrap_inline<<13682>>$t \ldotp 1 \{x/A\}$\end<<13683>>tex2html_wrap_inline<<13683>>.
\begin<<14984>>tex2html_deferred<<14984>>\par\end<<14985>>tex2html_deferred<<14985>>
\begin<<11532>>center<<11532>>
\begin<<13684>>tex2html_wrap_inline<<13684>>$t = \tau \{x/CONS(A,NIL)\}$\end<<13685>>tex2html_wrap_inline<<13685>>\\ 
\begin<<13686>>tex2html_wrap_inline<<13686>>$t \ldotp 1 = \tau \{x/A\}$\end<<13687>>tex2html_wrap_inline<<13687>>
\end<<11533>>center<<11533>>
\begin<<14986>>tex2html_deferred<<14986>>\par\end<<14987>>tex2html_deferred<<14987>>\end<<11877>>theorem_type<<11877>>
\begin<<14988>>tex2html_deferred<<14988>>\par\end<<14989>>tex2html_deferred<<14989>>
\begin<<11878>>theorem_type<<11878>>[exercise][exercise][section][][][]
Sea \begin<<13688>>tex2html_wrap_inline<<13688>>$\tau = PLUS(x, y)$\end<<13689>>tex2html_wrap_inline<<13689>>\space y \begin<<13690>>tex2html_wrap_inline<<13690>>$t = TIMES(PLUS(NUM, NUM), TIMES(ID, ID))$\end<<13691>>tex2html_wrap_inline<<13691>>.
Calcule los subárboles \begin<<13692>>tex2html_wrap_inline<<13692>>$t'$\end<<13693>>tex2html_wrap_inline<<13693>>\space de \begin<<13694>>tex2html_wrap_inline<<13694>>$t$\end<<13695>>tex2html_wrap_inline<<13695>>\space y las sustituciones \begin<<13696>>tex2html_wrap_inline<<13696>>$\{x/t_1, y/t_2\}$\end<<13697>>tex2html_wrap_inline<<13697>> 
que hacen que \begin<<13698>>tex2html_wrap_inline<<13698>>$\tau$\end<<13699>>tex2html_wrap_inline<<13699>>\space case con \begin<<13700>>tex2html_wrap_inline<<13700>>$t'$\end<<13701>>tex2html_wrap_inline<<13701>>.  
\begin<<14990>>tex2html_deferred<<14990>>\par\end<<14991>>tex2html_deferred<<14991>>
Por ejemplo es obvio que para el árbol raíz \begin<<13702>>tex2html_wrap_inline<<13702>>$t/\epsilon$\end<<13703>>tex2html_wrap_inline<<13703>>\space no existe sustitución
posible:
\begin<<14992>>tex2html_deferred<<14992>>\par\end<<14993>>tex2html_deferred<<14993>>
\begin<<13704>>tex2html_wrap_inline<<13704>>$t = TIMES(PLUS(NUM, NUM), TIMES(ID, ID)) = \tau\{x/t_1, y/t_2\} =
PLUS(x, y)\{x/t_1, y/t_2\}$\end<<13705>>tex2html_wrap_inline<<13705>>
\begin<<14994>>tex2html_deferred<<14994>>\par\end<<14995>>tex2html_deferred<<14995>>
ya que un término con raíz \begin<<13706>>tex2html_wrap_inline<<13706>>$TIMES$\end<<13707>>tex2html_wrap_inline<<13707>>\space nunca podrá ser igual a un término con raíz 
\begin<<13708>>tex2html_wrap_inline<<13708>>$PLUS$\end<<13709>>tex2html_wrap_inline<<13709>>.\end<<11879>>theorem_type<<11879>>
\begin<<14996>>tex2html_deferred<<14996>>\par\end<<14997>>tex2html_deferred<<14997>>
El problema aquí es equivalente al de las expresiones regulares
en el caso de los lenguajes lineales. En aquellos, los autómatas finitos 
nos proveen con un mecanismo para reconocer si una determinada cadena
``casa''' o no con la expresión regular. Existe un concepto análogo,
el de \index<<12242>>autómata árbol<<12242>>\emph<<12243>>autómata árbol<<12243>> que resuelve el problema del ``casamiento''
de patrones árbol. Al igual que el concepto de autómata permite 
la construcción de software para la búsqueda de cadenas y su 
posterior modificación, el concepto de autómata árbol 
permite la construcción de software para la búsqueda de los
subárboles que casan con un patrón árbol dado.
\begin<<14998>>tex2html_deferred<<14998>>\par\end<<14999>>tex2html_deferred<<14999>>
Estamos ahora en condiciones de plantear una segunda aproximación
al problema de la optimización independiente de la máquina
utilizando una subrutina que busque por aquellos
árboles que queremos optimizar (en el caso del plegado 
los árboles de tipo operación) y los transforme 
adecuadamente. 
\begin<<15000>>tex2html_deferred<<15000>>\par\end<<15001>>tex2html_deferred<<15001>>
La función
<tex2html_verb_mark>1952<tex2html_verb_mark> recibe una lista
de árboles los cuales recorre sometiéndolos 
a las transformaciones especificadas. La llamada para
producir el plegado sería:
\begin<<15002>>tex2html_deferred<<15002>>\par\end<<15003>>tex2html_deferred<<15003>>
\begin<<11538>>tex2html_preform<<11538>><tex2html_verbatim_mark>verbatim5614#\end<<11539>>tex2html_preform<<11539>>
Además de la lista de nodos le pasamos como argumentos una
referencia a la subrutina encargada de reconocer los patrónes
árbol (clave <tex2html_verb_mark>1953<tex2html_verb_mark>) y una referencia a la
subrutina que describe la acción que se ejecutará  (clave <tex2html_verb_mark>1954<tex2html_verb_mark>) sobre 
el árbol que ha casado. Ambas subrutinas 
asumen que el primer argumento que se les pasa 
es la referencia a la raíz del árbol que está siendo explorado.
\begin<<15004>>tex2html_deferred<<15004>>\par\end<<15005>>tex2html_deferred<<15005>>
Los métodos \index<<12244>>isa<<12244>>\emph<<12245>>isa<<12245>>, \index<<12246>>can<<12246>>\emph<<12247>>can<<12247>> y \index<<12248>>VERSION<<12248>>\emph<<12249>>VERSION<<12249>> 
son proporcionados por una clase especial denominada clase <tex2html_verb_mark>1955<tex2html_verb_mark>,
de la cual implícitamente hereda toda clase. 
El método <tex2html_verb_mark>1956<tex2html_verb_mark>  nos permite saber si una clase hereda de otra.
\begin<<15006>>tex2html_deferred<<15006>>\par\end<<15007>>tex2html_deferred<<15007>>
La subrutina <tex2html_verb_mark>1957<tex2html_verb_mark>
recibe los argumentos y da valores por defecto a los mismos
en el caso de que no hayan sido establecidos.
Finalmente, llama a <tex2html_verb_mark>1958<tex2html_verb_mark>
sobre cada uno de los nodos ``sentencia'' del programa.
\begin<<15008>>tex2html_deferred<<15008>>\par\end<<15009>>tex2html_deferred<<15009>>
\begin<<11543>>tex2html_preform<<11543>><tex2html_verbatim_mark>verbatim5615#\end<<11544>>tex2html_preform<<11544>>
\begin<<15010>>tex2html_deferred<<15010>>\par\end<<15011>>tex2html_deferred<<15011>>
La subrutina <tex2html_verb_mark>1959<tex2html_verb_mark>
utiliza el método <tex2html_verb_mark>1960<tex2html_verb_mark> para comprobar que el 
nodo actual dispone de un método
para calcular la lista con los hijos del nodo.
Una vez transformados los subárboles del nodo actual
procede a comprobar que el nodo casa con el patrón
y si es el caso le aplica la acción definida:
\begin<<15012>>tex2html_deferred<<15012>>\par\end<<15013>>tex2html_deferred<<15013>>
\begin<<11545>>tex2html_preform<<11545>><tex2html_verbatim_mark>verbatim5616#\end<<11546>>tex2html_preform<<11546>>
\begin<<15014>>tex2html_deferred<<15014>>\par\end<<15015>>tex2html_deferred<<15015>>
Recordemos el esquema de herencia que presentamos en la sección anterior.
Las clases <tex2html_verb_mark>1961<tex2html_verb_mark> y <tex2html_verb_mark>1962<tex2html_verb_mark> proveen versiones del método <tex2html_verb_mark>1963<tex2html_verb_mark>.
Teníamos:
\begin<<11547>>tex2html_preform<<11547>><tex2html_verbatim_mark>verbatim5617#\end<<11548>>tex2html_preform<<11548>>
Los objetos de la clase <tex2html_verb_mark>1964<tex2html_verb_mark> tienen acceso 
al método <tex2html_verb_mark>1965<tex2html_verb_mark>.
\begin<<15016>>tex2html_deferred<<15016>>\par\end<<15017>>tex2html_deferred<<15017>>
Las clases <tex2html_verb_mark>1966<tex2html_verb_mark> y <tex2html_verb_mark>1967<tex2html_verb_mark> 
heredan de la clase <tex2html_verb_mark>1968<tex2html_verb_mark>:
\begin<<11549>>tex2html_preform<<11549>><tex2html_verbatim_mark>verbatim5618#\end<<11550>>tex2html_preform<<11550>>
\begin<<15018>>tex2html_deferred<<15018>>\par\end<<15019>>tex2html_deferred<<15019>>
La subrutina <tex2html_verb_mark>1969<tex2html_verb_mark> introducida en la
sección 
\ref<<11551>>section:optimizacion<<11551>>
es la encargada 
de crear el nuevo nodo con el resultado de operar los
hijos izquierdo y derecho:
\begin<<15020>>tex2html_deferred<<15020>>\par\end<<15021>>tex2html_deferred<<15021>>
\begin<<11552>>tex2html_preform<<11552>><tex2html_verbatim_mark>verbatim5619#\end<<11553>>tex2html_preform<<11553>>
\begin<<15022>>tex2html_deferred<<15022>>\par\end<<15023>>tex2html_deferred<<15023>>
En la línea 4 se usa el método <tex2html_verb_mark>1970<tex2html_verb_mark> asociado 
con un nodo operación. 
\begin<<15024>>tex2html_deferred<<15024>>\par\end<<15025>>tex2html_deferred<<15025>>
\subsection<<12250>>Práctica: Casando y Transformando Árboles<<12250>>
   \index<<12251>>Práctica!Casando y Transformando Árboles<<12251>>
  
\label<<11555>>practica:casandoytransformando<<11555>>
Complete su proyecto para el compilador de Tutu completando
las subrutinas <tex2html_verb_mark>1971<tex2html_verb_mark> tal y como se explicó en la sección
\ref<<11556>>section:patronesarbol<<11556>>.
\begin<<15026>>tex2html_deferred<<15026>>\par\end<<15027>>tex2html_deferred<<15027>>
Ademas del plegado
de constantes use las nuevas subrutinas 
para aplicar simultáneamente 
las siguientes transformaciones algebraicas:
\begin<<15028>>tex2html_deferred<<15028>>\par\end<<15029>>tex2html_deferred<<15029>>
\vspace<<11557>>0.25cm<<11557>>
\begin<<11558>>tabular<<11558>><<11559>>lll<<11559>>
\begin<<13710>>tex2html_wrap_inline<<13710>>$PLUS(NUM, x)$\end<<13711>>tex2html_wrap_inline<<13711>>\space  ;SPMamp; \begin<<13712>>tex2html_wrap_inline<<13712>>$\wedge$\end<<13713>>tex2html_wrap_inline<<13713>>\space <tex2html_verb_mark>1972<tex2html_verb_mark> ;SPMamp; \begin<<13714>>tex2html_wrap_inline<<13714>>$\Longrightarrow x$\end<<13715>>tex2html_wrap_inline<<13715>>\\  
\begin<<13716>>tex2html_wrap_inline<<13716>>$PLUS(x, NUM)$\end<<13717>>tex2html_wrap_inline<<13717>>\space  ;SPMamp; \begin<<13718>>tex2html_wrap_inline<<13718>>$\wedge$\end<<13719>>tex2html_wrap_inline<<13719>>\space <tex2html_verb_mark>1973<tex2html_verb_mark> ;SPMamp; \begin<<13720>>tex2html_wrap_inline<<13720>>$\Longrightarrow x$\end<<13721>>tex2html_wrap_inline<<13721>>\space  \\  
\begin<<13722>>tex2html_wrap_inline<<13722>>$TIMES(NUM, x)$\end<<13723>>tex2html_wrap_inline<<13723>>\space ;SPMamp; \begin<<13724>>tex2html_wrap_inline<<13724>>$\wedge$\end<<13725>>tex2html_wrap_inline<<13725>>\space <tex2html_verb_mark>1974<tex2html_verb_mark> ;SPMamp; \begin<<13726>>tex2html_wrap_inline<<13726>>$\Longrightarrow x$\end<<13727>>tex2html_wrap_inline<<13727>>\space \\  
\begin<<13728>>tex2html_wrap_inline<<13728>>$TIMES(x, NUM)$\end<<13729>>tex2html_wrap_inline<<13729>>\space ;SPMamp; \begin<<13730>>tex2html_wrap_inline<<13730>>$\wedge$\end<<13731>>tex2html_wrap_inline<<13731>>\space <tex2html_verb_mark>1975<tex2html_verb_mark> ;SPMamp; \begin<<13732>>tex2html_wrap_inline<<13732>>$\Longrightarrow x$\end<<13733>>tex2html_wrap_inline<<13733>>\space  
\end<<11560>>tabular<<11560>>
\vspace<<11561>>0.25cm<<11561>>
\begin<<15030>>tex2html_deferred<<15030>>\par\end<<15031>>tex2html_deferred<<15031>>
\begin<<11562>>enumerate<<11562>>
\item
Dado un programa como
\begin<<15032>>tex2html_deferred<<15032>>\par\end<<15033>>tex2html_deferred<<15033>>
\begin<<11563>>tex2html_preform<<11563>><tex2html_verbatim_mark>verbatim5620#\end<<11564>>tex2html_preform<<11564>>
¿Será plegado el <tex2html_verb_mark>1976<tex2html_verb_mark>?
Sin embargo si que se pliega si el programa es de la forma:
\begin<<11565>>tex2html_preform<<11565>><tex2html_verbatim_mark>verbatim5621#\end<<11566>>tex2html_preform<<11566>>
No intente en esta práctica que programas como el primero  o como
<tex2html_verb_mark>1977<tex2html_verb_mark> sean plegados.
Para lograrlo sería necesario introducir transformaciones adicionales
y esto no se requiere en esta práctica.
\item
¿Existe un orden óptimo en el que ejecutar las transformaciones?
\item
Ponga un ejemplo en el que sea beneficioso ejecutar el plegado primero.
\item
Ponga otro ejemplo en el que sea beneficioso ejecutar el plegado después.
\item
¿Es necesario  aplicar las transformaciones reiteradamente? 
\item
\label<<11567>>item:parada<<11567>>
¿Cuál es la condición de parada?
\item
Como es habitual la pregunta 
\ref<<11568>>item:parada<<11568>> tiene 
una respuesta TIMTOWTDI: 
una posibilidad la da el módulo 
\htmladdnormallink<<11569>>Data::Compare<<11569>>
<<11570>>http://search.cpan.org/~dcantrell/Data-Compare-0.13/lib/Data/Compare.pm<<11570>>
el cual puede obtenerse desde CPAN y que permite comparar estructuras de datos, 
pero existe una solución mas sencilla. ¿Cuál?
\end<<11571>>enumerate<<11571>>
\begin<<15034>>tex2html_deferred<<15034>>\par\end<<15035>>tex2html_deferred<<15035>>
\section<<11572>>Asignación de Direcciones<<11572>>
Esta suele ser considerada  la primera de las fases de síntesis.
Las anteriores lo eran de análisis. La fase de análisis
es una transformación \begin<<13734>>tex2html_wrap_inline<<13734>>$texto\ fuente \rightarrow arbol$\end<<13735>>tex2html_wrap_inline<<13735>>, mientras
que la fase síntesis es una transformación inversa
\begin<<13736>>tex2html_wrap_inline<<13736>>$arbol \rightarrow texto\ objeto$\end<<13737>>tex2html_wrap_inline<<13737>>\space que produce una ``linealización''
del árbol. En general, se ubican en la fase de síntesis todas
las tareas que dependan del lenguaje objeto.
\begin<<15036>>tex2html_deferred<<15036>>\par\end<<15037>>tex2html_deferred<<15037>>
La asignación de direcciones depende de la máquina objetivo en cuanto
conlleva consideraciones sobre la longitud de palabra, las unidades
de memoria direccionables, la compactación de objetos pequeños (por ejemplo,
valores lógicos), el alineamiento a fronteras de palabra, etc.
\begin<<15038>>tex2html_deferred<<15038>>\par\end<<15039>>tex2html_deferred<<15039>>
En nuestro caso debemos distinguir entre las cadenas y las variables enteras.
\begin<<15040>>tex2html_deferred<<15040>>\par\end<<15041>>tex2html_deferred<<15041>>
Las constantes literales (como <tex2html_verb_mark>1978<tex2html_verb_mark>) se almacenan 
concatenadas en orden de aparición textual.
Una variable de tipo cadena ocupa dos palabras, una dando su dirección 
y otra dando su longitud.
\begin<<15042>>tex2html_deferred<<15042>>\par\end<<15043>>tex2html_deferred<<15043>>
\begin<<11573>>tex2html_preform<<11573>><tex2html_verbatim_mark>verbatim5622#\end<<11574>>tex2html_preform<<11574>>
\begin<<15044>>tex2html_deferred<<15044>>\par\end<<15045>>tex2html_deferred<<15045>>
El código de la subrutina <tex2html_verb_mark>1979<tex2html_verb_mark> es:
\begin<<11575>>tex2html_preform<<11575>><tex2html_verbatim_mark>verbatim5623#\end<<11576>>tex2html_preform<<11576>>
Una posible mejora es la que se describe en 
el punto
\ref<<11577>>item:norepetidas<<11577>>
de la práctica
\ref<<11578>>practica:calculodelasdirecciones<<11578>>.
\begin<<15046>>tex2html_deferred<<15046>>\par\end<<15047>>tex2html_deferred<<15047>>
Hemos supuesto que las variables enteras y las referencias ocupan una palabra.
Cada vez que una variable es declarada, se le computa su dirección relativa:
\begin<<15048>>tex2html_deferred<<15048>>\par\end<<15049>>tex2html_deferred<<15049>>
\begin<<11579>>tex2html_preform<<11579>><tex2html_verbatim_mark>verbatim5624#\end<<11580>>tex2html_preform<<11580>>
\begin<<15050>>tex2html_deferred<<15050>>\par\end<<15051>>tex2html_deferred<<15051>>
Se usa una variable <tex2html_verb_mark>1980<tex2html_verb_mark> para llevar la cuenta de la última 
dirección utilizada y se introduce un atributo <tex2html_verb_mark>1981<tex2html_verb_mark> en 
la tabla de símbolos:
\begin<<15052>>tex2html_deferred<<15052>>\par\end<<15053>>tex2html_deferred<<15053>>
\begin<<11581>>tex2html_preform<<11581>><tex2html_verbatim_mark>verbatim5625#\end<<11582>>tex2html_preform<<11582>>
\begin<<15054>>tex2html_deferred<<15054>>\par\end<<15055>>tex2html_deferred<<15055>>
Por último situamos todas las cadenas después de las variables
del programa fuente:
\begin<<15056>>tex2html_deferred<<15056>>\par\end<<15057>>tex2html_deferred<<15057>>
\begin<<11583>>tex2html_preform<<11583>><tex2html_verbatim_mark>verbatim5626#\end<<11584>>tex2html_preform<<11584>>
\begin<<15058>>tex2html_deferred<<15058>>\par\end<<15059>>tex2html_deferred<<15059>>
Esta aproximación es bastante simplista en cuanto que usa una palabra
por carácter. 
El punto
\ref<<11585>>item:compacta<<11585>>
de la práctica
\ref<<11586>>practica:calculodelasdirecciones<<11586>> propone una mejora.
\begin<<15060>>tex2html_deferred<<15060>>\par\end<<15061>>tex2html_deferred<<15061>>
\subsection<<12252>>Práctica: Cálculo de las Direcciones<<12252>>
   \index<<12253>>Práctica!Cálculo de las Direcciones<<12253>>
  
\label<<11588>>practica:calculodelasdirecciones<<11588>>
Modifique el cálculo de las direcciones para la gramática de Tutu
extendida con sentencias compuestas que fué presentada en 
la sección 
\ref<<11589>>practica:analisis_semantico<<11589>>.
\begin<<15062>>tex2html_deferred<<15062>>\par\end<<15063>>tex2html_deferred<<15063>>
\begin<<11590>>enumerate<<11590>>
\item
Resuelva el problema de calcular las direcciones de las variables
declaradas en los bloques. La memoria ocupada por dichas variables
se libera al terminar el bloque. Por tanto la variable <tex2html_verb_mark>1982<tex2html_verb_mark>
disminuye al final de cada bloque.
\item
\label<<11591>>item:norepetidas<<11591>>
En el código de la subrutina <tex2html_verb_mark>1983<tex2html_verb_mark> 
\begin<<15064>>tex2html_deferred<<15064>>\par\end<<15065>>tex2html_deferred<<15065>>
\begin<<11592>>tex2html_preform<<11592>><tex2html_verbatim_mark>verbatim5627#\end<<11593>>tex2html_preform<<11593>>
\begin<<15066>>tex2html_deferred<<15066>>\par\end<<15067>>tex2html_deferred<<15067>>
no se comprueba si la cadena <tex2html_verb_mark>1984<tex2html_verb_mark> ya está en <tex2html_verb_mark>1985<tex2html_verb_mark>. 
Es natural que si ya está no la insertemos de nuevo. Introduzca esa 
mejora. Para ello use la función <tex2html_verb_mark>1986<tex2html_verb_mark>,
la cual devuelve el desplazamiento en <tex2html_verb_mark>1987<tex2html_verb_mark> donde
quedó la última búsqueda <tex2html_verb_mark>1988<tex2html_verb_mark>.
 El siguiente ejemplo con
el depurador le muestra como trabaja. Escriba <tex2html_verb_mark>1989<tex2html_verb_mark>
para obtener mas información sobre la función <tex2html_verb_mark>1990<tex2html_verb_mark>.
Vea un ejemplo de uso:
\begin<<15068>>tex2html_deferred<<15068>>\par\end<<15069>>tex2html_deferred<<15069>>
\begin<<11594>>tex2html_preform<<11594>><tex2html_verbatim_mark>verbatim5628#\end<<11595>>tex2html_preform<<11595>>
\begin<<15070>>tex2html_deferred<<15070>>\par\end<<15071>>tex2html_deferred<<15071>>
\item
\label<<11596>>item:compacta<<11596>>
Empaquete las cadenas asumiendo que cada carácter ocupa un octeto o byte.
Una posible solución al problema de alineamiento que se produce es
rellenar con ceros los bytes que faltan hasta completar la última palabra
ocupada por la cadena. Por ejemplo, si la longitud de palabra de la 
máquina objeto es de 4 
bytes, la palabra \emph<<11597>>procesador<<11597>> se cargaría asi:
\begin<<15072>>tex2html_deferred<<15072>>\par\end<<15073>>tex2html_deferred<<15073>>
\begin<<11598>>center<<11598>>
\begin<<11599>>tex2html_preform<<11599>><tex2html_verbatim_mark>verbatim5629#\end<<11600>>tex2html_preform<<11600>>
\end<<11601>>center<<11601>>
\begin<<15074>>tex2html_deferred<<15074>>\par\end<<15075>>tex2html_deferred<<15075>>
Existen dos posibles formas de hacer esta empaquetado.
Por ejemplo, si tenemos las cadenas
<tex2html_verb_mark>1991<tex2html_verb_mark> y <tex2html_verb_mark>1992<tex2html_verb_mark> las podemos introducir en 
la cadena <tex2html_verb_mark>1993<tex2html_verb_mark> asi:
\begin<<15076>>tex2html_deferred<<15076>>\par\end<<15077>>tex2html_deferred<<15077>>
\begin<<11602>>center<<11602>>
\begin<<11603>>tex2html_preform<<11603>><tex2html_verbatim_mark>verbatim5630#\end<<11604>>tex2html_preform<<11604>>
\end<<11605>>center<<11605>>
\begin<<15078>>tex2html_deferred<<15078>>\par\end<<15079>>tex2html_deferred<<15079>>
o bien:
\begin<<15080>>tex2html_deferred<<15080>>\par\end<<15081>>tex2html_deferred<<15081>>
\begin<<11606>>center<<11606>>
\begin<<11607>>tex2html_preform<<11607>><tex2html_verbatim_mark>verbatim5631#\end<<11608>>tex2html_preform<<11608>>
\end<<11609>>center<<11609>>
\begin<<15082>>tex2html_deferred<<15082>>\par\end<<15083>>tex2html_deferred<<15083>>
La segunda forma aunque compacta más tiene la desventaja de hacer luego mas 
lento el código para el 
direccionamiento de las cadenas, ya que no empiezan en frontera de palabra. 
Utilice el primer modo.
\begin<<15084>>tex2html_deferred<<15084>>\par\end<<15085>>tex2html_deferred<<15085>>
Observe que este empaquetado introduce un efecto en lo que 
se considera un éxito en la búsqueda de una cadena 
<tex2html_verb_mark>1994<tex2html_verb_mark> en <tex2html_verb_mark>1995<tex2html_verb_mark>. ¿Que ocurre si <tex2html_verb_mark>1996<tex2html_verb_mark>
aparece en <tex2html_verb_mark>1997<tex2html_verb_mark> como subcadena de una cadena
previamente empaquetada ocupando una posición que no es frontera de palabra?
\begin<<15086>>tex2html_deferred<<15086>>\par\end<<15087>>tex2html_deferred<<15087>>
Cuando rellene con <tex2html_verb_mark>1998<tex2html_verb_mark> la cadena use el operador <tex2html_verb_mark>1999<tex2html_verb_mark> (letra equis)
para multiplicar número por cadena:
\begin<<15088>>tex2html_deferred<<15088>>\par\end<<15089>>tex2html_deferred<<15089>>
\begin<<11610>>tex2html_preform<<11610>><tex2html_verbatim_mark>verbatim5632#\end<<11611>>tex2html_preform<<11611>>
\begin<<15090>>tex2html_deferred<<15090>>\par\end<<15091>>tex2html_deferred<<15091>>
esto le evitará escribir un bucle.
\item
Mantega atributos distintos en el nodo <tex2html_verb_mark>2000<tex2html_verb_mark>
para el desplazamiento y longitud 
de <tex2html_verb_mark>2001<tex2html_verb_mark> en <tex2html_verb_mark>2002<tex2html_verb_mark> (en caracteres)
y su dirección y tamaño final en memoria (en palabras).
\begin<<15092>>tex2html_deferred<<15092>>\par\end<<15093>>tex2html_deferred<<15093>>
\end<<11612>>enumerate<<11612>>
\begin<<15094>>tex2html_deferred<<15094>>\par\end<<15095>>tex2html_deferred<<15095>>
\section<<11613>>Generación de Código: Máquina Pila<<11613>>
\label<<11614>>section:pila<<11614>>
El generador de código emite el código para el lenguaje objeto, utilizando
las direcciones calculadas en la fase anterior. Hemos simplificado esta fase
considerando una máquina orientada a pila: una memoria de pila en la que se
computan las expresiones, un segmento de datos en el que se guardan las variables
y un segmento para guardar las cadenas.
La estrategia utilizada es similar a la que vimos en el plegado de las constantes.
Definimos un método para la traducción de cada clase de nodo del AAA.
Entonces, para traducir el programa basta con llamar al correspondiente método:
\begin<<15096>>tex2html_deferred<<15096>>\par\end<<15097>>tex2html_deferred<<15097>>
\begin<<11615>>tex2html_preform<<11615>><tex2html_verbatim_mark>verbatim5633#\end<<11616>>tex2html_preform<<11616>>
\begin<<15098>>tex2html_deferred<<15098>>\par\end<<15099>>tex2html_deferred<<15099>>
en la cadena <tex2html_verb_mark>2003<tex2html_verb_mark> dejamos el código emitido.
Cada método visita los hijos, traduciéndolos y añadiendo 
el código que fuera necesario para la traducción del nodo.
\begin<<15100>>tex2html_deferred<<15100>>\par\end<<15101>>tex2html_deferred<<15101>>
\begin<<11617>>tex2html_preform<<11617>><tex2html_verbatim_mark>verbatim5634#\end<<11618>>tex2html_preform<<11618>>
\begin<<15102>>tex2html_deferred<<15102>>\par\end<<15103>>tex2html_deferred<<15103>>
Traducir la lista de sentencias es concatenar la traducción
de cada una de las sentencias en la lista:
\begin<<15104>>tex2html_deferred<<15104>>\par\end<<15105>>tex2html_deferred<<15105>>
\begin<<11619>>tex2html_preform<<11619>><tex2html_verbatim_mark>verbatim5635#\end<<11620>>tex2html_preform<<11620>>
\begin<<15106>>tex2html_deferred<<15106>>\par\end<<15107>>tex2html_deferred<<15107>>
Si suponemos que disponemos en el ensamblador de nuestra máquina
objeto de instrucciones <tex2html_verb_mark>2004<tex2html_verb_mark>  y <tex2html_verb_mark>2005<tex2html_verb_mark>
que imprimen el contenido 
de la expresión que esta en la cima de la pila, la traducción será:
\begin<<15108>>tex2html_deferred<<15108>>\par\end<<15109>>tex2html_deferred<<15109>>
\begin<<11621>>tex2html_preform<<11621>><tex2html_verbatim_mark>verbatim5636#\end<<11622>>tex2html_preform<<11622>>
Asi, si la sentencia era <tex2html_verb_mark>2006<tex2html_verb_mark>, donde <tex2html_verb_mark>2007<tex2html_verb_mark> es del tipo cadena, 
se debería eventualmente llamar al método de traducción del identificador:
\begin<<15110>>tex2html_deferred<<15110>>\par\end<<15111>>tex2html_deferred<<15111>>
\begin<<11623>>tex2html_preform<<11623>><tex2html_verbatim_mark>verbatim5637#\end<<11624>>tex2html_preform<<11624>>
la función <tex2html_verb_mark>2008<tex2html_verb_mark> simplemente concatena el código 
producido a la salida:
\begin<<15112>>tex2html_deferred<<15112>>\par\end<<15113>>tex2html_deferred<<15113>>
\begin<<11625>>tex2html_preform<<11625>><tex2html_verbatim_mark>verbatim5638#\end<<11626>>tex2html_preform<<11626>>
\begin<<15114>>tex2html_deferred<<15114>>\par\end<<15115>>tex2html_deferred<<15115>>
Para la traducción de una sentencia de asignación
supondremos de la existencia de isntrucciones <tex2html_verb_mark>2009<tex2html_verb_mark>
y <tex2html_verb_mark>2010<tex2html_verb_mark>. La instrucción <tex2html_verb_mark>2011<tex2html_verb_mark> asume 
que en la cima de la pila están la dirección y la cadena a almacenar.
\begin<<15116>>tex2html_deferred<<15116>>\par\end<<15117>>tex2html_deferred<<15117>>
\begin<<11627>>tex2html_preform<<11627>><tex2html_verbatim_mark>verbatim5639#\end<<11628>>tex2html_preform<<11628>>
Si se está traduciendo una sentencia como <tex2html_verb_mark>2012<tex2html_verb_mark>,
se acabará llamando al método 
de traducción asociado con la clase <tex2html_verb_mark>2013<tex2html_verb_mark>
el cual actúa empujando la dirección y la longitud de la cadena en
la pila:
\begin<<11629>>tex2html_preform<<11629>><tex2html_verbatim_mark>verbatim5640#\end<<11630>>tex2html_preform<<11630>>
Así la traducción de este fuente:
\begin<<15118>>tex2html_deferred<<15118>>\par\end<<15119>>tex2html_deferred<<15119>>
\begin<<11631>>tex2html_preform<<11631>><tex2html_verbatim_mark>verbatim5641#\end<<11632>>tex2html_preform<<11632>>
\begin<<15120>>tex2html_deferred<<15120>>\par\end<<15121>>tex2html_deferred<<15121>>
es:
\begin<<15122>>tex2html_deferred<<15122>>\par\end<<15123>>tex2html_deferred<<15123>>
\begin<<11633>>tex2html_preform<<11633>><tex2html_verbatim_mark>verbatim5642#\end<<11634>>tex2html_preform<<11634>>
\begin<<15124>>tex2html_deferred<<15124>>\par\end<<15125>>tex2html_deferred<<15125>>
El resto de los métodos de traducción es similar:
\begin<<11635>>tex2html_preform<<11635>><tex2html_verbatim_mark>verbatim5643#\end<<11636>>tex2html_preform<<11636>>
\begin<<15126>>tex2html_deferred<<15126>>\par\end<<15127>>tex2html_deferred<<15127>>
Veamos un ejemplo. Dado el código fuente:
\begin<<11637>>tex2html_preform<<11637>><tex2html_verbatim_mark>verbatim5644#\end<<11638>>tex2html_preform<<11638>>
el código generado es:
\begin<<11639>>tex2html_preform<<11639>><tex2html_verbatim_mark>verbatim5645#\end<<11640>>tex2html_preform<<11640>>
\begin<<15128>>tex2html_deferred<<15128>>\par\end<<15129>>tex2html_deferred<<15129>>
\section<<11641>>Generación de Código: Máquina Basada en Registros<<11641>>
La máquina orientada a pila para la que generamos código en la sección
\ref<<11642>>section:pila<<11642>>
es un ejemplo de la clase de máquinas que es usada por la mayoría 
de los lenguajes interpretados: Perl, Python; java, etc.
\begin<<15130>>tex2html_deferred<<15130>>\par\end<<15131>>tex2html_deferred<<15131>>
En esta sección introduciremos una máquina basada en registros.
Suponemos que la máquina tiene \begin<<13738>>tex2html_wrap_inline<<13738>>$k$\end<<13739>>tex2html_wrap_inline<<13739>>\space registros \begin<<13740>>tex2html_wrap_inline<<13740>>$R_0 \ldots R_<<11643>>k-1<<11643>>$\end<<13741>>tex2html_wrap_inline<<13741>>.
Las instrucciones toman dos argumentos, dejando el resultado en
el primer argumento. Son las siguientes:
\begin<<15132>>tex2html_deferred<<15132>>\par\end<<15133>>tex2html_deferred<<15133>>
\vspace<<11644>>0.5cm<<11644>>
\begin<<11645>>tabular<<11645>><<11646>>ll<<11646>>
<tex2html_verb_mark>2014<tex2html_verb_mark> ;SPMamp; \begin<<13742>>tex2html_wrap_inline<<13742>>$R_i = M_a$\end<<13743>>tex2html_wrap_inline<<13743>>\\ 
<tex2html_verb_mark>2015<tex2html_verb_mark>  ;SPMamp; \begin<<13744>>tex2html_wrap_inline<<13744>>$R_i = c$\end<<13745>>tex2html_wrap_inline<<13745>>\\ 
<tex2html_verb_mark>2016<tex2html_verb_mark>  ;SPMamp; \begin<<13746>>tex2html_wrap_inline<<13746>>$M_a = R_i$\end<<13747>>tex2html_wrap_inline<<13747>>\\ 
<tex2html_verb_mark>2017<tex2html_verb_mark>  ;SPMamp; \begin<<13748>>tex2html_wrap_inline<<13748>>$R_i += R_j$\end<<13749>>tex2html_wrap_inline<<13749>>\\ 
<tex2html_verb_mark>2018<tex2html_verb_mark>  ;SPMamp; \begin<<13750>>tex2html_wrap_inline<<13750>>$R_i += M_a$\end<<13751>>tex2html_wrap_inline<<13751>>\\ 
<tex2html_verb_mark>2019<tex2html_verb_mark>  ;SPMamp; \begin<<13752>>tex2html_wrap_inline<<13752>>$R_i += c$\end<<13753>>tex2html_wrap_inline<<13753>>\\ 
\ldots              ;SPMamp; \ldots 
\end<<11647>>tabular<<11647>>
\begin<<15134>>tex2html_deferred<<15134>>\par\end<<15135>>tex2html_deferred<<15135>>
El problema es generar el código con el menor número 
de instrucciones posible, teniendo 
en cuenta la limitación existente de registros.
\begin<<15136>>tex2html_deferred<<15136>>\par\end<<15137>>tex2html_deferred<<15137>>
Supongamos que queremos traducir un subárbol
\begin<<13754>>tex2html_wrap_inline<<13754>>$OP(t_1, t_2)$\end<<13755>>tex2html_wrap_inline<<13755>>\space  y que la traducción del subárbol \begin<<13756>>tex2html_wrap_inline<<13756>>$t_1$\end<<13757>>tex2html_wrap_inline<<13757>>\space requiere \begin<<13758>>tex2html_wrap_inline<<13758>>$r_1$\end<<13759>>tex2html_wrap_inline<<13759>>\space registros
y que la traducción de \begin<<13760>>tex2html_wrap_inline<<13760>>$t_2$\end<<13761>>tex2html_wrap_inline<<13761>>\space requiere \begin<<13762>>tex2html_wrap_inline<<13762>>$r_2$\end<<13763>>tex2html_wrap_inline<<13763>>\space registros, con \begin<<13764>>tex2html_wrap_inline<<13764>>$r_1 ;SPMlt; r_2 \le k$\end<<13765>>tex2html_wrap_inline<<13765>>.
Si realizamos primero la evaluación de \begin<<13766>>tex2html_wrap_inline<<13766>>$t_1$\end<<13767>>tex2html_wrap_inline<<13767>>, debemos dejar el 
resultado en un registro que no podrá ser utilizado en la evaluación de 
\begin<<13768>>tex2html_wrap_inline<<13768>>$t_2$\end<<13769>>tex2html_wrap_inline<<13769>>. Si \begin<<13770>>tex2html_wrap_inline<<13770>>$r_2 = k$\end<<13771>>tex2html_wrap_inline<<13771>>, la evaluación de \begin<<13772>>tex2html_wrap_inline<<13772>>$t_2$\end<<13773>>tex2html_wrap_inline<<13773>>\space podría dar lugar 
a la necesidad de recurrir a almacenamiento temporal.
Esta situación no se da si evaluamos primero \begin<<13774>>tex2html_wrap_inline<<13774>>$t_2$\end<<13775>>tex2html_wrap_inline<<13775>>.
En tal caso, dado que hay un registro en el que se guarda el resultado de
\begin<<13776>>tex2html_wrap_inline<<13776>>$t_2$\end<<13777>>tex2html_wrap_inline<<13777>>, quedan libres al menos \begin<<13778>>tex2html_wrap_inline<<13778>>$r_2 - 1$\end<<13779>>tex2html_wrap_inline<<13779>>\space registros. 
Como \begin<<13780>>tex2html_wrap_inline<<13780>>$r_2 - 1 \ge r_1$\end<<13781>>tex2html_wrap_inline<<13781>>\space se sigue que tenemos suficientes registros
para traducir \begin<<13782>>tex2html_wrap_inline<<13782>>$t_1$\end<<13783>>tex2html_wrap_inline<<13783>>.
Como regla general es mejor evaluar primero el subárbol
que mayores requerimientos de registros tiene.
\begin<<15138>>tex2html_deferred<<15138>>\par\end<<15139>>tex2html_deferred<<15139>>
La siguiente cuestión es como calcular los requerimientos en registros
de una expresión dada. No consideraremos en esta fase límites en el número de 
registros disponibles. Obsérvese que si los requerimientos para los subárboles
son distintos, \begin<<13784>>tex2html_wrap_inline<<13784>>$r_1 \neq r_2$\end<<13785>>tex2html_wrap_inline<<13785>>\space la traducción puede realizarse usando 
el máximo de ambos \begin<<13786>>tex2html_wrap_inline<<13786>>$\max\{r_1, r_2\}$\end<<13787>>tex2html_wrap_inline<<13787>>\space siguiendo la estrategia 
de traducir primero el que mayores requerimentos tenga. 
Si son iguales entonces se necesitan \begin<<13788>>tex2html_wrap_inline<<13788>>$r_1 + 1$\end<<13789>>tex2html_wrap_inline<<13789>>
registros ya que es necesario un registro para guardar el resultado de
la primera traducción. 
\begin<<15140>>tex2html_deferred<<15140>>\par\end<<15141>>tex2html_deferred<<15141>>
Nótese que, como el juego de instrucciones
para un operando  puede tener como segundo argumento una dirección de memoria,
los ``segundos operandos'' no necesitan registro. Por ejemplo, 
el árbol  \begin<<13790>>tex2html_wrap_inline<<13790>>$PLUS(a,b)$\end<<13791>>tex2html_wrap_inline<<13791>>\space se traduce por 
\begin<<15142>>tex2html_deferred<<15142>>\par\end<<15143>>tex2html_deferred<<15143>>
\begin<<11648>>tex2html_preform<<11648>><tex2html_verbatim_mark>verbatim5646#\end<<11649>>tex2html_preform<<11649>>
\begin<<15144>>tex2html_deferred<<15144>>\par\end<<15145>>tex2html_deferred<<15145>>
Asi \begin<<13792>>tex2html_wrap_inline<<13792>>$b$\end<<13793>>tex2html_wrap_inline<<13793>>\space no requiere registro, mientras que \begin<<13794>>tex2html_wrap_inline<<13794>>$a$\end<<13795>>tex2html_wrap_inline<<13795>>\space si lo requiere. Por tanto, las 
hojas izquierdas requieren de registro mientras que las hojas derechas no.
\begin<<15146>>tex2html_deferred<<15146>>\par\end<<15147>>tex2html_deferred<<15147>>
Si \begin<<13796>>tex2html_wrap_inline<<13796>>$t$\end<<13797>>tex2html_wrap_inline<<13797>>\space es un nodo de la forma
\begin<<13798>>tex2html_wrap_inline<<13798>>$OP(t_1, t_2)$\end<<13799>>tex2html_wrap_inline<<13799>>\space el número de registros \begin<<13800>>tex2html_wrap_inline<<13800>>$r_t$\end<<13801>>tex2html_wrap_inline<<13801>>\space requeridos por \begin<<13802>>tex2html_wrap_inline<<13802>>$t$\end<<13803>>tex2html_wrap_inline<<13803>>\space viene dado por 
la fórmula:
\begin<<15148>>tex2html_deferred<<15148>>\par\end<<15149>>tex2html_deferred<<15149>>
\vspace<<11650>>0.25cm<<11650>>
\begin<<11651>>center<<11651>>
\begin<<13808>>tex2html_wrap_inline<<13808>>$r_t =  \left \{ \begin<<11652>>array<<11652>><<11653>>ll<<11653>>
               \max\{r_1, r_2\} ;SPMamp; \mbox<<11654>>si \begin<<13804>>tex2html_wrap_inline<<13804>>$r_1 \neq r_2$\end<<13805>>tex2html_wrap_inline<<13805>><<11654>>\\ 
               r_1 + 1 ;SPMamp; \mbox<<11655>>si \begin<<13806>>tex2html_wrap_inline<<13806>>$r_1 = r_2$\end<<13807>>tex2html_wrap_inline<<13807>><<11655>> 
           \end<<11656>>array<<11656>>
        \right .$\end<<13809>>tex2html_wrap_inline<<13809>> 
\end<<11657>>center<<11657>>
\vspace<<11658>>0.25cm<<11658>>
\begin<<15150>>tex2html_deferred<<15150>>\par\end<<15151>>tex2html_deferred<<15151>>
Dotaremos a cada nodo del AST de un método <tex2html_verb_mark>2020<tex2html_verb_mark>
que computa la demanda en registros de dicho nodo. 
Lo que haremos es introducir en la clase <tex2html_verb_mark>2021<tex2html_verb_mark> de la cual heredan
las operaciones binarias el correspondiente método <tex2html_verb_mark>2022<tex2html_verb_mark>:
\begin<<15152>>tex2html_deferred<<15152>>\par\end<<15153>>tex2html_deferred<<15153>>
\begin<<11659>>tex2html_preform<<11659>><tex2html_verbatim_mark>verbatim5647#\end<<11660>>tex2html_preform<<11660>>
\begin<<15154>>tex2html_deferred<<15154>>\par\end<<15155>>tex2html_deferred<<15155>>
El segundo argumento que recibe <tex2html_verb_mark>2023<tex2html_verb_mark> es 
su posición (izquierda o derecha) entre los hijos de su padre.
dicha información no es usada en los nodos binarios. 
Su necesidad queda clara cuando se considera el cómputo
del número de registros requeridos por las hojas.
\begin<<15156>>tex2html_deferred<<15156>>\par\end<<15157>>tex2html_deferred<<15157>>
El cómputo en las hojas corre a cargo del correspondiente método
en la clase <tex2html_verb_mark>2024<tex2html_verb_mark>. Los nodos de tipo número (clase <tex2html_verb_mark>2025<tex2html_verb_mark>), cadena 
(clase <tex2html_verb_mark>2026<tex2html_verb_mark>) y variable (clase <tex2html_verb_mark>2027<tex2html_verb_mark>)
heredan de la clase <tex2html_verb_mark>2028<tex2html_verb_mark>.
\begin<<15158>>tex2html_deferred<<15158>>\par\end<<15159>>tex2html_deferred<<15159>>
\begin<<11661>>tex2html_preform<<11661>><tex2html_verbatim_mark>verbatim5648#\end<<11662>>tex2html_preform<<11662>>
\begin<<15160>>tex2html_deferred<<15160>>\par\end<<15161>>tex2html_deferred<<15161>>
El atributo <tex2html_verb_mark>2029<tex2html_verb_mark> se computa para cada una de las sentencias 
del programa:
\begin<<15162>>tex2html_deferred<<15162>>\par\end<<15163>>tex2html_deferred<<15163>>
\begin<<11663>>tex2html_preform<<11663>><tex2html_verbatim_mark>verbatim5649#\end<<11664>>tex2html_preform<<11664>>
\begin<<15164>>tex2html_deferred<<15164>>\par\end<<15165>>tex2html_deferred<<15165>>
Por supuesto los nodos <tex2html_verb_mark>2030<tex2html_verb_mark> y <tex2html_verb_mark>2031<tex2html_verb_mark>
poseen sus propios métodos <tex2html_verb_mark>2032<tex2html_verb_mark>.
\begin<<15166>>tex2html_deferred<<15166>>\par\end<<15167>>tex2html_deferred<<15167>>
Una vez computados los requerimientos en registros de cada
nódo, la generación de código para un nodo gestiona la
asignación de registros usando una cola en la que se guardan 
los registros disponibles. Se
siguen básicamente dos reglas para la traducción de un
nodo  <tex2html_verb_mark>2033<tex2html_verb_mark>:
\begin<<15168>>tex2html_deferred<<15168>>\par\end<<15169>>tex2html_deferred<<15169>>
\begin<<11665>>enumerate<<11665>>
\item
Realizar primero la traducción del hijo con mayores
requerimientos y luego el otro
\item
El resultado queda siempre en el registro que ocupa 
\underline<<11666>>la primera posición<<11666>> en la cola
\end<<11667>>enumerate<<11667>>
\begin<<15170>>tex2html_deferred<<15170>>\par\end<<15171>>tex2html_deferred<<15171>>
Hay cuatro casos a considerar: el primero 
es que el operando derecho sea una hoja.
La generación de código para este caso es:
\begin<<15172>>tex2html_deferred<<15172>>\par\end<<15173>>tex2html_deferred<<15173>>
\begin<<11668>>tex2html_preform<<11668>><tex2html_verbatim_mark>verbatim5650#\end<<11669>>tex2html_preform<<11669>>
La generación del nemónico se basa en tres métodos:
\begin<<15174>>tex2html_deferred<<15174>>\par\end<<15175>>tex2html_deferred<<15175>>
\begin<<11670>>itemize<<11670>>
\item
El método <tex2html_verb_mark>2034<tex2html_verb_mark> devuelve el nemónico asociado con el nodo.
Por ejemplo, para la clase <tex2html_verb_mark>2035<tex2html_verb_mark> el código es:
\begin<<11671>>tex2html_preform<<11671>><tex2html_verbatim_mark>verbatim5651#\end<<11672>>tex2html_preform<<11672>>
\item
El método <tex2html_verb_mark>2036<tex2html_verb_mark> devuelve el sufijo que hay que añadir 
para completar el nemónico, en términos de como sea el
operando: <tex2html_verb_mark>2037<tex2html_verb_mark> para los números, <tex2html_verb_mark>2038<tex2html_verb_mark> para los 
identificadores, etc.
\item
El método <tex2html_verb_mark>2039<tex2html_verb_mark> genera el operando. Así para las clases
número e identificador su código es:
\begin<<15176>>tex2html_deferred<<15176>>\par\end<<15177>>tex2html_deferred<<15177>>
\vspace<<11673>>0,1cm<<11673>>
\begin<<11674>>tabular<<11674>><<11774>>|p<<11675>>5cm<<11675>>|p<<11676>>10cm<<11676>>|<<11774>>
\hline 
\begin<<11677>>tex2html_preform<<11677>><tex2html_verbatim_mark>verbatim5652#\end<<11678>>tex2html_preform<<11678>> ;SPMamp;
\begin<<11679>>tex2html_preform<<11679>><tex2html_verbatim_mark>verbatim5653#\end<<11680>>tex2html_preform<<11680>>\\ 
\hline
\end<<11681>>tabular<<11681>>
\vspace<<11682>>0,1cm<<11682>>
\begin<<15178>>tex2html_deferred<<15178>>\par\end<<15179>>tex2html_deferred<<15179>>
\end<<11683>>itemize<<11683>>
\begin<<15180>>tex2html_deferred<<15180>>\par\end<<15181>>tex2html_deferred<<15181>>
El resto del código distingue  tres casos,
según sean \begin<<13810>>tex2html_wrap_inline<<13810>>$r_1$\end<<13811>>tex2html_wrap_inline<<13811>>, \begin<<13812>>tex2html_wrap_inline<<13812>>$r_2$\end<<13813>>tex2html_wrap_inline<<13813>>\space y el número de registros
disponibles. 
Los dos primeros casos desglosan
la posibilidad de que uno de los dos subárboles
pueda realizarse con el número de registros
disponible (\begin<<13814>>tex2html_wrap_inline<<13814>>$\min \{r_1, r_2 \} ;SPMlt; k$\end<<13815>>tex2html_wrap_inline<<13815>>).
El tercer caso corresponde a que 
se necesiten temporales: \begin<<13816>>tex2html_wrap_inline<<13816>>$\min \{r_1, r_2 \} \ge k$\end<<13817>>tex2html_wrap_inline<<13817>>.
\begin<<15182>>tex2html_deferred<<15182>>\par\end<<15183>>tex2html_deferred<<15183>>
\begin<<11684>>tex2html_preform<<11684>><tex2html_verbatim_mark>verbatim5654#\end<<11685>>tex2html_preform<<11685>>
En este caso debemos realizar primero la traducción
del hijo derecho. Salvando su resultado en <tex2html_verb_mark>2040<tex2html_verb_mark>. 
El registro es retirado de la cola y traducimos el 
lado izquierdo. El resultado ha quedado en el primer
registro de la cola. Emitimos la operación, añadiendo
el sufijo <tex2html_verb_mark>2041<tex2html_verb_mark>, ya que se trata de una operación entre registros
y posteriormente devolvemos el registro a la cola.
\begin<<15184>>tex2html_deferred<<15184>>\par\end<<15185>>tex2html_deferred<<15185>>
\begin<<11880>>theorem_type<<11880>>[exercise][exercise][section][][][]
Responda a las siguientes preguntas:
\begin<<15186>>tex2html_deferred<<15186>>\par\end<<15187>>tex2html_deferred<<15187>>
\begin<<11687>>enumerate<<11687>>
\item
Si en el código anterior sustituimos la línea 12
\begin<<15188>>tex2html_deferred<<15188>>\par\end<<15189>>tex2html_deferred<<15189>>
\begin<<11688>>center<<11688>>
<tex2html_verb_mark>2042<tex2html_verb_mark>
\end<<11689>>center<<11689>>
\begin<<15190>>tex2html_deferred<<15190>>\par\end<<15191>>tex2html_deferred<<15191>>
por 
\begin<<15192>>tex2html_deferred<<15192>>\par\end<<15193>>tex2html_deferred<<15193>>
\begin<<11690>>center<<11690>>
<tex2html_verb_mark>2043<tex2html_verb_mark> 
\end<<11691>>center<<11691>>
\begin<<15194>>tex2html_deferred<<15194>>\par\end<<15195>>tex2html_deferred<<15195>>
¿Seguiría funcionando el código?
\begin<<15196>>tex2html_deferred<<15196>>\par\end<<15197>>tex2html_deferred<<15197>>
\item
¿Podemos asegurar en este subcaso que el código generado para <tex2html_verb_mark>2044<tex2html_verb_mark>
(línea 8) se ha realizado integramente en los registros?
\end<<11692>>enumerate<<11692>>\end<<11881>>theorem_type<<11881>>
\begin<<15198>>tex2html_deferred<<15198>>\par\end<<15199>>tex2html_deferred<<15199>>
Los otros dos casos tienen similar tratamiento:
\begin<<15200>>tex2html_deferred<<15200>>\par\end<<15201>>tex2html_deferred<<15201>>
\begin<<11694>>tex2html_preform<<11694>><tex2html_verbatim_mark>verbatim5655#\end<<11695>>tex2html_preform<<11695>>
\begin<<15202>>tex2html_deferred<<15202>>\par\end<<15203>>tex2html_deferred<<15203>>
Antes de comenzar a generar el código,
la variable <tex2html_verb_mark>2045<tex2html_verb_mark> debe ser inicializada a un valor apropiado, 
de manera que se usen direcciones no ocupadas por los datos.
Por ejemplo:
\begin<<15204>>tex2html_deferred<<15204>>\par\end<<15205>>tex2html_deferred<<15205>>
\begin<<11696>>tex2html_preform<<11696>><tex2html_verbatim_mark>verbatim5656#\end<<11697>>tex2html_preform<<11697>>
\begin<<15206>>tex2html_deferred<<15206>>\par\end<<15207>>tex2html_deferred<<15207>>
El método <tex2html_verb_mark>2046<tex2html_verb_mark> sólo debería ser llamado sobre una hoja
si se trata de una hoja izquierda (en cuyo caso el número de
registros requeridos es uno):
\begin<<11698>>tex2html_preform<<11698>><tex2html_verbatim_mark>verbatim5657#\end<<11699>>tex2html_preform<<11699>>
\begin<<15208>>tex2html_deferred<<15208>>\par\end<<15209>>tex2html_deferred<<15209>>
La pila de registros es inicializada al número de registros disponibles:
\begin<<15210>>tex2html_deferred<<15210>>\par\end<<15211>>tex2html_deferred<<15211>>
\begin<<11700>>tex2html_preform<<11700>><tex2html_verbatim_mark>verbatim5658#\end<<11701>>tex2html_preform<<11701>>
\begin<<15212>>tex2html_deferred<<15212>>\par\end<<15213>>tex2html_deferred<<15213>>
\begin<<11882>>theorem_type<<11882>>[exercise][exercise][section][][][]
Responda a las siguientes preguntas:
\begin<<15214>>tex2html_deferred<<15214>>\par\end<<15215>>tex2html_deferred<<15215>>
\begin<<11703>>itemize<<11703>>
\item
¿Cuáles son los requerimientos de registros para un nodo de la clase \begin<<13818>>tex2html_wrap_inline<<13818>>$ASSIGN$\end<<13819>>tex2html_wrap_inline<<13819>>?
\item
¿Cuáles son los requerimientos de registros para un nodo de la clase \begin<<13820>>tex2html_wrap_inline<<13820>>$PRINT$\end<<13821>>tex2html_wrap_inline<<13821>>?
\item
¿Se puede lograr la funcionalidad proveída por el método 
<tex2html_verb_mark>2047<tex2html_verb_mark>\\ 
usando <tex2html_verb_mark>2048<tex2html_verb_mark>? 
\begin<<15216>>tex2html_deferred<<15216>>\par\end<<15217>>tex2html_deferred<<15217>>
¿Sería necesario introducir modificaciones
en <tex2html_verb_mark>2049<tex2html_verb_mark>? Si es así, ¿Cuáles?.
\end<<11704>>itemize<<11704>>\end<<11883>>theorem_type<<11883>>
\begin<<15218>>tex2html_deferred<<15218>>\par\end<<15219>>tex2html_deferred<<15219>>
\subsection<<12254>>Práctica: Generación de Código<<12254>>
   \index<<12255>>Práctica!Generación de Código<<12255>>
  
\label<<11707>>practica:generaciondecodigo<<11707>>
\begin<<11708>>enumerate<<11708>>
\item
Complete la generación de código para la máquina basada en registros.
Recuerde que debe escribir el método <tex2html_verb_mark>2050<tex2html_verb_mark>
para las diferentes clases <tex2html_verb_mark>2051<tex2html_verb_mark>, <tex2html_verb_mark>2052<tex2html_verb_mark>,
<tex2html_verb_mark>2053<tex2html_verb_mark>, <tex2html_verb_mark>2054<tex2html_verb_mark>, <tex2html_verb_mark>2055<tex2html_verb_mark>, etc. 
Asi mismo deberá escribir el método <tex2html_verb_mark>2056<tex2html_verb_mark> para las diversas
clases: <tex2html_verb_mark>2057<tex2html_verb_mark>, <tex2html_verb_mark>2058<tex2html_verb_mark>, <tex2html_verb_mark>2059<tex2html_verb_mark>, <tex2html_verb_mark>2060<tex2html_verb_mark>,
<tex2html_verb_mark>2061<tex2html_verb_mark>, etc.
Recuerde que los temporales usados durante la generación de código
deben ubicarse en una zona que no esté en uso.
\begin<<15220>>tex2html_deferred<<15220>>\par\end<<15221>>tex2html_deferred<<15221>>
\item
En la sección anterior no se consideraba la generación 
de código para las cadenas. Amplíe y/o modifique el
juego de instrucciones como considere conveniente.
El siguiente ejemplo de traducción sugiere
como puede ser la generación de código para las cadenas:
\begin<<11709>>center<<11709>>
\begin<<11710>>tabular<<11710>><<11775>>|p<<11711>>3cm<<11711>>|p<<11712>>11cm<<11712>>|<<11775>>
\hline
Fuente ;SPMamp; Objeto\\ 
\hline
\begin<<11713>>tex2html_preform<<11713>><tex2html_verbatim_mark>verbatim5659#\end<<11714>>tex2html_preform<<11714>>
;SPMamp;
\begin<<11715>>tex2html_preform<<11715>><tex2html_verbatim_mark>verbatim5660#\end<<11716>>tex2html_preform<<11716>>\\ 
\hline
\end<<11717>>tabular<<11717>>
\end<<11718>>center<<11718>>
\begin<<15222>>tex2html_deferred<<15222>>\par\end<<15223>>tex2html_deferred<<15223>>
Asuma que los registros pueden contener dos direcciones de memoria
(línea 1). La instrucción <tex2html_verb_mark>2062<tex2html_verb_mark> carga las constantes
(direcciones)
<tex2html_verb_mark>2063<tex2html_verb_mark> y <tex2html_verb_mark>2064<tex2html_verb_mark> en el registro.
La constante <tex2html_verb_mark>2065<tex2html_verb_mark> ocupa en  la posición final
en la que se colocan los contenidos de <tex2html_verb_mark>2066<tex2html_verb_mark> un desplazamiento
de 4 y ocupa 4 palabras. 
Las instrucción <tex2html_verb_mark>2067<tex2html_verb_mark> carga las dos palabras en las direcciones
<tex2html_verb_mark>2068<tex2html_verb_mark> y <tex2html_verb_mark>2069<tex2html_verb_mark> en el registro <tex2html_verb_mark>2070<tex2html_verb_mark>. 
La instrucción <tex2html_verb_mark>2071<tex2html_verb_mark> se encarga de que las dos palabras
en la dirección <tex2html_verb_mark>2072<tex2html_verb_mark> queden referenciando 
una cadena igual a la apuntada por el registro <tex2html_verb_mark>2073<tex2html_verb_mark>.
La instrucción <tex2html_verb_mark>2074<tex2html_verb_mark> imprime la cadena apuntada
por el registro.  En una situación mas realista instrucciones como
<tex2html_verb_mark>2075<tex2html_verb_mark> y <tex2html_verb_mark>2076<tex2html_verb_mark> probablemente serían llamadas
a funciones/servicios del sistema o de la librería para soporte
en tiempo de ejecución asociada al lenguaje.
\begin<<15224>>tex2html_deferred<<15224>>\par\end<<15225>>tex2html_deferred<<15225>>
\item
Se puede mejorar el código generado
si hacemos uso de las propiedades algebraicas de los 
operadores.
Por ejemplo, cuando se tiene un operador conmutativo que ha sido asociado 
a derechas, como ocurre en este programa fuente:
\begin<<11719>>tex2html_preform<<11719>><tex2html_verbatim_mark>verbatim5661#\end<<11720>>tex2html_preform<<11720>>
\begin<<15226>>tex2html_deferred<<15226>>\par\end<<15227>>tex2html_deferred<<15227>>
El código producido por el compilador es:
\begin<<15228>>tex2html_deferred<<15228>>\par\end<<15229>>tex2html_deferred<<15229>>
\begin<<11721>>tex2html_preform<<11721>><tex2html_verbatim_mark>verbatim5662#\end<<11722>>tex2html_preform<<11722>>
\begin<<15230>>tex2html_deferred<<15230>>\par\end<<15231>>tex2html_deferred<<15231>>
En este caso, la expresión <tex2html_verb_mark>2077<tex2html_verb_mark>  corresponde a un árbol 
que casa con el patrón árbol
\begin<<15232>>tex2html_deferred<<15232>>\par\end<<15233>>tex2html_deferred<<15233>>
\begin<<11723>>center<<11723>>
\begin<<13822>>tex2html_wrap_inline<<13822>>$PLUS(ID, t)$\end<<13823>>tex2html_wrap_inline<<13823>>\space and \begin<<13824>>tex2html_wrap_inline<<13824>>$\{ r_t \ge 1 \}$\end<<13825>>tex2html_wrap_inline<<13825>>
\end<<11724>>center<<11724>>
\begin<<15234>>tex2html_deferred<<15234>>\par\end<<15235>>tex2html_deferred<<15235>>
Donde \begin<<13826>>tex2html_wrap_inline<<13826>>$r_t$\end<<13827>>tex2html_wrap_inline<<13827>>\space es el número de registros requeridos por \begin<<13828>>tex2html_wrap_inline<<13828>>$t$\end<<13829>>tex2html_wrap_inline<<13829>>.
En tales casos es posible sacar ventaja
de la conmutatividad de la suma y transformar el
árbol
\begin<<15236>>tex2html_deferred<<15236>>\par\end<<15237>>tex2html_deferred<<15237>>
\begin<<11725>>center<<11725>>
\begin<<13830>>tex2html_wrap_inline<<13830>>$PLUS(ID, t)$\end<<13831>>tex2html_wrap_inline<<13831>>\space and \begin<<13832>>tex2html_wrap_inline<<13832>>$\{ r_t \ge 1 \} \Longrightarrow PLUS(t, ID)$\end<<13833>>tex2html_wrap_inline<<13833>>
\end<<11726>>center<<11726>>
\begin<<15238>>tex2html_deferred<<15238>>\par\end<<15239>>tex2html_deferred<<15239>>
Observe que mientras el primer árbol requiere \begin<<13834>>tex2html_wrap_inline<<13834>>$\max \{2, r_t \}$\end<<13835>>tex2html_wrap_inline<<13835>>
registros, el segundo requiere \begin<<13836>>tex2html_wrap_inline<<13836>>$r_t$\end<<13837>>tex2html_wrap_inline<<13837>>\space registros, que en general es menor.
Esta transformación invierte la traducción:
\begin<<15240>>tex2html_deferred<<15240>>\par\end<<15241>>tex2html_deferred<<15241>>
\begin<<11727>>tex2html_preform<<11727>><tex2html_verbatim_mark>verbatim5663#\end<<11728>>tex2html_preform<<11728>>
\begin<<15242>>tex2html_deferred<<15242>>\par\end<<15243>>tex2html_deferred<<15243>>
que daría lugar a:
\begin<<15244>>tex2html_deferred<<15244>>\par\end<<15245>>tex2html_deferred<<15245>>
\begin<<11729>>tex2html_preform<<11729>><tex2html_verbatim_mark>verbatim5664#\end<<11730>>tex2html_preform<<11730>>
\begin<<15246>>tex2html_deferred<<15246>>\par\end<<15247>>tex2html_deferred<<15247>>
la cual usa una instrucción y un registro menos.
\begin<<15248>>tex2html_deferred<<15248>>\par\end<<15249>>tex2html_deferred<<15249>>
Usando <tex2html_verb_mark>2078<tex2html_verb_mark> modifique el generador 
de código para que, después de la fase de cálculo del número
de registros requeridos, aplique esta 
transformación sobre los nodos conmutativos cuyo hijo izquierdo
sea un identificador y su hijo derecho requiera al menos un registro.
\end<<11731>>enumerate<<11731>>
\begin<<15250>>tex2html_deferred<<15250>>\par\end<<15251>>tex2html_deferred<<15251>>
\section<<11732>>Optimización de Código<<11732>>
Aunque en esta fase se incluyen toda clase de optimizaciones,
es aquí donde se hacen las optimizaciones de código dependientes
del sistema objeto. Normalmente se
recorre el código generado buscando secuencias 
de instrucciones que se puedan sustituir por otras cuya 
ejecución sea mas eficiente.
El nombre \index<<12256>>Peephole optimization<<12256>>\emph<<12257>>Peephole optimization<<12257>> hace alusión a esta especie de
``ventana
de visión'' que se desplaza sobre el código.  En nuestro caso,
supongamos que disponemos de una instrucción <tex2html_verb_mark>2079<tex2html_verb_mark> que permite
incrementar eficientemente una expresión. Recorremos el código buscando
por un patrón ;SPMquot;sumar 1;SPMquot; y lo reeemplazamos adecuadamente.
\begin<<15252>>tex2html_deferred<<15252>>\par\end<<15253>>tex2html_deferred<<15253>>
\begin<<11734>>tex2html_preform<<11734>><tex2html_verbatim_mark>verbatim5665#\end<<11735>>tex2html_preform<<11735>>
\begin<<15254>>tex2html_deferred<<15254>>\par\end<<15255>>tex2html_deferred<<15255>>
Otro ejemplo de optimización peephole consiste en reemplazar las operaciones
flotantes de división por una constante por la multiplicación por la inversa
de la misma (aquí se pueden introducir diferencias en el resultado, debido
a la inexactitud de las operaciones en punto flotante y a que, si
se trata de un \index<<12258>>compilador cruzado<<12258>>\emph<<12259>>compilador cruzado<<12259>> la aritmética 
flotante en la máquina en la que se ejecuta el compilador puede ser diferente
de la de la máquina que ejecutará el código objeto).
\begin<<15256>>tex2html_deferred<<15256>>\par\end<<15257>>tex2html_deferred<<15257>>
\subsection<<12260>>Práctica: Optimización Peephole<<12260>>
   \index<<12261>>Práctica!Optimización Peephole<<12261>>
  
\label<<11738>>practica:peephole<<11738>>
\begin<<11739>>enumerate<<11739>>
\item
Optimice el código generado para la máquina de registros sustituyendo
las operaciones de multiplicación y división enteras por una constante que sea
potencia de dos (de la forma \begin<<13838>>tex2html_wrap_inline<<13838>>$2^n$\end<<13839>>tex2html_wrap_inline<<13839>>) por operaciones de desplazamiento.
Repase el capítulo de expresiones regulares. Es posible que aquí quiera emplear
una sustitución en la que la cadena de reemplazo
sea evaluada sobre la marcha. Si es así, repase la sección
\ref<<11740>>section:regeval<<11740>>. La siguiente sesión con el depurador
pretende ilustrar la idea:
\begin<<11741>>tex2html_preform<<11741>><tex2html_verbatim_mark>verbatim5666#\end<<11742>>tex2html_preform<<11742>>
\begin<<15258>>tex2html_deferred<<15258>>\par\end<<15259>>tex2html_deferred<<15259>>
\item
El plegado de constantes realizado durante la optimización de código independiente
de la máquina (véase la sección
\ref<<11743>>section:optimizacion<<11743>>)
es parcial. Si los árboles para el producto se hunden a izquierdas, una expresión
como <tex2html_verb_mark>2080<tex2html_verb_mark> no será plegada, ya que produce
un árbol de la forma 
\begin<<15260>>tex2html_deferred<<15260>>\par\end<<15261>>tex2html_deferred<<15261>>
\begin<<11744>>center<<11744>>
\begin<<13840>>tex2html_wrap_inline<<13840>>$t = TIMES(TIMES(a,2),3)$\end<<13841>>tex2html_wrap_inline<<13841>>
\end<<11745>>center<<11745>>
\begin<<15262>>tex2html_deferred<<15262>>\par\end<<15263>>tex2html_deferred<<15263>>
Dado que el algoritmo no
puede plegar \begin<<13842>>tex2html_wrap_inline<<13842>>$t/1$\end<<13843>>tex2html_wrap_inline<<13843>>\space tampoco plegará \begin<<13844>>tex2html_wrap_inline<<13844>>$t$\end<<13845>>tex2html_wrap_inline<<13845>>.  Busque en el código objeto
secuencias de multiplicaciones 
por constantes y abrévielas en una. Haga lo mismo para las restantes operaciones.
\begin<<15264>>tex2html_deferred<<15264>>\par\end<<15265>>tex2html_deferred<<15265>>
\item
Dado el siguiente programa:
\begin<<11746>>tex2html_preform<<11746>><tex2html_verbatim_mark>verbatim5667#\end<<11747>>tex2html_preform<<11747>>
El código producido por el traductor para la máquina de registros es:
\begin<<11748>>tex2html_preform<<11748>><tex2html_verbatim_mark>verbatim5668#\end<<11749>>tex2html_preform<<11749>>
Se ve que la instrucción de carga <tex2html_verb_mark>2081<tex2html_verb_mark> de la 
línea 3 es innecesaria por cuanto
el contenido de la variable <tex2html_verb_mark>2082<tex2html_verb_mark> ya está en el registro <tex2html_verb_mark>2083<tex2html_verb_mark>, 
ya que fué cargada en el registro en la línea 2.
Nótese que esta hipótesis no es necesariamente cierta
si la línea 3 fuera el objetivo de un salto desde 
otro punto del programa. Esta condición se cumple
cuando nos movemos dentro de un \index<<12262>>bloque básico<<12262>>\emph<<12263>>bloque básico<<12263>>: 
una secuencia de instrucciones que no contiene instrucciones
de salto ni es el objetivo de instrucciones de salto, con la excepción
de las instrucciones inicial y final.
Mejore el código generado 
intentando detectar patrones
de este tipo, eliminando la operación de carga correspondiente.
\end<<11751>>enumerate<<11751>>
<tex2html_endfile>#./chapter_descendente/descendente_en_perl.tex#
\begin<<15266>>tex2html_deferred<<15266>>\par\end<<15267>>tex2html_deferred<<15267>>
\chapter<<11752>>Análisis Sintáctico Ascendente en JavaScript<<11752>>
