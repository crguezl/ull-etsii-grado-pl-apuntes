\chapter<<3551>>Expresiones Regulares en Perl<<3551>>
\label<<3552>>chapter:regulares<<3552>>
\begin<<5344>>tex2html_deferred<<5344>>\par\end<<5345>>tex2html_deferred<<5345>>
\section<<3553>>Introducción<<3553>>
Los rudimentos de las expresiones regulares pueden encontrarse
en los trabajos pioneros de McCullogh y Pitts (1940) sobre redes neuronales.
El lógico Stephen Kleene definió formalmente el algebra que denominó
\emph<<3554>>conjuntos regulares<<3554>> y desarrollo una notación para la descripción de dichos conjuntos, las \emph<<3555>>expresiones regulares<<3555>>.
\begin<<5346>>tex2html_deferred<<5346>>\par\end<<5347>>tex2html_deferred<<5347>>
Durante las décadas de 1960 y 1970 hubo un desarrollo formal de las expresiones regulares.
Una de las priemras publicaciones que utilizan las expresiones
regulares en un marco informático es el artículo de 1968 de Ken
Thompson \emph<<3556>>Regular Expression Search Algorithm<<3556>> en el que describe
un compilador de expresiones regulares que produce código objeto para
un IBM 7094.
Este compilador dió lugar al editor \emph<<3557>>qed<<3557>>, en el cual se basó el
editor de Unix
\emph<<3558>>ed<<3558>>. Aunque las expresiones regulares de este último no eran
tan sofisticadas como las de \emph<<3559>>qed<<3559>>, fueron las primeras en ser
utilizadas en un contexto no académico.
Se dice que el comando global <tex2html_verb_mark>495<tex2html_verb_mark> en su formato <tex2html_verb_mark>496<tex2html_verb_mark> que utilizaba 
para imprimir (opción <tex2html_verb_mark>497<tex2html_verb_mark>) las líneas que casan con la expresión regular  <tex2html_verb_mark>498<tex2html_verb_mark>
dió lugar a un programa separado al que se denomino \htmladdnormallink<<4672>><<4674>>\begin<<5348>>tex2html_deferred<<5348>>\tt\end<<5349>>tex2html_deferred<<5349>>grep<<4674>><<4672>>
<<4673>>http://manpages.debian.net/cgi-bin/man.cgi?query=grep<<4673>>.
\begin<<5350>>tex2html_deferred<<5350>>\par\end<<5351>>tex2html_deferred<<5351>>
Las expresiones regulares facilitadas por las primeras versiones de estas herramientas 
eran limitadas. Por ejemplo, se disponía del cierre de Kleene <tex2html_verb_mark>499<tex2html_verb_mark> pero no del cierre
positivo <tex2html_verb_mark>500<tex2html_verb_mark> o del operador opcional <tex2html_verb_mark>501<tex2html_verb_mark>. 
Por eso, posteriormente, se han introducido los metacaracteres <tex2html_verb_mark>502<tex2html_verb_mark> y <tex2html_verb_mark>503<tex2html_verb_mark>.
Existían numerosas limitaciones en dichas versiones, por ej. <tex2html_verb_mark>504<tex2html_verb_mark> sólo significa ``final
de línea'' al final de la expresión regular. Eso  dificulta expresiones como 
\begin<<3561>>tex2html_preform<<3561>><tex2html_verbatim_mark>verbatim1141#\end<<3562>>tex2html_preform<<3562>>
Sin embargo, la mayor parte de las versiones
actuales resuelven correctamente estos problemas:
\begin<<3563>>tex2html_preform<<3563>><tex2html_verbatim_mark>verbatim1142#\end<<3564>>tex2html_preform<<3564>>
De hecho AT\&T Bell  labs añadió numerosas funcionalidades,
como por ejemplo, el uso de <tex2html_verb_mark>505<tex2html_verb_mark>, tomada de \emph<<3565>>lex<<3565>>.
Por esa época, Alfred Aho escribió \emph<<3566>>egrep<<3566>> que, no sólo proporciona un conjunto
mas rico de operadores sino que mejoró la implementación.
Mientras que el \emph<<3567>>grep<<3567>> de Ken Thompson usaba un autómata finito no determinista
(NFA), la versión de \emph<<3568>>egrep<<3568>>
de Aho usa un autómata finito determinista (DFA).
\begin<<5352>>tex2html_deferred<<5352>>\par\end<<5353>>tex2html_deferred<<5353>>
En 1986 Henry Spencer desarrolló la librería \emph<<3569>>regex<<3569>> para el lenguaje <tex2html_verb_mark>506<tex2html_verb_mark>, que 
proporciona un conjunto consistente de funciones que permiten el manejo de expresiones
regulares. Esta librería ha contribuido a ``homogeneizar'' la sintáxis y semántica 
de las diferentes herramientas que utilizan expresiones regulares (como \emph<<3570>>awk<<3570>>,
\emph<<3571>>lex<<3571>>, \emph<<3572>>sed<<3572>>, \ldots).
\begin<<5354>>tex2html_deferred<<5354>>\par\end<<5355>>tex2html_deferred<<5355>>
 
  \paragraph<<4675>>Véase También<<4675>>
  \begin<<4676>>tabular<<4676>><<4677>>c<<4677>>
  \end<<4678>>tabular<<4678>>

\begin<<5356>>tex2html_deferred<<5356>>\par\end<<5357>>tex2html_deferred<<5357>>
\begin<<3574>>itemize<<3574>>
\item
La sección
<<3575>>\begin<<5358>>tex2html_deferred<<5358>>\it\end<<5359>>tex2html_deferred<<5359>>Expresiones Regulares en Otros Lenguajes<<3575>>
\ref
<<3576>>section:otroslenguajes<<3576>>
\item
\htmladdnormallink
<<3577>>Regular Expressions Cookbook. Jan Goyvaerts, Steven Levithan<<3577>>
<<3578>>http://oreilly.com/catalog/9780596520687/preview.html<<3578>>
\item
\htmladdnormallink
<<3579>>PCRE (Perl Compatible Regular Expressions) en la Wikipedia<<3579>>
<<3580>>http://en.wikipedia.org/wiki/Perl\_Compatible\_Regular\_Expressions<<3580>>
\item
\htmladdnormallink<<3581>>PCRE (Perl Compatible Regular Expressions)<<3581>>
<<3582>>http://www.pcre.org/pcre.txt<<3582>>
\item
\htmladdnormallink
<<3583>>Java Regular Expressions<<3583>>
<<3584>>http://java.sun.com/docs/books/tutorial/essential/regex/<<3584>>
\item
\htmladdnormallink
<<3585>>C\# Regular Expressions<<3585>>
<<3586>>http://oreilly.com/lpt/a/2299<<3586>>
\item
\htmladdnormallink
<<3587>>.NET Framework Regular Expressions<<3587>>
<<3588>>http://msdn.microsoft.com/en-us/library/hs600312(VS.71).aspx<<3588>>
\end<<3589>>itemize<<3589>>
\begin<<5360>>tex2html_deferred<<5360>>\par\end<<5361>>tex2html_deferred<<5361>>
\subsection<<3590>>Un ejemplo sencillo<<3590>>
\label<<3591>>section:ejemplo<<3591>>
\begin<<5362>>tex2html_deferred<<5362>>\par\end<<5363>>tex2html_deferred<<5363>>
 
  \paragraph<<4679>>Matching en Contexto Escalar<<4679>>
  \begin<<4680>>tabular<<4680>><<4681>>c<<4681>>
  \end<<4682>>tabular<<4682>>

\begin<<5364>>tex2html_deferred<<5364>>\par\end<<5365>>tex2html_deferred<<5365>>
<tex2html_verbatim_mark>rawhtml1143#
\begin<<5366>>tex2html_deferred<<5366>>\par\end<<5367>>tex2html_deferred<<5367>>
Véase también:
\begin<<5368>>tex2html_deferred<<5368>>\par\end<<5369>>tex2html_deferred<<5369>>
\begin<<3593>>itemize<<3593>>
\item <tex2html_verb_mark>507<tex2html_verb_mark> \htmladdnormallink<<4683>><<4685>>\begin<<5370>>tex2html_deferred<<5370>>\tt\end<<5371>>tex2html_deferred<<5371>>perlrequick<<4685>><<4683>>
<<4684>>http://search.cpan.org/perldoc/?perlrequick<<4684>>
\item <tex2html_verb_mark>508<tex2html_verb_mark> \htmladdnormallink<<4686>><<4688>>\begin<<5372>>tex2html_deferred<<5372>>\tt\end<<5373>>tex2html_deferred<<5373>>perlretut<<4688>><<4686>>
<<4687>>http://search.cpan.org/perldoc/?perlretut<<4687>>
\item <tex2html_verb_mark>509<tex2html_verb_mark> \htmladdnormallink<<4689>><<4691>>\begin<<5374>>tex2html_deferred<<5374>>\tt\end<<5375>>tex2html_deferred<<5375>>perlre<<4691>><<4689>>
<<4690>>http://search.cpan.org/perldoc/?perlre<<4690>>
\item <tex2html_verb_mark>510<tex2html_verb_mark> \htmladdnormallink<<4692>><<4694>>\begin<<5376>>tex2html_deferred<<5376>>\tt\end<<5377>>tex2html_deferred<<5377>>perlreref<<4694>><<4692>>
<<4693>>http://search.cpan.org/perldoc/?perlreref<<4693>>
\end<<3598>>itemize<<3598>>
\begin<<5378>>tex2html_deferred<<5378>>\par\end<<5379>>tex2html_deferred<<5379>>
Ejecución con el depurador:
\begin<<5380>>tex2html_deferred<<5380>>\par\end<<5381>>tex2html_deferred<<5381>>
<tex2html_verbatim_mark>rawhtml1144#
\begin<<5382>>tex2html_deferred<<5382>>\par\end<<5383>>tex2html_deferred<<5383>>
\label<<3599>>section:dolar1<<3599>>
Dentro de una expresión regular es necesario 
referirse a los textos que casan con el primer, paréntesis,
segundo, etc. como <tex2html_verb_mark>511<tex2html_verb_mark>, <tex2html_verb_mark>512<tex2html_verb_mark> etc. La notación 
<tex2html_verb_mark>513<tex2html_verb_mark> se refieré a lo que casó con el primer paréntesis
en el último \emph<<3600>>matching<<3600>>, no en el actual. Veamos un ejemplo:
\begin<<5384>>tex2html_deferred<<5384>>\par\end<<5385>>tex2html_deferred<<5385>>
<tex2html_verbatim_mark>rawhtml1145#
Observe como el <tex2html_verb_mark>514<tex2html_verb_mark> que aparece en la cadena de reemplazo (línea 8)
se refiere a la cadena <tex2html_verb_mark>515<tex2html_verb_mark>
mientras que el <tex2html_verb_mark>516<tex2html_verb_mark> en la primera parte contiene <tex2html_verb_mark>517<tex2html_verb_mark>:
\begin<<3601>>tex2html_preform<<3601>><tex2html_verbatim_mark>verbatim1146#\end<<3602>>tex2html_preform<<3602>>
\begin<<5386>>tex2html_deferred<<5386>>\par\end<<5387>>tex2html_deferred<<5387>>
\begin<<4652>>theorem_type<<4652>>[exercise][exercise][section][][][]
Indique cuál es la salida del programa anterior si se sustituye la línea 8 por
\begin<<3604>>tex2html_preform<<3604>><tex2html_verbatim_mark>verbatim1147#\end<<3605>>tex2html_preform<<3605>>\end<<4653>>theorem_type<<4653>>
\begin<<5388>>tex2html_deferred<<5388>>\par\end<<5389>>tex2html_deferred<<5389>>
 
  \paragraph<<4695>>Número de Paréntesis<<4695>>
  \begin<<4696>>tabular<<4696>><<4697>>c<<4697>>
  \end<<4698>>tabular<<4698>>

\begin<<5390>>tex2html_deferred<<5390>>\par\end<<5391>>tex2html_deferred<<5391>>
El número de paréntesis con memoria no está limitado:
\begin<<3608>>tex2html_preform<<3608>><tex2html_verbatim_mark>verbatim1148#\end<<3609>>tex2html_preform<<3609>>
\begin<<5392>>tex2html_deferred<<5392>>\par\end<<5393>>tex2html_deferred<<5393>>
Véase el siguiente párrafo de \htmladdnormallink<<4699>><<4701>>\begin<<5394>>tex2html_deferred<<5394>>\tt\end<<5395>>tex2html_deferred<<5395>>perlre<<4701>><<4699>>
<<4700>>http://search.cpan.org/perldoc/?perlre<<4700>> (sección Capture buffers):
\begin<<3611>>it<<3611>>
\begin<<3612>>quotation<<3612>>
There is no limit to the number of captured substrings that you may
use. However Perl also uses <tex2html_verb_mark>518<tex2html_verb_mark>, <tex2html_verb_mark>519<tex2html_verb_mark>, etc. as aliases for <tex2html_verb_mark>520<tex2html_verb_mark>, <tex2html_verb_mark>521<tex2html_verb_mark>,
etc. (Recall that <tex2html_verb_mark>522<tex2html_verb_mark> means octal, so <tex2html_verb_mark>523<tex2html_verb_mark> is the character at number <tex2html_verb_mark>524<tex2html_verb_mark> in
your coded character set; which would be the 10th character, a horizontal
tab under ASCII.) Perl resolves this ambiguity by interpreting <tex2html_verb_mark>525<tex2html_verb_mark> as
a backreference only if at least <tex2html_verb_mark>526<tex2html_verb_mark> left parentheses have opened before
it. Likewise <tex2html_verb_mark>527<tex2html_verb_mark> is a backreference only if at least <tex2html_verb_mark>528<tex2html_verb_mark> left parentheses
have opened before it. And so on. <tex2html_verb_mark>529<tex2html_verb_mark> through <tex2html_verb_mark>530<tex2html_verb_mark> are always interpreted
as backreferences.
\end<<3613>>quotation<<3613>>
\end<<3614>>it<<3614>>
\begin<<5396>>tex2html_deferred<<5396>>\par\end<<5397>>tex2html_deferred<<5397>>
 
  \paragraph<<4702>>Contexto de Lista<<4702>>
  \begin<<4703>>tabular<<4703>><<4704>>c<<4704>>
  \end<<4705>>tabular<<4705>>

\begin<<5398>>tex2html_deferred<<5398>>\par\end<<5399>>tex2html_deferred<<5399>>
Si se utiliza en un contexto que requiere una lista,
el ``pattern match'' retorna una lista consistente en
las subexpresiones casadas mediante los paréntesis,
esto es <tex2html_verb_mark>531<tex2html_verb_mark>, <tex2html_verb_mark>532<tex2html_verb_mark>, <tex2html_verb_mark>533<tex2html_verb_mark>, \ldots. 
Si no hubiera emparejamiento se retorna la lista vacía.
Si lo hubiera pero no hubieran paréntesis se retorna la lista 
<tex2html_verb_mark>534<tex2html_verb_mark>.
\begin<<5400>>tex2html_deferred<<5400>>\par\end<<5401>>tex2html_deferred<<5401>>
\begin<<3616>>tex2html_preform<<3616>><tex2html_verbatim_mark>verbatim1149#\end<<3617>>tex2html_preform<<3617>>
Observa el resultado de la ejecución:
\begin<<3618>>tex2html_preform<<3618>><tex2html_verbatim_mark>verbatim1150#\end<<3619>>tex2html_preform<<3619>>
\begin<<5402>>tex2html_deferred<<5402>>\par\end<<5403>>tex2html_deferred<<5403>>
 
  \paragraph<<4706>>El modificador <<4710>>\begin<<5404>>tex2html_deferred<<5404>>\tt\end<<5405>>tex2html_deferred<<5405>>s<<4710>><<4706>>
  \begin<<4707>>tabular<<4707>><<4708>>c<<4708>>
  \end<<4709>>tabular<<4709>>

\begin<<5406>>tex2html_deferred<<5406>>\par\end<<5407>>tex2html_deferred<<5407>>
La opción <tex2html_verb_mark>535<tex2html_verb_mark> usada en una regexp 
hace que el punto <tex2html_verb_mark>536<tex2html_verb_mark> case con el retorno
de carro:
\begin<<5408>>tex2html_deferred<<5408>>\par\end<<5409>>tex2html_deferred<<5409>>
<tex2html_verbatim_mark>rawhtml1151#
\begin<<5410>>tex2html_deferred<<5410>>\par\end<<5411>>tex2html_deferred<<5411>>
La opción <tex2html_verb_mark>537<tex2html_verb_mark> hace que <tex2html_verb_mark>538<tex2html_verb_mark> se empareje con 
un <tex2html_verb_mark>539<tex2html_verb_mark>.
Esto es, casa con cualquier carácter.
\begin<<5412>>tex2html_deferred<<5412>>\par\end<<5413>>tex2html_deferred<<5413>>
Veamos otro ejemplo, que imprime los nombres de los ficheros que
contienen cadenas que casan con un patrón dado, incluso si este
aparece disperso en varias líneas:
<tex2html_verbatim_mark>rawhtml1152#
\begin<<5414>>tex2html_deferred<<5414>>\par\end<<5415>>tex2html_deferred<<5415>>
\noindent Ejemplo de uso:
\begin<<5416>>tex2html_deferred<<5416>>\par\end<<5417>>tex2html_deferred<<5417>>
\begin<<3621>>tex2html_preform<<3621>><tex2html_verbatim_mark>verbatim1153#\end<<3622>>tex2html_preform<<3622>>
\begin<<5418>>tex2html_deferred<<5418>>\par\end<<5419>>tex2html_deferred<<5419>>
Vea la sección \ref<<3623>>section:repetidas<<3623>> para ver los contenidos 
del fichero <tex2html_verb_mark>540<tex2html_verb_mark>. En dicho fichero,
el patrón <tex2html_verb_mark>541<tex2html_verb_mark> aparece repartido entre
varias líneas.
\begin<<5420>>tex2html_deferred<<5420>>\par\end<<5421>>tex2html_deferred<<5421>>
 
  \paragraph<<4711>>El modificador <<4715>>\begin<<5422>>tex2html_deferred<<5422>>\tt\end<<5423>>tex2html_deferred<<5423>>m<<4715>><<4711>>
  \begin<<4712>>tabular<<4712>><<4713>>c<<4713>>
  \end<<4714>>tabular<<4714>>

\begin<<5424>>tex2html_deferred<<5424>>\par\end<<5425>>tex2html_deferred<<5425>>
El modificador <tex2html_verb_mark>542<tex2html_verb_mark> se suele usar conjuntamente con el modificador 
<tex2html_verb_mark>543<tex2html_verb_mark>. He aquí lo que dice
la seccion <<3625>>\begin<<5426>>tex2html_deferred<<5426>>\it\end<<5427>>tex2html_deferred<<5427>>Using character classes<<3625>> de la sección 'Using-character-classes' en \htmladdnormallink<<4716>><<4718>>\begin<<5428>>tex2html_deferred<<5428>>\tt\end<<5429>>tex2html_deferred<<5429>>perlretut<<4718>><<4716>>
<<4717>>http://perldoc.perl.org/perlretut.html\#Using-character-classes<<4717>>
al respecto:
\begin<<5430>>tex2html_deferred<<5430>>\par\end<<5431>>tex2html_deferred<<5431>>
\begin<<3628>>it<<3628>>
\begin<<3629>>quotation<<3629>>
\begin<<3630>>itemize<<3630>>
    \item <tex2html_verb_mark>544<tex2html_verb_mark> modifier (<tex2html_verb_mark>545<tex2html_verb_mark>): Treat string as a set of multiple lines. 
      <tex2html_verb_mark>546<tex2html_verb_mark> matches any character except <tex2html_verb_mark>547<tex2html_verb_mark>. 
      <tex2html_verb_mark>548<tex2html_verb_mark> and <tex2html_verb_mark>549<tex2html_verb_mark> are able to match at the start or end of any line within the string.
    \item
      both <tex2html_verb_mark>550<tex2html_verb_mark> and <tex2html_verb_mark>551<tex2html_verb_mark> modifiers (<tex2html_verb_mark>552<tex2html_verb_mark>): Treat string as a single long line, but detect multiple lines. 
      <tex2html_verb_mark>553<tex2html_verb_mark> matches any character, even <tex2html_verb_mark>554<tex2html_verb_mark> . 
      <tex2html_verb_mark>555<tex2html_verb_mark> and <tex2html_verb_mark>556<tex2html_verb_mark> , however, are able to match at the start or end of any line within the string.
\end<<3631>>itemize<<3631>>
\begin<<5432>>tex2html_deferred<<5432>>\par\end<<5433>>tex2html_deferred<<5433>>
Here are examples of //s and //m in action:
\begin<<5434>>tex2html_deferred<<5434>>\par\end<<5435>>tex2html_deferred<<5435>>
\begin<<3632>>tex2html_preform<<3632>><tex2html_verbatim_mark>verbatim1154#\end<<3633>>tex2html_preform<<3633>>
\begin<<5436>>tex2html_deferred<<5436>>\par\end<<5437>>tex2html_deferred<<5437>>
Most of the time, the default behavior is what is wanted, but <tex2html_verb_mark>557<tex2html_verb_mark> and
<tex2html_verb_mark>558<tex2html_verb_mark> are occasionally very useful. If <tex2html_verb_mark>559<tex2html_verb_mark> is being used, the start of the
string can still be matched with <tex2html_verb_mark>560<tex2html_verb_mark> and the end of the string can still
be matched with the anchors <tex2html_verb_mark>561<tex2html_verb_mark> (matches both the end and the newline
before, like <tex2html_verb_mark>562<tex2html_verb_mark>), and <tex2html_verb_mark>563<tex2html_verb_mark> (matches only the end):
\begin<<5438>>tex2html_deferred<<5438>>\par\end<<5439>>tex2html_deferred<<5439>>
\begin<<3634>>tex2html_preform<<3634>><tex2html_verbatim_mark>verbatim1155#\end<<3635>>tex2html_preform<<3635>>
\end<<3636>>quotation<<3636>>
\end<<3637>>it<<3637>>
Normalmente el carácter <tex2html_verb_mark>564<tex2html_verb_mark> casa solamente con el comienzo de la
cadena y el carácter <tex2html_verb_mark>565<tex2html_verb_mark> con el final. Los <tex2html_verb_mark>566<tex2html_verb_mark> empotrados
no casan
con <tex2html_verb_mark>567<tex2html_verb_mark> ni <tex2html_verb_mark>568<tex2html_verb_mark>. El modificador <tex2html_verb_mark>569<tex2html_verb_mark> modifica esta
conducta. De este modo <tex2html_verb_mark>570<tex2html_verb_mark> y  <tex2html_verb_mark>571<tex2html_verb_mark> casan con cualquier frontera
de línea interna. Las anclas <tex2html_verb_mark>572<tex2html_verb_mark> y <tex2html_verb_mark>573<tex2html_verb_mark> se utilizan entonces
para casar con
el comienzo y final de la cadena.
Véase un ejemplo:
\begin<<3638>>tex2html_preform<<3638>><tex2html_verbatim_mark>verbatim1156#\end<<3639>>tex2html_preform<<3639>>
\begin<<5440>>tex2html_deferred<<5440>>\par\end<<5441>>tex2html_deferred<<5441>>
 
  \paragraph<<4719>>El conversor de temperaturas reescrito usando contexto de lista<<4719>>
  \begin<<4720>>tabular<<4720>><<4721>>c<<4721>>
  \end<<4722>>tabular<<4722>>

\begin<<5442>>tex2html_deferred<<5442>>\par\end<<5443>>tex2html_deferred<<5443>>
Reescribamos el ejemplo anterior usando un contexto de lista:
\begin<<5444>>tex2html_deferred<<5444>>\par\end<<5445>>tex2html_deferred<<5445>>
<tex2html_verbatim_mark>rawhtml1157#
\begin<<5446>>tex2html_deferred<<5446>>\par\end<<5447>>tex2html_deferred<<5447>>
 
  \paragraph<<4723>>La opción <<4727>>\begin<<5448>>tex2html_deferred<<5448>>\tt\end<<5449>>tex2html_deferred<<5449>>x<<4727>><<4723>>
  \begin<<4724>>tabular<<4724>><<4725>>c<<4725>>
  \end<<4726>>tabular<<4726>>

\begin<<5450>>tex2html_deferred<<5450>>\par\end<<5451>>tex2html_deferred<<5451>>
\label<<3642>>section:x<<3642>>
La opción <tex2html_verb_mark>574<tex2html_verb_mark> en una regexp permite utilizar comentarios y
espacios dentro de la expresión
regular. Los espacios dentro de la expresión regular dejan de ser significativos.
Si quieres conseguir un espacio que sea significativo, usa <tex2html_verb_mark>575<tex2html_verb_mark> o
bien escápalo.  Véase la sección 'Modifiers' en \htmladdnormallink<<4728>><<4730>>\begin<<5452>>tex2html_deferred<<5452>>\tt\end<<5453>>tex2html_deferred<<5453>>perlre<<4730>><<4728>>
<<4729>>http://perldoc.perl.org/perlre.html\#Modifiers<<4729>> y 
la sección 'Building-a-regexp' en \htmladdnormallink<<4731>><<4733>>\begin<<5454>>tex2html_deferred<<5454>>\tt\end<<5455>>tex2html_deferred<<5455>>perlretut<<4733>><<4731>>
<<4732>>http://perldoc.perl.org/perlretut.html\#Building-a-regexp<<4732>>.
\begin<<5456>>tex2html_deferred<<5456>>\par\end<<5457>>tex2html_deferred<<5457>>
 
  \paragraph<<4734>>Paréntesis sin memoria<<4734>>
  \begin<<4735>>tabular<<4735>><<4736>>c<<4736>>
  \end<<4737>>tabular<<4737>>

\begin<<5458>>tex2html_deferred<<5458>>\par\end<<5459>>tex2html_deferred<<5459>>
La notación <tex2html_verb_mark>576<tex2html_verb_mark> se usa para introducir paréntesis de agrupamiento sin memoria.
<tex2html_verb_mark>577<tex2html_verb_mark> 
Permite agrupar las expresiones tal y como lo hacen los 
paréntesis ordinarios. La diferencia es que no ``memorizan''
esto es no guardan nada en <tex2html_verb_mark>578<tex2html_verb_mark>, <tex2html_verb_mark>579<tex2html_verb_mark>, etc.
Se logra así una compilación mas eficiente. Veamos un ejemplo:
\begin<<3648>>tex2html_preform<<3648>><tex2html_verbatim_mark>verbatim1158#\end<<3649>>tex2html_preform<<3649>>
\begin<<5460>>tex2html_deferred<<5460>>\par\end<<5461>>tex2html_deferred<<5461>>
 
  \paragraph<<4738>>Interpolación en los patrones: La opción <<4742>>\begin<<5462>>tex2html_deferred<<5462>>\tt\end<<5463>>tex2html_deferred<<5463>>o<<4742>><<4738>>
  \begin<<4739>>tabular<<4739>><<4740>>c<<4740>>
  \end<<4741>>tabular<<4741>>

\begin<<5464>>tex2html_deferred<<5464>>\par\end<<5465>>tex2html_deferred<<5465>>
El patrón regular puede contener variables, que serán interpoladas
(en tal caso, el patrón será recompilado).
Si quieres que dicho patrón se compile una sóla vez, usa la opción
<tex2html_verb_mark>580<tex2html_verb_mark>.
\begin<<3651>>tex2html_preform<<3651>><tex2html_verbatim_mark>verbatim1159#\end<<3652>>tex2html_preform<<3652>>
Sigue un ejemplo de ejecución:
\begin<<3653>>tex2html_preform<<3653>><tex2html_verbatim_mark>verbatim1160#\end<<3654>>tex2html_preform<<3654>>
\begin<<5466>>tex2html_deferred<<5466>>\par\end<<5467>>tex2html_deferred<<5467>>
El siguiente texto es de la sección 'Using-regular-expressions-in-Perl' en \htmladdnormallink<<4743>><<4745>>\begin<<5468>>tex2html_deferred<<5468>>\tt\end<<5469>>tex2html_deferred<<5469>>perlretut<<4745>><<4743>>
<<4744>>http://perldoc.perl.org/perlretut.html\#Using-regular-expressions-in-Perl<<4744>>:
\begin<<5470>>tex2html_deferred<<5470>>\par\end<<5471>>tex2html_deferred<<5471>>
\begin<<3657>>it<<3657>>
\begin<<3658>>quotation<<3658>>
If <tex2html_verb_mark>581<tex2html_verb_mark>  won't be changing over the lifetime of the script,
we can add the //o modifier, which directs Perl to only perform variable
substitutions once
\end<<3659>>quotation<<3659>>
\end<<3660>>it<<3660>>
\begin<<5472>>tex2html_deferred<<5472>>\par\end<<5473>>tex2html_deferred<<5473>>
Otra posibilidad es hacer una compilación previa usando el operador 
<tex2html_verb_mark>582<tex2html_verb_mark> (véase la sección 'Regexp-Quote-Like-Operators' en \htmladdnormallink<<4746>><<4748>>\begin<<5474>>tex2html_deferred<<5474>>\tt\end<<5475>>tex2html_deferred<<5475>>perlop<<4748>><<4746>>
<<4747>>http://perldoc.perl.org/perlop.html\#Regexp-Quote-Like-Operators<<4747>>).
La siguiente variante del programa anterior también compila el patrón
una sóla vez:
\begin<<3663>>tex2html_preform<<3663>><tex2html_verbatim_mark>verbatim1161#\end<<3664>>tex2html_preform<<3664>>
\begin<<5476>>tex2html_deferred<<5476>>\par\end<<5477>>tex2html_deferred<<5477>>
Véase 
\begin<<3665>>itemize<<3665>>
\item El nodo en perlmonks \htmladdnormallink<<4749>>/o is dead, long live qr//!<<4749>>
<<4750>>http://www.perlmonks.org/?node_id=269035<<4750>> por \htmladdnormallink<<4751>>diotalevi<<4751>>
<<4752>>http://www.perlmonks.org/?node_id=194920<<4752>>
\end<<3670>>itemize<<3670>>
\begin<<5478>>tex2html_deferred<<5478>>\par\end<<5479>>tex2html_deferred<<5479>>
 
  \paragraph<<4753>>Cuantificadores greedy<<4753>>
  \begin<<4754>>tabular<<4754>><<4755>>c<<4755>>
  \end<<4756>>tabular<<4756>>

\begin<<5480>>tex2html_deferred<<5480>>\par\end<<5481>>tex2html_deferred<<5481>>
El siguiente extracto de la sección <<3672>>\begin<<5482>>tex2html_deferred<<5482>>\it\end<<5483>>tex2html_deferred<<5483>>Matching Repetitions<<3672>> en la sección 'Matching-repetitions' en \htmladdnormallink<<4757>><<4759>>\begin<<5484>>tex2html_deferred<<5484>>\tt\end<<5485>>tex2html_deferred<<5485>>perlretut<<4759>><<4757>>
<<4758>>http://perldoc.perl.org/perlretut.html\#Matching-repetitions<<4758>> 
ilustra la semántica <<3675>>\begin<<5486>>tex2html_deferred<<5486>>\it\end<<5487>>tex2html_deferred<<5487>>greedy<<3675>> de los operadores de repetición <tex2html_verb_mark>583<tex2html_verb_mark> etc.
\begin<<3676>>it<<3676>>
\begin<<3677>>quotation<<3677>>
For all of these quantifiers, Perl will try to match as much of the string
as possible, while still allowing the regexp to succeed. Thus with <tex2html_verb_mark>584<tex2html_verb_mark>, 
Perl will first try to match the regexp with the a present; if that
fails, Perl will try to match the regexp without the a  present. For
the quantifier <tex2html_verb_mark>585<tex2html_verb_mark> , we get the following:
\begin<<5488>>tex2html_deferred<<5488>>\par\end<<5489>>tex2html_deferred<<5489>>
\begin<<3678>>tex2html_preform<<3678>><tex2html_verbatim_mark>verbatim1162#\end<<3679>>tex2html_preform<<3679>>
\begin<<5490>>tex2html_deferred<<5490>>\par\end<<5491>>tex2html_deferred<<5491>>
Which is what we might expect, the match finds the only cat in the string and locks onto it. Consider, however, this regexp:
\begin<<5492>>tex2html_deferred<<5492>>\par\end<<5493>>tex2html_deferred<<5493>>
\begin<<3680>>tex2html_preform<<3680>><tex2html_verbatim_mark>verbatim1163#\end<<3681>>tex2html_preform<<3681>>
\begin<<5494>>tex2html_deferred<<5494>>\par\end<<5495>>tex2html_deferred<<5495>>
One might initially guess that Perl would find the <tex2html_verb_mark>586<tex2html_verb_mark> in <tex2html_verb_mark>587<tex2html_verb_mark> and stop
there, but that wouldn't give the longest possible string to the first
quantifier <tex2html_verb_mark>588<tex2html_verb_mark>. Instead, the first quantifier <tex2html_verb_mark>589<tex2html_verb_mark> grabs as much of the
string as possible while still having the regexp match. In this example,
that means having the <tex2html_verb_mark>590<tex2html_verb_mark> sequence with the final <tex2html_verb_mark>591<tex2html_verb_mark> in the string. 
\begin<<5496>>tex2html_deferred<<5496>>\par\end<<5497>>tex2html_deferred<<5497>>
The
other important principle illustrated here is that when there are two
or more elements in a regexp, the leftmost quantifier, if there is one,
gets to grab as much the string as possible, leaving the rest of the
regexp to fight over scraps. Thus in our example, the first quantifier
<tex2html_verb_mark>592<tex2html_verb_mark> grabs most of the string, while the second quantifier <tex2html_verb_mark>593<tex2html_verb_mark> gets the
empty string. Quantifiers that grab as much of the string as possible
are called maximal match or greedy quantifiers.
\begin<<5498>>tex2html_deferred<<5498>>\par\end<<5499>>tex2html_deferred<<5499>>
When a regexp can match a string in several different ways, we can use
the principles above to predict which way the regexp will match:
\begin<<5500>>tex2html_deferred<<5500>>\par\end<<5501>>tex2html_deferred<<5501>>
\begin<<3682>>itemize<<3682>>
    \item
\begin<<5502>>tex2html_deferred<<5502>>\par\end<<5503>>tex2html_deferred<<5503>>
<<3683>>\begin<<5504>>tex2html_deferred<<5504>>\bf\end<<5505>>tex2html_deferred<<5505>>Principle 0:<<3683>> Taken as a whole, any regexp will be matched at the earliest possible position in the string.
    \item
\begin<<5506>>tex2html_deferred<<5506>>\par\end<<5507>>tex2html_deferred<<5507>>
<<3684>>\begin<<5508>>tex2html_deferred<<5508>>\bf\end<<5509>>tex2html_deferred<<5509>>Principle 1:<<3684>> In an alternation <tex2html_verb_mark>594<tex2html_verb_mark> , the leftmost alternative that allows a match for the whole regexp will be the one used.
    \item
\begin<<5510>>tex2html_deferred<<5510>>\par\end<<5511>>tex2html_deferred<<5511>>
<<3685>>\begin<<5512>>tex2html_deferred<<5512>>\bf\end<<5513>>tex2html_deferred<<5513>>Principle 2:<<3685>> The maximal matching quantifiers <tex2html_verb_mark>595<tex2html_verb_mark>, <tex2html_verb_mark>596<tex2html_verb_mark>, <tex2html_verb_mark>597<tex2html_verb_mark> and <tex2html_verb_mark>598<tex2html_verb_mark> 
                   will in general match as much of the string as possible while still allowing the whole regexp to match.
    \item
      <<3686>>\begin<<5514>>tex2html_deferred<<5514>>\bf\end<<5515>>tex2html_deferred<<5515>>Principle 3:<<3686>> If there are two or more elements in a regexp, the leftmost greedy quantifier, 
                   if any, will match as much of the string as possible while still allowing the whole regexp to match. 
                   The next leftmost greedy quantifier, if any, will try to match as much of 
                   the string remaining available to it as possible, while still allowing 
                   the whole regexp to match. And so on, until all the regexp elements are satisfied.
\end<<3687>>itemize<<3687>>
\begin<<5516>>tex2html_deferred<<5516>>\par\end<<5517>>tex2html_deferred<<5517>>
\end<<3688>>quotation<<3688>>
\end<<3689>>it<<3689>>
\begin<<5518>>tex2html_deferred<<5518>>\par\end<<5519>>tex2html_deferred<<5519>>
 
  \paragraph<<4760>>Regexp y Bucles Infinitos<<4760>>
  \begin<<4761>>tabular<<4761>><<4762>>c<<4762>>
  \end<<4763>>tabular<<4763>>

\begin<<5520>>tex2html_deferred<<5520>>\par\end<<5521>>tex2html_deferred<<5521>>
El siguiente párrafo está tomado de la sección 'Repeated-Patterns-Matching-a-Zero-length-Substring' en \htmladdnormallink<<4764>><<4766>>\begin<<5522>>tex2html_deferred<<5522>>\tt\end<<5523>>tex2html_deferred<<5523>>perlre<<4766>><<4764>>
<<4765>>http://perldoc.perl.org/perlre.html\#Repeated-Patterns-Matching-a-Zero-length-Substring<<4765>>:
\begin<<3693>>it<<3693>>
\begin<<3694>>quote<<3694>>
Regular expressions provide a terse and powerful programming language. As
with most other power tools, power comes together with the ability to
wreak havoc.
\begin<<5524>>tex2html_deferred<<5524>>\par\end<<5525>>tex2html_deferred<<5525>>
A common abuse of this power stems from the ability to make infinite
loops using regular expressions, with something as innocuous as:
\begin<<5526>>tex2html_deferred<<5526>>\par\end<<5527>>tex2html_deferred<<5527>>
\begin<<3695>>tex2html_preform<<3695>><tex2html_verbatim_mark>verbatim1164#\end<<3696>>tex2html_preform<<3696>>
\begin<<5528>>tex2html_deferred<<5528>>\par\end<<5529>>tex2html_deferred<<5529>>
The <tex2html_verb_mark>599<tex2html_verb_mark> matches at the beginning of <tex2html_verb_mark>600<tex2html_verb_mark> , and since the position in
the string is not moved by the match, <tex2html_verb_mark>601<tex2html_verb_mark> would match again and again
because of the <tex2html_verb_mark>602<tex2html_verb_mark> quantifier.
\begin<<5530>>tex2html_deferred<<5530>>\par\end<<5531>>tex2html_deferred<<5531>>
Another common way to create a similar cycle is with the looping modifier <tex2html_verb_mark>603<tex2html_verb_mark> :
\begin<<5532>>tex2html_deferred<<5532>>\par\end<<5533>>tex2html_deferred<<5533>>
\begin<<3697>>tex2html_preform<<3697>><tex2html_verbatim_mark>verbatim1165#\end<<3698>>tex2html_preform<<3698>>
\begin<<5534>>tex2html_deferred<<5534>>\par\end<<5535>>tex2html_deferred<<5535>>
or
\begin<<5536>>tex2html_deferred<<5536>>\par\end<<5537>>tex2html_deferred<<5537>>
\begin<<3699>>tex2html_preform<<3699>><tex2html_verbatim_mark>verbatim1166#\end<<3700>>tex2html_preform<<3700>>
\begin<<5538>>tex2html_deferred<<5538>>\par\end<<5539>>tex2html_deferred<<5539>>
or the loop implied by <tex2html_verb_mark>604<tex2html_verb_mark>.
\begin<<5540>>tex2html_deferred<<5540>>\par\end<<5541>>tex2html_deferred<<5541>>
... Perl allows such constructs, by forcefully breaking the infinite
loop. The rules for this are different for lower-level loops given by
the greedy quantifiers <tex2html_verb_mark>605<tex2html_verb_mark> , and for higher-level ones like the <tex2html_verb_mark>606<tex2html_verb_mark>
modifier or <tex2html_verb_mark>607<tex2html_verb_mark> operator.
\begin<<5542>>tex2html_deferred<<5542>>\par\end<<5543>>tex2html_deferred<<5543>>
The lower-level loops are interrupted (that is, the loop is broken)
when Perl detects that a repeated expression matched a zero-length
substring. Thus
\begin<<5544>>tex2html_deferred<<5544>>\par\end<<5545>>tex2html_deferred<<5545>>
\begin<<3701>>tex2html_preform<<3701>><tex2html_verbatim_mark>verbatim1167#\end<<3702>>tex2html_preform<<3702>>
\begin<<5546>>tex2html_deferred<<5546>>\par\end<<5547>>tex2html_deferred<<5547>>
is made equivalent to
\begin<<5548>>tex2html_deferred<<5548>>\par\end<<5549>>tex2html_deferred<<5549>>
\begin<<3703>>tex2html_preform<<3703>><tex2html_verbatim_mark>verbatim1168#\end<<3704>>tex2html_preform<<3704>>
\begin<<5550>>tex2html_deferred<<5550>>\par\end<<5551>>tex2html_deferred<<5551>>
The higher level-loops preserve an additional state between iterations:
whether the last match was zero-length. To break the loop, the following
match after a zero-length match is prohibited to have a length of
zero. This prohibition interacts with backtracking (see Backtracking), and
so the second best match is chosen if the best match is of zero length.
\begin<<5552>>tex2html_deferred<<5552>>\par\end<<5553>>tex2html_deferred<<5553>>
For example:
\begin<<5554>>tex2html_deferred<<5554>>\par\end<<5555>>tex2html_deferred<<5555>>
\begin<<3705>>tex2html_preform<<3705>><tex2html_verbatim_mark>verbatim1169#\end<<3706>>tex2html_preform<<3706>>
\begin<<5556>>tex2html_deferred<<5556>>\par\end<<5557>>tex2html_deferred<<5557>>
results in <tex2html_verb_mark>608<tex2html_verb_mark> . At each position of the string the best
match given by non-greedy <tex2html_verb_mark>609<tex2html_verb_mark> is the zero-length match, and the second
best match is what is matched by <tex2html_verb_mark>610<tex2html_verb_mark> . Thus zero-length matches alternate
with one-character-long matches.
\begin<<5558>>tex2html_deferred<<5558>>\par\end<<5559>>tex2html_deferred<<5559>>
Similarly, for repeated <tex2html_verb_mark>611<tex2html_verb_mark> the second-best match is the match at
the position one notch further in the string.
\begin<<5560>>tex2html_deferred<<5560>>\par\end<<5561>>tex2html_deferred<<5561>>
The additional state of being matched with zero-length is associated with
the matched string, and is reset by each assignment to <tex2html_verb_mark>612<tex2html_verb_mark>. Zero-length
matches at the end of the previous match are ignored during <tex2html_verb_mark>613<tex2html_verb_mark>.
\end<<3707>>quote<<3707>>
\end<<3708>>it<<3708>>
\begin<<5562>>tex2html_deferred<<5562>>\par\end<<5563>>tex2html_deferred<<5563>>
\begin<<4654>>theorem_type<<4654>>[exercise][exercise][section][][][]
\begin<<3710>>itemize<<3710>>
\item
Explique la conducta del siguiente matching:
<tex2html_verbatim_mark>rawhtml1170#
\end<<3711>>itemize<<3711>>\end<<4655>>theorem_type<<4655>>
\begin<<5564>>tex2html_deferred<<5564>>\par\end<<5565>>tex2html_deferred<<5565>>
 
  \paragraph<<4767>>Cuantificadores <<4771>>\begin<<5566>>tex2html_deferred<<5566>>\it\end<<5567>>tex2html_deferred<<5567>>lazy<<4771>><<4767>>
  \begin<<4768>>tabular<<4768>><<4769>>c<<4769>>
  \end<<4770>>tabular<<4770>>

\begin<<5568>>tex2html_deferred<<5568>>\par\end<<5569>>tex2html_deferred<<5569>>
\label<<3714>>section:nogreedy<<3714>>
Las expresiones \emph<<3715>>lazy<<3715>> o \emph<<3716>>no greedy<<3716>> hacen que el NFA se detenga en la cadena mas corta que 
casa con la expresión. Se denotan como sus análogas \emph<<3717>>greedy<<3717>> añadiéndole el
postfijo <tex2html_verb_mark>614<tex2html_verb_mark>:
\begin<<5570>>tex2html_deferred<<5570>>\par\end<<5571>>tex2html_deferred<<5571>>
\begin<<3718>>itemize<<3718>>
\item <tex2html_verb_mark>615<tex2html_verb_mark>
\item <tex2html_verb_mark>616<tex2html_verb_mark>
\item <tex2html_verb_mark>617<tex2html_verb_mark>
\item <tex2html_verb_mark>618<tex2html_verb_mark>
\item <tex2html_verb_mark>619<tex2html_verb_mark>
\item <tex2html_verb_mark>620<tex2html_verb_mark>
\end<<3719>>itemize<<3719>>
\begin<<5572>>tex2html_deferred<<5572>>\par\end<<5573>>tex2html_deferred<<5573>>
Repasemos lo que dice la sección Matching Repetitions en la sección 'Matching-repetitions' en \htmladdnormallink<<4772>><<4774>>\begin<<5574>>tex2html_deferred<<5574>>\tt\end<<5575>>tex2html_deferred<<5575>>perlretut<<4774>><<4772>>
<<4773>>http://perldoc.perl.org/perlretut.html\#Matching-repetitions<<4773>>:
\begin<<3722>>it<<3722>>
\begin<<3723>>quotation<<3723>>
Sometimes greed is not good. At times, we would like quantifiers to match
a minimal piece of string, rather than a maximal piece. For this purpose,
Larry Wall created the minimal match or non-greedy quantifiers <tex2html_verb_mark>621<tex2html_verb_mark> ,<tex2html_verb_mark>622<tex2html_verb_mark>, <tex2html_verb_mark>623<tex2html_verb_mark>, and <tex2html_verb_mark>624<tex2html_verb_mark>. 
These are the usual quantifiers with a ? appended to
them. They have the following meanings:
\begin<<5576>>tex2html_deferred<<5576>>\par\end<<5577>>tex2html_deferred<<5577>>
\begin<<3724>>itemize<<3724>>
   \item
      <tex2html_verb_mark>625<tex2html_verb_mark> means: match 'a' 0 or 1 times. Try 0 first, then 1.
    \item
\begin<<5578>>tex2html_deferred<<5578>>\par\end<<5579>>tex2html_deferred<<5579>>
<tex2html_verb_mark>626<tex2html_verb_mark> means: match 'a' 0 or more times, i.e., any number of times, but as few times as possible
    \item
\begin<<5580>>tex2html_deferred<<5580>>\par\end<<5581>>tex2html_deferred<<5581>>
<tex2html_verb_mark>627<tex2html_verb_mark> means: match 'a' 1 or more times, i.e., at least once, but as few times as possible
    \item
\begin<<5582>>tex2html_deferred<<5582>>\par\end<<5583>>tex2html_deferred<<5583>>
<tex2html_verb_mark>628<tex2html_verb_mark> means: match at least n times, not more than m times, as few times as possible
    \item
\begin<<5584>>tex2html_deferred<<5584>>\par\end<<5585>>tex2html_deferred<<5585>>
<tex2html_verb_mark>629<tex2html_verb_mark> means: match at least n times, but as few times as possible
    \item
\begin<<5586>>tex2html_deferred<<5586>>\par\end<<5587>>tex2html_deferred<<5587>>
<tex2html_verb_mark>630<tex2html_verb_mark> means: match exactly n times. Because we match exactly n times, a<<3725>>n<<3725>>? is equivalent to a<<3726>>n<<3726>> and is just there for notational consistency.
\end<<3727>>itemize<<3727>>
\begin<<5588>>tex2html_deferred<<5588>>\par\end<<5589>>tex2html_deferred<<5589>>
Let's look at the example above, but with minimal quantifiers:
\begin<<5590>>tex2html_deferred<<5590>>\par\end<<5591>>tex2html_deferred<<5591>>
\begin<<3728>>tex2html_preform<<3728>><tex2html_verbatim_mark>verbatim1171#\end<<3729>>tex2html_preform<<3729>>
\begin<<5592>>tex2html_deferred<<5592>>\par\end<<5593>>tex2html_deferred<<5593>>
The minimal string that will allow both the start of the string <tex2html_verb_mark>631<tex2html_verb_mark> and
the alternation to match is <tex2html_verb_mark>632<tex2html_verb_mark> , with the alternation <tex2html_verb_mark>633<tex2html_verb_mark> matching <tex2html_verb_mark>634<tex2html_verb_mark>. 
The second quantifier <tex2html_verb_mark>635<tex2html_verb_mark> is free to gobble up the rest of the string.
\begin<<5594>>tex2html_deferred<<5594>>\par\end<<5595>>tex2html_deferred<<5595>>
\begin<<3730>>tex2html_preform<<3730>><tex2html_verbatim_mark>verbatim1172#\end<<3731>>tex2html_preform<<3731>>
\begin<<5596>>tex2html_deferred<<5596>>\par\end<<5597>>tex2html_deferred<<5597>>
The first string position that this regexp can match is at the first
<tex2html_verb_mark>636<tex2html_verb_mark> in programming . At this position, the minimal <tex2html_verb_mark>637<tex2html_verb_mark> matches just
one <tex2html_verb_mark>638<tex2html_verb_mark> . Although the second quantifier <tex2html_verb_mark>639<tex2html_verb_mark> would prefer to match no
characters, it is constrained by the end-of-string anchor <tex2html_verb_mark>640<tex2html_verb_mark> to match
the rest of the string.
\begin<<5598>>tex2html_deferred<<5598>>\par\end<<5599>>tex2html_deferred<<5599>>
\begin<<3732>>tex2html_preform<<3732>><tex2html_verbatim_mark>verbatim1173#\end<<3733>>tex2html_preform<<3733>>
\begin<<5600>>tex2html_deferred<<5600>>\par\end<<5601>>tex2html_deferred<<5601>>
In this regexp, you might expect the first minimal quantifier <tex2html_verb_mark>641<tex2html_verb_mark> to match
the empty string, because it is not constrained by a <tex2html_verb_mark>642<tex2html_verb_mark> anchor to match
the beginning of the word. Principle 0 applies here, however. Because it
is possible for the whole regexp to match at the start of the string, it
will match at the start of the string. Thus the first quantifier has to
match everything up to the first m. The second minimal quantifier matches
just one <tex2html_verb_mark>643<tex2html_verb_mark> and the third quantifier matches the rest of the string.
\begin<<5602>>tex2html_deferred<<5602>>\par\end<<5603>>tex2html_deferred<<5603>>
\begin<<3734>>tex2html_preform<<3734>><tex2html_verbatim_mark>verbatim1174#\end<<3735>>tex2html_preform<<3735>>
\begin<<5604>>tex2html_deferred<<5604>>\par\end<<5605>>tex2html_deferred<<5605>>
Just as in the previous regexp, the first quantifier <tex2html_verb_mark>644<tex2html_verb_mark> can match
earliest at position <tex2html_verb_mark>645<tex2html_verb_mark> , so it does. The second quantifier is greedy,
so it matches mm , and the third matches the rest of the string.
\begin<<5606>>tex2html_deferred<<5606>>\par\end<<5607>>tex2html_deferred<<5607>>
We can modify principle 3 above to take into account non-greedy quantifiers:
\begin<<5608>>tex2html_deferred<<5608>>\par\end<<5609>>tex2html_deferred<<5609>>
\begin<<3736>>itemize<<3736>>
    \item
\begin<<5610>>tex2html_deferred<<5610>>\par\end<<5611>>tex2html_deferred<<5611>>
<<3737>>\begin<<5612>>tex2html_deferred<<5612>>\bf\end<<5613>>tex2html_deferred<<5613>>Principle 3:<<3737>> If there are two or more elements in a regexp, the
      leftmost greedy (non-greedy) quantifier, if any, will match as much
      (little) of the string as possible while still allowing the whole
      regexp to match. The next leftmost greedy (non-greedy) quantifier,
      if any, will try to match as much (little) of the string remaining
      available to it as possible, while still allowing the whole regexp
      to match. And so on, until all the regexp elements are satisfied.
\end<<3738>>itemize<<3738>>
\end<<3739>>quotation<<3739>>
\end<<3740>>it<<3740>>
\begin<<5614>>tex2html_deferred<<5614>>\par\end<<5615>>tex2html_deferred<<5615>>
\begin<<4656>>theorem_type<<4656>>[exercise][exercise][section][][][]
Explique cuál será el resultado de el segundo comando de matching
introducido en el depurador: 
\begin<<3742>>tex2html_preform<<3742>><tex2html_verbatim_mark>verbatim1175#\end<<3743>>tex2html_preform<<3743>>\end<<4657>>theorem_type<<4657>>
\begin<<5616>>tex2html_deferred<<5616>>\par\end<<5617>>tex2html_deferred<<5617>>
 
  \paragraph<<4775>>Descripción detallada del proceso de matching<<4775>>
  \begin<<4776>>tabular<<4776>><<4777>>c<<4777>>
  \end<<4778>>tabular<<4778>>

Veamos en detalle lo que ocurre durante un matching.
Repasemos lo que dice la sección Matching Repetitions en la sección 'Matching-repetitions' en \htmladdnormallink<<4779>><<4781>>\begin<<5618>>tex2html_deferred<<5618>>\tt\end<<5619>>tex2html_deferred<<5619>>perlretut<<4781>><<4779>>
<<4780>>http://perldoc.perl.org/perlretut.html\#Matching-repetitions<<4780>>:
\begin<<5620>>tex2html_deferred<<5620>>\par\end<<5621>>tex2html_deferred<<5621>>
\begin<<3748>>it<<3748>>
\begin<<3749>>quotation<<3749>>
Just like alternation, quantifiers are also susceptible to backtracking. Here is a step-by-step analysis of the example
\begin<<5622>>tex2html_deferred<<5622>>\par\end<<5623>>tex2html_deferred<<5623>>
\begin<<3750>>tex2html_preform<<3750>><tex2html_verbatim_mark>verbatim1176#\end<<3751>>tex2html_preform<<3751>>
\begin<<5624>>tex2html_deferred<<5624>>\par\end<<5625>>tex2html_deferred<<5625>>
\begin<<3752>>enumerate<<3752>>
    \item
\begin<<5626>>tex2html_deferred<<5626>>\par\end<<5627>>tex2html_deferred<<5627>>
Start with the first letter in the string 't'.
    \item
\begin<<5628>>tex2html_deferred<<5628>>\par\end<<5629>>tex2html_deferred<<5629>>
The first quantifier '.*' starts out by matching the whole string 'the cat in the hat'.
    \item
\begin<<5630>>tex2html_deferred<<5630>>\par\end<<5631>>tex2html_deferred<<5631>>
'a' in the regexp element 'at' doesn't match the end of the string. Backtrack one character.
    \item
\begin<<5632>>tex2html_deferred<<5632>>\par\end<<5633>>tex2html_deferred<<5633>>
'a' in the regexp element 'at' still doesn't match the last letter of the string 't', so backtrack one more character.
    \item
\begin<<5634>>tex2html_deferred<<5634>>\par\end<<5635>>tex2html_deferred<<5635>>
Now we can match the 'a' and the 't'.
    \item
\begin<<5636>>tex2html_deferred<<5636>>\par\end<<5637>>tex2html_deferred<<5637>>
Move on to the third element '.*'. Since we are at the end of the string and '.*' can match 0 times, assign it the empty string.
    \item
\begin<<5638>>tex2html_deferred<<5638>>\par\end<<5639>>tex2html_deferred<<5639>>
We are done!
\end<<3753>>enumerate<<3753>>
\end<<3754>>quotation<<3754>>
\end<<3755>>it<<3755>>
\begin<<5640>>tex2html_deferred<<5640>>\par\end<<5641>>tex2html_deferred<<5641>>
 
  \paragraph<<4782>>Rendimiento<<4782>>
  \begin<<4783>>tabular<<4783>><<4784>>c<<4784>>
  \end<<4785>>tabular<<4785>>

\begin<<5642>>tex2html_deferred<<5642>>\par\end<<5643>>tex2html_deferred<<5643>>
La forma en la que se escribe una regexp puede dar lugar agrandes variaciones
en el rendimiento.
Repasemos lo que dice la sección Matching Repetitions en la sección 'Matching-repetitions' en \htmladdnormallink<<4786>><<4788>>\begin<<5644>>tex2html_deferred<<5644>>\tt\end<<5645>>tex2html_deferred<<5645>>perlretut<<4788>><<4786>>
<<4787>>http://perldoc.perl.org/perlretut.html\#Matching-repetitions<<4787>>:
\begin<<3759>>it<<3759>>
\begin<<3760>>quotation<<3760>>
Most of the time, all this moving forward and backtracking happens
quickly and searching is fast. There are some pathological regexps,
however, whose execution time exponentially grows with the size of the
string. A typical structure that blows up in your face is of the form
\begin<<5646>>tex2html_deferred<<5646>>\par\end<<5647>>tex2html_deferred<<5647>>
\begin<<3761>>tex2html_preform<<3761>><tex2html_verbatim_mark>verbatim1177#\end<<3762>>tex2html_preform<<3762>>
\begin<<5648>>tex2html_deferred<<5648>>\par\end<<5649>>tex2html_deferred<<5649>>
The problem is the nested indeterminate quantifiers. 
There are many
different ways of partitioning a string of length n between the <tex2html_verb_mark>646<tex2html_verb_mark> 
and <tex2html_verb_mark>647<tex2html_verb_mark>: one repetition with <tex2html_verb_mark>648<tex2html_verb_mark> of length \begin<<5328>>tex2html_wrap_inline<<5328>>$n$\end<<5329>>tex2html_wrap_inline<<5329>>, 
two repetitions with the first <tex2html_verb_mark>649<tex2html_verb_mark>
length \begin<<5330>>tex2html_wrap_inline<<5330>>$k$\end<<5331>>tex2html_wrap_inline<<5331>>\space and the second with length \begin<<5332>>tex2html_wrap_inline<<5332>>$n-k$\end<<5333>>tex2html_wrap_inline<<5333>>, \begin<<5334>>tex2html_wrap_inline<<5334>>$m$\end<<5335>>tex2html_wrap_inline<<5335>>\space repetitions whose bits add
up to length \begin<<5336>>tex2html_wrap_inline<<5336>>$n$\end<<5337>>tex2html_wrap_inline<<5337>>, etc. 
\begin<<5650>>tex2html_deferred<<5650>>\par\end<<5651>>tex2html_deferred<<5651>>
In fact there are an exponential number of ways
to partition a string as a function of its length. A regexp may get
lucky and match early in the process, but if there is no match, Perl
will try every possibility before giving up. So be careful with nested 
<tex2html_verb_mark>650<tex2html_verb_mark>'s, <tex2html_verb_mark>651<tex2html_verb_mark>'s, and <tex2html_verb_mark>652<tex2html_verb_mark> 's. 
\begin<<5652>>tex2html_deferred<<5652>>\par\end<<5653>>tex2html_deferred<<5653>>
The book 
\htmladdnormallink<<3763>>Mastering Regular Expressions<<3763>><<3764>>http://books.google.es/books?id=NYEX-Q9evKoC\&dq=Mastering+Regular+Expressions\&printsec=frontcover\&source=bn\&hl=en\#v=onepage\&q=\&f=false<<3764>> 
by Jeffrey Friedl \cite<<3765>>friedl<<3765>> gives a wonderful discussion of this and other efficiency issues.
\end<<3766>>quotation<<3766>>
\end<<3767>>it<<3767>>
\begin<<5654>>tex2html_deferred<<5654>>\par\end<<5655>>tex2html_deferred<<5655>>
 
  \paragraph<<4789>>Eliminación de Comentarios de un Programa C<<4789>>
  \begin<<4790>>tabular<<4790>><<4791>>c<<4791>>
  \end<<4792>>tabular<<4792>>

\label<<3769>>parrfo:comments<<3769>>
\begin<<5656>>tex2html_deferred<<5656>>\par\end<<5657>>tex2html_deferred<<5657>>
El siguiente ejemplo elimina los comentarios de un programa <tex2html_verb_mark>653<tex2html_verb_mark>.
<tex2html_verbatim_mark>rawhtml1178#
Veamos un ejemplo de ejecución. Supongamos el fichero de entrada:
\begin<<3770>>tex2html_preform<<3770>><tex2html_verbatim_mark>verbatim1179#\end<<3771>>tex2html_preform<<3771>>
\begin<<5658>>tex2html_deferred<<5658>>\par\end<<5659>>tex2html_deferred<<5659>>
Entonces la ejecución con ese fichero de entrada produce
la salida:
\begin<<3772>>tex2html_preform<<3772>><tex2html_verbatim_mark>verbatim1180#\end<<3773>>tex2html_preform<<3773>>
Veamos la diferencia de comportamiento entre <tex2html_verb_mark>654<tex2html_verb_mark> y <tex2html_verb_mark>655<tex2html_verb_mark>
en el ejemplo anterior:
\begin<<5660>>tex2html_deferred<<5660>>\par\end<<5661>>tex2html_deferred<<5661>>
<tex2html_verbatim_mark>rawhtml1181#
\begin<<5662>>tex2html_deferred<<5662>>\par\end<<5663>>tex2html_deferred<<5663>>
Véase también la documentación en la sección 'Matching-repetitions' en \htmladdnormallink<<4793>><<4795>>\begin<<5664>>tex2html_deferred<<5664>>\tt\end<<5665>>tex2html_deferred<<5665>>perlretut<<4795>><<4793>>
<<4794>>http://perldoc.perl.org/perlretut.html\#Matching-repetitions<<4794>> y la sección 'Quantifiers' en \htmladdnormallink<<4796>><<4798>>\begin<<5666>>tex2html_deferred<<5666>>\tt\end<<5667>>tex2html_deferred<<5667>>perlre<<4798>><<4796>>
<<4797>>http://perldoc.perl.org/perlre.html\#Quantifiers<<4797>>.
\begin<<5668>>tex2html_deferred<<5668>>\par\end<<5669>>tex2html_deferred<<5669>>
 
  \paragraph<<4799>>Negaciones y operadores <<4803>>\begin<<5670>>tex2html_deferred<<5670>>\it\end<<5671>>tex2html_deferred<<5671>>lazy<<4803>><<4799>>
  \begin<<4800>>tabular<<4800>><<4801>>c<<4801>>
  \end<<4802>>tabular<<4802>>

A menudo las expresiones
<tex2html_verb_mark>656<tex2html_verb_mark>
y <tex2html_verb_mark>657<tex2html_verb_mark>, donde <tex2html_verb_mark>658<tex2html_verb_mark> es un carácter arbitrario se usan de forma casi equivalente.
\begin<<5672>>tex2html_deferred<<5672>>\par\end<<5673>>tex2html_deferred<<5673>>
\begin<<3779>>itemize<<3779>>
\item
La primera significa:
\begin<<5674>>tex2html_deferred<<5674>>\par\end<<5675>>tex2html_deferred<<5675>>
\begin<<3780>>it<<3780>>
Una cadena que no contiene <tex2html_verb_mark>659<tex2html_verb_mark> en su interior y que está delimitada por <tex2html_verb_mark>660<tex2html_verb_mark>s
\end<<3781>>it<<3781>>
\item
La segunda significa:
\begin<<5676>>tex2html_deferred<<5676>>\par\end<<5677>>tex2html_deferred<<5677>>
\begin<<3782>>it<<3782>>
Una cadena que comienza en <tex2html_verb_mark>661<tex2html_verb_mark> y termina en la <tex2html_verb_mark>662<tex2html_verb_mark> mas próxima a la <tex2html_verb_mark>663<tex2html_verb_mark> de comienzo
\end<<3783>>it<<3783>>
\end<<3784>>itemize<<3784>>
\begin<<5678>>tex2html_deferred<<5678>>\par\end<<5679>>tex2html_deferred<<5679>>
Esta equivalencia se rompe si no se cumplen las hipótesis establecidas.
\begin<<5680>>tex2html_deferred<<5680>>\par\end<<5681>>tex2html_deferred<<5681>>
En el siguiente ejemplo se intentan detectar 
las cadenas entre comillas dobles que terminan en el signo de exclamación:
\begin<<3785>>tex2html_preform<<3785>><tex2html_verbatim_mark>verbatim1182#\end<<3786>>tex2html_preform<<3786>>
\begin<<5682>>tex2html_deferred<<5682>>\par\end<<5683>>tex2html_deferred<<5683>>
Al ejecutar el programa obtenemos:
\begin<<3787>>tex2html_preform<<3787>><tex2html_verbatim_mark>verbatim1183#\end<<3788>>tex2html_preform<<3788>>
\begin<<5684>>tex2html_deferred<<5684>>\par\end<<5685>>tex2html_deferred<<5685>>
 
  \paragraph<<4804>>Copia y sustitución simultáneas<<4804>>
  \begin<<4805>>tabular<<4805>><<4806>>c<<4806>>
  \end<<4807>>tabular<<4807>>

\label<<3790>>section:copia<<3790>>
El operador de \emph<<3791>>binding<<3791>> <tex2html_verb_mark>664<tex2html_verb_mark> nos permite ``asociar'' la variable 
con la operación de casamiento o sustitución. Si se trata de una sustitución
y se quiere conservar la cadena, es necesario hacer una copia:
\begin<<3792>>tex2html_preform<<3792>><tex2html_verbatim_mark>verbatim1184#\end<<3793>>tex2html_preform<<3793>>
en vez de eso, puedes abreviar un poco usando la siguiente ``perla'':
\begin<<3794>>tex2html_preform<<3794>><tex2html_verbatim_mark>verbatim1185#\end<<3795>>tex2html_preform<<3795>>
Obsérvese la asociación por la izquierda del operador de asignación.
\begin<<5686>>tex2html_deferred<<5686>>\par\end<<5687>>tex2html_deferred<<5687>>
 
  \paragraph<<4808>>Referencias a Paréntesis Previos<<4808>>
  \begin<<4809>>tabular<<4809>><<4810>>c<<4810>>
  \end<<4811>>tabular<<4811>>

\begin<<5688>>tex2html_deferred<<5688>>\par\end<<5689>>tex2html_deferred<<5689>>
Las referencias relativas permiten escribir expresiones
regulares mas reciclables.
Véase la documentación
en 
la sección 'Relative-backreferences' en \htmladdnormallink<<4812>><<4814>>\begin<<5690>>tex2html_deferred<<5690>>\tt\end<<5691>>tex2html_deferred<<5691>>perlretut<<4814>><<4812>>
<<4813>>http://perldoc.perl.org/perlretut.html\#Relative-backreferences<<4813>>:
\begin<<5692>>tex2html_deferred<<5692>>\par\end<<5693>>tex2html_deferred<<5693>>
\begin<<3799>>it<<3799>>
\begin<<3800>>quotation<<3800>>
Counting the opening parentheses to get the correct number for a
backreference is errorprone as soon as there is more than one capturing
group. A more convenient technique became available with Perl 5.10:
relative backreferences. To refer to the immediately preceding capture
group one now may write <tex2html_verb_mark>665<tex2html_verb_mark> , the next but last is available 
via <tex2html_verb_mark>666<tex2html_verb_mark>, and so on.
\begin<<5694>>tex2html_deferred<<5694>>\par\end<<5695>>tex2html_deferred<<5695>>
Another good reason in addition to readability and maintainability for
using relative backreferences is illustrated by the following example,
where a simple pattern for matching peculiar strings is used:
\begin<<5696>>tex2html_deferred<<5696>>\par\end<<5697>>tex2html_deferred<<5697>>
\begin<<3801>>tex2html_preform<<3801>><tex2html_verbatim_mark>verbatim1186#\end<<3802>>tex2html_preform<<3802>>
\begin<<5698>>tex2html_deferred<<5698>>\par\end<<5699>>tex2html_deferred<<5699>>
Now that we have this pattern stored as a handy string, we might feel
tempted to use it as a part of some other pattern:
\begin<<5700>>tex2html_deferred<<5700>>\par\end<<5701>>tex2html_deferred<<5701>>
\begin<<3803>>tex2html_preform<<3803>><tex2html_verbatim_mark>verbatim1187#\end<<3804>>tex2html_preform<<3804>>
\begin<<5702>>tex2html_deferred<<5702>>\par\end<<5703>>tex2html_deferred<<5703>>
But this doesn't match -- at least not the way one might expect. Only
after inserting the interpolated <tex2html_verb_mark>667<tex2html_verb_mark> and looking at the resulting full
text of the regexp is it obvious that the backreferences have backfired --
the subexpression <tex2html_verb_mark>668<tex2html_verb_mark> has snatched number 1 and demoted the groups in
<tex2html_verb_mark>669<tex2html_verb_mark> by one rank. This can be avoided by using relative backreferences:
\begin<<5704>>tex2html_deferred<<5704>>\par\end<<5705>>tex2html_deferred<<5705>>
\begin<<3805>>tex2html_preform<<3805>><tex2html_verbatim_mark>verbatim1188#\end<<3806>>tex2html_preform<<3806>>
\end<<3807>>quotation<<3807>>
\end<<3808>>it<<3808>>
\begin<<5706>>tex2html_deferred<<5706>>\par\end<<5707>>tex2html_deferred<<5707>>
El siguiente programa ilustra lo dicho:
<tex2html_verbatim_mark>rawhtml1189#
Sigue la ejecución:
<tex2html_verbatim_mark>rawhtml1190#
\begin<<5708>>tex2html_deferred<<5708>>\par\end<<5709>>tex2html_deferred<<5709>>
 
  \paragraph<<4815>>Usando Referencias con Nombre (Perl 5.10)<<4815>>
  \begin<<4816>>tabular<<4816>><<4817>>c<<4817>>
  \end<<4818>>tabular<<4818>>

\begin<<5710>>tex2html_deferred<<5710>>\par\end<<5711>>tex2html_deferred<<5711>>
El siguiente texto esta tomado de 
la sección 'Named-backreferences' en \htmladdnormallink<<4819>><<4821>>\begin<<5712>>tex2html_deferred<<5712>>\tt\end<<5713>>tex2html_deferred<<5713>>perlretut<<4821>><<4819>>
<<4820>>http://perldoc.perl.org/perlretut.html\#Named-backreferences<<4820>>:
\begin<<5714>>tex2html_deferred<<5714>>\par\end<<5715>>tex2html_deferred<<5715>>
\begin<<3812>>it<<3812>>
\begin<<3813>>quotation<<3813>>
Perl 5.10 also introduced named capture buffers and named
backreferences. To attach a name to a capturing group, you write either
<tex2html_verb_mark>670<tex2html_verb_mark> or <tex2html_verb_mark>671<tex2html_verb_mark>. The backreference may then be written
as <tex2html_verb_mark>672<tex2html_verb_mark> . 
\begin<<5716>>tex2html_deferred<<5716>>\par\end<<5717>>tex2html_deferred<<5717>>
It is permissible to attach the same name to more than
one group, but then only the leftmost one of the eponymous set can be
referenced. Outside of the pattern a named capture buffer is accessible
through the <tex2html_verb_mark>674<tex2html_verb_mark> hash.
\begin<<5718>>tex2html_deferred<<5718>>\par\end<<5719>>tex2html_deferred<<5719>>
Assuming that we have to match calendar dates which may be given in one
of the three formats <tex2html_verb_mark>675<tex2html_verb_mark>, <tex2html_verb_mark>676<tex2html_verb_mark> or <tex2html_verb_mark>677<tex2html_verb_mark>, 
we can write
three suitable patterns where we use <tex2html_verb_mark>678<tex2html_verb_mark>, <tex2html_verb_mark>679<tex2html_verb_mark> and <tex2html_verb_mark>680<tex2html_verb_mark> respectively as the
names of the buffers capturing the pertaining components of a date. The
matching operation combines the three patterns as alternatives:
\begin<<5720>>tex2html_deferred<<5720>>\par\end<<5721>>tex2html_deferred<<5721>>
\begin<<3814>>tex2html_preform<<3814>><tex2html_verbatim_mark>verbatim1191#\end<<3815>>tex2html_preform<<3815>>
\begin<<5722>>tex2html_deferred<<5722>>\par\end<<5723>>tex2html_deferred<<5723>>
If any of the alternatives matches, the hash <tex2html_verb_mark>682<tex2html_verb_mark> 
is bound to contain the three key-value pairs.
\end<<3816>>quotation<<3816>>
\end<<3817>>it<<3817>>
En efecto, al ejecutar el programa:
\begin<<3818>>tex2html_preform<<3818>><tex2html_verbatim_mark>verbatim1192#\end<<3819>>tex2html_preform<<3819>>
Obtenemos la salida:
\begin<<3820>>tex2html_preform<<3820>><tex2html_verbatim_mark>verbatim1193#\end<<3821>>tex2html_preform<<3821>>
\begin<<5724>>tex2html_deferred<<5724>>\par\end<<5725>>tex2html_deferred<<5725>>
Como se comentó:
\begin<<5726>>tex2html_deferred<<5726>>\par\end<<5727>>tex2html_deferred<<5727>>
\begin<<3822>>it<<3822>>
\begin<<3823>>quotation<<3823>>
... It is permissible to attach the same name to more than
one group, but then only the leftmost one of the eponymous set can be
referenced. 
\end<<3824>>quotation<<3824>>
\end<<3825>>it<<3825>>
\begin<<5728>>tex2html_deferred<<5728>>\par\end<<5729>>tex2html_deferred<<5729>>
Veamos un ejemplo:
\begin<<3826>>tex2html_preform<<3826>><tex2html_verbatim_mark>verbatim1194#\end<<3827>>tex2html_preform<<3827>>
\begin<<5730>>tex2html_deferred<<5730>>\par\end<<5731>>tex2html_deferred<<5731>>
Reescribamos el ejemplo de conversión de temperaturas usando
paréntesis con nombre:
\begin<<5732>>tex2html_deferred<<5732>>\par\end<<5733>>tex2html_deferred<<5733>>
\begin<<3828>>tex2html_preform<<3828>><tex2html_verbatim_mark>verbatim1195#\end<<3829>>tex2html_preform<<3829>>
\begin<<5734>>tex2html_deferred<<5734>>\par\end<<5735>>tex2html_deferred<<5735>>
La función \htmladdnormallink<<4822>><<4824>>\begin<<5736>>tex2html_deferred<<5736>>\tt\end<<5737>>tex2html_deferred<<5737>>exists<<4824>><<4822>>
<<4823>>http://www.ayni.com/perldoc/functions/exists.html<<4823>> retorna verdadero si existe la clave en el hash
y falso en otro caso.  
\begin<<5738>>tex2html_deferred<<5738>>\par\end<<5739>>tex2html_deferred<<5739>>
 
  \paragraph<<4825>>Grupos con Nombre y Factorización<<4825>>
  \begin<<4826>>tabular<<4826>><<4827>>c<<4827>>
  \end<<4828>>tabular<<4828>>

\begin<<5740>>tex2html_deferred<<5740>>\par\end<<5741>>tex2html_deferred<<5741>>
El uso de nombres hace mas robustas y mas factorizables
las expresiones regulares.
Consideremos la siguiente regexp que usa notación posicional:
\begin<<3832>>tex2html_preform<<3832>><tex2html_verbatim_mark>verbatim1196#\end<<3833>>tex2html_preform<<3833>>
Supongamos que queremos reutilizar la regexp con repetición
\begin<<3834>>tex2html_preform<<3834>><tex2html_verbatim_mark>verbatim1197#\end<<3835>>tex2html_preform<<3835>>
¿Que ha ocurrido? La introducción del nuevo paréntesis 
nos obliga a renombrar las referencias a las posiciones:
\begin<<3836>>tex2html_preform<<3836>><tex2html_verbatim_mark>verbatim1198#\end<<3837>>tex2html_preform<<3837>>
Esto no ocurre si utilizamos nombres. 
El operador <tex2html_verb_mark>683<tex2html_verb_mark> sirve para hacer referencia
al valor que ha casado con el paréntesis con nombre <tex2html_verb_mark>684<tex2html_verb_mark>:
\begin<<3838>>tex2html_preform<<3838>><tex2html_verbatim_mark>verbatim1199#\end<<3839>>tex2html_preform<<3839>>
El uso de grupos con nombre y 
<tex2html_verb_mark>685<tex2html_verb_mark>\begin<<5742>>tex2html_deferred<<5742>>\footnote<<4629>>
Una diferencia entre <<3840>>\tt \begin<<5338>>tex2html_wrap_inline<<5338>>$\backslash k$\end<<5339>>tex2html_wrap_inline<<5339>><<3840>> y <<3841>>\tt \begin<<5340>>tex2html_wrap_inline<<5340>>$\backslash g$\end<<5341>>tex2html_wrap_inline<<5341>><<3841>> es que el primero 
sólo admite un nombre como argumento  mientras que <<3842>>\tt \begin<<5342>>tex2html_wrap_inline<<5342>>$\backslash g$\end<<5343>>tex2html_wrap_inline<<5343>><<3842>>
admite enteros<<4629>>\end<<5743>>tex2html_deferred<<5743>>
en lugar de referencias numéricas absolutas
hace que la regexp sea mas reutilizable.
\begin<<5744>>tex2html_deferred<<5744>>\par\end<<5745>>tex2html_deferred<<5745>>
 
  \paragraph<<4829>>LLamadas a expresiones regulares via paréntesis con memoria<<4829>>
  \begin<<4830>>tabular<<4830>><<4831>>c<<4831>>
  \end<<4832>>tabular<<4832>>

\begin<<5746>>tex2html_deferred<<5746>>\par\end<<5747>>tex2html_deferred<<5747>>
Es posible también llamar a la expresión regular
asociada con un paréntesis.
\begin<<5748>>tex2html_deferred<<5748>>\par\end<<5749>>tex2html_deferred<<5749>>
Este parrafo tomado de
la sección 'Extended-Patterns' en \htmladdnormallink<<4833>><<4835>>\begin<<5750>>tex2html_deferred<<5750>>\tt\end<<5751>>tex2html_deferred<<5751>>perlre<<4835>><<4833>>
<<4834>>http://perldoc.perl.org/perlre.html\#Extended-Patterns<<4834>> 
explica el modo de uso:
\begin<<5752>>tex2html_deferred<<5752>>\par\end<<5753>>tex2html_deferred<<5753>>
\begin<<3846>>it<<3846>>
<tex2html_verb_mark>686<tex2html_verb_mark>
\begin<<3847>>quotation<<3847>>
\begin<<5754>>tex2html_deferred<<5754>>\par\end<<5755>>tex2html_deferred<<5755>>
<tex2html_verb_mark>687<tex2html_verb_mark> is a sequence of digits (not starting with 0) whose value reflects
the paren-number of the capture buffer to recurse to. 
\begin<<5756>>tex2html_deferred<<5756>>\par\end<<5757>>tex2html_deferred<<5757>>
....
\begin<<5758>>tex2html_deferred<<5758>>\par\end<<5759>>tex2html_deferred<<5759>>
Capture buffers contained by the pattern will have the value as determined by the outermost recursion.
....
\begin<<5760>>tex2html_deferred<<5760>>\par\end<<5761>>tex2html_deferred<<5761>>
If <tex2html_verb_mark>688<tex2html_verb_mark> <<3848>>\begin<<5762>>tex2html_deferred<<5762>>\bf\end<<5763>>tex2html_deferred<<5763>>is preceded by a plus or minus sign then it is assumed to
be relative, with negative numbers indicating preceding capture buffers
and positive ones following<<3848>>. Thus <tex2html_verb_mark>689<tex2html_verb_mark> refers to the most recently
declared buffer, and <tex2html_verb_mark>690<tex2html_verb_mark> indicates the next buffer to be declared. 
\begin<<5764>>tex2html_deferred<<5764>>\par\end<<5765>>tex2html_deferred<<5765>>
<<3849>>\begin<<5766>>tex2html_deferred<<5766>>\bf\end<<5767>>tex2html_deferred<<5767>>Note
that the counting for relative recursion differs from that of relative
backreferences, in that with recursion unclosed buffers are included.<<3849>>
\end<<3850>>quotation<<3850>>
\end<<3851>>it<<3851>>
\begin<<5768>>tex2html_deferred<<5768>>\par\end<<5769>>tex2html_deferred<<5769>>
Veamos un ejemplo:
\begin<<5770>>tex2html_deferred<<5770>>\par\end<<5771>>tex2html_deferred<<5771>>
\begin<<3852>>tex2html_preform<<3852>><tex2html_verbatim_mark>verbatim1200#\end<<3853>>tex2html_preform<<3853>>
\begin<<5772>>tex2html_deferred<<5772>>\par\end<<5773>>tex2html_deferred<<5773>>
Véase también:
\begin<<3854>>itemize<<3854>>
\item
\htmladdnormallink
<<3855>>Perl Training Australia: Regular expressions in Perl 5.10<<3855>>
<<3856>>http://perltraining.com.au/tips/2008-02-08.html<<3856>>
\item
\htmladdnormallink
<<3857>>Perl 5.10 Advanced Regular Expressions by Yves Orton<<3857>>
<<3858>>http://www.regex-engineer.org/slides/perl510_regex.html<<3858>>
\item
\htmladdnormallink
<<3859>>Gabor: Regular Expressions in Perl 5.10<<3859>>
<<3860>>http://szabgab.com/blog/2007/12/1198488988.html<<3860>>
\end<<3861>>itemize<<3861>>
\begin<<5774>>tex2html_deferred<<5774>>\par\end<<5775>>tex2html_deferred<<5775>>
 
  \paragraph<<4836>>Reutilizando Expresiones Regulares<<4836>>
  \begin<<4837>>tabular<<4837>><<4838>>c<<4838>>
  \end<<4839>>tabular<<4839>>

\begin<<5776>>tex2html_deferred<<5776>>\par\end<<5777>>tex2html_deferred<<5777>>
La siguiente reescritura de nuestro ejemplo básico
utiliza el módulo \htmladdnormallink<<4840>><<4842>>\begin<<5778>>tex2html_deferred<<5778>>\tt\end<<5779>>tex2html_deferred<<5779>>Regexp::Common<<4842>><<4840>>
 <<4841>>http://search.cpan.org/perldoc?Regexp::Common<<4841>> para factorizar
la expresión regular:
\begin<<5780>>tex2html_deferred<<5780>>\par\end<<5781>>tex2html_deferred<<5781>>
\begin<<3864>>tex2html_preform<<3864>><tex2html_verbatim_mark>verbatim1201#\end<<3865>>tex2html_preform<<3865>>
\begin<<5782>>tex2html_deferred<<5782>>\par\end<<5783>>tex2html_deferred<<5783>>
Véase:
\begin<<3866>>itemize<<3866>>
\item La documentación del módulo \htmladdnormallink<<4843>><<4845>>\begin<<5784>>tex2html_deferred<<5784>>\tt\end<<5785>>tex2html_deferred<<5785>>Regexp::Common<<4845>><<4843>>
 <<4844>>http://search.cpan.org/perldoc?Regexp::Common<<4844>> por Abigail
\item Smart Matching: \htmladdnormallink
<<3868>>Perl Training Australia: Smart Match<<3868>>
<<3869>>http://perltraining.com.au/tips/2008-04-18.html<<3869>>
\item
Rafael García Suárez:
la sección 'Smart-matching-in-detail' en \htmladdnormallink<<4846>><<4848>>\begin<<5786>>tex2html_deferred<<5786>>\tt\end<<5787>>tex2html_deferred<<5787>>perlsyn<<4848>><<4846>>
<<4847>>http://perldoc.perl.org/perlsyn.html\#Smart-matching-in-detail<<4847>>
\item
\htmladdnormallink<<3872>>Enrique Nell (Barcelona Perl Mongers): Novedades en Perl 5.10<<3872>><<3873>>www.opensourceworldconference.com/papers/.../Nell\_370.pdf<<3873>>
\end<<3874>>itemize<<3874>>
\begin<<5788>>tex2html_deferred<<5788>>\par\end<<5789>>tex2html_deferred<<5789>>
 
  \paragraph<<4849>>El Módulo Regexp::Common<<4849>>
  \begin<<4850>>tabular<<4850>><<4851>>c<<4851>>
  \end<<4852>>tabular<<4852>>

\begin<<5790>>tex2html_deferred<<5790>>\par\end<<5791>>tex2html_deferred<<5791>>
El módulo \htmladdnormallink<<4853>><<4855>>\begin<<5792>>tex2html_deferred<<5792>>\tt\end<<5793>>tex2html_deferred<<5793>>Regexp::Common<<4855>><<4853>>
 <<4854>>http://search.cpan.org/perldoc?Regexp::Common<<4854>> provee un extenso número 
de expresiones regulares que son accesibles vía el hash <tex2html_verb_mark>692<tex2html_verb_mark>.
sigue un ejemplo de uso:
\begin<<3877>>tex2html_preform<<3877>><tex2html_verbatim_mark>verbatim1202#\end<<3878>>tex2html_preform<<3878>>
Sigue un ejemplo de ejecución:
\begin<<3879>>tex2html_preform<<3879>><tex2html_verbatim_mark>verbatim1203#\end<<3880>>tex2html_preform<<3880>>
\begin<<5794>>tex2html_deferred<<5794>>\par\end<<5795>>tex2html_deferred<<5795>>
El siguiente fragmento de la documentación 
de \htmladdnormallink<<4856>><<4858>>\begin<<5796>>tex2html_deferred<<5796>>\tt\end<<5797>>tex2html_deferred<<5797>>Regexp::Common<<4858>><<4856>>
 <<4857>>http://search.cpan.org/perldoc?Regexp::Common<<4857>>
explica el modo simplificado de uso:
\begin<<5798>>tex2html_deferred<<5798>>\par\end<<5799>>tex2html_deferred<<5799>>
\begin<<3882>>it<<3882>>
\begin<<3883>>quote<<3883>>
To access a particular pattern, <tex2html_verb_mark>694<tex2html_verb_mark> is treated as a hierarchical hash of
hashes (of hashes...), with each successive key being an identifier. For
example, to access the pattern that matches real numbers, you specify:
\begin<<5800>>tex2html_deferred<<5800>>\par\end<<5801>>tex2html_deferred<<5801>>
\begin<<3884>>tex2html_preform<<3884>><tex2html_verbatim_mark>verbatim1204#\end<<3885>>tex2html_preform<<3885>>
\begin<<5802>>tex2html_deferred<<5802>>\par\end<<5803>>tex2html_deferred<<5803>>
and to access the pattern that matches integers:
\begin<<5804>>tex2html_deferred<<5804>>\par\end<<5805>>tex2html_deferred<<5805>>
\begin<<3886>>tex2html_preform<<3886>><tex2html_verbatim_mark>verbatim1205#\end<<3887>>tex2html_preform<<3887>>
\begin<<5806>>tex2html_deferred<<5806>>\par\end<<5807>>tex2html_deferred<<5807>>
Deeper layers of the hash are used to specify flags: 
arguments that modify
the resulting pattern in some way. 
\begin<<5808>>tex2html_deferred<<5808>>\par\end<<5809>>tex2html_deferred<<5809>>
\begin<<3888>>itemize<<3888>>
\item
The keys used to access these layers
are prefixed with a minus sign and may have a value; 
\item
if a value is given,
it's done by using a multidimensional key. 
\end<<3889>>itemize<<3889>>
For example, to access the
pattern that matches base-2 real numbers with embedded commas separating
groups of three digits (e.g. <tex2html_verb_mark>695<tex2html_verb_mark>):
\begin<<5810>>tex2html_deferred<<5810>>\par\end<<5811>>tex2html_deferred<<5811>>
\begin<<3890>>tex2html_preform<<3890>><tex2html_verbatim_mark>verbatim1206#\end<<3891>>tex2html_preform<<3891>>
\begin<<5812>>tex2html_deferred<<5812>>\par\end<<5813>>tex2html_deferred<<5813>>
Through the magic of Perl, these flag layers may be specified in any
order (and even interspersed through the identifier keys!) so you could
get the same pattern with:
\begin<<5814>>tex2html_deferred<<5814>>\par\end<<5815>>tex2html_deferred<<5815>>
\begin<<3892>>tex2html_preform<<3892>><tex2html_verbatim_mark>verbatim1207#\end<<3893>>tex2html_preform<<3893>>
\begin<<5816>>tex2html_deferred<<5816>>\par\end<<5817>>tex2html_deferred<<5817>>
or:
\begin<<5818>>tex2html_deferred<<5818>>\par\end<<5819>>tex2html_deferred<<5819>>
\begin<<3894>>tex2html_preform<<3894>><tex2html_verbatim_mark>verbatim1208#\end<<3895>>tex2html_preform<<3895>>
\begin<<5820>>tex2html_deferred<<5820>>\par\end<<5821>>tex2html_deferred<<5821>>
or even:
\begin<<5822>>tex2html_deferred<<5822>>\par\end<<5823>>tex2html_deferred<<5823>>
\begin<<3896>>tex2html_preform<<3896>><tex2html_verbatim_mark>verbatim1209#\end<<3897>>tex2html_preform<<3897>>
\begin<<5824>>tex2html_deferred<<5824>>\par\end<<5825>>tex2html_deferred<<5825>>
etc.
\begin<<5826>>tex2html_deferred<<5826>>\par\end<<5827>>tex2html_deferred<<5827>>
Note, however, that the relative order of amongst the identifier keys is significant. That is:
\begin<<5828>>tex2html_deferred<<5828>>\par\end<<5829>>tex2html_deferred<<5829>>
\begin<<3898>>tex2html_preform<<3898>><tex2html_verbatim_mark>verbatim1210#\end<<3899>>tex2html_preform<<3899>>
\begin<<5830>>tex2html_deferred<<5830>>\par\end<<5831>>tex2html_deferred<<5831>>
would not be the same as:
\begin<<5832>>tex2html_deferred<<5832>>\par\end<<5833>>tex2html_deferred<<5833>>
\begin<<3900>>tex2html_preform<<3900>><tex2html_verbatim_mark>verbatim1211#\end<<3901>>tex2html_preform<<3901>>
\end<<3902>>quote<<3902>>
\end<<3903>>it<<3903>>
\begin<<5834>>tex2html_deferred<<5834>>\par\end<<5835>>tex2html_deferred<<5835>>
Veamos un ejemplo con el depurador:
\begin<<3904>>tex2html_preform<<3904>><tex2html_verbatim_mark>verbatim1212#\end<<3905>>tex2html_preform<<3905>>
\begin<<5836>>tex2html_deferred<<5836>>\par\end<<5837>>tex2html_deferred<<5837>>
La expresión regular para un número real es 
relativamente compleja:
\begin<<5838>>tex2html_deferred<<5838>>\par\end<<5839>>tex2html_deferred<<5839>>
\begin<<3906>>tex2html_preform<<3906>><tex2html_verbatim_mark>verbatim1213#\end<<3907>>tex2html_preform<<3907>>
\begin<<5840>>tex2html_deferred<<5840>>\par\end<<5841>>tex2html_deferred<<5841>>
Si se usa la opción <tex2html_verb_mark>696<tex2html_verb_mark> el patrón proveído usa paréntesis con memoria:
\begin<<3908>>tex2html_preform<<3908>><tex2html_verbatim_mark>verbatim1214#\end<<3909>>tex2html_preform<<3909>>
\begin<<5842>>tex2html_deferred<<5842>>\par\end<<5843>>tex2html_deferred<<5843>>
 
  \paragraph<<4859>>Smart Matching<<4859>>
  \begin<<4860>>tabular<<4860>><<4861>>c<<4861>>
  \end<<4862>>tabular<<4862>>

\begin<<5844>>tex2html_deferred<<5844>>\par\end<<5845>>tex2html_deferred<<5845>>
Perl 5.10 introduce el operador de smart matching.
El siguiente texto es tomado casi verbatim del site de la compañía 
\htmladdnormallink<<3911>>Perl Training Australia<<3911>><<3912>>http://perltraining.com.au/tips/2008-04-18.html<<3912>>\begin<<5846>>tex2html_deferred<<5846>>\footnote<<3913>>
This Perl tip and associated text is copyright Perl Training Australia<<3913>>\end<<5847>>tex2html_deferred<<5847>>:
\begin<<3914>>it<<3914>>
\begin<<3915>>quotation<<3915>>
Perl 5.10 introduces a new-operator, called smart-match, written <tex2html_verb_mark>697<tex2html_verb_mark>. As
the name suggests, smart-match tries to compare its arguments in an
intelligent fashion. Using smart-match effectively allows many complex
operations to be reduces to very simple statements.
\begin<<5848>>tex2html_deferred<<5848>>\par\end<<5849>>tex2html_deferred<<5849>>
Unlike many of the other features introduced in Perl 5.10, there's no
need to use the feature pragma to enable smart-match, as long as you're
using 5.10 it's available.
\begin<<5850>>tex2html_deferred<<5850>>\par\end<<5851>>tex2html_deferred<<5851>>
The smart-match operator is always commutative. That means that 
<tex2html_verb_mark>698<tex2html_verb_mark> works the same way as 
<tex2html_verb_mark>699<tex2html_verb_mark>. You'll never have to remember which
order to place to your operands with smart-match.
Smart-match in action.
\begin<<5852>>tex2html_deferred<<5852>>\par\end<<5853>>tex2html_deferred<<5853>>
As a simple introduction, we can use smart-match to do a simple string comparison between simple scalars. For example:
\begin<<5854>>tex2html_deferred<<5854>>\par\end<<5855>>tex2html_deferred<<5855>>
\begin<<3916>>tex2html_preform<<3916>><tex2html_verbatim_mark>verbatim1215#\end<<3917>>tex2html_preform<<3917>>
\begin<<5856>>tex2html_deferred<<5856>>\par\end<<5857>>tex2html_deferred<<5857>>
If one of our arguments is a number, then a numeric comparison is performed:
\begin<<5858>>tex2html_deferred<<5858>>\par\end<<5859>>tex2html_deferred<<5859>>
\begin<<3918>>tex2html_preform<<3918>><tex2html_verbatim_mark>verbatim1216#\end<<3919>>tex2html_preform<<3919>>
\begin<<5860>>tex2html_deferred<<5860>>\par\end<<5861>>tex2html_deferred<<5861>>
This will print our message if our user enters 100, 100.00, +100, 1e2, or
any other string that looks like the number 100. 
\begin<<5862>>tex2html_deferred<<5862>>\par\end<<5863>>tex2html_deferred<<5863>>
We can also smart-match
against a regexp:
\begin<<5864>>tex2html_deferred<<5864>>\par\end<<5865>>tex2html_deferred<<5865>>
\begin<<3920>>tex2html_preform<<3920>><tex2html_verbatim_mark>verbatim1217#\end<<3921>>tex2html_preform<<3921>>
\begin<<5866>>tex2html_deferred<<5866>>\par\end<<5867>>tex2html_deferred<<5867>>
Smart-matching with a regexp also works with saved regexps created with qr<<3922>><<3922>>.
\begin<<5868>>tex2html_deferred<<5868>>\par\end<<5869>>tex2html_deferred<<5869>>
So we can use smart-match to act like eq, <tex2html_verb_mark>700<tex2html_verb_mark> and 
<tex2html_verb_mark>701<tex2html_verb_mark>, so what? Well, it does much more than that. 
\begin<<5870>>tex2html_deferred<<5870>>\par\end<<5871>>tex2html_deferred<<5871>>
We can use smart-match to search a list:
\begin<<5872>>tex2html_deferred<<5872>>\par\end<<5873>>tex2html_deferred<<5873>>
\begin<<3923>>tex2html_preform<<3923>><tex2html_verbatim_mark>verbatim1218#\end<<3924>>tex2html_preform<<3924>>
\begin<<5874>>tex2html_deferred<<5874>>\par\end<<5875>>tex2html_deferred<<5875>>
It's important to note that searching an array with smart-match is
extremely fast. It's faster than using grep, it's faster than using
<tex2html_verb_mark>702<tex2html_verb_mark> from \htmladdnormallink<<4863>><<4865>>\begin<<5876>>tex2html_deferred<<5876>>\tt\end<<5877>>tex2html_deferred<<5877>>Scalar::Util<<4865>><<4863>>
 <<4864>>http://search.cpan.org/perldoc?Scalar::Util<<4864>>, and it's faster than walking through the loop
with <tex2html_verb_mark>703<tex2html_verb_mark>, even if you do know all the clever optimisations.
\begin<<5878>>tex2html_deferred<<5878>>\par\end<<5879>>tex2html_deferred<<5879>>
Esta es la forma típica de buscar un elemento en un array en 
versiones anteriores a la 5.10:
\begin<<3926>>tex2html_preform<<3926>><tex2html_verbatim_mark>verbatim1219#\end<<3927>>tex2html_preform<<3927>>
\begin<<5880>>tex2html_deferred<<5880>>\par\end<<5881>>tex2html_deferred<<5881>>
We can also use smart-match to compare arrays:
\begin<<5882>>tex2html_deferred<<5882>>\par\end<<5883>>tex2html_deferred<<5883>>
\begin<<3928>>tex2html_preform<<3928>><tex2html_verbatim_mark>verbatim1220#\end<<3929>>tex2html_preform<<3929>>
\begin<<5884>>tex2html_deferred<<5884>>\par\end<<5885>>tex2html_deferred<<5885>>
And even search inside an array using a string:
\begin<<5886>>tex2html_deferred<<5886>>\par\end<<5887>>tex2html_deferred<<5887>>
\begin<<3930>>tex2html_preform<<3930>><tex2html_verbatim_mark>verbatim1221#\end<<3931>>tex2html_preform<<3931>>
\begin<<5888>>tex2html_deferred<<5888>>\par\end<<5889>>tex2html_deferred<<5889>>
or using a regexp:
\begin<<5890>>tex2html_deferred<<5890>>\par\end<<5891>>tex2html_deferred<<5891>>
\begin<<3932>>tex2html_preform<<3932>><tex2html_verbatim_mark>verbatim1222#\end<<3933>>tex2html_preform<<3933>>
\begin<<5892>>tex2html_deferred<<5892>>\par\end<<5893>>tex2html_deferred<<5893>>
Smart-match works with array references, too\begin<<5894>>tex2html_deferred<<5894>>\footnote<<3934>>En este caso la conmutatividad no funciona<<3934>>\end<<5895>>tex2html_deferred<<5895>>:
\begin<<5896>>tex2html_deferred<<5896>>\par\end<<5897>>tex2html_deferred<<5897>>
\begin<<3935>>tex2html_preform<<3935>><tex2html_verbatim_mark>verbatim1223#\end<<3936>>tex2html_preform<<3936>>
\begin<<5898>>tex2html_deferred<<5898>>\par\end<<5899>>tex2html_deferred<<5899>>
En el caso de un número y un array devuelve cierto si el escalar aparece 
en un array anidado:
\begin<<5900>>tex2html_deferred<<5900>>\par\end<<5901>>tex2html_deferred<<5901>>
\begin<<3937>>tex2html_preform<<3937>><tex2html_verbatim_mark>verbatim1224#\end<<3938>>tex2html_preform<<3938>>
\begin<<5902>>tex2html_deferred<<5902>>\par\end<<5903>>tex2html_deferred<<5903>>
Of course, we can use smart-match with more than just arrays and scalars,
it works with searching for the key in a hash, too!
\begin<<5904>>tex2html_deferred<<5904>>\par\end<<5905>>tex2html_deferred<<5905>>
\begin<<3939>>tex2html_preform<<3939>><tex2html_verbatim_mark>verbatim1225#\end<<3940>>tex2html_preform<<3940>>
\begin<<5906>>tex2html_deferred<<5906>>\par\end<<5907>>tex2html_deferred<<5907>>
You can even use it to see if the two hashes have identical keys:
\begin<<5908>>tex2html_deferred<<5908>>\par\end<<5909>>tex2html_deferred<<5909>>
\begin<<3941>>tex2html_preform<<3941>><tex2html_verbatim_mark>verbatim1226#\end<<3942>>tex2html_preform<<3942>>
\end<<3943>>quotation<<3943>>
\end<<3944>>it<<3944>>
\begin<<5910>>tex2html_deferred<<5910>>\par\end<<5911>>tex2html_deferred<<5911>>
La conducta del operador de smart matching viene dada por la siguiente
tabla tomada de la sección 'Smart-matching-in-detail' en \htmladdnormallink<<4866>><<4868>>\begin<<5912>>tex2html_deferred<<5912>>\tt\end<<5913>>tex2html_deferred<<5913>>perlsyn<<4868>><<4866>>
<<4867>>http://perldoc.perl.org/perlsyn.html\#Smart-matching-in-detail<<4867>>:
\begin<<5914>>tex2html_deferred<<5914>>\par\end<<5915>>tex2html_deferred<<5915>>
\begin<<3947>>it<<3947>>
\begin<<3948>>quotation<<3948>>
The behaviour of a smart match depends on what type of thing its arguments
are. The behaviour is determined by the following table: 
the first
row that applies determines the match behaviour (which is thus mostly
determined by the type of the right operand). 
Note that the smart match
implicitly dereferences any non-blessed hash or array ref, so the ;SPMquot;Hash;SPMquot;
and ;SPMquot;Array;SPMquot; entries apply in those cases. (For blessed references, the
;SPMquot;Object;SPMquot; entries apply.)
\begin<<5916>>tex2html_deferred<<5916>>\par\end<<5917>>tex2html_deferred<<5917>>
Note that the ;SPMquot;Matching Code;SPMquot; column is not always an exact rendition. For
example, the smart match operator short-circuits whenever possible,
but grep does not.
\begin<<5918>>tex2html_deferred<<5918>>\par\end<<5919>>tex2html_deferred<<5919>>
\begin<<3949>>center<<3949>>
\begin<<3950>>tex2html_preform<<3950>><tex2html_verbatim_mark>verbatim1227#\end<<3951>>tex2html_preform<<3951>>
\end<<3952>>center<<3952>>
\begin<<5920>>tex2html_deferred<<5920>>\par\end<<5921>>tex2html_deferred<<5921>>
\end<<3953>>quotation<<3953>>
\end<<3954>>it<<3954>>
\begin<<5922>>tex2html_deferred<<5922>>\par\end<<5923>>tex2html_deferred<<5923>>
 
  \paragraph<<4869>>Ejercicios<<4869>>
  \begin<<4870>>tabular<<4870>><<4871>>c<<4871>>
  \end<<4872>>tabular<<4872>>

\begin<<5924>>tex2html_deferred<<5924>>\par\end<<5925>>tex2html_deferred<<5925>>
\begin<<4658>>theorem_type<<4658>>[exercise][exercise][section][][][]
\begin<<3957>>itemize<<3957>>
\item
Indique la salida del siguiente programa:
<tex2html_verbatim_mark>rawhtml1228#
\end<<3958>>itemize<<3958>>
\begin<<5926>>tex2html_deferred<<5926>>\par\end<<5927>>tex2html_deferred<<5927>>\end<<4659>>theorem_type<<4659>>
\begin<<5928>>tex2html_deferred<<5928>>\par\end<<5929>>tex2html_deferred<<5929>>
\subsection<<3960>>Depuración de Expresiones Regulares<<3960>>
\begin<<5930>>tex2html_deferred<<5930>>\par\end<<5931>>tex2html_deferred<<5931>>
Para obtener información sobre la forma en que es compilada una expresión regular
y como se produce el proceso de matching podemos usar la opción
<tex2html_verb_mark>704<tex2html_verb_mark> del módulo <tex2html_verb_mark>705<tex2html_verb_mark>. La versión de Perl 5.10 da una información 
algo mas legible que la de las versiones anteriores:
\begin<<5932>>tex2html_deferred<<5932>>\par\end<<5933>>tex2html_deferred<<5933>>
\begin<<3961>>tex2html_preform<<3961>><tex2html_verbatim_mark>verbatim1229#\end<<3962>>tex2html_preform<<3962>>
\begin<<5934>>tex2html_deferred<<5934>>\par\end<<5935>>tex2html_deferred<<5935>>
Si se usa la opción <tex2html_verb_mark>706<tex2html_verb_mark> de <tex2html_verb_mark>707<tex2html_verb_mark> con 
objetos expresión regular, se obtendrá información durante el proceso de 
matching:
\begin<<3963>>tex2html_preform<<3963>><tex2html_verbatim_mark>verbatim1230#\end<<3964>>tex2html_preform<<3964>>
\begin<<5936>>tex2html_deferred<<5936>>\par\end<<5937>>tex2html_deferred<<5937>>
\subsection<<3965>>Tablas de Escapes, Metacarácteres, Cuantificadores, Clases<<3965>>
\label<<3966>>section:abreviadas<<3966>>
Sigue una sección de tablas con 
notaciones tomada de \htmladdnormallink<<4873>><<4875>>\begin<<5938>>tex2html_deferred<<5938>>\tt\end<<5939>>tex2html_deferred<<5939>>perlre<<4875>><<4873>>
<<4874>>http://search.cpan.org/perldoc/?perlre<<4874>>:
\begin<<5940>>tex2html_deferred<<5940>>\par\end<<5941>>tex2html_deferred<<5941>>
 
  \paragraph<<4876>>Metacharacters<<4876>>
  \begin<<4877>>tabular<<4877>><<4878>>c<<4878>>
  \end<<4879>>tabular<<4879>>

\begin<<5942>>tex2html_deferred<<5942>>\par\end<<5943>>tex2html_deferred<<5943>>
The following metacharacters have their standard egrep-ish meanings:
\begin<<5944>>tex2html_deferred<<5944>>\par\end<<5945>>tex2html_deferred<<5945>>
\begin<<3969>>tex2html_preform<<3969>><tex2html_verbatim_mark>verbatim1231#\end<<3970>>tex2html_preform<<3970>>
\begin<<5946>>tex2html_deferred<<5946>>\par\end<<5947>>tex2html_deferred<<5947>>
 
  \paragraph<<4880>>Standard greedy quantifiers<<4880>>
  \begin<<4881>>tabular<<4881>><<4882>>c<<4882>>
  \end<<4883>>tabular<<4883>>

\begin<<5948>>tex2html_deferred<<5948>>\par\end<<5949>>tex2html_deferred<<5949>>
The following standard greedy quantifiers are recognized:
\begin<<5950>>tex2html_deferred<<5950>>\par\end<<5951>>tex2html_deferred<<5951>>
\begin<<3972>>tex2html_preform<<3972>><tex2html_verbatim_mark>verbatim1232#\end<<3973>>tex2html_preform<<3973>>
\begin<<5952>>tex2html_deferred<<5952>>\par\end<<5953>>tex2html_deferred<<5953>>
 
  \paragraph<<4884>>Non greedy quantifiers<<4884>>
  \begin<<4885>>tabular<<4885>><<4886>>c<<4886>>
  \end<<4887>>tabular<<4887>>

\begin<<5954>>tex2html_deferred<<5954>>\par\end<<5955>>tex2html_deferred<<5955>>
The following non greedy quantifiers are recognized:
\begin<<5956>>tex2html_deferred<<5956>>\par\end<<5957>>tex2html_deferred<<5957>>
\begin<<3975>>tex2html_preform<<3975>><tex2html_verbatim_mark>verbatim1233#\end<<3976>>tex2html_preform<<3976>>
\begin<<5958>>tex2html_deferred<<5958>>\par\end<<5959>>tex2html_deferred<<5959>>
 
  \paragraph<<4888>>Possesive quantifiers<<4888>>
  \begin<<4889>>tabular<<4889>><<4890>>c<<4890>>
  \end<<4891>>tabular<<4891>>

\begin<<5960>>tex2html_deferred<<5960>>\par\end<<5961>>tex2html_deferred<<5961>>
The following possesive quantifiers are recognized:
\begin<<5962>>tex2html_deferred<<5962>>\par\end<<5963>>tex2html_deferred<<5963>>
\begin<<3978>>tex2html_preform<<3978>><tex2html_verbatim_mark>verbatim1234#\end<<3979>>tex2html_preform<<3979>>
\begin<<5964>>tex2html_deferred<<5964>>\par\end<<5965>>tex2html_deferred<<5965>>
 
  \paragraph<<4892>>Escape sequences<<4892>>
  \begin<<4893>>tabular<<4893>><<4894>>c<<4894>>
  \end<<4895>>tabular<<4895>>

\begin<<5966>>tex2html_deferred<<5966>>\par\end<<5967>>tex2html_deferred<<5967>>
\begin<<3981>>tex2html_preform<<3981>><tex2html_verbatim_mark>verbatim1235#\end<<3982>>tex2html_preform<<3982>>
\begin<<5968>>tex2html_deferred<<5968>>\par\end<<5969>>tex2html_deferred<<5969>>
\begin<<4660>>theorem_type<<4660>>[exercise][exercise][section][][][]
Explique la salida:
\begin<<3984>>tex2html_preform<<3984>><tex2html_verbatim_mark>verbatim1236#\end<<3985>>tex2html_preform<<3985>>\end<<4661>>theorem_type<<4661>>
\begin<<5970>>tex2html_deferred<<5970>>\par\end<<5971>>tex2html_deferred<<5971>>
 
  \paragraph<<4896>>Character Classes and other Special Escapes<<4896>>
  \begin<<4897>>tabular<<4897>><<4898>>c<<4898>>
  \end<<4899>>tabular<<4899>>

\begin<<5972>>tex2html_deferred<<5972>>\par\end<<5973>>tex2html_deferred<<5973>>
\begin<<3988>>tex2html_preform<<3988>><tex2html_verbatim_mark>verbatim1237#\end<<3989>>tex2html_preform<<3989>>
\begin<<5974>>tex2html_deferred<<5974>>\par\end<<5975>>tex2html_deferred<<5975>>
 
  \paragraph<<4900>>Zero width assertions<<4900>>
  \begin<<4901>>tabular<<4901>><<4902>>c<<4902>>
  \end<<4903>>tabular<<4903>>

\begin<<5976>>tex2html_deferred<<5976>>\par\end<<5977>>tex2html_deferred<<5977>>
Perl defines the following zero-width assertions:
\begin<<5978>>tex2html_deferred<<5978>>\par\end<<5979>>tex2html_deferred<<5979>>
\begin<<3991>>tex2html_preform<<3991>><tex2html_verbatim_mark>verbatim1238#\end<<3992>>tex2html_preform<<3992>>
\begin<<5980>>tex2html_deferred<<5980>>\par\end<<5981>>tex2html_deferred<<5981>>
\subsubsection<<3993>>The POSIX character class syntax<<3993>>
\begin<<5982>>tex2html_deferred<<5982>>\par\end<<5983>>tex2html_deferred<<5983>>
The POSIX character class syntax:
\begin<<5984>>tex2html_deferred<<5984>>\par\end<<5985>>tex2html_deferred<<5985>>
\begin<<3994>>tex2html_preform<<3994>><tex2html_verbatim_mark>verbatim1239#\end<<3995>>tex2html_preform<<3995>>
\begin<<5986>>tex2html_deferred<<5986>>\par\end<<5987>>tex2html_deferred<<5987>>
is also available. Note that the <tex2html_verb_mark>708<tex2html_verb_mark> and <tex2html_verb_mark>709<tex2html_verb_mark> brackets are literal; 
they must always be used within a character class expression.
\begin<<5988>>tex2html_deferred<<5988>>\par\end<<5989>>tex2html_deferred<<5989>>
\begin<<3996>>tex2html_preform<<3996>><tex2html_verbatim_mark>verbatim1240#\end<<3997>>tex2html_preform<<3997>>
\begin<<5990>>tex2html_deferred<<5990>>\par\end<<5991>>tex2html_deferred<<5991>>
 
  \paragraph<<4904>>Available classes<<4904>>
  \begin<<4905>>tabular<<4905>><<4906>>c<<4906>>
  \end<<4907>>tabular<<4907>>

\begin<<5992>>tex2html_deferred<<5992>>\par\end<<5993>>tex2html_deferred<<5993>>
The available classes and their backslash equivalents (if available) are as follows:
\begin<<5994>>tex2html_deferred<<5994>>\par\end<<5995>>tex2html_deferred<<5995>>
\begin<<3999>>tex2html_preform<<3999>><tex2html_verbatim_mark>verbatim1241#\end<<4000>>tex2html_preform<<4000>>
\begin<<5996>>tex2html_deferred<<5996>>\par\end<<5997>>tex2html_deferred<<5997>>
For example use <tex2html_verb_mark>710<tex2html_verb_mark> to match all the uppercase characters. 
Note that the <tex2html_verb_mark>711<tex2html_verb_mark> are part of the <tex2html_verb_mark>712<tex2html_verb_mark>
construct, not part of the whole character class. For example:
\begin<<5998>>tex2html_deferred<<5998>>\par\end<<5999>>tex2html_deferred<<5999>>
\begin<<4001>>tex2html_preform<<4001>><tex2html_verbatim_mark>verbatim1242#\end<<4002>>tex2html_preform<<4002>>
\begin<<6000>>tex2html_deferred<<6000>>\par\end<<6001>>tex2html_deferred<<6001>>
matches zero, one, any alphabetic character, and the percent sign.
\begin<<6002>>tex2html_deferred<<6002>>\par\end<<6003>>tex2html_deferred<<6003>>
 
  \paragraph<<4908>>Equivalences to Unicode<<4908>>
  \begin<<4909>>tabular<<4909>><<4910>>c<<4910>>
  \end<<4911>>tabular<<4911>>

\begin<<6004>>tex2html_deferred<<6004>>\par\end<<6005>>tex2html_deferred<<6005>>
The following equivalences to Unicode 
<tex2html_verb_mark>713<tex2html_verb_mark> constructs and equivalent backslash 
character classes (if available), will hold:
\begin<<6006>>tex2html_deferred<<6006>>\par\end<<6007>>tex2html_deferred<<6007>>
\begin<<4004>>tex2html_preform<<4004>><tex2html_verbatim_mark>verbatim1243#\end<<4005>>tex2html_preform<<4005>>
\begin<<6008>>tex2html_deferred<<6008>>\par\end<<6009>>tex2html_deferred<<6009>>
 
  \paragraph<<4912>>Negated character classes<<4912>>
  \begin<<4913>>tabular<<4913>><<4914>>c<<4914>>
  \end<<4915>>tabular<<4915>>

\begin<<6010>>tex2html_deferred<<6010>>\par\end<<6011>>tex2html_deferred<<6011>>
You can negate the <tex2html_verb_mark>714<tex2html_verb_mark> character classes by prefixing 
the class name with a <tex2html_verb_mark>715<tex2html_verb_mark>. This is a Perl extension. For example:
\begin<<6012>>tex2html_deferred<<6012>>\par\end<<6013>>tex2html_deferred<<6013>>
\begin<<4007>>tex2html_preform<<4007>><tex2html_verbatim_mark>verbatim1244#\end<<4008>>tex2html_preform<<4008>>
\begin<<6014>>tex2html_deferred<<6014>>\par\end<<6015>>tex2html_deferred<<6015>>
\subsection<<4009>>Variables especiales después de un emparejamiento<<4009>>
\label<<4010>>section:variablesmagicasereg<<4010>>
Despues de un emparejamiento con éxito, las siguientes variables 
especiales quedan definidas:
\begin<<6016>>tex2html_deferred<<6016>>\par\end<<6017>>tex2html_deferred<<6017>>
\vspace<<4011>>0.5cm<<4011>>
\begin<<4012>>tabular<<4012>><<4013>>|l|l|<<4013>>
\hline
<tex2html_verb_mark>716<tex2html_verb_mark> ;SPMamp; El texto que casó\\ 
\hline
<tex2html_verb_mark>717<tex2html_verb_mark> ;SPMamp; El texto que está a la izquierda de lo que casó\\ 
\hline
<tex2html_verb_mark>718<tex2html_verb_mark> ;SPMamp; El texto que está a la derecha de lo que casó\\ 
\hline
<tex2html_verb_mark>719<tex2html_verb_mark>, etc. ;SPMamp; Los textos capturados por los paréntesis\\ 
\hline
<tex2html_verb_mark>720<tex2html_verb_mark> ;SPMamp; Una copia del <tex2html_verb_mark>721<tex2html_verb_mark> \ldots con número mas alto\\ 
\hline
<tex2html_verb_mark>722<tex2html_verb_mark> ;SPMamp; Desplazamientos de las subcadenas que casan en <tex2html_verb_mark>723<tex2html_verb_mark> \ldots \\ 
\hline
<tex2html_verb_mark>724<tex2html_verb_mark> ;SPMamp; Desplazamientos de los finales de las subcadenas  en <tex2html_verb_mark>725<tex2html_verb_mark> \ldots \\ 
\hline
<tex2html_verb_mark>726<tex2html_verb_mark> ;SPMamp; El índice del último paréntesis que casó\\ 
\hline
<tex2html_verb_mark>727<tex2html_verb_mark> ;SPMamp; El índice del último paréntesis en la última expresión regular\\ 
\hline
\end<<4014>>tabular<<4014>>
\begin<<6018>>tex2html_deferred<<6018>>\par\end<<6019>>tex2html_deferred<<6019>>
 
  \paragraph<<4916>>Las Variables de match, pre-match y post-mach<<4916>>
  \begin<<4917>>tabular<<4917>><<4918>>c<<4918>>
  \end<<4919>>tabular<<4919>>

\label<<4016>>parrafo:prematch<<4016>>
\begin<<6020>>tex2html_deferred<<6020>>\par\end<<6021>>tex2html_deferred<<6021>>
\vspace<<4017>>0.5cm<<4017>>
Ejemplo:
\begin<<4018>>tex2html_preform<<4018>><tex2html_verbatim_mark>verbatim1245#\end<<4019>>tex2html_preform<<4019>>
\begin<<6022>>tex2html_deferred<<6022>>\par\end<<6023>>tex2html_deferred<<6023>>
\begin<<4020>>tex2html_preform<<4020>><tex2html_verbatim_mark>verbatim1246#\end<<4021>>tex2html_preform<<4021>>
\begin<<6024>>tex2html_deferred<<6024>>\par\end<<6025>>tex2html_deferred<<6025>>
El uso de estas variables tenía un efecto negativo en el rendimiento de la
regexp. Véase
\htmladdnormallink<<4920>><<4922>>\begin<<6026>>tex2html_deferred<<6026>>\tt\end<<6027>>tex2html_deferred<<6027>>perlfaq6<<4922>><<4920>>
<<4921>>http://search.cpan.org/perldoc/?perlfaq6<<4921>> la sección 
<tex2html_verb_mark>728<tex2html_verb_mark>.
\begin<<6028>>tex2html_deferred<<6028>>\par\end<<6029>>tex2html_deferred<<6029>>
\begin<<4023>>it<<4023>>
\begin<<4024>>quotation<<4024>>
Once Perl sees that you need one of these variables anywhere in the
program, it provides them on each and every pattern match. That means
that on every pattern match the entire string will be copied, part of
it to <tex2html_verb_mark>729<tex2html_verb_mark>, part to <tex2html_verb_mark>730<tex2html_verb_mark>, and part to <tex2html_verb_mark>731<tex2html_verb_mark>. 
Thus the penalty is most severe
with long strings and patterns that match often. Avoid <tex2html_verb_mark>732<tex2html_verb_mark>, <tex2html_verb_mark>733<tex2html_verb_mark>, and <tex2html_verb_mark>734<tex2html_verb_mark>
if you can, but if you can't, once you've used them at all, use them at
will because you've already paid the price. Remember that some algorithms
really appreciate them. As of the 5.005 release, the <tex2html_verb_mark>735<tex2html_verb_mark> variable is no
longer ;SPMquot;expensive;SPMquot; the way the other two are.
\begin<<6030>>tex2html_deferred<<6030>>\par\end<<6031>>tex2html_deferred<<6031>>
Since Perl 5.6.1 the special variables <tex2html_verb_mark>736<tex2html_verb_mark> and <tex2html_verb_mark>737<tex2html_verb_mark> can functionally replace
<tex2html_verb_mark>738<tex2html_verb_mark>, <tex2html_verb_mark>739<tex2html_verb_mark> and <tex2html_verb_mark>740<tex2html_verb_mark>. These arrays contain pointers to the beginning and end of
each match (see \htmladdnormallink<<4923>><<4925>>\begin<<6032>>tex2html_deferred<<6032>>\tt\end<<6033>>tex2html_deferred<<6033>>perlvar<<4925>><<4923>>
<<4924>>http://search.cpan.org/perldoc/?perlvar<<4924>> for the full story), so they give you essentially
the same information, but without the risk of excessive string copying.
\begin<<6034>>tex2html_deferred<<6034>>\par\end<<6035>>tex2html_deferred<<6035>>
Perl 5.10 added three specials, <tex2html_verb_mark>741<tex2html_verb_mark>, <tex2html_verb_mark>742<tex2html_verb_mark>, and <tex2html_verb_mark>743<tex2html_verb_mark>
to do the same job but without the global performance penalty. Perl
5.10 only sets these variables if you compile or execute the regular
expression with the <tex2html_verb_mark>744<tex2html_verb_mark> modifier.
\end<<4026>>quotation<<4026>>
\end<<4027>>it<<4027>>
\begin<<6036>>tex2html_deferred<<6036>>\par\end<<6037>>tex2html_deferred<<6037>>
\begin<<4028>>tex2html_preform<<4028>><tex2html_verbatim_mark>verbatim1247#\end<<4029>>tex2html_preform<<4029>>
\begin<<6038>>tex2html_deferred<<6038>>\par\end<<6039>>tex2html_deferred<<6039>>
Véase 
\begin<<4030>>itemize<<4030>>
\item
\htmladdnormallink<<4926>><<4928>>\begin<<6040>>tex2html_deferred<<6040>>\tt\end<<6041>>tex2html_deferred<<6041>>perlvar<<4928>><<4926>>
<<4927>>http://search.cpan.org/perldoc/?perlvar<<4927>> (busque por <tex2html_verb_mark>745<tex2html_verb_mark>)
\end<<4032>>itemize<<4032>>
\begin<<6042>>tex2html_deferred<<6042>>\par\end<<6043>>tex2html_deferred<<6043>>
 
  \paragraph<<4929>>Texto Asociado con el Último Paréntesis<<4929>>
  \begin<<4930>>tabular<<4930>><<4931>>c<<4931>>
  \end<<4932>>tabular<<4932>>

\begin<<6044>>tex2html_deferred<<6044>>\par\end<<6045>>tex2html_deferred<<6045>>
La variable <tex2html_verb_mark>746<tex2html_verb_mark> contiene el texto que casó
con el último paréntesis en el patrón. Esto es útil
en situaciones en las cuáles una de un conjunto de alternativas 
casa, pero no sabemos cuál:
\begin<<6046>>tex2html_deferred<<6046>>\par\end<<6047>>tex2html_deferred<<6047>>
\begin<<4034>>tex2html_preform<<4034>><tex2html_verbatim_mark>verbatim1248#\end<<4035>>tex2html_preform<<4035>>
\begin<<6048>>tex2html_deferred<<6048>>\par\end<<6049>>tex2html_deferred<<6049>>
 
  \paragraph<<4933>>Los Offsets de los Inicios de los Casamientos: <<4937>>\begin<<6050>>tex2html_deferred<<6050>>\tt\end<<6051>>tex2html_deferred<<6051>>@-<<4937>><<4933>>
  \begin<<4934>>tabular<<4934>><<4935>>c<<4935>>
  \end<<4936>>tabular<<4936>>

\label<<4037>>parrafo:iniciocas<<4037>>
\begin<<6052>>tex2html_deferred<<6052>>\par\end<<6053>>tex2html_deferred<<6053>>
El vector <tex2html_verb_mark>747<tex2html_verb_mark> contiene los \emph<<4038>>offsets<<4038>> o desplazamientos
de los casamientos en la última expresión regular.
La entrada <tex2html_verb_mark>748<tex2html_verb_mark> es el desplazamiento del último casamiento con éxito
y <tex2html_verb_mark>749<tex2html_verb_mark> es el desplazamiento de la subcadena que casa
con el <tex2html_verb_mark>750<tex2html_verb_mark>-ésimo paréntesis (o <tex2html_verb_mark>751<tex2html_verb_mark> si el párentesis
no casó). Por ejemplo:
\begin<<6054>>tex2html_deferred<<6054>>\par\end<<6055>>tex2html_deferred<<6055>>
\begin<<4039>>tex2html_preform<<4039>><tex2html_verbatim_mark>verbatim1249#\end<<4040>>tex2html_preform<<4040>>
El resultado se interpreta como sigue:
\begin<<4041>>itemize<<4041>>
\item 3 = desplazamiento de comienzo de <tex2html_verb_mark>752<tex2html_verb_mark> 
\item 4 = desplazamiento de comienzo de <tex2html_verb_mark>753<tex2html_verb_mark>
\item 6 = desplazamiento de comienzo de <tex2html_verb_mark>754<tex2html_verb_mark>
\item 7 = desplazamiento de comienzo de <tex2html_verb_mark>755<tex2html_verb_mark>
\end<<4042>>itemize<<4042>>
\begin<<6056>>tex2html_deferred<<6056>>\par\end<<6057>>tex2html_deferred<<6057>>
Esto es lo que dice \htmladdnormallink<<4938>><<4940>>\begin<<6058>>tex2html_deferred<<6058>>\tt\end<<6059>>tex2html_deferred<<6059>>perlvar<<4940>><<4938>>
<<4939>>http://search.cpan.org/perldoc/?perlvar<<4939>> sobre <tex2html_verb_mark>756<tex2html_verb_mark>:
\begin<<6060>>tex2html_deferred<<6060>>\par\end<<6061>>tex2html_deferred<<6061>>
\begin<<4044>>it<<4044>>\begin<<4045>>quotation<<4045>>
This array holds the offsets of the beginnings of the last successful
submatches in the currently active dynamic scope. <tex2html_verb_mark>757<tex2html_verb_mark> is the offset
into the string of the beginning of the entire match. The nth element of
this array holds the offset of the nth submatch, so <tex2html_verb_mark>758<tex2html_verb_mark> is the offset
where <tex2html_verb_mark>759<tex2html_verb_mark> begins, <tex2html_verb_mark>760<tex2html_verb_mark> the offset where <tex2html_verb_mark>761<tex2html_verb_mark> begins, and so on.
\begin<<6062>>tex2html_deferred<<6062>>\par\end<<6063>>tex2html_deferred<<6063>>
After a match against some variable <tex2html_verb_mark>762<tex2html_verb_mark>:
\begin<<6064>>tex2html_deferred<<6064>>\par\end<<6065>>tex2html_deferred<<6065>>
\begin<<4046>>tex2html_preform<<4046>><tex2html_verbatim_mark>verbatim1250#\end<<4047>>tex2html_preform<<4047>>
\begin<<6066>>tex2html_deferred<<6066>>\par\end<<6067>>tex2html_deferred<<6067>>
\end<<4048>>quotation<<4048>>\end<<4049>>it<<4049>>
\begin<<6068>>tex2html_deferred<<6068>>\par\end<<6069>>tex2html_deferred<<6069>>
 
  \paragraph<<4941>>Desplazamientos de los Finales de los Emparejamientos: <<4945>>\begin<<6070>>tex2html_deferred<<6070>>\tt\end<<6071>>tex2html_deferred<<6071>>@+<<4945>><<4941>>
  \begin<<4942>>tabular<<4942>><<4943>>c<<4943>>
  \end<<4944>>tabular<<4944>>

\label<<4051>>parrafo:fincas<<4051>>
\begin<<6072>>tex2html_deferred<<6072>>\par\end<<6073>>tex2html_deferred<<6073>>
El array <tex2html_verb_mark>763<tex2html_verb_mark> contiene los desplazamientos de 
los finales de los emparejamientos.
La entrada <tex2html_verb_mark>764<tex2html_verb_mark> contiene el desplazamiento del final de la cadena
del emparejamiento completo.
Siguiendo con el ejemplo anterior:
\begin<<4052>>tex2html_preform<<4052>><tex2html_verbatim_mark>verbatim1251#\end<<4053>>tex2html_preform<<4053>>
El resultado se interpreta como sigue:
\begin<<4054>>itemize<<4054>>
\item 9 = desplazamiento final de <tex2html_verb_mark>765<tex2html_verb_mark> 
\item 6 = desplazamiento final de <tex2html_verb_mark>766<tex2html_verb_mark>
\item 7 = desplazamiento final de <tex2html_verb_mark>767<tex2html_verb_mark>
\item 9 = desplazamiento final de <tex2html_verb_mark>768<tex2html_verb_mark>
\end<<4055>>itemize<<4055>>
\begin<<6074>>tex2html_deferred<<6074>>\par\end<<6075>>tex2html_deferred<<6075>>
 
  \paragraph<<4946>>Número de paréntesis en la última regexp con éxito<<4946>>
  \begin<<4947>>tabular<<4947>><<4948>>c<<4948>>
  \end<<4949>>tabular<<4949>>

\begin<<6076>>tex2html_deferred<<6076>>\par\end<<6077>>tex2html_deferred<<6077>>
Se puede usar <tex2html_verb_mark>769<tex2html_verb_mark> para determinar cuantos parentesis
había en el último emparejamiento que tuvo éxito.
\begin<<4057>>tex2html_preform<<4057>><tex2html_verbatim_mark>verbatim1252#\end<<4058>>tex2html_preform<<4058>>
\begin<<6078>>tex2html_deferred<<6078>>\par\end<<6079>>tex2html_deferred<<6079>>
 
  \paragraph<<4950>>Indice del Ultimo Paréntesis<<4950>>
  \begin<<4951>>tabular<<4951>><<4952>>c<<4952>>
  \end<<4953>>tabular<<4953>>

\label<<4060>>parrafo:lastpar<<4060>>
\begin<<6080>>tex2html_deferred<<6080>>\par\end<<6081>>tex2html_deferred<<6081>>
La variable <tex2html_verb_mark>770<tex2html_verb_mark> contiene el índice del último paréntesis
que casó. Observe la siguiente ejecución con el depurador:
\begin<<4061>>tex2html_preform<<4061>><tex2html_verbatim_mark>verbatim1253#\end<<4062>>tex2html_preform<<4062>>
\begin<<6082>>tex2html_deferred<<6082>>\par\end<<6083>>tex2html_deferred<<6083>>
 
  \paragraph<<4954>><<4958>>\begin<<6084>>tex2html_deferred<<6084>>\tt\end<<6085>>tex2html_deferred<<6085>>@-<<4958>> y <<4959>>\begin<<6086>>tex2html_deferred<<6086>>\tt\end<<6087>>tex2html_deferred<<6087>>@+<<4959>> no tienen que tener el mismo tamaño<<4954>>
  \begin<<4955>>tabular<<4955>><<4956>>c<<4956>>
  \end<<4957>>tabular<<4957>>

\begin<<6088>>tex2html_deferred<<6088>>\par\end<<6089>>tex2html_deferred<<6089>>
En general no puede asumirse que <tex2html_verb_mark>771<tex2html_verb_mark> y <tex2html_verb_mark>772<tex2html_verb_mark> sean 
del mismo tamaño.
\begin<<4065>>tex2html_preform<<4065>><tex2html_verbatim_mark>verbatim1254#\end<<4066>>tex2html_preform<<4066>>
\begin<<6090>>tex2html_deferred<<6090>>\par\end<<6091>>tex2html_deferred<<6091>>
 
  \paragraph<<4960>>Véase También<<4960>>
  \begin<<4961>>tabular<<4961>><<4962>>c<<4962>>
  \end<<4963>>tabular<<4963>>

\begin<<6092>>tex2html_deferred<<6092>>\par\end<<6093>>tex2html_deferred<<6093>>
Para saber más sobre las variables especiales disponibles
consulte 
\begin<<6094>>tex2html_deferred<<6094>>\par\end<<6095>>tex2html_deferred<<6095>>
\begin<<4068>>itemize<<4068>>
\item <tex2html_verb_mark>773<tex2html_verb_mark> \htmladdnormallink<<4964>><<4966>>\begin<<6096>>tex2html_deferred<<6096>>\tt\end<<6097>>tex2html_deferred<<6097>>perlretut<<4966>><<4964>>
<<4965>>http://search.cpan.org/perldoc/?perlretut<<4965>>
\item <tex2html_verb_mark>774<tex2html_verb_mark> \htmladdnormallink<<4967>><<4969>>\begin<<6098>>tex2html_deferred<<6098>>\tt\end<<6099>>tex2html_deferred<<6099>>perlvar<<4969>><<4967>>
<<4968>>http://search.cpan.org/perldoc/?perlvar<<4968>>.
\end<<4071>>itemize<<4071>>
\begin<<6100>>tex2html_deferred<<6100>>\par\end<<6101>>tex2html_deferred<<6101>>
\subsection<<4072>>Ambito Automático<<4072>>
\begin<<6102>>tex2html_deferred<<6102>>\par\end<<6103>>tex2html_deferred<<6103>>
Como sabemos, ciertas variables (como <tex2html_verb_mark>775<tex2html_verb_mark>, <tex2html_verb_mark>776<tex2html_verb_mark> \ldots )
reciben autom\'aticamente un valor con cada operaci\'<<4073>>o<<4073>>n
de ``matching''.  
\begin<<6104>>tex2html_deferred<<6104>>\par\end<<6105>>tex2html_deferred<<6105>>
Considere el siguiente c\'<<4074>>o<<4074>>digo:
\begin<<4075>>tex2html_preform<<4075>><tex2html_verbatim_mark>verbatim1255#\end<<4076>>tex2html_preform<<4076>>
Puesto que <tex2html_verb_mark>777<tex2html_verb_mark> es autom\'aticamente declarada <tex2html_verb_mark>778<tex2html_verb_mark>
a la entrada de cada bloque, no importa lo que se haya
hecho en la funci\'<<4077>>o<<4077>>n <tex2html_verb_mark>779<tex2html_verb_mark>, el valor de 
<tex2html_verb_mark>780<tex2html_verb_mark> en la sentencia <tex2html_verb_mark>781<tex2html_verb_mark> es el correspondiente
al ``matching'' realizado en el <tex2html_verb_mark>782<tex2html_verb_mark>.
\begin<<6106>>tex2html_deferred<<6106>>\par\end<<6107>>tex2html_deferred<<6107>>
\subsection<<4078>>Opciones<<4078>>
\label<<4079>>section:opciones<<4079>>
\begin<<4080>>tabular<<4080>><<4081>>l|l<<4081>>
Modificador ;SPMamp; Significado\\ 
\hline
e           ;SPMamp; evaluar: evaluar el lado derecho de una sustitución como una expresión\\ 
g           ;SPMamp; global: Encontrar todas las ocurrencias\\ 
i           ;SPMamp; ignorar: no distinguir entre mayúsculas y minúsculas\\ 
m           ;SPMamp; multilínea (<tex2html_verb_mark>783<tex2html_verb_mark> y <tex2html_verb_mark>784<tex2html_verb_mark> casan con <tex2html_verb_mark>785<tex2html_verb_mark> internos)\\ 
o           ;SPMamp; optimizar: compilar una sola vez\\ 
s           ;SPMamp; <tex2html_verb_mark>786<tex2html_verb_mark> y <tex2html_verb_mark>787<tex2html_verb_mark> ignoran <tex2html_verb_mark>788<tex2html_verb_mark> pero el punto <tex2html_verb_mark>789<tex2html_verb_mark> ``casa'' con <tex2html_verb_mark>790<tex2html_verb_mark>\\ 
x           ;SPMamp; extendida: permitir comentarios\\ 
\end<<4082>>tabular<<4082>>
\begin<<6108>>tex2html_deferred<<6108>>\par\end<<6109>>tex2html_deferred<<6109>>
 
  \paragraph<<4970>>El Modificador <<4974>>\begin<<6110>>tex2html_deferred<<6110>>\tt\end<<6111>>tex2html_deferred<<6111>>/g<<4974>><<4970>>
  \begin<<4971>>tabular<<4971>><<4972>>c<<4972>>
  \end<<4973>>tabular<<4973>>

\label<<4084>>section:g<<4084>>
La conducta de este modificador depende del contexto. En un contexto de
listas devuelve una lista con todas las subcadenas casadas
por todos los paréntesis en la expresión regular. Si no hubieran 
paréntesis devuelve una lista con todas las cadenas casadas
(como si hubiera paréntesis alrededor del patrón global).
\begin<<6112>>tex2html_deferred<<6112>>\par\end<<6113>>tex2html_deferred<<6113>>
\begin<<4085>>tex2html_preform<<4085>><tex2html_verbatim_mark>verbatim1256#\end<<4086>>tex2html_preform<<4086>>
\begin<<6114>>tex2html_deferred<<6114>>\par\end<<6115>>tex2html_deferred<<6115>>
Observe la salida:
\begin<<4087>>tex2html_preform<<4087>><tex2html_verbatim_mark>verbatim1257#\end<<4088>>tex2html_preform<<4088>>
\begin<<6116>>tex2html_deferred<<6116>>\par\end<<6117>>tex2html_deferred<<6117>>
En un contexto escalar <tex2html_verb_mark>791<tex2html_verb_mark> itera sobre la cadena, devolviendo
cierto cada vez que casa, y falso cuando deja de casar. En otras 
palabras, recuerda donde se quedo la última vez y se recomienza la búsqueda
desde ese punto. Se puede averiguar la posicion del emparejamiento
utilizando la función \index<<4978>><<4980>>\begin<<6118>>tex2html_deferred<<6118>>\tt\end<<6119>>tex2html_deferred<<6119>>pos<<4980>><<4978>>\emph<<4979>><<4981>>\begin<<6120>>tex2html_deferred<<6120>>\tt\end<<6121>>tex2html_deferred<<6121>>pos<<4981>><<4979>>. 
Si por alguna razón modificas la cadena en cuestión, 
la posición de emparejamiento se reestablece al comienzo de la cadena.
\begin<<4090>>tex2html_preform<<4090>><tex2html_verbatim_mark>verbatim1258#\end<<4091>>tex2html_preform<<4091>>
\begin<<6122>>tex2html_deferred<<6122>>\par\end<<6123>>tex2html_deferred<<6123>>
Observe el uso de la variable especial <tex2html_verb_mark>792<tex2html_verb_mark>. 
Esta variable contiene el separador de registros en el fichero de 
entrada. Si se iguala a la cadena vacía usará las líneas 
en blanco como separadores. Se le puede dar el valor de una cadena multicarácter
para usarla como delimitador. Nótese que establecerla a <tex2html_verb_mark>793<tex2html_verb_mark>
es diferente de asignarla a <tex2html_verb_mark>794<tex2html_verb_mark>. Si se deja <tex2html_verb_mark>795<tex2html_verb_mark>, 
la siguiente lectura leerá todo el fichero.
\begin<<6124>>tex2html_deferred<<6124>>\par\end<<6125>>tex2html_deferred<<6125>>
Sigue un ejemplo de ejecución. El programa se llama <tex2html_verb_mark>796<tex2html_verb_mark>.
Introducimos el texto desde <tex2html_verb_mark>797<tex2html_verb_mark>. El programa escribe el
número de párrafos:
\begin<<6126>>tex2html_deferred<<6126>>\par\end<<6127>>tex2html_deferred<<6127>>
\begin<<4092>>tex2html_preform<<4092>><tex2html_verbatim_mark>verbatim1259#\end<<4093>>tex2html_preform<<4093>>
\begin<<6128>>tex2html_deferred<<6128>>\par\end<<6129>>tex2html_deferred<<6129>>
 
  \paragraph<<4982>>La opción <<4986>>\begin<<6130>>tex2html_deferred<<6130>>\tt\end<<6131>>tex2html_deferred<<6131>>e<<4986>>: Evaluación del remplazo<<4982>>
  \begin<<4983>>tabular<<4983>><<4984>>c<<4984>>
  \end<<4985>>tabular<<4985>>

\label<<4095>>section:regeval<<4095>>
La opción <tex2html_verb_mark>798<tex2html_verb_mark> permite la evaluación como expresión perl de la
cadena de reemplazo (En vez de considerarla como una cadena delimitada 
por doble comilla).
\begin<<6132>>tex2html_deferred<<6132>>\par\end<<6133>>tex2html_deferred<<6133>>
\begin<<4096>>tex2html_preform<<4096>><tex2html_verbatim_mark>verbatim1260#\end<<4097>>tex2html_preform<<4097>>
El resultado de la ejecución es:
\begin<<4098>>tex2html_preform<<4098>><tex2html_verbatim_mark>verbatim1261#\end<<4099>>tex2html_preform<<4099>>
\begin<<6134>>tex2html_deferred<<6134>>\par\end<<6135>>tex2html_deferred<<6135>>
Véase un ejemplo con anidamiento de <<4100>>\begin<<6136>>tex2html_deferred<<6136>>\tt\end<<6137>>tex2html_deferred<<6137>>/e<<4100>>:
\begin<<4101>>tex2html_preform<<4101>><tex2html_verbatim_mark>verbatim1262#\end<<4102>>tex2html_preform<<4102>>
El resultado de la ejecución es:
\begin<<4103>>tex2html_preform<<4103>><tex2html_verbatim_mark>verbatim1263#\end<<4104>>tex2html_preform<<4104>>
\begin<<6138>>tex2html_deferred<<6138>>\par\end<<6139>>tex2html_deferred<<6139>>
He aqui una solución que hace uso de <tex2html_verb_mark>799<tex2html_verb_mark> al siguiente ejercicio 
(véase 'Regex to add space after punctuation sign' en \htmladdnormallink<<4987>>PerlMonks<<4987>>
<<4988>>http://www.perlmonks.org/?node_id=319742<<4988>>)
Se quiere poner un espacio en blanco después de la aparición de cada coma:
\begin<<4106>>tex2html_preform<<4106>><tex2html_verbatim_mark>verbatim1264#\end<<4107>>tex2html_preform<<4107>>
pero se quiere que la sustitución no tenga lugar si la coma esta incrustada entre
dos dígitos. Además se pide que si hay ya un espacio después de la coma,
no se duplique
\begin<<6140>>tex2html_deferred<<6140>>\par\end<<6141>>tex2html_deferred<<6141>>
\begin<<4108>>tex2html_preform<<4108>><tex2html_verbatim_mark>verbatim1265#\end<<4109>>tex2html_preform<<4109>>
\begin<<6142>>tex2html_deferred<<6142>>\par\end<<6143>>tex2html_deferred<<6143>>
Se hace uso de un lookahead negativo <tex2html_verb_mark>800<tex2html_verb_mark>.
Véase la sección \ref<<4110>>subsection:lookaheadlookbehind<<4110>> para entender como funciona
un lookahead negativo.
\begin<<6144>>tex2html_deferred<<6144>>\par\end<<6145>>tex2html_deferred<<6145>>
\section<<4111>>Algunas Extensiones<<4111>>
\begin<<6146>>tex2html_deferred<<6146>>\par\end<<6147>>tex2html_deferred<<6147>>
\subsection<<4112>>Comentarios<<4112>>
<tex2html_verb_mark>801<tex2html_verb_mark> Un comentario. Se ignora <tex2html_verb_mark>802<tex2html_verb_mark>. 
Si se usa la opción <tex2html_verb_mark>803<tex2html_verb_mark> basta con poner <tex2html_verb_mark>804<tex2html_verb_mark>.
\begin<<6148>>tex2html_deferred<<6148>>\par\end<<6149>>tex2html_deferred<<6149>>
\subsection<<4113>>Modificadores locales<<4113>>
\begin<<6150>>tex2html_deferred<<6150>>\par\end<<6151>>tex2html_deferred<<6151>>
Los modificadores de la conducta de una expresión regular pueden ser 
empotrados en una subexpresión usando el formato <tex2html_verb_mark>805<tex2html_verb_mark>.
\begin<<6152>>tex2html_deferred<<6152>>\par\end<<6153>>tex2html_deferred<<6153>>
Véase el correspondiente texto <<4114>>\begin<<6154>>tex2html_deferred<<6154>>\it\end<<6155>>tex2html_deferred<<6155>>Extended Patterns<<4114>> de 
la sección 'Extended-Patterns' en \htmladdnormallink<<4989>><<4991>>\begin<<6156>>tex2html_deferred<<6156>>\tt\end<<6157>>tex2html_deferred<<6157>>perlre<<4991>><<4989>>
<<4990>>http://perldoc.perl.org/perlre.html\#Extended-Patterns<<4990>>:
\begin<<4117>>it<<4117>>
\begin<<4118>>quotation<<4118>>
One or more embedded pattern-match modifiers, to be turned on (or turned
off, if preceded by '<tex2html_verb_mark>806<tex2html_verb_mark>' ) for the remainder of the pattern or the remainder
of the enclosing pattern group (if any). This is particularly useful
for dynamic patterns, such as those read in from a configuration file,
taken from an argument, or specified in a table somewhere. Consider
the case where some patterns want to be case sensitive and some do not:
The case insensitive ones merely need to include (?i) at the front of
the pattern. For example:
\begin<<6158>>tex2html_deferred<<6158>>\par\end<<6159>>tex2html_deferred<<6159>>
\begin<<4119>>tex2html_preform<<4119>><tex2html_verbatim_mark>verbatim1266#\end<<4120>>tex2html_preform<<4120>>
\begin<<6160>>tex2html_deferred<<6160>>\par\end<<6161>>tex2html_deferred<<6161>>
These modifiers are restored at the end of the enclosing group. For example,
\begin<<6162>>tex2html_deferred<<6162>>\par\end<<6163>>tex2html_deferred<<6163>>
\begin<<4121>>tex2html_preform<<4121>><tex2html_verbatim_mark>verbatim1267#\end<<4122>>tex2html_preform<<4122>>
\begin<<6164>>tex2html_deferred<<6164>>\par\end<<6165>>tex2html_deferred<<6165>>
will match <tex2html_verb_mark>807<tex2html_verb_mark> in any case, some spaces, and an exact (including the
case!) repetition of the previous word, assuming the <tex2html_verb_mark>808<tex2html_verb_mark> modifier, and
no <tex2html_verb_mark>809<tex2html_verb_mark> modifier outside this group.
\end<<4123>>quotation<<4123>>
\end<<4124>>it<<4124>>
\begin<<6166>>tex2html_deferred<<6166>>\par\end<<6167>>tex2html_deferred<<6167>>
El siguiente ejemplo extiende el ejemplo visto en
la sección
\ref<<4125>>parrfo:comments<<4125>>
eliminando los comentarios <tex2html_verb_mark>810<tex2html_verb_mark> y <tex2html_verb_mark>811<tex2html_verb_mark>
de un programa C. En dicho ejemplo se usaba el modificador <tex2html_verb_mark>812<tex2html_verb_mark> 
para hacer que el punto casara con cualquier carácter:
\begin<<6168>>tex2html_deferred<<6168>>\par\end<<6169>>tex2html_deferred<<6169>>
<tex2html_verbatim_mark>rawhtml1268#
Sigue un ejemplo de ejecución. Usaremos como entrada el programa C:
\begin<<4126>>tex2html_preform<<4126>><tex2html_verbatim_mark>verbatim1269#\end<<4127>>tex2html_preform<<4127>>
Al ejecutar el programa eliminamos los comentarios:
\begin<<4128>>tex2html_preform<<4128>><tex2html_verbatim_mark>verbatim1270#\end<<4129>>tex2html_preform<<4129>>
\begin<<6170>>tex2html_deferred<<6170>>\par\end<<6171>>tex2html_deferred<<6171>>
\subsection<<4130>>Mirando hacia adetrás y hacia adelante<<4130>>
\label<<4131>>subsection:lookaheadlookbehind<<4131>>
\begin<<6172>>tex2html_deferred<<6172>>\par\end<<6173>>tex2html_deferred<<6173>>
El siguiente fragmento esta 'casi' literalmente tomado
de la sección 'Looking-ahead-and-looking-behind' en \htmladdnormallink<<4992>><<4994>>\begin<<6174>>tex2html_deferred<<6174>>\tt\end<<6175>>tex2html_deferred<<6175>>perlretut<<4994>><<4992>>
<<4993>>http://perldoc.perl.org/perlretut.html\#Looking-ahead-and-looking-behind<<4993>>:
\begin<<6176>>tex2html_deferred<<6176>>\par\end<<6177>>tex2html_deferred<<6177>>
\begin<<4134>>it<<4134>>
\begin<<6178>>tex2html_deferred<<6178>>\par\end<<6179>>tex2html_deferred<<6179>>
 
  \paragraph<<4995>>Las zero-width assertions como caso particular de mirar atrás-adelante<<4995>>
  \begin<<4996>>tabular<<4996>><<4997>>c<<4997>>
  \end<<4998>>tabular<<4998>>

\begin<<6180>>tex2html_deferred<<6180>>\par\end<<6181>>tex2html_deferred<<6181>>
In Perl regular expressions, most regexp elements 'eat up' a certain
amount of string when they match. For instance, the regexp element
<tex2html_verb_mark>813<tex2html_verb_mark> eats up one character of the string when it matches, in the sense
that Perl moves to the next character position in the string after the
match. There are some elements, however, that don't eat up characters
(advance the character position) if they match. 
\begin<<6182>>tex2html_deferred<<6182>>\par\end<<6183>>tex2html_deferred<<6183>>
The examples we have seen
so far are the anchors. The anchor <tex2html_verb_mark>814<tex2html_verb_mark> matches the beginning of the line,
but doesn't eat any characters. 
\begin<<6184>>tex2html_deferred<<6184>>\par\end<<6185>>tex2html_deferred<<6185>>
Similarly, the word boundary anchor
<tex2html_verb_mark>815<tex2html_verb_mark> matches wherever a character matching <tex2html_verb_mark>816<tex2html_verb_mark> is next to a character that
doesn't, but it doesn't eat up any characters itself. 
\begin<<6186>>tex2html_deferred<<6186>>\par\end<<6187>>tex2html_deferred<<6187>>
Anchors are examples
of \index<<4999>>zero-width assertions<<4999>>\emph<<5000>>zero-width assertions<<5000>>. Zero-width, because they consume no characters,
and assertions, because they test some property of the string. 
\begin<<6188>>tex2html_deferred<<6188>>\par\end<<6189>>tex2html_deferred<<6189>>
In the
context of our walk in the woods analogy to regexp matching, most regexp
elements move us along a trail, but anchors have us stop a moment and
check our surroundings. If the local environment checks out, we can
proceed forward. But if the local environment doesn't satisfy us, we
must backtrack.
\begin<<6190>>tex2html_deferred<<6190>>\par\end<<6191>>tex2html_deferred<<6191>>
Checking the environment entails either looking ahead on the trail,
looking behind, or both. 
\begin<<6192>>tex2html_deferred<<6192>>\par\end<<6193>>tex2html_deferred<<6193>>
\begin<<4137>>itemize<<4137>>
\item
<tex2html_verb_mark>817<tex2html_verb_mark> looks behind, to see that there are no
characters before. 
\item
<tex2html_verb_mark>818<tex2html_verb_mark> looks ahead, to see that there are no characters
after. 
\item
<tex2html_verb_mark>819<tex2html_verb_mark> looks both ahead and behind, to see if the characters on either
side differ in their ;SPMquot;word-ness;SPMquot;.
\end<<4138>>itemize<<4138>>
\begin<<6194>>tex2html_deferred<<6194>>\par\end<<6195>>tex2html_deferred<<6195>>
The lookahead and lookbehind assertions are generalizations of the anchor
concept. 
Lookahead and lookbehind are zero-width assertions that let us
specify which characters we want to test for. 
\begin<<6196>>tex2html_deferred<<6196>>\par\end<<6197>>tex2html_deferred<<6197>>
 
  \paragraph<<5001>>Lookahead assertion<<5001>>
  \begin<<5002>>tabular<<5002>><<5003>>c<<5003>>
  \end<<5004>>tabular<<5004>>

\begin<<6198>>tex2html_deferred<<6198>>\par\end<<6199>>tex2html_deferred<<6199>>
The lookahead assertion
is denoted by <tex2html_verb_mark>820<tex2html_verb_mark> and the lookbehind assertion is denoted by
<tex2html_verb_mark>821<tex2html_verb_mark>. 
\begin<<6200>>tex2html_deferred<<6200>>\par\end<<6201>>tex2html_deferred<<6201>>
En español, operador de ``trailing'' o ``mirar-adelante'' positivo. 
Por ejemplo, <tex2html_verb_mark>822<tex2html_verb_mark> solo casa una palabra si va seguida de un tabulador, pero el tabulador no formará parte de <tex2html_verb_mark>823<tex2html_verb_mark>.
Ejemplo:
<tex2html_verbatim_mark>rawhtml1271#
Al ejecutar el programa obtenemos:
\begin<<4140>>tex2html_preform<<4140>><tex2html_verbatim_mark>verbatim1272#\end<<4141>>tex2html_preform<<4141>>
\begin<<6202>>tex2html_deferred<<6202>>\par\end<<6203>>tex2html_deferred<<6203>>
Some examples using the debugger\begin<<6204>>tex2html_deferred<<6204>>\footnote<<4142>>catnip: 
La nepeta cataria, también llamada menta de los gatos, de la familia del tomillo y la lavanda. 
Su perfume desencadena un comportamiento en el animal, similar al del celo<<4142>>\end<<6205>>tex2html_deferred<<6205>>:
\begin<<6206>>tex2html_deferred<<6206>>\par\end<<6207>>tex2html_deferred<<6207>>
<tex2html_verbatim_mark>rawhtml1273#
\begin<<6208>>tex2html_deferred<<6208>>\par\end<<6209>>tex2html_deferred<<6209>>
 
  \paragraph<<5005>>A hard RegEx problem<<5005>>
  \begin<<5006>>tabular<<5006>><<5007>>c<<5007>>
  \end<<5008>>tabular<<5008>>

\begin<<6210>>tex2html_deferred<<6210>>\par\end<<6211>>tex2html_deferred<<6211>>
Véase el nodo <<4144>>\begin<<6212>>tex2html_deferred<<6212>>\it\end<<6213>>tex2html_deferred<<6213>>A hard RegEx problem<<4144>> en \htmladdnormallink<<5009>>PerlMonks<<5009>>
<<5010>>http://www.perlmonks.org/?node_id=645882<<5010>>. 
Un monje solicita:
\begin<<6214>>tex2html_deferred<<6214>>\par\end<<6215>>tex2html_deferred<<6215>>
\begin<<4146>>it<<4146>>
\begin<<4147>>quotation<<4147>>
Hi Monks,
\begin<<6216>>tex2html_deferred<<6216>>\par\end<<6217>>tex2html_deferred<<6217>>
I wanna to match this issues:
\begin<<6218>>tex2html_deferred<<6218>>\par\end<<6219>>tex2html_deferred<<6219>>
\begin<<4148>>enumerate<<4148>>
   \item The string length is between 3 and 10
   \item The string ONLY contains [0-9] or [a-z] or [A-Z], but
   \item The string must contain a number AND a letter at least 
\end<<4149>>enumerate<<4149>>
\begin<<6220>>tex2html_deferred<<6220>>\par\end<<6221>>tex2html_deferred<<6221>>
Pls help me check. Thanks
\end<<4150>>quotation<<4150>>
\end<<4151>>it<<4151>>
\begin<<6222>>tex2html_deferred<<6222>>\par\end<<6223>>tex2html_deferred<<6223>>
Solución:
\begin<<6224>>tex2html_deferred<<6224>>\par\end<<6225>>tex2html_deferred<<6225>>
\begin<<4152>>tex2html_preform<<4152>><tex2html_verbatim_mark>verbatim1274#\end<<4153>>tex2html_preform<<4153>>
\begin<<6226>>tex2html_deferred<<6226>>\par\end<<6227>>tex2html_deferred<<6227>>
 
  \paragraph<<5011>>Los paréntesis looakehaed and lookbehind no capturan<<5011>>
  \begin<<5012>>tabular<<5012>><<5013>>c<<5013>>
  \end<<5014>>tabular<<5014>>

\begin<<6228>>tex2html_deferred<<6228>>\par\end<<6229>>tex2html_deferred<<6229>>
Note that the parentheses in <tex2html_verb_mark>824<tex2html_verb_mark> and <tex2html_verb_mark>825<tex2html_verb_mark>
are non-capturing, since these are zero-width assertions. 
\begin<<6230>>tex2html_deferred<<6230>>\par\end<<6231>>tex2html_deferred<<6231>>
 
  \paragraph<<5015>>Limitaciones del lookbehind<<5015>>
  \begin<<5016>>tabular<<5016>><<5017>>c<<5017>>
  \end<<5018>>tabular<<5018>>

\begin<<6232>>tex2html_deferred<<6232>>\par\end<<6233>>tex2html_deferred<<6233>>
Lookahead
<tex2html_verb_mark>826<tex2html_verb_mark> can match arbitrary regexps, but lookbehind 
<tex2html_verb_mark>827<tex2html_verb_mark>
only works for regexps of fixed width, i.e., a fixed number of characters
long. 
\begin<<6234>>tex2html_deferred<<6234>>\par\end<<6235>>tex2html_deferred<<6235>>
Thus <tex2html_verb_mark>828<tex2html_verb_mark> is fine, but <tex2html_verb_mark>829<tex2html_verb_mark> is not. 
\begin<<6236>>tex2html_deferred<<6236>>\par\end<<6237>>tex2html_deferred<<6237>>
 
  \paragraph<<5019>>Negación de los operadores de lookahead y lookbehind<<5019>>
  \begin<<5020>>tabular<<5020>><<5021>>c<<5021>>
  \end<<5022>>tabular<<5022>>

\begin<<6238>>tex2html_deferred<<6238>>\par\end<<6239>>tex2html_deferred<<6239>>
The negated
versions of the lookahead and lookbehind assertions are denoted by
<tex2html_verb_mark>830<tex2html_verb_mark> and <tex2html_verb_mark>831<tex2html_verb_mark> respectively. 
They evaluate true if
the regexps do not match:
\begin<<4157>>tex2html_preform<<4157>><tex2html_verbatim_mark>verbatim1275#\end<<4158>>tex2html_preform<<4158>>
\begin<<6240>>tex2html_deferred<<6240>>\par\end<<6241>>tex2html_deferred<<6241>>
 
  \paragraph<<5023>>Ejemplo: split con lookahead y lookbehind<<5023>>
  \begin<<5024>>tabular<<5024>><<5025>>c<<5025>>
  \end<<5026>>tabular<<5026>>

\begin<<6242>>tex2html_deferred<<6242>>\par\end<<6243>>tex2html_deferred<<6243>>
Here is an example where a string containing blank-separated words,
numbers and single dashes is to be split into its components. 
\begin<<6244>>tex2html_deferred<<6244>>\par\end<<6245>>tex2html_deferred<<6245>>
Using <tex2html_verb_mark>832<tex2html_verb_mark>
alone won't work, because spaces are not required between dashes, or a
word or a dash. Additional places for a split are established by looking
ahead and behind:
\begin<<4160>>tex2html_preform<<4160>><tex2html_verbatim_mark>verbatim1276#\end<<4161>>tex2html_preform<<4161>>
\end<<4162>>it<<4162>>
\begin<<6246>>tex2html_deferred<<6246>>\par\end<<6247>>tex2html_deferred<<6247>>
 
  \paragraph<<5027>>Look Around en perlre<<5027>>
  \begin<<5028>>tabular<<5028>><<5029>>c<<5029>>
  \end<<5030>>tabular<<5030>>

\begin<<6248>>tex2html_deferred<<6248>>\par\end<<6249>>tex2html_deferred<<6249>>
El siguiente párrafo ha sido extraído la sección 'Look-Around-Assertions' en \htmladdnormallink<<5031>><<5033>>\begin<<6250>>tex2html_deferred<<6250>>\tt\end<<6251>>tex2html_deferred<<6251>>pelre<<5033>><<5031>>
<<5032>>http://perldoc.perl.org/pelre.html\#Look-Around-Assertions<<5032>>.
Usémoslo como texto de repaso:
\begin<<4166>>it<<4166>>
\begin<<4167>>quotation<<4167>>
Look-around assertions are zero width patterns which match a specific
pattern without including it in <tex2html_verb_mark>833<tex2html_verb_mark>. Positive assertions match when their
subpattern matches, negative assertions match when their subpattern
fails. Look-behind matches text up to the current match position,
look-ahead matches text following the current match position.
\begin<<6252>>tex2html_deferred<<6252>>\par\end<<6253>>tex2html_deferred<<6253>>
\begin<<4168>>itemize<<4168>>
\item <tex2html_verb_mark>834<tex2html_verb_mark>
\begin<<6254>>tex2html_deferred<<6254>>\par\end<<6255>>tex2html_deferred<<6255>>
A zero-width positive look-ahead assertion. For example, <tex2html_verb_mark>835<tex2html_verb_mark> 
matches a word followed by a tab, without including the tab in <tex2html_verb_mark>836<tex2html_verb_mark>.
\begin<<6256>>tex2html_deferred<<6256>>\par\end<<6257>>tex2html_deferred<<6257>>
\item <tex2html_verb_mark>837<tex2html_verb_mark>
\begin<<6258>>tex2html_deferred<<6258>>\par\end<<6259>>tex2html_deferred<<6259>>
A zero-width negative look-ahead assertion. For example <tex2html_verb_mark>838<tex2html_verb_mark> 
matches any occurrence of <tex2html_verb_mark>839<tex2html_verb_mark> that isn't followed by <tex2html_verb_mark>840<tex2html_verb_mark>. 
\begin<<6260>>tex2html_deferred<<6260>>\par\end<<6261>>tex2html_deferred<<6261>>
Note however that look-ahead and look-behind are NOT the same thing. 
You cannot use this for look-behind.
\begin<<6262>>tex2html_deferred<<6262>>\par\end<<6263>>tex2html_deferred<<6263>>
If you are looking for a <tex2html_verb_mark>841<tex2html_verb_mark> that isn't preceded by a <tex2html_verb_mark>842<tex2html_verb_mark>,
<tex2html_verb_mark>843<tex2html_verb_mark> will not do what you want. 
\begin<<6264>>tex2html_deferred<<6264>>\par\end<<6265>>tex2html_deferred<<6265>>
That's because the 
<tex2html_verb_mark>844<tex2html_verb_mark> is just saying that the next thing cannot be <tex2html_verb_mark>845<tex2html_verb_mark>
--and it's not, it's a <tex2html_verb_mark>846<tex2html_verb_mark>, so <tex2html_verb_mark>847<tex2html_verb_mark> will match. 
\begin<<6266>>tex2html_deferred<<6266>>\par\end<<6267>>tex2html_deferred<<6267>>
You would have to do something like <tex2html_verb_mark>848<tex2html_verb_mark> for that. 
\begin<<6268>>tex2html_deferred<<6268>>\par\end<<6269>>tex2html_deferred<<6269>>
We say ;SPMquot;like;SPMquot; because there's the case of your <tex2html_verb_mark>849<tex2html_verb_mark> not having
three characters before it. 
\begin<<6270>>tex2html_deferred<<6270>>\par\end<<6271>>tex2html_deferred<<6271>>
You could cover that this way:
<tex2html_verb_mark>850<tex2html_verb_mark>. Sometimes it's still easier just to say:
\begin<<6272>>tex2html_deferred<<6272>>\par\end<<6273>>tex2html_deferred<<6273>>
\begin<<4169>>tex2html_preform<<4169>><tex2html_verbatim_mark>verbatim1277#\end<<4170>>tex2html_preform<<4170>>
\begin<<6274>>tex2html_deferred<<6274>>\par\end<<6275>>tex2html_deferred<<6275>>
For look-behind see below.
\begin<<6276>>tex2html_deferred<<6276>>\par\end<<6277>>tex2html_deferred<<6277>>
\item <tex2html_verb_mark>851<tex2html_verb_mark>
\begin<<6278>>tex2html_deferred<<6278>>\par\end<<6279>>tex2html_deferred<<6279>>
A zero-width positive look-behind assertion. 
\begin<<6280>>tex2html_deferred<<6280>>\par\end<<6281>>tex2html_deferred<<6281>>
For example, <tex2html_verb_mark>852<tex2html_verb_mark>
matches a word that follows a tab, without including the tab in <tex2html_verb_mark>853<tex2html_verb_mark>. 
Works only for fixed-width look-behind.
\begin<<6282>>tex2html_deferred<<6282>>\par\end<<6283>>tex2html_deferred<<6283>>
\item <tex2html_verb_mark>854<tex2html_verb_mark> 
\begin<<6284>>tex2html_deferred<<6284>>\par\end<<6285>>tex2html_deferred<<6285>>
There is a special form of this construct, called <tex2html_verb_mark>855<tex2html_verb_mark> , which causes
the regex engine to 'keep' everything it had matched prior to the <tex2html_verb_mark>856<tex2html_verb_mark>
and not include it in <tex2html_verb_mark>857<tex2html_verb_mark>. This effectively provides variable length
look-behind. The use of <tex2html_verb_mark>858<tex2html_verb_mark> inside of another look-around assertion is
allowed, but the behaviour is currently not well defined.
\begin<<6286>>tex2html_deferred<<6286>>\par\end<<6287>>tex2html_deferred<<6287>>
For various reasons <tex2html_verb_mark>859<tex2html_verb_mark> may be significantly more efficient than the
equivalent <tex2html_verb_mark>860<tex2html_verb_mark> construct, and it is especially useful in situations
where you want to efficiently remove something following something else
in a string. For instance
\begin<<4171>>tex2html_preform<<4171>><tex2html_verbatim_mark>verbatim1278#\end<<4172>>tex2html_preform<<4172>>
\begin<<6288>>tex2html_deferred<<6288>>\par\end<<6289>>tex2html_deferred<<6289>>
can be rewritten as the much more efficient
\begin<<4173>>tex2html_preform<<4173>><tex2html_verbatim_mark>verbatim1279#\end<<4174>>tex2html_preform<<4174>>
\begin<<6290>>tex2html_deferred<<6290>>\par\end<<6291>>tex2html_deferred<<6291>>
Sigue una sesión con el depurador que ilustra la semántica
del operador:
\begin<<6292>>tex2html_deferred<<6292>>\par\end<<6293>>tex2html_deferred<<6293>>
\begin<<4175>>tex2html_preform<<4175>><tex2html_verbatim_mark>verbatim1280#\end<<4176>>tex2html_preform<<4176>>
\begin<<6294>>tex2html_deferred<<6294>>\par\end<<6295>>tex2html_deferred<<6295>>
Otro ejemplo: eliminamos los blancos del final en una cadena:
\begin<<4177>>tex2html_preform<<4177>><tex2html_verbatim_mark>verbatim1281#\end<<4178>>tex2html_preform<<4178>>
\begin<<6296>>tex2html_deferred<<6296>>\par\end<<6297>>tex2html_deferred<<6297>>
\item <tex2html_verb_mark>861<tex2html_verb_mark> 
\begin<<6298>>tex2html_deferred<<6298>>\par\end<<6299>>tex2html_deferred<<6299>>
A zero-width negative look-behind assertion. 
\begin<<6300>>tex2html_deferred<<6300>>\par\end<<6301>>tex2html_deferred<<6301>>
For example <tex2html_verb_mark>862<tex2html_verb_mark> matches any occurrence of 
 <tex2html_verb_mark>863<tex2html_verb_mark> that does not follow <tex2html_verb_mark>864<tex2html_verb_mark>. Works only for fixed-width look-behind.
\end<<4179>>itemize<<4179>>
\begin<<6302>>tex2html_deferred<<6302>>\par\end<<6303>>tex2html_deferred<<6303>>
\end<<4180>>quotation<<4180>>
\end<<4181>>it<<4181>>
\begin<<6304>>tex2html_deferred<<6304>>\par\end<<6305>>tex2html_deferred<<6305>>
Veamos un ejemplo de uso. Se quiere
sustituir las extensiones <tex2html_verb_mark>865<tex2html_verb_mark> por <tex2html_verb_mark>866<tex2html_verb_mark>
en cadenas que contienen una ruta a un fichero:
\begin<<6306>>tex2html_deferred<<6306>>\par\end<<6307>>tex2html_deferred<<6307>>
\begin<<4182>>tex2html_preform<<4182>><tex2html_verbatim_mark>verbatim1282#\end<<4183>>tex2html_preform<<4183>>
\begin<<6308>>tex2html_deferred<<6308>>\par\end<<6309>>tex2html_deferred<<6309>>
Véase también:
\begin<<4184>>itemize<<4184>>
\item \htmladdnormallink<<5034>><<5036>>\begin<<6310>>tex2html_deferred<<6310>>\tt\end<<6311>>tex2html_deferred<<6311>>Regexp::Keep<<5036>><<5034>>
 <<5035>>http://search.cpan.org/perldoc?Regexp::Keep<<5035>> por Jeff Pinyan 
\item El nodo <<4186>>\begin<<6312>>tex2html_deferred<<6312>>\it\end<<6313>>tex2html_deferred<<6313>>positive look behind regexp mystery<<4186>> en \htmladdnormallink<<5037>>PerlMonks<<5037>>
<<5038>>http://www.perlmonks.org/?node_id=701618<<5038>>
\end<<4188>>itemize<<4188>>
\begin<<6314>>tex2html_deferred<<6314>>\par\end<<6315>>tex2html_deferred<<6315>>
 
  \paragraph<<5039>>Operador de predicción negativo: Última ocurrencia<<5039>>
  \begin<<5040>>tabular<<5040>><<5041>>c<<5041>>
  \end<<5042>>tabular<<5042>>

\begin<<6316>>tex2html_deferred<<6316>>\par\end<<6317>>tex2html_deferred<<6317>>
Escriba una expresión regular que encuentre la última aparición de la cadena <tex2html_verb_mark>867<tex2html_verb_mark>
en una cadena dada.
\begin<<4190>>tex2html_preform<<4190>><tex2html_verbatim_mark>verbatim1283#\end<<4191>>tex2html_preform<<4191>>
\begin<<6318>>tex2html_deferred<<6318>>\par\end<<6319>>tex2html_deferred<<6319>>
 
  \paragraph<<5043>>Diferencias entre mirar adelante negativo y mirar adelante con clase negada<<5043>>
  \begin<<5044>>tabular<<5044>><<5045>>c<<5045>>
  \end<<5046>>tabular<<5046>>

\begin<<6320>>tex2html_deferred<<6320>>\par\end<<6321>>tex2html_deferred<<6321>>
Aparentemente el operador ``mirar-adelante'' negativo es parecido a usar el operador ``mirar-adelante'' positivo
con la negación de una clase. 
\begin<<6322>>tex2html_deferred<<6322>>\par\end<<6323>>tex2html_deferred<<6323>>
\begin<<4193>>center<<4193>>
\begin<<4194>>tabular<<4194>><<4636>>p<<4195>>4cm<<4195>>|p<<4196>>4cm<<4196>><<4636>>
\hline
\begin<<4197>>tex2html_preform<<4197>><tex2html_verbatim_mark>verbatim1284#\end<<4198>>tex2html_preform<<4198>>
;SPMamp;
\begin<<4199>>tex2html_preform<<4199>><tex2html_verbatim_mark>verbatim1285#\end<<4200>>tex2html_preform<<4200>>\\ 
\hline
\end<<4201>>tabular<<4201>>
\end<<4202>>center<<4202>>
\begin<<6324>>tex2html_deferred<<6324>>\par\end<<6325>>tex2html_deferred<<6325>>
Sin embargo existen al menos dos diferencias:
\begin<<6326>>tex2html_deferred<<6326>>\par\end<<6327>>tex2html_deferred<<6327>>
\begin<<4203>>itemize<<4203>>
\item
Una negación de una clase debe casar algo para tener éxito. Un `mirar-adelante'' negativo
tiene éxito si, en particular no logra casar con algo. 
Por ejemplo:
\begin<<6328>>tex2html_deferred<<6328>>\par\end<<6329>>tex2html_deferred<<6329>>
<tex2html_verb_mark>868<tex2html_verb_mark> casa con <tex2html_verb_mark>869<tex2html_verb_mark>, mientras que <tex2html_verb_mark>870<tex2html_verb_mark> lo hace, pero porque 
<tex2html_verb_mark>871<tex2html_verb_mark> es <tex2html_verb_mark>872<tex2html_verb_mark> seguido de un carácter que no es el punto:
\begin<<4204>>tex2html_preform<<4204>><tex2html_verbatim_mark>verbatim1286#\end<<4205>>tex2html_preform<<4205>>
\item
Una clase negada casa un único carácter. Un `mirar-adelante'' negativo
puede tener longitud arbitraria.
\end<<4206>>itemize<<4206>>
\begin<<6330>>tex2html_deferred<<6330>>\par\end<<6331>>tex2html_deferred<<6331>>
 
  \paragraph<<5047>>AND y AND NOT<<5047>>
  \begin<<5048>>tabular<<5048>><<5049>>c<<5049>>
  \end<<5050>>tabular<<5050>>
 
\begin<<6332>>tex2html_deferred<<6332>>\par\end<<6333>>tex2html_deferred<<6333>>
Otros dos ejemplos: 
\begin<<6334>>tex2html_deferred<<6334>>\par\end<<6335>>tex2html_deferred<<6335>>
\begin<<4208>>itemize<<4208>>
\item
<tex2html_verb_mark>873<tex2html_verb_mark> 
\begin<<6336>>tex2html_deferred<<6336>>\par\end<<6337>>tex2html_deferred<<6337>>
casa con líneas formadas por secuencias de
letras tales que no todas son mayúsculas.
(Obsérvese el uso de las anclas).
\begin<<6338>>tex2html_deferred<<6338>>\par\end<<6339>>tex2html_deferred<<6339>>
\item
<tex2html_verb_mark>874<tex2html_verb_mark> 
\begin<<6340>>tex2html_deferred<<6340>>\par\end<<6341>>tex2html_deferred<<6341>>
casan con cualquier línea en la que aparezcan 
<tex2html_verb_mark>875<tex2html_verb_mark> y <tex2html_verb_mark>876<tex2html_verb_mark>. Ejemplo:
\begin<<4209>>tex2html_preform<<4209>><tex2html_verbatim_mark>verbatim1287#\end<<4210>>tex2html_preform<<4210>>
El ejemplo muestra que la interpretación es que cada 
operador mirar-adelante se interpreta siempre a partir de
la posición actual de búsqueda. La expresión regular anterior
es básicamente equivalente a <tex2html_verb_mark>877<tex2html_verb_mark>.
\item
<tex2html_verb_mark>878<tex2html_verb_mark> 
\begin<<6342>>tex2html_deferred<<6342>>\par\end<<6343>>tex2html_deferred<<6343>>
casa con cualquier cadena de tres dígitos que no
sea la cadena <tex2html_verb_mark>879<tex2html_verb_mark>.
\end<<4211>>itemize<<4211>>
\begin<<6344>>tex2html_deferred<<6344>>\par\end<<6345>>tex2html_deferred<<6345>>
 
  \paragraph<<5051>>Lookahead negativo versus lookbehind<<5051>>
  \begin<<5052>>tabular<<5052>><<5053>>c<<5053>>
  \end<<5054>>tabular<<5054>>

\begin<<6346>>tex2html_deferred<<6346>>\par\end<<6347>>tex2html_deferred<<6347>>
Nótese que el ``mirar-adelante'' negativo
no puede usarse fácilmente para imitar un ``mirar-atrás'',
esto es, que no se puede imitar la conducta de
<tex2html_verb_mark>880<tex2html_verb_mark> mediante
algo como <tex2html_verb_mark>881<tex2html_verb_mark>. Tenga en cuenta que:
\begin<<6348>>tex2html_deferred<<6348>>\par\end<<6349>>tex2html_deferred<<6349>>
\begin<<4213>>itemize<<4213>>
\begin<<6350>>tex2html_deferred<<6350>>\par\end<<6351>>tex2html_deferred<<6351>>
\item
Lo que 
dice <tex2html_verb_mark>882<tex2html_verb_mark> es que los tres caracteres que siguen no puede ser <tex2html_verb_mark>883<tex2html_verb_mark>.  
\begin<<6352>>tex2html_deferred<<6352>>\par\end<<6353>>tex2html_deferred<<6353>>
\item
Así, <tex2html_verb_mark>884<tex2html_verb_mark> no pertenece a <tex2html_verb_mark>885<tex2html_verb_mark>, pero
<tex2html_verb_mark>886<tex2html_verb_mark> pertenece a  <tex2html_verb_mark>887<tex2html_verb_mark> porque <tex2html_verb_mark>888<tex2html_verb_mark> es una cadena
cuyos tres siguientes caracteres son <tex2html_verb_mark>889<tex2html_verb_mark> y no son <tex2html_verb_mark>890<tex2html_verb_mark>.
\begin<<6354>>tex2html_deferred<<6354>>\par\end<<6355>>tex2html_deferred<<6355>>
\item
Si quisieramos conseguir algo parecido a <tex2html_verb_mark>891<tex2html_verb_mark> usando un lookahead negativo
tendríamos que escribir algo asi como
<tex2html_verb_mark>892<tex2html_verb_mark> que casa con una cadena de tres caracteres que no sea <tex2html_verb_mark>893<tex2html_verb_mark> seguida de 
<tex2html_verb_mark>894<tex2html_verb_mark> (pero que tampoco es exactamente equivalente):
\begin<<4214>>tex2html_preform<<4214>><tex2html_verbatim_mark>verbatim1288#\end<<4215>>tex2html_preform<<4215>>
\begin<<6356>>tex2html_deferred<<6356>>\par\end<<6357>>tex2html_deferred<<6357>>
\item
Al ejecutar con diferentes entradas el programa anterior vemos que la solución 
<tex2html_verb_mark>895<tex2html_verb_mark> se apróxima mas a <tex2html_verb_mark>896<tex2html_verb_mark>:
\begin<<4216>>tex2html_preform<<4216>><tex2html_verbatim_mark>verbatim1289#\end<<4217>>tex2html_preform<<4217>>
\begin<<6358>>tex2html_deferred<<6358>>\par\end<<6359>>tex2html_deferred<<6359>>
\begin<<4662>>theorem_type<<4662>>[exercise][exercise][section][][][]
Explique porqué <tex2html_verb_mark>897<tex2html_verb_mark> casa con <tex2html_verb_mark>898<tex2html_verb_mark> pero no con <tex2html_verb_mark>899<tex2html_verb_mark>.
¿Sabría encontrar una expresión regular mas apropiada usando lookahead negativo?\end<<4663>>theorem_type<<4663>>
\begin<<6360>>tex2html_deferred<<6360>>\par\end<<6361>>tex2html_deferred<<6361>>
\item
En realidad, posiblemente sea mas legible una solución como:
\begin<<4220>>tex2html_preform<<4220>><tex2html_verbatim_mark>verbatim1290#\end<<4221>>tex2html_preform<<4221>>
o aún mejor (véase \ref<<4222>>parrafo:prematch<<4222>>):
\begin<<4223>>tex2html_preform<<4223>><tex2html_verbatim_mark>verbatim1291#\end<<4224>>tex2html_preform<<4224>>
El siguiente programa puede ser utilizado para ilustrar la equivalencia:
\begin<<4225>>tex2html_preform<<4225>><tex2html_verbatim_mark>verbatim1292#\end<<4226>>tex2html_preform<<4226>>
Siguen dos ejecuciones:
\begin<<4227>>tex2html_preform<<4227>><tex2html_verbatim_mark>verbatim1293#\end<<4228>>tex2html_preform<<4228>>
\end<<4229>>itemize<<4229>>
\begin<<6362>>tex2html_deferred<<6362>>\par\end<<6363>>tex2html_deferred<<6363>>
 
  \paragraph<<5055>>Ejercicios<<5055>>
  \begin<<5056>>tabular<<5056>><<5057>>c<<5057>>
  \end<<5058>>tabular<<5058>>

\begin<<6364>>tex2html_deferred<<6364>>\par\end<<6365>>tex2html_deferred<<6365>>
\begin<<4664>>theorem_type<<4664>>[exercise][exercise][section][][][]
\begin<<4232>>itemize<<4232>>
\item Escriba una sustitución que reemplaze todas las apariciones
de <tex2html_verb_mark>900<tex2html_verb_mark> por <tex2html_verb_mark>901<tex2html_verb_mark> usando <tex2html_verb_mark>902<tex2html_verb_mark> o lookbehind
\item Escriba una sustitución que reemplaze todas las apariciones
de <tex2html_verb_mark>903<tex2html_verb_mark> por <tex2html_verb_mark>904<tex2html_verb_mark> usando lookaheads y lookbehinds
\item
Escriba una expresión regular que capture todo lo que hay 
entre las cadenas <tex2html_verb_mark>905<tex2html_verb_mark> y <tex2html_verb_mark>906<tex2html_verb_mark> siempre que no se incluya la
palabra <tex2html_verb_mark>907<tex2html_verb_mark>
\item
¿Cuál es la salida?
\begin<<4233>>tex2html_preform<<4233>><tex2html_verbatim_mark>verbatim1294#\end<<4234>>tex2html_preform<<4234>>
\item
Se quiere poner un espacio en blanco después de la aparición de cada coma:
\begin<<4235>>tex2html_preform<<4235>><tex2html_verbatim_mark>verbatim1295#\end<<4236>>tex2html_preform<<4236>>
pero se quiere que la sustitución no tenga lugar si la coma esta incrustada entre
dos dígitos.
\item
Se quiere poner un espacio en blanco después de la aparición de cada coma:
\begin<<4237>>tex2html_preform<<4237>><tex2html_verbatim_mark>verbatim1296#\end<<4238>>tex2html_preform<<4238>>
pero se quiere que la sustitución no tenga lugar si la coma esta incrustada entre
dos dígitos. Además se pide que si hay ya un espacio después de la coma,
no se duplique
\begin<<6366>>tex2html_deferred<<6366>>\par\end<<6367>>tex2html_deferred<<6367>>
\item
¿Cuál es la salida?
<tex2html_verbatim_mark>rawhtml1297#
\end<<4239>>itemize<<4239>>\end<<4665>>theorem_type<<4665>>
\begin<<6368>>tex2html_deferred<<6368>>\par\end<<6369>>tex2html_deferred<<6369>>
\subsection<<4241>>Definición de Nombres de Patrones<<4241>>
Perl 5.10 introduce la posibilidad de definir 
subpatrones en una sección del patrón. 
\begin<<6370>>tex2html_deferred<<6370>>\par\end<<6371>>tex2html_deferred<<6371>>
 
  \paragraph<<5059>>Lo que dice <<5063>>\begin<<6372>>tex2html_deferred<<6372>>\tt\end<<6373>>tex2html_deferred<<6373>>perlretut<<5063>> sobre la definición de nombres de patrones<<5059>>
  \begin<<5060>>tabular<<5060>><<5061>>c<<5061>>
  \end<<5062>>tabular<<5062>>

\begin<<6374>>tex2html_deferred<<6374>>\par\end<<6375>>tex2html_deferred<<6375>>
Citando la sección <<4243>>\begin<<6376>>tex2html_deferred<<6376>>\it\end<<6377>>tex2html_deferred<<6377>>Defining named patterns<<4243>>
en el documento la sección 'Defining-named-patterns' en \htmladdnormallink<<5064>><<5066>>\begin<<6378>>tex2html_deferred<<6378>>\tt\end<<6379>>tex2html_deferred<<6379>>perlretut<<5066>><<5064>>
<<5065>>http://perldoc.perl.org/perlretut.html\#Defining-named-patterns<<5065>> para
perl5.10:
\begin<<6380>>tex2html_deferred<<6380>>\par\end<<6381>>tex2html_deferred<<6381>>
\begin<<4246>>it<<4246>>
\begin<<4247>>quotation<<4247>>
Some regular expressions use identical subpatterns in several
places. Starting with Perl 5.10, it is possible to define named
subpatterns in a section of the pattern so that they can be called up by
name anywhere in the pattern. 
This syntactic pattern for this definition group is
<tex2html_verb_mark>908<tex2html_verb_mark>  
An
insertion of a named pattern is written as <tex2html_verb_mark>909<tex2html_verb_mark>.
\end<<4248>>quotation<<4248>>
\end<<4249>>it<<4249>>
\begin<<6382>>tex2html_deferred<<6382>>\par\end<<6383>>tex2html_deferred<<6383>>
Veamos un ejemplo que define el lenguaje de los números en punto flotante:
\begin<<4250>>tex2html_preform<<4250>><tex2html_verbatim_mark>verbatim1298#\end<<4251>>tex2html_preform<<4251>>
\htmladdnormallink<<5067>><<5069>>\begin<<6384>>tex2html_deferred<<6384>>\tt\end<<6385>>tex2html_deferred<<6385>>perlretut<<5069>><<5067>>
<<5068>>http://search.cpan.org/perldoc/?perlretut<<5068>> comenta sobre este ejemplo:
\begin<<4253>>it<<4253>>
\begin<<4254>>quotation<<4254>>
The example above illustrates this feature.
The three subpatterns that
are used more than once are the optional sign, 
the digit sequence for
an integer 
and the decimal fraction. The <tex2html_verb_mark>910<tex2html_verb_mark> 
group at the end of
the pattern contains their definition. Notice that the decimal fraction
pattern is the first place where we can reuse the integer pattern.
\end<<4255>>quotation<<4255>>
\end<<4256>>it<<4256>>
\begin<<6386>>tex2html_deferred<<6386>>\par\end<<6387>>tex2html_deferred<<6387>>
 
  \paragraph<<5070>>Lo que dice <<5074>>\begin<<6388>>tex2html_deferred<<6388>>\tt\end<<6389>>tex2html_deferred<<6389>>perlre<<5074>> sobre la definición de patrones<<5070>>
  \begin<<5071>>tabular<<5071>><<5072>>c<<5072>>
  \end<<5073>>tabular<<5073>>

\begin<<6390>>tex2html_deferred<<6390>>\par\end<<6391>>tex2html_deferred<<6391>>
Curiosamente, <tex2html_verb_mark>911<tex2html_verb_mark> se considera un caso particular de 
las expresiones regulares condicionales de la forma <tex2html_verb_mark>912<tex2html_verb_mark>
(véase la sección \ref<<4258>>subsection:regexpcondicionales<<4258>>).
Esto es lo que dice la sección 'Extended-Patterns' en \htmladdnormallink<<5075>><<5077>>\begin<<6392>>tex2html_deferred<<6392>>\tt\end<<6393>>tex2html_deferred<<6393>>perlre<<5077>><<5075>>
<<5076>>http://perldoc.perl.org/perlre.html\#Extended-Patterns<<5076>> al respecto:
\begin<<4261>>it<<4261>>
\begin<<4262>>quotation<<4262>>
A special form is the <tex2html_verb_mark>913<tex2html_verb_mark>  predicate, which never executes
directly its yes-pattern, and does not allow a no-pattern. This allows
to define subpatterns which will be executed only by using the recursion
mechanism. This way, you can define a set of regular expression rules
that can be bundled into any pattern you choose.
\begin<<6394>>tex2html_deferred<<6394>>\par\end<<6395>>tex2html_deferred<<6395>>
It is recommended that for this usage you put the <tex2html_verb_mark>914<tex2html_verb_mark> block at the
end of the pattern, and that you name any subpatterns defined within it.
\begin<<6396>>tex2html_deferred<<6396>>\par\end<<6397>>tex2html_deferred<<6397>>
Also, it's worth noting that patterns defined this way probably will not
be as efficient, as the optimiser is not very clever about handling them.
\begin<<6398>>tex2html_deferred<<6398>>\par\end<<6399>>tex2html_deferred<<6399>>
An example of how this might be used is as follows:
\begin<<6400>>tex2html_deferred<<6400>>\par\end<<6401>>tex2html_deferred<<6401>>
\begin<<4263>>tex2html_preform<<4263>><tex2html_verbatim_mark>verbatim1299#\end<<4264>>tex2html_preform<<4264>>
\begin<<6402>>tex2html_deferred<<6402>>\par\end<<6403>>tex2html_deferred<<6403>>
Note that <<4265>>\begin<<6404>>tex2html_deferred<<6404>>\bf\end<<6405>>tex2html_deferred<<6405>>capture buffers matched inside of recursion are not accessible
after the recursion returns<<4265>>, so the extra layer of capturing buffers is
necessary. Thus <tex2html_verb_mark>915<tex2html_verb_mark> would not be defined even though 
<tex2html_verb_mark>916<tex2html_verb_mark>
would be.
\end<<4266>>quotation<<4266>>
\end<<4267>>it<<4267>>
\begin<<6406>>tex2html_deferred<<6406>>\par\end<<6407>>tex2html_deferred<<6407>>
 
  \paragraph<<5078>>Lo que dice <<5082>>\begin<<6408>>tex2html_deferred<<6408>>\tt\end<<6409>>tex2html_deferred<<6409>>perlvar<<5082>> sobre patrones con nombre<<5078>>
  \begin<<5079>>tabular<<5079>><<5080>>c<<5080>>
  \end<<5081>>tabular<<5081>>

Esto es lo que dice \htmladdnormallink<<5083>><<5085>>\begin<<6410>>tex2html_deferred<<6410>>\tt\end<<6411>>tex2html_deferred<<6411>>perlvar<<5085>><<5083>>
<<5084>>http://search.cpan.org/perldoc/?perlvar<<5084>> respecto a las variables implicadas <tex2html_verb_mark>918<tex2html_verb_mark>
y <tex2html_verb_mark>920<tex2html_verb_mark>. Con respecto a el hash <tex2html_verb_mark>921<tex2html_verb_mark>:
\begin<<6412>>tex2html_deferred<<6412>>\par\end<<6413>>tex2html_deferred<<6413>>
\begin<<4270>>it<<4270>>
\begin<<4271>>quotation<<4271>>
\begin<<4272>>itemize<<4272>>
\item <tex2html_verb_mark>923<tex2html_verb_mark>, <tex2html_verb_mark>924<tex2html_verb_mark>
\begin<<6414>>tex2html_deferred<<6414>>\par\end<<6415>>tex2html_deferred<<6415>>
Similar to <tex2html_verb_mark>925<tex2html_verb_mark> , the <tex2html_verb_mark>927<tex2html_verb_mark> hash allows access to the named capture buffers,
should they exist, in the last successful match in the currently active
dynamic scope.
\begin<<6416>>tex2html_deferred<<6416>>\par\end<<6417>>tex2html_deferred<<6417>>
For example, <tex2html_verb_mark>928<tex2html_verb_mark> is equivalent to <tex2html_verb_mark>929<tex2html_verb_mark> after the following match:
\begin<<6418>>tex2html_deferred<<6418>>\par\end<<6419>>tex2html_deferred<<6419>>
\begin<<4273>>tex2html_preform<<4273>><tex2html_verbatim_mark>verbatim1300#\end<<4274>>tex2html_preform<<4274>>
\begin<<6420>>tex2html_deferred<<6420>>\par\end<<6421>>tex2html_deferred<<6421>>
The keys of the <tex2html_verb_mark>931<tex2html_verb_mark> hash list only the names of buffers that have
captured (and that are thus associated to defined values).
\begin<<6422>>tex2html_deferred<<6422>>\par\end<<6423>>tex2html_deferred<<6423>>
The underlying behaviour of <tex2html_verb_mark>933<tex2html_verb_mark> is provided by the \htmladdnormallink<<5086>><<5088>>\begin<<6424>>tex2html_deferred<<6424>>\tt\end<<6425>>tex2html_deferred<<6425>>Tie::Hash::NamedCapture<<5088>><<5086>>
 <<5087>>http://search.cpan.org/perldoc?Tie::Hash::NamedCapture<<5087>> 
module.
\begin<<6426>>tex2html_deferred<<6426>>\par\end<<6427>>tex2html_deferred<<6427>>
Note: <tex2html_verb_mark>935<tex2html_verb_mark> and <tex2html_verb_mark>936<tex2html_verb_mark> are tied views into a common internal
hash associated with the last successful regular expression. Therefore
mixing iterative access to them via <tex2html_verb_mark>937<tex2html_verb_mark> may have unpredictable
results. Likewise, if the last successful match changes, then the results
may be surprising.
\begin<<6428>>tex2html_deferred<<6428>>\par\end<<6429>>tex2html_deferred<<6429>>
\item <tex2html_verb_mark>939<tex2html_verb_mark>
\begin<<6430>>tex2html_deferred<<6430>>\par\end<<6431>>tex2html_deferred<<6431>>
Similar to <tex2html_verb_mark>941<tex2html_verb_mark> , this variable allows access to the named capture
buffers in the last successful match in the currently active dynamic
scope. <<4276>>\begin<<6432>>tex2html_deferred<<6432>>\bf\end<<6433>>tex2html_deferred<<6433>>To each capture buffer name found in the regular expression,
it associates a reference to an array containing the list of values
captured by all buffers with that name (should there be several of them),
in the order where they appear<<4276>>.
\begin<<6434>>tex2html_deferred<<6434>>\par\end<<6435>>tex2html_deferred<<6435>>
Here's an example:
\begin<<6436>>tex2html_deferred<<6436>>\par\end<<6437>>tex2html_deferred<<6437>>
\begin<<4277>>tex2html_preform<<4277>><tex2html_verbatim_mark>verbatim1301#\end<<4278>>tex2html_preform<<4278>>
\begin<<6438>>tex2html_deferred<<6438>>\par\end<<6439>>tex2html_deferred<<6439>>
would print out:
\begin<<6440>>tex2html_deferred<<6440>>\par\end<<6441>>tex2html_deferred<<6441>>
\begin<<4279>>tex2html_preform<<4279>><tex2html_verbatim_mark>verbatim1302#\end<<4280>>tex2html_preform<<4280>>
\begin<<6442>>tex2html_deferred<<6442>>\par\end<<6443>>tex2html_deferred<<6443>>
The keys of the <tex2html_verb_mark>943<tex2html_verb_mark> hash correspond to all buffer names found in
the regular expression.
\begin<<6444>>tex2html_deferred<<6444>>\par\end<<6445>>tex2html_deferred<<6445>>
\end<<4281>>itemize<<4281>>
\end<<4282>>quotation<<4282>>
\end<<4283>>it<<4283>>
\begin<<6446>>tex2html_deferred<<6446>>\par\end<<6447>>tex2html_deferred<<6447>>
\subsection<<4284>>Patrones Recursivos<<4284>>
\begin<<6448>>tex2html_deferred<<6448>>\par\end<<6449>>tex2html_deferred<<6449>>
Perl 5.10 introduce la posibilidad de definir 
subpatrones en una sección del patrón. 
Citando la versión del documento \htmladdnormallink<<5089>><<5091>>\begin<<6450>>tex2html_deferred<<6450>>\tt\end<<6451>>tex2html_deferred<<6451>>perlretut<<5091>><<5089>>
<<5090>>http://search.cpan.org/perldoc/?perlretut<<5090>> para
perl5.10:
\begin<<6452>>tex2html_deferred<<6452>>\par\end<<6453>>tex2html_deferred<<6453>>
\begin<<4286>>it<<4286>>
\begin<<4287>>quotation<<4287>>
This feature (introduced in Perl 5.10) significantly extends the power
of Perl’s pattern matching.  By referring to some other capture group
anywhere in the
pattern with the construct <tex2html_verb_mark>944<tex2html_verb_mark>, the pattern within the
referenced group is used as an independent subpattern in place of the
group reference itself.
Because the group reference may be contained within the group it refers
to, it is now possible to apply pattern matching to tasks that hitherto
required a
recursive parser.
\begin<<6454>>tex2html_deferred<<6454>>\par\end<<6455>>tex2html_deferred<<6455>>
...
\begin<<6456>>tex2html_deferred<<6456>>\par\end<<6457>>tex2html_deferred<<6457>>
In <tex2html_verb_mark>945<tex2html_verb_mark> both absolute and relative backreferences may be used.  
The entire pattern can be reinserted with <tex2html_verb_mark>946<tex2html_verb_mark> or <tex2html_verb_mark>947<tex2html_verb_mark>.  If you prefer to name your
buffers, you can use <tex2html_verb_mark>948<tex2html_verb_mark> to recurse into that buffer.
\end<<4288>>quotation<<4288>>
\end<<4289>>it<<4289>>
\begin<<6458>>tex2html_deferred<<6458>>\par\end<<6459>>tex2html_deferred<<6459>>
 
  \paragraph<<5092>>Palíndromos<<5092>>
  \begin<<5093>>tabular<<5093>><<5094>>c<<5094>>
  \end<<5095>>tabular<<5095>>

\label<<4291>>parrafo:palabrapalindromos<<4291>>
\begin<<6460>>tex2html_deferred<<6460>>\par\end<<6461>>tex2html_deferred<<6461>>
Véase un ejemplo que reconoce los palabra-palíndromos (esto es, 
la lectura directa y la inversa  de la cadena
pueden diferir en los signos de puntuación):
\begin<<6462>>tex2html_deferred<<6462>>\par\end<<6463>>tex2html_deferred<<6463>>
<tex2html_verbatim_mark>rawhtml1303#
\begin<<6464>>tex2html_deferred<<6464>>\par\end<<6465>>tex2html_deferred<<6465>>
\begin<<4666>>theorem_type<<4666>>[exercise][exercise][section][][][]
¿Cuál es el efecto del modificador <tex2html_verb_mark>949<tex2html_verb_mark>
en la regexp <tex2html_verb_mark>950<tex2html_verb_mark>?\end<<4667>>theorem_type<<4667>>
\begin<<6466>>tex2html_deferred<<6466>>\par\end<<6467>>tex2html_deferred<<6467>>
Siguen algunos ejemplos de ejecución\begin<<6468>>tex2html_deferred<<6468>>\footnote<<4640>>
\begin<<4294>>itemize<<4294>>
\item saippuakauppias: Vendedor de jabón (suomi)
\item yam: batata (inglés)
\item cam: leva
\end<<4295>>itemize<<4295>>
<<4640>>\end<<6469>>tex2html_deferred<<6469>>
<tex2html_verbatim_mark>rawhtml1304#
\begin<<6470>>tex2html_deferred<<6470>>\par\end<<6471>>tex2html_deferred<<6471>>
 
  \paragraph<<5096>>Lo que dice <<5100>>\begin<<6472>>tex2html_deferred<<6472>>\tt\end<<6473>>tex2html_deferred<<6473>>perlre<<5100>> sobre recursividad<<5096>>
  \begin<<5097>>tabular<<5097>><<5098>>c<<5098>>
  \end<<5099>>tabular<<5099>>

\begin<<6474>>tex2html_deferred<<6474>>\par\end<<6475>>tex2html_deferred<<6475>>
\begin<<4297>>it<<4297>>
\begin<<4298>>quotation<<4298>>
<tex2html_verb_mark>951<tex2html_verb_mark>
\begin<<6476>>tex2html_deferred<<6476>>\par\end<<6477>>tex2html_deferred<<6477>>
Similar to <tex2html_verb_mark>952<tex2html_verb_mark> (véase la sección
\ref<<4299>>subsection:tiempodematching<<4299>>)
except it does not involve compiling any code,
instead it treats the contents of a capture buffer as an independent
pattern that must match at the current position. Capture buffers
contained by the pattern will have the value as determined by the
outermost recursion.
\begin<<6478>>tex2html_deferred<<6478>>\par\end<<6479>>tex2html_deferred<<6479>>
<tex2html_verb_mark>953<tex2html_verb_mark> is a sequence of digits (not starting with 0) whose value
reflects the paren-number of the capture buffer to recurse to. 
\begin<<6480>>tex2html_deferred<<6480>>\par\end<<6481>>tex2html_deferred<<6481>>
<tex2html_verb_mark>954<tex2html_verb_mark>
recurses to the beginning of the whole pattern. <tex2html_verb_mark>955<tex2html_verb_mark> is an alternate
syntax for <tex2html_verb_mark>956<tex2html_verb_mark>. 
\begin<<6482>>tex2html_deferred<<6482>>\par\end<<6483>>tex2html_deferred<<6483>>
If <tex2html_verb_mark>957<tex2html_verb_mark> is preceded by a plus or minus sign then it
is assumed to be relative, with negative numbers indicating preceding
capture buffers and positive ones following. Thus (?-1) refers to the
most recently declared buffer, and (?+1) indicates the next buffer to
be declared. 
\begin<<6484>>tex2html_deferred<<6484>>\par\end<<6485>>tex2html_deferred<<6485>>
Note that the counting for relative recursion differs from
that of relative backreferences, in that with recursion unclosed buffers
are included.
\end<<4300>>quotation<<4300>>
\end<<4301>>it<<4301>>
Hay una diferencia fundamental entre <tex2html_verb_mark>958<tex2html_verb_mark> y <tex2html_verb_mark>959<tex2html_verb_mark>.
El primero significa <<4302>>\begin<<6486>>tex2html_deferred<<6486>>\it\end<<6487>>tex2html_deferred<<6487>>lo que casó con el último paréntesis<<4302>>.
El segundo significa que se debe <<4303>>\begin<<6488>>tex2html_deferred<<6488>>\it\end<<6489>>tex2html_deferred<<6489>>llamar a la expresión regular 
que define el último paréntesis<<4303>>. Véase un ejemplo:
\begin<<4304>>tex2html_preform<<4304>><tex2html_verbatim_mark>verbatim1305#\end<<4305>>tex2html_preform<<4305>>
\begin<<6490>>tex2html_deferred<<6490>>\par\end<<6491>>tex2html_deferred<<6491>>
En \htmladdnormallink<<5101>><<5103>>\begin<<6492>>tex2html_deferred<<6492>>\tt\end<<6493>>tex2html_deferred<<6493>>perlre<<5103>><<5101>>
<<5102>>http://search.cpan.org/perldoc/?perlre<<5102>> también se comenta sobre este punto:
\begin<<4307>>it<<4307>>\begin<<4308>>quotation<<4308>> 
If there is no corresponding capture buffer defined, then it is a fatal
error. Recursing deeper than 50 times without consuming any input string
will also result in a fatal error. The maximum depth is compiled into
perl, so changing it requires a custom build.
\end<<4309>>quotation<<4309>>
\end<<4310>>it<<4310>>
\begin<<6494>>tex2html_deferred<<6494>>\par\end<<6495>>tex2html_deferred<<6495>>
 
  \paragraph<<5104>>Paréntesis Equilibrados<<5104>>
  \begin<<5105>>tabular<<5105>><<5106>>c<<5106>>
  \end<<5107>>tabular<<5107>>

\begin<<6496>>tex2html_deferred<<6496>>\par\end<<6497>>tex2html_deferred<<6497>>
El siguiente programa (inspirado en uno
que aparece en \htmladdnormallink<<5108>><<5110>>\begin<<6498>>tex2html_deferred<<6498>>\tt\end<<6499>>tex2html_deferred<<6499>>perlre<<5110>><<5108>>
<<5109>>http://search.cpan.org/perldoc/?perlre<<5109>>)
reconoce una llamada a una función <tex2html_verb_mark>960<tex2html_verb_mark>
que puede contener una secuencia de expresiones con paréntesis equilibrados
como argumento:
\begin<<6500>>tex2html_deferred<<6500>>\par\end<<6501>>tex2html_deferred<<6501>>
<tex2html_verbatim_mark>rawhtml1306#
Al ejecutar obtenemos:
\begin<<6502>>tex2html_deferred<<6502>>\par\end<<6503>>tex2html_deferred<<6503>>
<tex2html_verbatim_mark>rawhtml1307#
\begin<<6504>>tex2html_deferred<<6504>>\par\end<<6505>>tex2html_deferred<<6505>>
Como se comenta en \htmladdnormallink<<5111>><<5113>>\begin<<6506>>tex2html_deferred<<6506>>\tt\end<<6507>>tex2html_deferred<<6507>>perlre<<5113>><<5111>>
<<5112>>http://search.cpan.org/perldoc/?perlre<<5112>> es conveniente usar 
índices relativos si se quiere tener una expresión regular reciclable:
\begin<<6508>>tex2html_deferred<<6508>>\par\end<<6509>>tex2html_deferred<<6509>>
\begin<<4314>>it<<4314>>
\begin<<4315>>quotation<<4315>>
The following shows how using negative indexing can make it easier to
embed recursive patterns inside of a <tex2html_verb_mark>961<tex2html_verb_mark> construct for later use:
\begin<<6510>>tex2html_deferred<<6510>>\par\end<<6511>>tex2html_deferred<<6511>>
\begin<<4316>>tex2html_preform<<4316>><tex2html_verbatim_mark>verbatim1308#\end<<4317>>tex2html_preform<<4317>>
\end<<4318>>quotation<<4318>> 
\end<<4319>>it<<4319>>
Véase la sección 
\ref<<4320>>subsection:cuantificadoresposesivos<<4320>>
para comprender el uso de los operadores posesivos como <tex2html_verb_mark>962<tex2html_verb_mark>.
\begin<<6512>>tex2html_deferred<<6512>>\par\end<<6513>>tex2html_deferred<<6513>>
 
  \paragraph<<5114>>Capturando los bloques de un programa<<5114>>
  \begin<<5115>>tabular<<5115>><<5116>>c<<5116>>
  \end<<5117>>tabular<<5117>>

\label<<4322>>parrafo:bloquesanidados<<4322>>
\begin<<6514>>tex2html_deferred<<6514>>\par\end<<6515>>tex2html_deferred<<6515>>
El siguiente programa presenta una heurística 
para determinar los bloques de un programa:
\begin<<6516>>tex2html_deferred<<6516>>\par\end<<6517>>tex2html_deferred<<6517>>
<tex2html_verbatim_mark>rawhtml1309#
\begin<<6518>>tex2html_deferred<<6518>>\par\end<<6519>>tex2html_deferred<<6519>>
Veamos una ejecución. Le daremos como entrada el siguiente programa:
Al ejecutar el programa con esta entrada obtenemos:
\begin<<6520>>tex2html_deferred<<6520>>\par\end<<6521>>tex2html_deferred<<6521>>
\begin<<4323>>tabular<<4323>><<4642>>|p<<4324>>8cm<<4324>>|p<<4325>>8cm<<4325>>|<<4642>>
\hline
\begin<<4326>>tex2html_preform<<4326>><tex2html_verbatim_mark>verbatim1310#\end<<4327>>tex2html_preform<<4327>>
;SPMamp;
\begin<<4328>>tex2html_preform<<4328>><tex2html_verbatim_mark>verbatim1311#\end<<4329>>tex2html_preform<<4329>>
\\ 
\hline
\end<<4330>>tabular<<4330>>
\begin<<6522>>tex2html_deferred<<6522>>\par\end<<6523>>tex2html_deferred<<6523>>
 
  \paragraph<<5118>>Reconocimiento de Lenguajes Recursivos: Un subconjunto de \begin<<6524>>tex2html_deferred<<6524>>\LaTeX\end<<6525>>tex2html_deferred<<6525>><<5122>><<5122>><<5118>>
  \begin<<5119>>tabular<<5119>><<5120>>c<<5120>>
  \end<<5121>>tabular<<5121>>

\label<<4332>>subsection:regexp510lenrec<<4332>>
\begin<<6526>>tex2html_deferred<<6526>>\par\end<<6527>>tex2html_deferred<<6527>>
La posibilidad de combinar en las expresiones regulares Perl 5.10 
la recursividad con los constructos <tex2html_verb_mark>963<tex2html_verb_mark> 
y <tex2html_verb_mark>964<tex2html_verb_mark> así como las secciones <tex2html_verb_mark>965<tex2html_verb_mark>
permiten la escritura de expresiones regulares que reconocen lenguajes recursivos. 
El siguiente 
ejemplo muestra un reconocedor de un subconjunto del lenguaje 
\begin<<6528>>tex2html_deferred<<6528>>\LaTeX\end<<6529>>tex2html_deferred<<6529>><<4333>><<4333>> (véase \htmladdnormallink<<5123>>la entrada LaTeX en la wikipedia<<5123>>
<<5124>>http://en.wikipedia.org/wiki/LaTeX<<5124>>):
\begin<<6530>>tex2html_deferred<<6530>>\par\end<<6531>>tex2html_deferred<<6531>>
<tex2html_verbatim_mark>rawhtml1312#
\begin<<6532>>tex2html_deferred<<6532>>\par\end<<6533>>tex2html_deferred<<6533>>
Añadimos una acción semántica al final de la aceptación de un <tex2html_verb_mark>966<tex2html_verb_mark>.
\begin<<6534>>tex2html_deferred<<6534>>\par\end<<6535>>tex2html_deferred<<6535>>
\begin<<4336>>tex2html_preform<<4336>><tex2html_verbatim_mark>verbatim1313#\end<<4337>>tex2html_preform<<4337>>
Esta acción es ejecutada pero no afecta al proceso de análisis.
(véase la sección
\ref<<4338>>subsection:codigoenregexp<<4338>> para mas información sobre las acciones semánticas
en medio de una regexp).
La acción se limita a mostrar que ha casado con cada una de las tres componentes:
el comando, las opciones y los argumentos.
\begin<<6536>>tex2html_deferred<<6536>>\par\end<<6537>>tex2html_deferred<<6537>>
Los paréntesis adicionales, como en <tex2html_verb_mark>967<tex2html_verb_mark> son necesarios 
para guardar lo que casó.
\begin<<6538>>tex2html_deferred<<6538>>\par\end<<6539>>tex2html_deferred<<6539>>
Cuando se ejecuta produce la siguiente salida\begin<<6540>>tex2html_deferred<<6540>>\footnote<<4644>>
\begin<<4339>>itemize<<4339>>
\item peasy:A disagreeable taste of very fresh green peas
\item easy peasy: 
\begin<<4340>>enumerate<<4340>>
  \item (uk) very easy (short for easy-peasy-lemon-squeezy) 
  \item         
  the first half of a rhyming phrase with several alternate second halves,
  all of which connote an activity or a result that is, respectively,
  simple to perform or achieve.
\par
\begin<<4341>>it<<4341>>
\begin<<4342>>verse<<4342>>
  Tie your shoes? Why that's easy peasy lemon squeezy!\\ 
  Beat your meat? Why that's easy peasy Japanesey!\\ 
  As a red-stater, condemn books and films without having read or seen them? Why that's easy peasy puddin'n'pie!\\ 
\end<<4343>>verse<<4343>>
\end<<4344>>it<<4344>>
  \item
  It comes from a 1970's british TV commercial for Lemon Squeezy
  detergent. They were with a little girl who points out dirty greasy
  dishes to an adult (mom or relative) and then this adult produces
  Lemon Squeezy and they clean the dishes quickly. At the end of the
  commercial the girl says <<4345>>\it Easy Peasy Lemon Squeezy<<4345>>.
\par
Today it is a silly way to state something was or will be very easy. 
\end<<4346>>enumerate<<4346>>
\end<<4347>>itemize<<4347>>
<<4644>>\end<<6541>>tex2html_deferred<<6541>>: <tex2html_comment_mark>1052
\begin<<4348>>tex2html_preform<<4348>><tex2html_verbatim_mark>verbatim1314#\end<<4349>>tex2html_preform<<4349>>
La siguiente entrada <tex2html_verb_mark>968<tex2html_verb_mark> no pertenece
al lenguaje definido por el patrón regular,
debido a la presencia de la cadena <tex2html_verb_mark>969<tex2html_verb_mark>
en la última línea:
\begin<<4350>>tex2html_preform<<4350>><tex2html_verbatim_mark>verbatim1315#\end<<4351>>tex2html_preform<<4351>>
\begin<<6542>>tex2html_deferred<<6542>>\par\end<<6543>>tex2html_deferred<<6543>>
\begin<<4668>>theorem_type<<4668>>[exercise][exercise][section][][][]
Obsérvese el uso del cuantificador posesivo en:
\begin<<4353>>tex2html_preform<<4353>><tex2html_verbatim_mark>verbatim1316#\end<<4354>>tex2html_preform<<4354>>
¿Que ocurrre si se quita el posesivo 
y se vuelve a ejecutar <tex2html_verb_mark>970<tex2html_verb_mark>?\end<<4669>>theorem_type<<4669>>
\begin<<6544>>tex2html_deferred<<6544>>\par\end<<6545>>tex2html_deferred<<6545>>
 
  \paragraph<<5125>>Reconocimiento de Expresiones Aritméticas<<5125>>
  \begin<<5126>>tabular<<5126>><<5127>>c<<5127>>
  \end<<5128>>tabular<<5128>>

\begin<<6546>>tex2html_deferred<<6546>>\par\end<<6547>>tex2html_deferred<<6547>>
Véase el nodo \htmladdnormallink<<5129>>Complex regex for maths formulas<<5129>>
<<5130>>http://www.perlmonks.org/?node_id=585167<<5130>>
en perlmonks
para la formulación del problema. Un monje pregunta:
\begin<<6548>>tex2html_deferred<<6548>>\par\end<<6549>>tex2html_deferred<<6549>>
\begin<<4359>>it<<4359>>\begin<<4360>>quotation<<4360>> 
Hiya monks,
\begin<<6550>>tex2html_deferred<<6550>>\par\end<<6551>>tex2html_deferred<<6551>>
Im having trouble getting my head around a regular expression to match sequences.
I need to catch all exceptions where a mathematical expression is illegal...
\begin<<6552>>tex2html_deferred<<6552>>\par\end<<6553>>tex2html_deferred<<6553>>
There must be either a letter or a digit either side of an operator
parenthesis must open and close next to letters or digits, not next to operators, and do not have to exist
variables must not be more than one letter
Nothing other than <tex2html_verb_mark>971<tex2html_verb_mark> can be used
\begin<<6554>>tex2html_deferred<<6554>>\par\end<<6555>>tex2html_deferred<<6555>>
Can anyone offer a hand on how best to tackle this problem?
\begin<<6556>>tex2html_deferred<<6556>>\par\end<<6557>>tex2html_deferred<<6557>>
many thanks 
\end<<4361>>quotation<<4361>>\end<<4362>>it<<4362>> 
\begin<<6558>>tex2html_deferred<<6558>>\par\end<<6559>>tex2html_deferred<<6559>>
La solución parte de que una <<4363>>\begin<<6560>>tex2html_deferred<<6560>>\it\end<<6561>>tex2html_deferred<<6561>>expresión<<4363>> es o bien un <<4364>>\begin<<6562>>tex2html_deferred<<6562>>\it\end<<6563>>tex2html_deferred<<6563>>término<<4364>> o bien 
un <<4365>>\begin<<6564>>tex2html_deferred<<6564>>\it\end<<6565>>tex2html_deferred<<6565>>término<<4365>> seguido de una operador y un <<4366>>\begin<<6566>>tex2html_deferred<<6566>>\it\end<<6567>>tex2html_deferred<<6567>>término<<4366>>, esto es:
\begin<<6568>>tex2html_deferred<<6568>>\par\end<<6569>>tex2html_deferred<<6569>>
\begin<<4367>>itemize<<4367>>
\item <tex2html_verb_mark>972<tex2html_verb_mark>
\item <tex2html_verb_mark>973<tex2html_verb_mark> \ldots
\end<<4368>>itemize<<4368>>
que puede ser unificado como <tex2html_verb_mark>974<tex2html_verb_mark>.
\begin<<6570>>tex2html_deferred<<6570>>\par\end<<6571>>tex2html_deferred<<6571>>
Un <<4369>>\begin<<6572>>tex2html_deferred<<6572>>\it\end<<6573>>tex2html_deferred<<6573>>término<<4369>> es un número o un identificador o una <<4370>>\begin<<6574>>tex2html_deferred<<6574>>\it\end<<6575>>tex2html_deferred<<6575>>expresión<<4370>>
entre paréntesis, esto es:
\begin<<6576>>tex2html_deferred<<6576>>\par\end<<6577>>tex2html_deferred<<6577>>
\begin<<4371>>itemize<<4371>>
\item <tex2html_verb_mark>975<tex2html_verb_mark>
\item <tex2html_verb_mark>976<tex2html_verb_mark>
\item <tex2html_verb_mark>977<tex2html_verb_mark>
\end<<4372>>itemize<<4372>>
\begin<<6578>>tex2html_deferred<<6578>>\par\end<<6579>>tex2html_deferred<<6579>>
La siguiente expresión regular recursiva sigue esta idea:
<tex2html_verbatim_mark>rawhtml1317#
Podemos usar acciones semánticas empotradas para 
ver la forma en la que trabaja la expresión regular
(véase la sección
\ref<<4373>>subsection:codigoenregexp<<4373>>):
\begin<<6580>>tex2html_deferred<<6580>>\par\end<<6581>>tex2html_deferred<<6581>>
<tex2html_verbatim_mark>rawhtml1318#
\begin<<6582>>tex2html_deferred<<6582>>\par\end<<6583>>tex2html_deferred<<6583>>
Ejecución:
\begin<<6584>>tex2html_deferred<<6584>>\par\end<<6585>>tex2html_deferred<<6585>>
\begin<<4374>>tex2html_preform<<4374>><tex2html_verbatim_mark>verbatim1319#\end<<4375>>tex2html_preform<<4375>>
\begin<<6586>>tex2html_deferred<<6586>>\par\end<<6587>>tex2html_deferred<<6587>>
\subsection<<4376>>Cuantificadores Posesivos<<4376>>
\label<<4377>>subsection:cuantificadoresposesivos<<4377>>
\begin<<6588>>tex2html_deferred<<6588>>\par\end<<6589>>tex2html_deferred<<6589>>
Por defecto, cuando un subpatrón con un cuantificador impide que 
el patrón global tenga éxito, se produce un backtrack.
Hay ocasiones en las que esta conducta 
da lugar a ineficiencia.
\begin<<6590>>tex2html_deferred<<6590>>\par\end<<6591>>tex2html_deferred<<6591>>
Perl 5.10 provee los cuantificadores posesivos:
Un cuantificador posesivo actúa como un cuantificador greedy
pero no se produce backtracking.
\begin<<6592>>tex2html_deferred<<6592>>\par\end<<6593>>tex2html_deferred<<6593>>
\begin<<4378>>tabular<<4378>><<4645>>|p<<4379>>2cm<<4379>>|l<<4645>>
\hline
    <tex2html_verb_mark>978<tex2html_verb_mark> ;SPMamp;     Casar 0 o mas veces y no retroceder\\ 
\hline
    <tex2html_verb_mark>979<tex2html_verb_mark> ;SPMamp;     Casar 1 o mas veces y no retroceder\\ 
\hline
    <tex2html_verb_mark>980<tex2html_verb_mark> ;SPMamp;     Casar 0 o 1 veces y no retroceder\\ 
\hline
    <tex2html_verb_mark>981<tex2html_verb_mark> ;SPMamp;   Casar exactamente n veces y no retroceder (redundante)\\ 
\hline
    <tex2html_verb_mark>982<tex2html_verb_mark> ;SPMamp;  Casar al menos n veces y no retroceder\\ 
\hline
    <tex2html_verb_mark>983<tex2html_verb_mark> ;SPMamp; Casar al menos n veces y no mas de m veces y no retroceder\\ 
\hline
\end<<4380>>tabular<<4380>>
Por ejemplo, la cadena <tex2html_verb_mark>984<tex2html_verb_mark> no casa con <tex2html_verb_mark>985<tex2html_verb_mark> porque no 
hay retroceso después de leer las 4 aes:
\begin<<4381>>tex2html_preform<<4381>><tex2html_verbatim_mark>verbatim1320#\end<<4382>>tex2html_preform<<4382>>
\begin<<6594>>tex2html_deferred<<6594>>\par\end<<6595>>tex2html_deferred<<6595>>
 
  \paragraph<<5131>>Cadenas Delimitadas por Comillas Dobles<<5131>>
  \begin<<5132>>tabular<<5132>><<5133>>c<<5133>>
  \end<<5134>>tabular<<5134>>

\begin<<6596>>tex2html_deferred<<6596>>\par\end<<6597>>tex2html_deferred<<6597>>
Los operadores posesivos sirven para poder escribir expresiones regulares mas eficientes
en aquellos casos en los que sabemos que el retroceso no conducirá a nuevas soluciones, como
es el caso del reconocimiento de las cadenas delimitadas por 
comillas dobles:
\begin<<6598>>tex2html_deferred<<6598>>\par\end<<6599>>tex2html_deferred<<6599>>
\begin<<4384>>tex2html_preform<<4384>><tex2html_verbatim_mark>verbatim1321#\end<<4385>>tex2html_preform<<4385>>
\begin<<6600>>tex2html_deferred<<6600>>\par\end<<6601>>tex2html_deferred<<6601>>
 
  \paragraph<<5135>>Paréntesis Posesivos<<5135>>
  \begin<<5136>>tabular<<5136>><<5137>>c<<5137>>
  \end<<5138>>tabular<<5138>>

\begin<<6602>>tex2html_deferred<<6602>>\par\end<<6603>>tex2html_deferred<<6603>>
Los paréntesis posesivos <tex2html_verb_mark>986<tex2html_verb_mark> dan lugar a un reconocedor 
que rechaza las demandas de retroceso. 
De hecho, los operadores posesivos pueden ser reescritos 
en términos de los paréntesis posesivos:
La notación <tex2html_verb_mark>987<tex2html_verb_mark> es equivalente a <tex2html_verb_mark>988<tex2html_verb_mark>.
\begin<<6604>>tex2html_deferred<<6604>>\par\end<<6605>>tex2html_deferred<<6605>>
 
  \paragraph<<5139>>Paréntesis Balanceados<<5139>>
  \begin<<5140>>tabular<<5140>><<5141>>c<<5141>>
  \end<<5142>>tabular<<5142>>

\begin<<6606>>tex2html_deferred<<6606>>\par\end<<6607>>tex2html_deferred<<6607>>
El siguiente ejemplo reconoce el lenguaje de los paréntesis balanceados:
\begin<<4388>>tex2html_preform<<4388>><tex2html_verbatim_mark>verbatim1322#\end<<4389>>tex2html_preform<<4389>>
Cuando se ejecuta produce una salida como:
\begin<<4390>>tex2html_preform<<4390>><tex2html_verbatim_mark>verbatim1323#\end<<4391>>tex2html_preform<<4391>>
\begin<<6608>>tex2html_deferred<<6608>>\par\end<<6609>>tex2html_deferred<<6609>>
 
  \paragraph<<5143>>Encontrando los bloques de un programa<<5143>>
  \begin<<5144>>tabular<<5144>><<5145>>c<<5145>>
  \end<<5146>>tabular<<5146>>

\begin<<6610>>tex2html_deferred<<6610>>\par\end<<6611>>tex2html_deferred<<6611>>
El uso de los operadores posesivos nos permite reescribir 
la solución al problema de encontrar los bloques maximales
de un código dada en la
sección
\ref<<4393>>parrafo:bloquesanidados<<4393>>
de la siguiente manera:
\begin<<6612>>tex2html_deferred<<6612>>\par\end<<6613>>tex2html_deferred<<6613>>
<tex2html_verbatim_mark>rawhtml1324#
\begin<<6614>>tex2html_deferred<<6614>>\par\end<<6615>>tex2html_deferred<<6615>>
 
  \paragraph<<5147>>Véase también<<5147>>
  \begin<<5148>>tabular<<5148>><<5149>>c<<5149>>
  \end<<5150>>tabular<<5150>>

\begin<<6616>>tex2html_deferred<<6616>>\par\end<<6617>>tex2html_deferred<<6617>>
\begin<<4395>>itemize<<4395>>
\item
\htmladdnormallink
<<4396>>Possessive Quantifiers<<4396>>
<<4397>>http://www.regular-expressions.info/possessive.html<<4397>>
en 
\htmladdnormallink
<<4398>>http://www.regular-expressions.info/<<4398>>
<<4399>>http://www.regular-expressions.info/tutorial.html<<4399>>
\item 
Nodo \emph<<4400>>Possessive Quantifiers in Perl 5.10 regexps<<4400>> en \htmladdnormallink<<5151>>PerlMonks<<5151>>
<<5152>>http://www.perlmonks.org/?node_id=793521<<5152>>
\item 
perldoc \htmladdnormallink<<5153>><<5155>>\begin<<6618>>tex2html_deferred<<6618>>\tt\end<<6619>>tex2html_deferred<<6619>>perlre<<5155>><<5153>>
<<5154>>http://search.cpan.org/perldoc/?perlre<<5154>>
\end<<4403>>itemize<<4403>>
\begin<<6620>>tex2html_deferred<<6620>>\par\end<<6621>>tex2html_deferred<<6621>>
\subsection<<4404>>Perl 5.10: Numeración de los Grupos en Alternativas<<4404>>
\begin<<6622>>tex2html_deferred<<6622>>\par\end<<6623>>tex2html_deferred<<6623>>
A veces conviene tener una forma de acceso 
uniforme a la lista proporcionada por los paréntesis con memoria.
Por ejemplo, la siguiente expresión regular reconoce el 
lenguaje de las horas en notaciones civil y militar:
\begin<<4405>>tex2html_preform<<4405>><tex2html_verbatim_mark>verbatim1325#\end<<4406>>tex2html_preform<<4406>>
Parece inconveniente tener los resultados en variables distintas.
El constructo <tex2html_verb_mark>989<tex2html_verb_mark> hace que los paréntesis se enumeren
relativos a las alternativas:
\begin<<6624>>tex2html_deferred<<6624>>\par\end<<6625>>tex2html_deferred<<6625>>
\begin<<4407>>tex2html_preform<<4407>><tex2html_verbatim_mark>verbatim1326#\end<<4408>>tex2html_preform<<4408>>
Ahora en ambos casos <tex2html_verb_mark>990<tex2html_verb_mark> y <tex2html_verb_mark>991<tex2html_verb_mark> contienen las horas y minutos.
\begin<<6626>>tex2html_deferred<<6626>>\par\end<<6627>>tex2html_deferred<<6627>>
\subsection<<4409>>Ejecución de Código dentro de una Expresión Regular<<4409>>
\label<<4410>>subsection:codigoenregexp<<4410>>
\begin<<6628>>tex2html_deferred<<6628>>\par\end<<6629>>tex2html_deferred<<6629>>
Es posible introducir código Perl dentro de una expresión regular.
Para ello se usa la notación <tex2html_verb_mark>992<tex2html_verb_mark>.
\begin<<6630>>tex2html_deferred<<6630>>\par\end<<6631>>tex2html_deferred<<6631>>
El siguiente texto esta tomado de la sección 'A-bit-of-magic:-executing-Perl-code-in-a-regular-expression' en \htmladdnormallink<<5156>><<5158>>\begin<<6632>>tex2html_deferred<<6632>>\tt\end<<6633>>tex2html_deferred<<6633>>perlretut<<5158>><<5156>>
<<5157>>http://perldoc.perl.org/perlretut.html\#A-bit-of-magic:-executing-Perl-code-in-a-regular-expression<<5157>>:
\begin<<6634>>tex2html_deferred<<6634>>\par\end<<6635>>tex2html_deferred<<6635>>
\begin<<4413>>it<<4413>>\begin<<4414>>quote<<4414>> 
Normally, regexps are a part of Perl expressions. Code evaluation
expressions turn that around by allowing arbitrary Perl code to be a
part of a regexp. A code evaluation expression is denoted (?<<4415>>code<<4415>>),
with code a string of Perl statements.
\begin<<6636>>tex2html_deferred<<6636>>\par\end<<6637>>tex2html_deferred<<6637>>
Be warned that this feature is considered experimental, and may be
changed without notice.
\begin<<6638>>tex2html_deferred<<6638>>\par\end<<6639>>tex2html_deferred<<6639>>
Code expressions are zero-width assertions, and the value they return
depends on their environment. 
\begin<<6640>>tex2html_deferred<<6640>>\par\end<<6641>>tex2html_deferred<<6641>>
There are two possibilities: either the
code expression is used as a conditional in a conditional expression
<tex2html_verb_mark>993<tex2html_verb_mark>, or it is not. 
\begin<<4416>>itemize<<4416>>
\item \begin<<4417>>quote<<4417>> 
If the code expression is a conditional,
the code is evaluated and the result (i.e., the result of the last
statement) is used to determine truth or falsehood. 
\begin<<6642>>tex2html_deferred<<6642>>\par\end<<6643>>tex2html_deferred<<6643>>
\end<<4418>>quote<<4418>> \item \begin<<4419>>quote<<4419>> If the code expression
is not used as a conditional, the assertion always evaluates true and
the result is put into the special variable <tex2html_verb_mark>994<tex2html_verb_mark> . The variable <tex2html_verb_mark>995<tex2html_verb_mark> can
then be used in code expressions later in the regexp
\end<<4420>>quote<<4420>>
\end<<4421>>itemize<<4421>>
\end<<4422>>quote<<4422>>\end<<4423>>it<<4423>> 
\begin<<6644>>tex2html_deferred<<6644>>\par\end<<6645>>tex2html_deferred<<6645>>
 
  \paragraph<<5159>>Resultado de la última ejecución<<5159>>
  \begin<<5160>>tabular<<5160>><<5161>>c<<5161>>
  \end<<5162>>tabular<<5162>>

\begin<<6646>>tex2html_deferred<<6646>>\par\end<<6647>>tex2html_deferred<<6647>>
Las expresiones de código son \index<<5163>>zero-width assertions<<5163>>\emph<<5164>>zero-width assertions<<5164>>: no consumen entrada.
El resultado de la ejecución se salva en la variable especial <tex2html_verb_mark>996<tex2html_verb_mark>.
\begin<<6648>>tex2html_deferred<<6648>>\par\end<<6649>>tex2html_deferred<<6649>>
Veamos un ejemplo:
\begin<<6650>>tex2html_deferred<<6650>>\par\end<<6651>>tex2html_deferred<<6651>>
\begin<<4426>>tex2html_preform<<4426>><tex2html_verbatim_mark>verbatim1327#\end<<4427>>tex2html_preform<<4427>>
En el último ejemplo (línea <tex2html_verb_mark>997<tex2html_verb_mark>) ninguno de los <tex2html_verb_mark>998<tex2html_verb_mark> se ejecuta dado que no hay matching.
\begin<<6652>>tex2html_deferred<<6652>>\par\end<<6653>>tex2html_deferred<<6653>>
 
  \paragraph<<5165>>El Código empotrado no es interpolado<<5165>>
  \begin<<5166>>tabular<<5166>><<5167>>c<<5167>>
  \end<<5168>>tabular<<5168>>

\begin<<6654>>tex2html_deferred<<6654>>\par\end<<6655>>tex2html_deferred<<6655>>
Tomado de la sección 'Extended-Patterns' en \htmladdnormallink<<5169>><<5171>>\begin<<6656>>tex2html_deferred<<6656>>\tt\end<<6657>>tex2html_deferred<<6657>>perlre<<5171>><<5169>>
<<5170>>http://perldoc.perl.org/perlre.html\#Extended-Patterns<<5170>>:
\begin<<6658>>tex2html_deferred<<6658>>\par\end<<6659>>tex2html_deferred<<6659>>
\begin<<4431>>it<<4431>>\begin<<4432>>quote<<4432>>
This zero-width assertion evaluates any embedded Perl code. It always
succeeds, and its code  is not interpolated. Currently, the rules to
determine where the code  ends are somewhat convoluted.
\end<<4433>>quote<<4433>>\end<<4434>>it<<4434>>
\begin<<6660>>tex2html_deferred<<6660>>\par\end<<6661>>tex2html_deferred<<6661>>
 
  \paragraph<<5172>>Contenido del último paréntesis y la variable por defecto en acciones empotradas<<5172>>
  \begin<<5173>>tabular<<5173>><<5174>>c<<5174>>
  \end<<5175>>tabular<<5175>>

\begin<<6662>>tex2html_deferred<<6662>>\par\end<<6663>>tex2html_deferred<<6663>>
Tomado de la sección 'Extended-Patterns' en \htmladdnormallink<<5176>><<5178>>\begin<<6664>>tex2html_deferred<<6664>>\tt\end<<6665>>tex2html_deferred<<6665>>perlre<<5178>><<5176>>
<<5177>>http://perldoc.perl.org/perlre.html\#Extended-Patterns<<5177>>:
\begin<<4438>>it<<4438>>\begin<<4439>>quote<<4439>>
\ldots<<4440>><<4440>> can be used with the special variable <tex2html_verb_mark>999<tex2html_verb_mark> to
capture the results of submatches in variables without having to keep
track of the number of nested parentheses. For example:
\begin<<6666>>tex2html_deferred<<6666>>\par\end<<6667>>tex2html_deferred<<6667>>
\begin<<4441>>tex2html_preform<<4441>><tex2html_verbatim_mark>verbatim1328#\end<<4442>>tex2html_preform<<4442>>
\begin<<6668>>tex2html_deferred<<6668>>\par\end<<6669>>tex2html_deferred<<6669>>
Inside the <tex2html_verb_mark>1000<tex2html_verb_mark> block, <tex2html_verb_mark>1001<tex2html_verb_mark> refers to the string the
regular expression is matching against. You can also use <tex2html_verb_mark>1002<tex2html_verb_mark> to know
what is the current position of matching within this string.
\end<<4443>>quote<<4443>>\end<<4444>>it<<4444>>
\begin<<6670>>tex2html_deferred<<6670>>\par\end<<6671>>tex2html_deferred<<6671>>
 
  \paragraph<<5179>>Los cuantificadores y el código empotrado<<5179>>
  \begin<<5180>>tabular<<5180>><<5181>>c<<5181>>
  \end<<5182>>tabular<<5182>>

\begin<<6672>>tex2html_deferred<<6672>>\par\end<<6673>>tex2html_deferred<<6673>>
Si se usa un cuantificador sobre un código empotrado,
actúa como un bucle:
\begin<<6674>>tex2html_deferred<<6674>>\par\end<<6675>>tex2html_deferred<<6675>>
\begin<<4446>>tex2html_preform<<4446>><tex2html_verbatim_mark>verbatim1329#\end<<4447>>tex2html_preform<<4447>>
\begin<<6676>>tex2html_deferred<<6676>>\par\end<<6677>>tex2html_deferred<<6677>>
 
  \paragraph<<5183>>Ámbito<<5183>>
  \begin<<5184>>tabular<<5184>><<5185>>c<<5185>>
  \end<<5186>>tabular<<5186>>

\begin<<6678>>tex2html_deferred<<6678>>\par\end<<6679>>tex2html_deferred<<6679>>
Tomado (y modificado el ejemplo) de la sección 'Extended-Patterns' en \htmladdnormallink<<5187>><<5189>>\begin<<6680>>tex2html_deferred<<6680>>\tt\end<<6681>>tex2html_deferred<<6681>>perlre<<5189>><<5187>>
<<5188>>http://perldoc.perl.org/perlre.html\#Extended-Patterns<<5188>>:
\begin<<6682>>tex2html_deferred<<6682>>\par\end<<6683>>tex2html_deferred<<6683>>
\begin<<4451>>it<<4451>>\begin<<4452>>quote<<4452>>
\ldots The code  is properly scoped in the following sense: If the
assertion is backtracked (compare la sección 'Backtracking' en \htmladdnormallink<<5190>><<5192>>\begin<<6684>>tex2html_deferred<<6684>>\tt\end<<6685>>tex2html_deferred<<6685>>perlre<<5192>><<5190>>
<<5191>>http://perldoc.perl.org/perlre.html\#Backtracking<<5191>>), all changes introduced
after localization are undone, so that
\begin<<6686>>tex2html_deferred<<6686>>\par\end<<6687>>tex2html_deferred<<6687>>
<tex2html_verbatim_mark>rawhtml1330#
\begin<<6688>>tex2html_deferred<<6688>>\par\end<<6689>>tex2html_deferred<<6689>>
will set <tex2html_verb_mark>1003<tex2html_verb_mark> . Note that after the match, <tex2html_verb_mark>1004<tex2html_verb_mark> returns to the
globally introduced value, because the scopes that restrict local
operators are unwound.
\begin<<4455>>tex2html_preform<<4455>><tex2html_verbatim_mark>verbatim1331#\end<<4456>>tex2html_preform<<4456>>
\end<<4457>>quote<<4457>>\end<<4458>>it<<4458>>
\begin<<6690>>tex2html_deferred<<6690>>\par\end<<6691>>tex2html_deferred<<6691>>
 
  \paragraph<<5193>>Caveats<<5193>>
  \begin<<5194>>tabular<<5194>><<5195>>c<<5195>>
  \end<<5196>>tabular<<5196>>

\begin<<6692>>tex2html_deferred<<6692>>\par\end<<6693>>tex2html_deferred<<6693>>
\begin<<4460>>itemize<<4460>>
\item
\begin<<4461>>it<<4461>>\begin<<4462>>quote<<4462>>
Due to an unfortunate implementation issue, the Perl code contained
in these blocks is treated as a compile time \htmladdnormallink<<5197>>closure<<5197>>
<<5198>>http://en.wikipedia.org/wiki//Closure\_(computer\_science)<<5198>> that can have
seemingly bizarre consequences when used with \htmladdnormallink<<5199>>lexically scoped variables<<5199>>
<<5200>>http://en.wikipedia.org/wiki/Static\_scoping\_.28also\_known\_as\_lexical\_scoping.29<<5200>>
inside of subroutines or loops. There are various workarounds for this,
including simply using global variables instead. If you are using this
construct and strange results occur then check for the use of lexically
scoped variables.
\end<<4467>>quote<<4467>>\end<<4468>>it<<4468>>
\item
\begin<<4469>>it<<4469>>\begin<<4470>>quote<<4470>>
For reasons of security, this construct is forbidden if the regular
expression involves run-time interpolation of variables, unless the
perilous <tex2html_verb_mark>1005<tex2html_verb_mark> pragma has been used (see \htmladdnormallink<<5201>><<5203>>\begin<<6694>>tex2html_deferred<<6694>>\tt\end<<6695>>tex2html_deferred<<6695>>re<<5203>><<5201>>
 <<5202>>http://search.cpan.org/perldoc?re<<5202>>),
or the variables
contain results of <tex2html_verb_mark>1006<tex2html_verb_mark> operator (see <tex2html_verb_mark>1007<tex2html_verb_mark> in 
\htmladdnormallink<<5204>><<5206>>\begin<<6696>>tex2html_deferred<<6696>>\tt\end<<6697>>tex2html_deferred<<6697>>perlop<<5206>><<5204>>
<<5205>>http://search.cpan.org/perldoc/?perlop<<5205>>).
\begin<<6698>>tex2html_deferred<<6698>>\par\end<<6699>>tex2html_deferred<<6699>>
This restriction is due to the wide-spread and remarkably convenient
custom of using run-time determined strings as patterns. For example:
\begin<<6700>>tex2html_deferred<<6700>>\par\end<<6701>>tex2html_deferred<<6701>>
\begin<<4473>>tex2html_preform<<4473>><tex2html_verbatim_mark>verbatim1332#\end<<4474>>tex2html_preform<<4474>>
\begin<<6702>>tex2html_deferred<<6702>>\par\end<<6703>>tex2html_deferred<<6703>>
Before Perl knew how to execute interpolated code within a pattern, this
operation was completely safe from a security point of view, although
it could raise an exception from an illegal pattern. If you turn on the
<tex2html_verb_mark>1008<tex2html_verb_mark> , though, it is no longer secure, so you should only do
so if you are also using \htmladdnormallink<<5207>>taint<<5207>>
<<5208>>http://en.wikipedia.org/wiki/Taint\_checking<<5208>> checking. Better yet, use the carefully
constrained evaluation within a \htmladdnormallink<<5209>><<5211>>\begin<<6704>>tex2html_deferred<<6704>>\tt\end<<6705>>tex2html_deferred<<6705>>Safe<<5211>><<5209>>
 <<5210>>http://search.cpan.org/perldoc?Safe<<5210>> compartment. See perlsec for details
about both these mechanisms. (Véase la sección 'Taint-mode' en \htmladdnormallink<<5212>><<5214>>\begin<<6706>>tex2html_deferred<<6706>>\tt\end<<6707>>tex2html_deferred<<6707>>perlsec<<5214>><<5212>>
<<5213>>http://perldoc.perl.org/perlsec.html\#Taint-mode<<5213>>)
\end<<4480>>quote<<4480>>\end<<4481>>it<<4481>> 
\begin<<6708>>tex2html_deferred<<6708>>\par\end<<6709>>tex2html_deferred<<6709>>
\item
\begin<<4482>>it<<4482>>\begin<<4483>>quote<<4483>>
Because Perl's regex engine is currently \emph<<4484>>not re-entrant<<4484>>, interpolated
code may not invoke the regex engine either directly with <tex2html_verb_mark>1009<tex2html_verb_mark> or 
<tex2html_verb_mark>1010<tex2html_verb_mark>, or indirectly with functions such as \htmladdnormallink<<5215>><<5217>>\begin<<6710>>tex2html_deferred<<6710>>\tt\end<<6711>>tex2html_deferred<<6711>>split<<5217>><<5215>>
<<5216>>http://www.ayni.com/perldoc/functions/split.html<<5216>>.
\end<<4486>>quote<<4486>>\end<<4487>>it<<4487>>
\end<<4488>>itemize<<4488>>
\begin<<6712>>tex2html_deferred<<6712>>\par\end<<6713>>tex2html_deferred<<6713>>
 
  \paragraph<<5218>>Depurando con código empotrado Colisiones en los Nombres de las Subexpresiones Regulares<<5218>>
  \begin<<5219>>tabular<<5219>><<5220>>c<<5220>>
  \end<<5221>>tabular<<5221>>

\begin<<6714>>tex2html_deferred<<6714>>\par\end<<6715>>tex2html_deferred<<6715>>
Las acciones empotradas pueden utilizarse como mecanismo de 
depuración y de descubrimiento del comportamiento de nuestras expresiones 
regulares.
\begin<<6716>>tex2html_deferred<<6716>>\par\end<<6717>>tex2html_deferred<<6717>>
En el siguiente programa se produce una colisión
entre los nombres <tex2html_verb_mark>1011<tex2html_verb_mark> y <tex2html_verb_mark>1012<tex2html_verb_mark> de los patrones 
que ocurren en el patrón <tex2html_verb_mark>1013<tex2html_verb_mark>
y en el patrón principal:
\begin<<6718>>tex2html_deferred<<6718>>\par\end<<6719>>tex2html_deferred<<6719>>
<tex2html_verbatim_mark>rawhtml1333#
La colisión hace que la salida sea esta:
\begin<<4490>>tex2html_preform<<4490>><tex2html_verbatim_mark>verbatim1334#\end<<4491>>tex2html_preform<<4491>>
Si se evitan las colisiones, 
se evita la pérdida de información:
<tex2html_verbatim_mark>rawhtml1335#
\begin<<6720>>tex2html_deferred<<6720>>\par\end<<6721>>tex2html_deferred<<6721>>
que al ejecutarse produce:
\begin<<6722>>tex2html_deferred<<6722>>\par\end<<6723>>tex2html_deferred<<6723>>
\begin<<4492>>tex2html_preform<<4492>><tex2html_verbatim_mark>verbatim1336#\end<<4493>>tex2html_preform<<4493>>
\begin<<6724>>tex2html_deferred<<6724>>\par\end<<6725>>tex2html_deferred<<6725>>
\subsection<<4494>>Expresiones Regulares en tiempo de matching<<4494>>
\label<<4495>>subsection:tiempodematching<<4495>>
\begin<<6726>>tex2html_deferred<<6726>>\par\end<<6727>>tex2html_deferred<<6727>>
Los paréntesis especiales:
\begin<<4496>>tex2html_preform<<4496>><tex2html_verbatim_mark>verbatim1337#\end<<4497>>tex2html_preform<<4497>>
hacen que el <tex2html_verb_mark>1014<tex2html_verb_mark> sea evaluado durante el tiempo de matching.
El resultado de la evaluación se trata como una expresión regular. El match continuará 
intentando casar con la expresión regular retornada.
\begin<<6728>>tex2html_deferred<<6728>>\par\end<<6729>>tex2html_deferred<<6729>>
 
  \paragraph<<5222>>Paréntesis con memoria dentro de una <<5226>>\begin<<6730>>tex2html_deferred<<6730>>\it\end<<6731>>tex2html_deferred<<6731>>pattern code expression<<5226>><<5222>>
  \begin<<5223>>tabular<<5223>><<5224>>c<<5224>>
  \end<<5225>>tabular<<5225>>

\begin<<6732>>tex2html_deferred<<6732>>\par\end<<6733>>tex2html_deferred<<6733>>
Los paréntesis en la expresión regular retornada no cuentan
en el patrón exterior. Véase el siguiente 
ejemplo:
\begin<<6734>>tex2html_deferred<<6734>>\par\end<<6735>>tex2html_deferred<<6735>>
<tex2html_verbatim_mark>rawhtml1338#<tex2html_comment_mark>1113
\begin<<6736>>tex2html_deferred<<6736>>\par\end<<6737>>tex2html_deferred<<6737>>
Como se ve, hemos accedido desde el código interior 
al último paréntesis usando <tex2html_verb_mark>1015<tex2html_verb_mark>.
Sigue una ejecución:
\begin<<4499>>tex2html_preform<<4499>><tex2html_verbatim_mark>verbatim1339#\end<<4500>>tex2html_preform<<4500>>
\begin<<6738>>tex2html_deferred<<6738>>\par\end<<6739>>tex2html_deferred<<6739>>
 
  \paragraph<<5227>>Ejemplo: Secuencias de dígitos de longitud especificada por el primer dígito<<5227>>
  \begin<<5228>>tabular<<5228>><<5229>>c<<5229>>
  \end<<5230>>tabular<<5230>>

\begin<<6740>>tex2html_deferred<<6740>>\par\end<<6741>>tex2html_deferred<<6741>>
Consideremos el problema de escribir una expresión regular
que reconoce secuencias no vacías de dígitos tales que la longitud 
de la secuencia restante viene
determinada por el primer dígito.
Esta es una solución:
\begin<<6742>>tex2html_deferred<<6742>>\par\end<<6743>>tex2html_deferred<<6743>>
<tex2html_verbatim_mark>rawhtml1340#<tex2html_comment_mark>1115
\begin<<6744>>tex2html_deferred<<6744>>\par\end<<6745>>tex2html_deferred<<6745>>
Cuando se ejecuta se obtiene:
\begin<<4502>>tex2html_preform<<4502>><tex2html_verbatim_mark>verbatim1341#\end<<4503>>tex2html_preform<<4503>>
\begin<<6746>>tex2html_deferred<<6746>>\par\end<<6747>>tex2html_deferred<<6747>>
 
  \paragraph<<5231>>Ejemplo: Secuencias de dígitos no repetidos<<5231>>
  \begin<<5232>>tabular<<5232>><<5233>>c<<5233>>
  \end<<5234>>tabular<<5234>>

\begin<<6748>>tex2html_deferred<<6748>>\par\end<<6749>>tex2html_deferred<<6749>>
Otro ejemplo: queremos escribir una expresión regular que reconozca secuencias
de  <tex2html_verb_mark>1016<tex2html_verb_mark> dígitos en las que no todos los dígitos se repiten. Donde quizá <tex2html_verb_mark>1017<tex2html_verb_mark> es capturado
de un paréntesis anterior en la expresión regular. Para simplificar la ilustración
de la técnica supongamos que <tex2html_verb_mark>1018<tex2html_verb_mark>:
<tex2html_verbatim_mark>rawhtml1342#
\begin<<6750>>tex2html_deferred<<6750>>\par\end<<6751>>tex2html_deferred<<6751>>
 
  \paragraph<<5235>>Palíndromos con independencia del acento<<5235>>
  \begin<<5236>>tabular<<5236>><<5237>>c<<5237>>
  \end<<5238>>tabular<<5238>>

\label<<4506>>parrafo:palindromospostregexp<<4506>>
\begin<<6752>>tex2html_deferred<<6752>>\par\end<<6753>>tex2html_deferred<<6753>>
Se trata en este ejercicio de generalizar la expresión
regular introducida en la sección
\ref<<4507>>parrafo:palabrapalindromos<<4507>>
para reconocer los palabra-palíndromos. 
\begin<<6754>>tex2html_deferred<<6754>>\par\end<<6755>>tex2html_deferred<<6755>>
Se trata de encontrar una regexp que acepte
que la lectura derecha e inversa de una frase en Español
pueda diferir en la acentuación (como es el caso
del clásico palíndromo <<4508>>\begin<<6756>>tex2html_deferred<<6756>>\it\end<<6757>>tex2html_deferred<<6757>>dábale arroz a la zorra 
el abad<<4508>>). Una solución trivial es preprocesar 
la cadena eliminando los acentos. Supondremos sin embargo
que se quiere trabajar sobre la cadena original.
He aquí una solucion:
\begin<<6758>>tex2html_deferred<<6758>>\par\end<<6759>>tex2html_deferred<<6759>>
<tex2html_verbatim_mark>rawhtml1343#
\begin<<6760>>tex2html_deferred<<6760>>\par\end<<6761>>tex2html_deferred<<6761>>
Sigue un ejemplo de ejecución:
\begin<<6762>>tex2html_deferred<<6762>>\par\end<<6763>>tex2html_deferred<<6763>>
<tex2html_verbatim_mark>rawhtml1344#
\begin<<6764>>tex2html_deferred<<6764>>\par\end<<6765>>tex2html_deferred<<6765>>
 
  \paragraph<<5239>>Postponiendo para conseguir recursividad<<5239>>
  \begin<<5240>>tabular<<5240>><<5241>>c<<5241>>
  \end<<5242>>tabular<<5242>>

\begin<<6766>>tex2html_deferred<<6766>>\par\end<<6767>>tex2html_deferred<<6767>>
Véase el nodo \htmladdnormallink<<5243>>Complex regex for maths formulas<<5243>>
<<5244>>http://www.perlmonks.org/?node_id=585167<<5244>>
para la formulación del problema:
\begin<<6768>>tex2html_deferred<<6768>>\par\end<<6769>>tex2html_deferred<<6769>>
\begin<<4512>>it<<4512>>\begin<<4513>>quotation<<4513>> 
Hiya monks,
\begin<<6770>>tex2html_deferred<<6770>>\par\end<<6771>>tex2html_deferred<<6771>>
Im having trouble getting my head around a regular expression to match sequences.
I need to catch all exceptions where a mathematical expression is illegal...
\begin<<6772>>tex2html_deferred<<6772>>\par\end<<6773>>tex2html_deferred<<6773>>
There must be either a letter or a digit either side of an operator
parenthesis must open and close next to letters or digits, not next to operators, and do not have to exist
variables must not be more than one letter
Nothing other than <tex2html_verb_mark>1019<tex2html_verb_mark> can be used
\begin<<6774>>tex2html_deferred<<6774>>\par\end<<6775>>tex2html_deferred<<6775>>
Can anyone offer a hand on how best to tackle this problem?
\begin<<6776>>tex2html_deferred<<6776>>\par\end<<6777>>tex2html_deferred<<6777>>
many thanks 
\end<<4514>>quotation<<4514>>\end<<4515>>it<<4515>> 
\begin<<6778>>tex2html_deferred<<6778>>\par\end<<6779>>tex2html_deferred<<6779>>
La respuesta dada por \htmladdnormallink<<5245>>ikegami<<5245>>
<<5246>>http://www.perlmonks.org/?node_id=381608<<5246>> usa <tex2html_verb_mark>1020<tex2html_verb_mark>
para conseguir una conducta recursiva en versiones de perl anteriores a la 5.10:
\begin<<6780>>tex2html_deferred<<6780>>\par\end<<6781>>tex2html_deferred<<6781>>
<tex2html_verbatim_mark>rawhtml1345#
\begin<<6782>>tex2html_deferred<<6782>>\par\end<<6783>>tex2html_deferred<<6783>>
Sigue el resultado de la ejecución:
\begin<<4518>>tex2html_preform<<4518>><tex2html_verbatim_mark>verbatim1346#\end<<4519>>tex2html_preform<<4519>>
\begin<<6784>>tex2html_deferred<<6784>>\par\end<<6785>>tex2html_deferred<<6785>>
 
  \paragraph<<5247>>Caveats<<5247>>
  \begin<<5248>>tabular<<5248>><<5249>>c<<5249>>
  \end<<5250>>tabular<<5250>>

\begin<<6786>>tex2html_deferred<<6786>>\par\end<<6787>>tex2html_deferred<<6787>>
Estos son algunos puntos a tener en cuenta cuando se usan patrones postpuestos.
Véase la entrada <tex2html_verb_mark>1021<tex2html_verb_mark> en la sección 'Extended-Patterns' en \htmladdnormallink<<5251>><<5253>>\begin<<6788>>tex2html_deferred<<6788>>\tt\end<<6789>>tex2html_deferred<<6789>>perlre<<5253>><<5251>>
<<5252>>http://perldoc.perl.org/perlre.html\#Extended-Patterns<<5252>>:
\begin<<6790>>tex2html_deferred<<6790>>\par\end<<6791>>tex2html_deferred<<6791>>
\begin<<4523>>it<<4523>>\begin<<4524>>quote<<4524>>
WARNING: This extended regular expression feature is considered
experimental, and may be changed without notice. Code executed that has
side effects may not perform identically from version to version due to
the effect of future optimisations in the regex engine.
\begin<<6792>>tex2html_deferred<<6792>>\par\end<<6793>>tex2html_deferred<<6793>>
This is a \index<<5254>>postponed regular subexpression<<5254>>\emph<<5255>>postponed regular subexpression<<5255>>. The code is evaluated at
run time, at the moment this subexpression may match. The result of
evaluation is considered as a regular expression and matched as if it
were inserted instead of this construct. 
\begin<<6794>>tex2html_deferred<<6794>>\par\end<<6795>>tex2html_deferred<<6795>>
The code <<4526>>\begin<<6796>>tex2html_deferred<<6796>>\it\end<<6797>>tex2html_deferred<<6797>>is not interpolated<<4526>>. 
\begin<<6798>>tex2html_deferred<<6798>>\par\end<<6799>>tex2html_deferred<<6799>>
As before, the rules to determine where the code ends are currently somewhat convoluted.
\begin<<6800>>tex2html_deferred<<6800>>\par\end<<6801>>tex2html_deferred<<6801>>
Because perl's regex engine is not currently \htmladdnormallink<<5256>>re-entrant<<5256>>
<<5257>>http://en.wikipedia.org/wiki/Reentrant_(subroutine)<<5257>>, delayed code
may not invoke the regex engine either directly with <tex2html_verb_mark>1022<tex2html_verb_mark> or <tex2html_verb_mark>1023<tex2html_verb_mark>),
or indirectly with functions such as \htmladdnormallink<<5258>><<5260>>\begin<<6802>>tex2html_deferred<<6802>>\tt\end<<6803>>tex2html_deferred<<6803>>split<<5260>><<5258>>
<<5259>>http://www.ayni.com/perldoc/functions/split.html<<5259>>.
\begin<<6804>>tex2html_deferred<<6804>>\par\end<<6805>>tex2html_deferred<<6805>>
<<4530>>\begin<<6806>>tex2html_deferred<<6806>>\it\end<<6807>>tex2html_deferred<<6807>>Recursing<<4530>> deeper than 50 times without consuming any input string will
result in a fatal error. The maximum depth is compiled into perl, so
changing it requires a custom build.
\end<<4531>>quote<<4531>>\end<<4532>>it<<4532>>
\begin<<6808>>tex2html_deferred<<6808>>\par\end<<6809>>tex2html_deferred<<6809>>
\subsection<<4533>>Expresiones Condicionales<<4533>>
\label<<4534>>subsection:regexpcondicionales<<4534>>
\begin<<6810>>tex2html_deferred<<6810>>\par\end<<6811>>tex2html_deferred<<6811>>
Citando a \htmladdnormallink<<5261>><<5263>>\begin<<6812>>tex2html_deferred<<6812>>\tt\end<<6813>>tex2html_deferred<<6813>>perlre<<5263>><<5261>>
<<5262>>http://search.cpan.org/perldoc/?perlre<<5262>>:
\begin<<6814>>tex2html_deferred<<6814>>\par\end<<6815>>tex2html_deferred<<6815>>
\begin<<4536>>it<<4536>>
\begin<<4537>>quotation<<4537>>
A conditional expression is a form of if-then-else
statement that allows one to choose which patterns are
to be matched, based on some condition. 
\begin<<6816>>tex2html_deferred<<6816>>\par\end<<6817>>tex2html_deferred<<6817>>
There are two
types of conditional expression: <tex2html_verb_mark>1024<tex2html_verb_mark> and
<tex2html_verb_mark>1025<tex2html_verb_mark>. 
\begin<<6818>>tex2html_deferred<<6818>>\par\end<<6819>>tex2html_deferred<<6819>>
<tex2html_verb_mark>1026<tex2html_verb_mark> is like an
<tex2html_verb_mark>1027<tex2html_verb_mark> statement in Perl. 
If the condition is true, the yes-regexp
will be matched. If the condition is false, the yes-regexp will be
skipped and Perl will move onto the next regexp element. 
\begin<<6820>>tex2html_deferred<<6820>>\par\end<<6821>>tex2html_deferred<<6821>>
The second form
is like an <tex2html_verb_mark>1028<tex2html_verb_mark> statement in Perl. If the condition is true,
the yes-regexp will be matched, otherwise the no-regexp will be matched.
\begin<<6822>>tex2html_deferred<<6822>>\par\end<<6823>>tex2html_deferred<<6823>>
The condition can have several forms. 
\begin<<4538>>itemize<<4538>>
\item The first form is simply an
integer in parentheses (integer). It is true if the corresponding
backreference <tex2html_verb_mark>1029<tex2html_verb_mark> matched earlier in the regexp. The same thing
can be done with a name associated with a capture buffer, written as
<tex2html_verb_mark>1030<tex2html_verb_mark> or <tex2html_verb_mark>1031<tex2html_verb_mark>. 
\item
The second form is a bare zero width assertion
<tex2html_verb_mark>1032<tex2html_verb_mark>, either a lookahead, a lookbehind, or a code assertion. 
\begin<<6824>>tex2html_deferred<<6824>>\par\end<<6825>>tex2html_deferred<<6825>>
\item
The third set of forms provides tests that return
true if the expression is executed within a recursion <tex2html_verb_mark>1033<tex2html_verb_mark> or is being
called from some capturing group, referenced either by number <tex2html_verb_mark>1034<tex2html_verb_mark>,
or by name <tex2html_verb_mark>1035<tex2html_verb_mark>.
\end<<4539>>itemize<<4539>>
\end<<4540>>quotation<<4540>>
\end<<4541>>it<<4541>>
\begin<<6826>>tex2html_deferred<<6826>>\par\end<<6827>>tex2html_deferred<<6827>>
 
  \paragraph<<5264>>Condiciones: número de paréntesis<<5264>>
  \begin<<5265>>tabular<<5265>><<5266>>c<<5266>>
  \end<<5267>>tabular<<5267>>

\begin<<6828>>tex2html_deferred<<6828>>\par\end<<6829>>tex2html_deferred<<6829>>
Una expresión condicional puede adoptar diversas formas.
La mas simple es un entero en paréntesis. 
Es cierta si la correspondiente referencia 
<tex2html_verb_mark>1036<tex2html_verb_mark> casó (también se puede usar un nombre
si se trata de un paréntesis con nombre). 
\begin<<6830>>tex2html_deferred<<6830>>\par\end<<6831>>tex2html_deferred<<6831>>
En la expresión regular <tex2html_verb_mark>1037<tex2html_verb_mark> si el segundo paréntesis
casa, la cadena debe ir seguida de una <tex2html_verb_mark>1038<tex2html_verb_mark>, si no casa deberá ir seguida de 
una <tex2html_verb_mark>1039<tex2html_verb_mark>: 
\begin<<6832>>tex2html_deferred<<6832>>\par\end<<6833>>tex2html_deferred<<6833>>
\begin<<4543>>tex2html_preform<<4543>><tex2html_verbatim_mark>verbatim1347#\end<<4544>>tex2html_preform<<4544>>
\begin<<6834>>tex2html_deferred<<6834>>\par\end<<6835>>tex2html_deferred<<6835>>
 
  \paragraph<<5268>>Ejemplo: cadenas de la forma <<5272>>\begin<<6836>>tex2html_deferred<<6836>>\it\end<<6837>>tex2html_deferred<<6837>>una<<5272>>-otra-otra-<<5273>>\begin<<6838>>tex2html_deferred<<6838>>\it\end<<6839>>tex2html_deferred<<6839>>una<<5273>><<5268>>
  \begin<<5269>>tabular<<5269>><<5270>>c<<5270>>
  \end<<5271>>tabular<<5271>>

\begin<<6840>>tex2html_deferred<<6840>>\par\end<<6841>>tex2html_deferred<<6841>>
La siguiente búsqueda casa con patrones de la forma 
<tex2html_verb_mark>1040<tex2html_verb_mark> o <tex2html_verb_mark>1041<tex2html_verb_mark>:
\begin<<6842>>tex2html_deferred<<6842>>\par\end<<6843>>tex2html_deferred<<6843>>
\begin<<4547>>tex2html_preform<<4547>><tex2html_verbatim_mark>verbatim1348#\end<<4548>>tex2html_preform<<4548>>
\begin<<6844>>tex2html_deferred<<6844>>\par\end<<6845>>tex2html_deferred<<6845>>
 
  \paragraph<<5274>>Condiciones: Código<<5274>>
  \begin<<5275>>tabular<<5275>><<5276>>c<<5276>>
  \end<<5277>>tabular<<5277>>

\begin<<6846>>tex2html_deferred<<6846>>\par\end<<6847>>tex2html_deferred<<6847>>
Una expresión condicional también puede ser un código:
\begin<<4550>>tex2html_preform<<4550>><tex2html_verbatim_mark>verbatim1349#\end<<4551>>tex2html_preform<<4551>>
\begin<<6848>>tex2html_deferred<<6848>>\par\end<<6849>>tex2html_deferred<<6849>>
 
  \paragraph<<5278>>Ejemplo: Cadenas con posible paréntesis inicial (no anidados)<<5278>>
  \begin<<5279>>tabular<<5279>><<5280>>c<<5280>>
  \end<<5281>>tabular<<5281>>

\begin<<6850>>tex2html_deferred<<6850>>\par\end<<6851>>tex2html_deferred<<6851>>
La siguiente expresión regular utiliza un condicional
para forzar a que si una cadena comienza por un paréntesis
abrir termina con un paréntesis cerrar. Si la cadena 
no comienza por paréntesis abrir no debe existir un paréntesis
final de cierre:
\begin<<6852>>tex2html_deferred<<6852>>\par\end<<6853>>tex2html_deferred<<6853>>
<tex2html_verbatim_mark>rawhtml1350#<tex2html_comment_mark>1131
\begin<<6854>>tex2html_deferred<<6854>>\par\end<<6855>>tex2html_deferred<<6855>>
Al ejecutar este programa se obtiene:
\begin<<4553>>tex2html_preform<<4553>><tex2html_verbatim_mark>verbatim1351#\end<<4554>>tex2html_preform<<4554>>
\begin<<6856>>tex2html_deferred<<6856>>\par\end<<6857>>tex2html_deferred<<6857>>
 
  \paragraph<<5282>>Expresiones Condicionales con <<5286>>\begin<<6858>>tex2html_deferred<<6858>>\tt\end<<6859>>tex2html_deferred<<6859>>(R)<<5286>><<5282>>
  \begin<<5283>>tabular<<5283>><<5284>>c<<5284>>
  \end<<5285>>tabular<<5285>>

\begin<<6860>>tex2html_deferred<<6860>>\par\end<<6861>>tex2html_deferred<<6861>>
El siguiente ejemplo muestra el uso de la condición <tex2html_verb_mark>1042<tex2html_verb_mark>, la cual comprueba 
si la expresión ha sido evaluada dentro de una recursión:
\begin<<4556>>tex2html_preform<<4556>><tex2html_verbatim_mark>verbatim1352#\end<<4557>>tex2html_preform<<4557>>
La sub-expresión regular <tex2html_verb_mark>1043<tex2html_verb_mark> dice:
si  esta siendo evaluada recursivamente admite <tex2html_verb_mark>1044<tex2html_verb_mark>
si no, evalúa la regexp completa recursivamente.
\begin<<6862>>tex2html_deferred<<6862>>\par\end<<6863>>tex2html_deferred<<6863>>
 
  \paragraph<<5287>>Ejemplo: Palíndromos con Equivalencia de Acentos Españoles<<5287>>
  \begin<<5288>>tabular<<5288>><<5289>>c<<5289>>
  \end<<5290>>tabular<<5290>>

\begin<<6864>>tex2html_deferred<<6864>>\par\end<<6865>>tex2html_deferred<<6865>>
Se trata en este ejercicio de generalizar la expresión
regular introducida en la sección
\ref<<4559>>parrafo:palabrapalindromos<<4559>>
para reconocer los palabra-palíndromos\begin<<6866>>tex2html_deferred<<6866>>\footnote<<4560>>
No sé si existe el término. Significa que 
la lectura directa y la inversa 
pueden diferir en los signos de puntuación
<<4560>>\end<<6867>>tex2html_deferred<<6867>>. Se trata de encontrar una regexp que acepte
que la lectura derecha e inversa de una frase en Español
pueda diferir en la acentuación (como es el caso
del clásico palíndromo <<4561>>\begin<<6868>>tex2html_deferred<<6868>>\it\end<<6869>>tex2html_deferred<<6869>>dábale arroz a la zorra 
el abad<<4561>>). Una solución trivial es preprocesar 
la cadena eliminando los acentos. Supondremos sin embargo
que se quiere trabajar sobre la cadena original.
He aquí una solucion parcial (por
consideraciones de legibilidad sólo se consideran las vocales <tex2html_verb_mark>1045<tex2html_verb_mark>
y <tex2html_verb_mark>1046<tex2html_verb_mark>:
\begin<<6870>>tex2html_deferred<<6870>>\par\end<<6871>>tex2html_deferred<<6871>>
<tex2html_verbatim_mark>rawhtml1353#
\begin<<6872>>tex2html_deferred<<6872>>\par\end<<6873>>tex2html_deferred<<6873>>
Ejecución:
\begin<<6874>>tex2html_deferred<<6874>>\par\end<<6875>>tex2html_deferred<<6875>>
<tex2html_verbatim_mark>rawhtml1354#
\begin<<6876>>tex2html_deferred<<6876>>\par\end<<6877>>tex2html_deferred<<6877>>
Hemos usado la opción <tex2html_verb_mark>1047<tex2html_verb_mark> para asegurarnos
que los ficheros de entrada/saldia y error y la línea de
comandos estan en modo UTF-8.
(Véase la sección \ref<<4562>>section:unicode<<4562>>)
\begin<<6878>>tex2html_deferred<<6878>>\par\end<<6879>>tex2html_deferred<<6879>>
Esto es lo que dice la documentación de \htmladdnormallink<<5291>><<5293>>\begin<<6880>>tex2html_deferred<<6880>>\tt\end<<6881>>tex2html_deferred<<6881>>perlrun <<5293>><<5291>>
<<5292>>http://search.cpan.org/perldoc/?perlrun <<5292>>
al respecto:
\begin<<6882>>tex2html_deferred<<6882>>\par\end<<6883>>tex2html_deferred<<6883>>
\begin<<4564>>it<<4564>>
\begin<<4565>>quotation<<4565>>
The <tex2html_verb_mark>1048<tex2html_verb_mark> flag controls some of the Perl Unicode features.
\begin<<6884>>tex2html_deferred<<6884>>\par\end<<6885>>tex2html_deferred<<6885>>
As of 5.8.1, the <tex2html_verb_mark>1049<tex2html_verb_mark> can be followed either by a number or a list of option
letters. The letters, their numeric values, and effects are as follows;
listing the letters is equal to summing the numbers.
\begin<<6886>>tex2html_deferred<<6886>>\par\end<<6887>>tex2html_deferred<<6887>>
\begin<<4566>>tex2html_preform<<4566>><tex2html_verbatim_mark>verbatim1355#\end<<4567>>tex2html_preform<<4567>>
\begin<<6888>>tex2html_deferred<<6888>>\par\end<<6889>>tex2html_deferred<<6889>>
For example, <tex2html_verb_mark>1050<tex2html_verb_mark> and <tex2html_verb_mark>1051<tex2html_verb_mark> will both turn on UTF-8-ness
on both <tex2html_verb_mark>1052<tex2html_verb_mark> and <tex2html_verb_mark>1053<tex2html_verb_mark>. Repeating letters is just redundant, not
cumulative nor toggling.
\begin<<6890>>tex2html_deferred<<6890>>\par\end<<6891>>tex2html_deferred<<6891>>
The io options mean that any subsequent <tex2html_verb_mark>1054<tex2html_verb_mark> (or similar I/O operations)
will have the <tex2html_verb_mark>1055<tex2html_verb_mark> PerlIO layer implicitly applied to them, in other
words, <tex2html_verb_mark>1056<tex2html_verb_mark> is expected from any input stream, and <tex2html_verb_mark>1057<tex2html_verb_mark> is produced
to any output stream. This is just the default, with explicit layers in
<tex2html_verb_mark>1058<tex2html_verb_mark> and with <tex2html_verb_mark>1059<tex2html_verb_mark> one can manipulate streams as usual.
\begin<<6892>>tex2html_deferred<<6892>>\par\end<<6893>>tex2html_deferred<<6893>>
<tex2html_verb_mark>1060<tex2html_verb_mark> on its own (not followed by any number or option list), or the empty string 
<tex2html_verb_mark>1061<tex2html_verb_mark> for the <tex2html_verb_mark>1062<tex2html_verb_mark> environment variable, has the same effect as <tex2html_verb_mark>1063<tex2html_verb_mark> . 
In other words, the standard I/O handles and the default<tex2html_verb_mark>1064<tex2html_verb_mark> layer are 
UTF-8-fied but only if the locale environment variables indicate a
UTF-8 locale. This behaviour follows the implicit (and problematic)
UTF-8 behaviour of Perl 5.8.0.
\begin<<6894>>tex2html_deferred<<6894>>\par\end<<6895>>tex2html_deferred<<6895>>
You can use <tex2html_verb_mark>1065<tex2html_verb_mark> (or <tex2html_verb_mark>1066<tex2html_verb_mark> for <tex2html_verb_mark>1067<tex2html_verb_mark> ) to explicitly disable all
the above Unicode features.
\end<<4568>>quotation<<4568>>
\end<<4569>>it<<4569>>
\begin<<6896>>tex2html_deferred<<6896>>\par\end<<6897>>tex2html_deferred<<6897>>
El pragma <tex2html_verb_mark>1068<tex2html_verb_mark> hace que se utilice una semántica de
carácteres (por ejemplo, la regexp <tex2html_verb_mark>1069<tex2html_verb_mark> casará con un carácter unicode), el
pragma <tex2html_verb_mark>1070<tex2html_verb_mark> cambia de semántica de caracteres
a semántica de bytes (la regexp <tex2html_verb_mark>1071<tex2html_verb_mark> casará con un byte).
\begin<<6898>>tex2html_deferred<<6898>>\par\end<<6899>>tex2html_deferred<<6899>>
<tex2html_verbatim_mark>rawhtml1356#
\begin<<6900>>tex2html_deferred<<6900>>\par\end<<6901>>tex2html_deferred<<6901>>
\subsection<<4570>>Verbos que controlan el retroceso<<4570>>
\begin<<6902>>tex2html_deferred<<6902>>\par\end<<6903>>tex2html_deferred<<6903>>
 
  \paragraph<<5294>>El verbo de control <<5298>>\begin<<6904>>tex2html_deferred<<6904>>\tt\end<<6905>>tex2html_deferred<<6905>>(*FAIL)<<5298>><<5294>>
  \begin<<5295>>tabular<<5295>><<5296>>c<<5296>>
  \end<<5297>>tabular<<5297>>

\begin<<6906>>tex2html_deferred<<6906>>\par\end<<6907>>tex2html_deferred<<6907>>
Tomado de la sección 'Backtracking-control-verbs' en \htmladdnormallink<<5299>><<5301>>\begin<<6908>>tex2html_deferred<<6908>>\tt\end<<6909>>tex2html_deferred<<6909>>perlretut<<5301>><<5299>>
<<5300>>http://perldoc.perl.org/perlretut.html\#Backtracking-control-verbs<<5300>>:
\begin<<6910>>tex2html_deferred<<6910>>\par\end<<6911>>tex2html_deferred<<6911>>
\begin<<4574>>it<<4574>>
\begin<<4575>>quotation<<4575>>
The control verb <tex2html_verb_mark>1072<tex2html_verb_mark> may be abbreviated as <tex2html_verb_mark>1073<tex2html_verb_mark>. 
If this is inserted in a regexp it
will cause to fail, just like at some mismatch between the pattern and
the string. Processing of the regexp continues like after any ;SPMquot;normal;SPMquot;
failure, so that the next position in the string or
another alternative will be tried. As failing to match doesn't preserve
capture buffers or produce results, it may be necessary to use this in
combination with embedded code.
\end<<4576>>quotation<<4576>>
\end<<4577>>it<<4577>>
\begin<<6912>>tex2html_deferred<<6912>>\par\end<<6913>>tex2html_deferred<<6913>>
\begin<<4578>>tex2html_preform<<4578>><tex2html_verbatim_mark>verbatim1357#\end<<4579>>tex2html_preform<<4579>>
Al ejecutarse con entrada <tex2html_verb_mark>1074<tex2html_verb_mark> produce la salida:
\begin<<4580>>tex2html_preform<<4580>><tex2html_verbatim_mark>verbatim1358#\end<<4581>>tex2html_preform<<4581>>
\begin<<6914>>tex2html_deferred<<6914>>\par\end<<6915>>tex2html_deferred<<6915>>
\begin<<4670>>theorem_type<<4670>>[exercise][exercise][section][][][]
¿Que queda en <tex2html_verb_mark>1075<tex2html_verb_mark> depués de ejecutado el matching 
<tex2html_verb_mark>1076<tex2html_verb_mark>?\end<<4671>>theorem_type<<4671>>
\begin<<6916>>tex2html_deferred<<6916>>\par\end<<6917>>tex2html_deferred<<6917>>
Véase  también:
\begin<<4584>>itemize<<4584>>
\item
El nodo en \htmladdnormallink<<5302>>PerlMonks<<5302>>
<<5303>>http://www.perlmonks.org/?node_id=796576<<5303>> \emph<<4586>>The Oldest Plays the Piano<<4586>>
\item Véase el ejercicio <<4587>>\begin<<6918>>tex2html_deferred<<6918>>\it\end<<6919>>tex2html_deferred<<6919>>Las tres hijas<<4587>> en la sección
\ref<<4588>>parrfo:lastreshijas<<4588>>
\end<<4589>>itemize<<4589>>
\begin<<6920>>tex2html_deferred<<6920>>\par\end<<6921>>tex2html_deferred<<6921>>
 
  \paragraph<<5304>>El verbo de control <<5308>>\begin<<6922>>tex2html_deferred<<6922>>\tt\end<<6923>>tex2html_deferred<<6923>>(*ACCEPT)<<5308>><<5304>>
  \begin<<5305>>tabular<<5305>><<5306>>c<<5306>>
  \end<<5307>>tabular<<5307>>

\begin<<6924>>tex2html_deferred<<6924>>\par\end<<6925>>tex2html_deferred<<6925>>
Tomado de \htmladdnormallink<<5309>><<5311>>\begin<<6926>>tex2html_deferred<<6926>>\tt\end<<6927>>tex2html_deferred<<6927>>perlretut<<5311>><<5309>>
<<5310>>http://search.cpan.org/perldoc/?perlretut<<5310>>:
\begin<<6928>>tex2html_deferred<<6928>>\par\end<<6929>>tex2html_deferred<<6929>>
\begin<<4592>>it<<4592>>
\begin<<4593>>quotation<<4593>>
This pattern matches nothing and causes the end of successful matching
at the point at which the <tex2html_verb_mark>1077<tex2html_verb_mark> pattern was encountered, regardless
of whether there is actually more to match in the string. When inside
of a nested pattern, such as recursion, or in a subpattern dynamically
generated via <tex2html_verb_mark>1078<tex2html_verb_mark>, only the innermost pattern is ended immediately.
\begin<<6930>>tex2html_deferred<<6930>>\par\end<<6931>>tex2html_deferred<<6931>>
If the <tex2html_verb_mark>1079<tex2html_verb_mark> is inside of capturing buffers then the buffers are
marked as ended at the point at which the <tex2html_verb_mark>1080<tex2html_verb_mark> was encountered. For
instance:
\begin<<6932>>tex2html_deferred<<6932>>\par\end<<6933>>tex2html_deferred<<6933>>
\begin<<4594>>tex2html_preform<<4594>><tex2html_verbatim_mark>verbatim1359#\end<<4595>>tex2html_preform<<4595>>
\begin<<6934>>tex2html_deferred<<6934>>\par\end<<6935>>tex2html_deferred<<6935>>
\end<<4596>>quotation<<4596>>
\end<<4597>>it<<4597>>
\begin<<6936>>tex2html_deferred<<6936>>\par\end<<6937>>tex2html_deferred<<6937>>
 
  \paragraph<<5312>>El verbo <<5316>>\begin<<6938>>tex2html_deferred<<6938>>\tt\end<<6939>>tex2html_deferred<<6939>>SKIP<<5316>><<5312>>
  \begin<<5313>>tabular<<5313>><<5314>>c<<5314>>
  \end<<5315>>tabular<<5315>>

\begin<<6940>>tex2html_deferred<<6940>>\par\end<<6941>>tex2html_deferred<<6941>>
\begin<<4599>>it<<4599>>
\begin<<4600>>quotation<<4600>>
This zero-width pattern 
prunes the backtracking tree at the current point
when backtracked into on failure. Consider the pattern <tex2html_verb_mark>1081<tex2html_verb_mark>,
where <tex2html_verb_mark>1082<tex2html_verb_mark> and <tex2html_verb_mark>1083<tex2html_verb_mark> are complex patterns. Until the <tex2html_verb_mark>1084<tex2html_verb_mark> verb is reached,
<tex2html_verb_mark>1085<tex2html_verb_mark> may backtrack as necessary to match. Once it is reached, matching
continues in <tex2html_verb_mark>1086<tex2html_verb_mark>, which may also backtrack as necessary; however, should <tex2html_verb_mark>1087<tex2html_verb_mark>
not match, then no further backtracking will take place, and the pattern
will fail outright at the current starting position.
\begin<<6942>>tex2html_deferred<<6942>>\par\end<<6943>>tex2html_deferred<<6943>>
It also signifies that whatever text that was matched leading up to the
<tex2html_verb_mark>1088<tex2html_verb_mark>  pattern being executed cannot be part of any match of this
pattern. This effectively means that the regex engine <tex2html_verb_mark>1089<tex2html_verb_mark> forward
to this position on failure and tries to match again, (assuming that
there is sufficient room to match).
\begin<<6944>>tex2html_deferred<<6944>>\par\end<<6945>>tex2html_deferred<<6945>>
The name of the <tex2html_verb_mark>1090<tex2html_verb_mark> pattern has special significance. If a
<tex2html_verb_mark>1091<tex2html_verb_mark> was encountered while matching, then it is that position
which is used as the ;SPMquot;skip point;SPMquot;. If no <tex2html_verb_mark>1092<tex2html_verb_mark> of that name was
encountered, then the <tex2html_verb_mark>1093<tex2html_verb_mark> operator has no effect. When used without
a name the ;SPMquot;skip point;SPMquot; is where the match point was when executing the
<tex2html_verb_mark>1094<tex2html_verb_mark> pattern.
\end<<4601>>quotation<<4601>>
\end<<4602>>it<<4602>>
\begin<<6946>>tex2html_deferred<<6946>>\par\end<<6947>>tex2html_deferred<<6947>>
Ejemplo:
\begin<<6948>>tex2html_deferred<<6948>>\par\end<<6949>>tex2html_deferred<<6949>>
\begin<<4603>>tex2html_preform<<4603>><tex2html_verbatim_mark>verbatim1360#\end<<4604>>tex2html_preform<<4604>>
\begin<<6950>>tex2html_deferred<<6950>>\par\end<<6951>>tex2html_deferred<<6951>>
Ejecución:
\begin<<6952>>tex2html_deferred<<6952>>\par\end<<6953>>tex2html_deferred<<6953>>
\begin<<4605>>tex2html_preform<<4605>><tex2html_verbatim_mark>verbatim1361#\end<<4606>>tex2html_preform<<4606>>
\begin<<6954>>tex2html_deferred<<6954>>\par\end<<6955>>tex2html_deferred<<6955>>
 
  \paragraph<<5317>>Marcas<<5317>>
  \begin<<5318>>tabular<<5318>><<5319>>c<<5319>>
  \end<<5320>>tabular<<5320>>

\begin<<6956>>tex2html_deferred<<6956>>\par\end<<6957>>tex2html_deferred<<6957>>
Tomado de la sección 'Backtracking-control-verbs' en \htmladdnormallink<<5321>><<5323>>\begin<<6958>>tex2html_deferred<<6958>>\tt\end<<6959>>tex2html_deferred<<6959>>perlretut<<5323>><<5321>>
<<5322>>http://perldoc.perl.org/perlretut.html\#Backtracking-control-verbs<<5322>>:
\begin<<6960>>tex2html_deferred<<6960>>\par\end<<6961>>tex2html_deferred<<6961>>
\begin<<4610>>it<<4610>>
\begin<<4611>>quotation<<4611>>
<tex2html_verb_mark>1095<tex2html_verb_mark>
\begin<<6962>>tex2html_deferred<<6962>>\par\end<<6963>>tex2html_deferred<<6963>>
This zero-width pattern can be used to mark the point reached in a string
when a certain part of the pattern has been successfully matched. This
mark may be given a name. A later <tex2html_verb_mark>1096<tex2html_verb_mark> pattern will then skip
forward to that point if backtracked into on failure. Any number of
<tex2html_verb_mark>1097<tex2html_verb_mark> patterns are allowed, and the <tex2html_verb_mark>1098<tex2html_verb_mark> portion is optional and may
be duplicated.
\begin<<6964>>tex2html_deferred<<6964>>\par\end<<6965>>tex2html_deferred<<6965>>
In addition to interacting with the <tex2html_verb_mark>1099<tex2html_verb_mark> pattern, <tex2html_verb_mark>1100<tex2html_verb_mark> can
be used to <tex2html_verb_mark>1101<tex2html_verb_mark> a pattern branch, so that after matching, the program
can determine which branches of the pattern were involved in the match.
\begin<<6966>>tex2html_deferred<<6966>>\par\end<<6967>>tex2html_deferred<<6967>>
When a match is successful, the <tex2html_verb_mark>1102<tex2html_verb_mark> variable will be set to the name
of the most recently executed <tex2html_verb_mark>1103<tex2html_verb_mark> that was involved in the match.
\begin<<6968>>tex2html_deferred<<6968>>\par\end<<6969>>tex2html_deferred<<6969>>
This can be used to determine which branch of a pattern was
matched without using a separate capture buffer for each branch,
which in turn can result in a performance improvement.
\begin<<6970>>tex2html_deferred<<6970>>\par\end<<6971>>tex2html_deferred<<6971>>
When a match has failed, and unless another verb has been involved in
failing the match and has provided its own name to use, the <tex2html_verb_mark>1104<tex2html_verb_mark>
variable will be set to the name of the most recently executed
<tex2html_verb_mark>1105<tex2html_verb_mark>.
\end<<4612>>quotation<<4612>>
\end<<4613>>it<<4613>>
\begin<<6972>>tex2html_deferred<<6972>>\par\end<<6973>>tex2html_deferred<<6973>>
\begin<<4614>>tex2html_preform<<4614>><tex2html_verbatim_mark>verbatim1362#\end<<4615>>tex2html_preform<<4615>>
Cuando se ejecuta produce:
\begin<<4616>>tex2html_preform<<4616>><tex2html_verbatim_mark>verbatim1363#\end<<4617>>tex2html_preform<<4617>>
\begin<<6974>>tex2html_deferred<<6974>>\par\end<<6975>>tex2html_deferred<<6975>>
 
  \paragraph<<5324>>Poniendo un espacio después de cada signo de puntuación<<5324>>
  \begin<<5325>>tabular<<5325>><<5326>>c<<5326>>
  \end<<5327>>tabular<<5327>>

\begin<<6976>>tex2html_deferred<<6976>>\par\end<<6977>>tex2html_deferred<<6977>>
Se quiere poner un espacio en blanco después de la aparición de cada coma:
\begin<<6978>>tex2html_deferred<<6978>>\par\end<<6979>>tex2html_deferred<<6979>>
\begin<<4619>>tex2html_preform<<4619>><tex2html_verbatim_mark>verbatim1364#\end<<4620>>tex2html_preform<<4620>>
\begin<<6980>>tex2html_deferred<<6980>>\par\end<<6981>>tex2html_deferred<<6981>>
pero se quiere que la sustitución no tenga lugar si la coma esta
incrustada entre dos dígitos. Además se pide que si hay ya un espacio
después de la coma, no se duplique. Sigue una solución que
usa marcas:
\begin<<6982>>tex2html_deferred<<6982>>\par\end<<6983>>tex2html_deferred<<6983>>
\begin<<4621>>tex2html_preform<<4621>><tex2html_verbatim_mark>verbatim1365#\end<<4622>>tex2html_preform<<4622>>
\begin<<6984>>tex2html_deferred<<6984>>\par\end<<6985>>tex2html_deferred<<6985>>
