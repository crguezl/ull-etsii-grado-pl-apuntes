<tex2html_file>#./chapter2/flex.tex#
\chapter<<2462>>Expresiones Regulares en Flex<<2462>> 
Puede encontrar los ejemplos de este capítulo en
\htmladdnormallink<<2463>>https://github.com/crguezl/flex-examples<<2463>><<2464>>https://github.com/crguezl/flex-examples<<2464>>.
\begin<<2874>>tex2html_deferred<<2874>>\par\end<<2875>>tex2html_deferred<<2875>>
Un lenguaje regular es aquel que puede ser descrito mediante expresiones
regulares como las que se utilizan en <tex2html_verb_mark>105<tex2html_verb_mark>, <tex2html_verb_mark>106<tex2html_verb_mark>, <tex2html_verb_mark>107<tex2html_verb_mark>,
<tex2html_verb_mark>108<tex2html_verb_mark> y en tantas otras utilidades UNIX. Dado un lenguaje regular,
un analizador l\'exico es un programa capaz de reconocer las entradas
que pertenecen a dicho lenguaje y realizar las acciones sem\'anticas
que se hayan asociado con los estados de aceptaci\'on.
Un generador de analizadores l\'exicos es una herramienta que facilita
la construcci\'on de un analizador l\'exico. Un generador de analizadores
l\'exicos parte, por tanto, de un lenguaje adecuado para la descripci\'on
de lenguajes regulares (y de su sem\'antica) y produce como salida
una funci\'on (en C, por ejemplo) que materializa el correspondiente
analizador l\'exico.
La mayor parte de los generadores producen a partir del conjunto de
expresiones regulares los correspondientes tablas de los autómatas
finitos deterministas. Utilizando dichas tablas y un algoritmo de
simulación genérico del autómata finito determinista se obtiene el
analizador léxico. Una vez obtenido el estado de aceptación a partir de
la entrada es posible, mediante una sentencia <tex2html_verb_mark>109<tex2html_verb_mark> ejecutar la
acción semántica asociada con la correspondiente expresión regular.
\begin<<2876>>tex2html_deferred<<2876>>\par\end<<2877>>tex2html_deferred<<2877>>
\section<<2465>>Estructura de un programa LEX<<2465>>
\label<<2466>>section:estructuraflex<<2466>>
\begin<<2878>>tex2html_deferred<<2878>>\par\end<<2879>>tex2html_deferred<<2879>>
 
  \paragraph<<2833>>Estructura de un programa<<2833>>
  \begin<<2834>>tabular<<2834>><<2835>>c<<2835>>
  \end<<2836>>tabular<<2836>>

\begin<<2880>>tex2html_deferred<<2880>>\par\end<<2881>>tex2html_deferred<<2881>>
 <<2837>>\begin<<2882>>tex2html_deferred<<2882>>\tt\end<<2883>>tex2html_deferred<<2883>>LEX<<2837>>  y  <<2838>>\begin<<2884>>tex2html_deferred<<2884>>\tt\end<<2885>>tex2html_deferred<<2885>>FLEX<<2838>>  son ejemplos de generadores léxicos.  <<2839>>\begin<<2886>>tex2html_deferred<<2886>>\tt\end<<2887>>tex2html_deferred<<2887>>Flex<<2839>> 
lee desde la entrada est\'andar si no se especifica explícitamente
un fichero de entrada. El fichero de entrada <tex2html_verb_mark>110<tex2html_verb_mark> (se suele usar el tipo <tex2html_verb_mark>111<tex2html_verb_mark>)
debe tener la forma:\\ 
\begin<<2888>>tex2html_deferred<<2888>>\par\end<<2889>>tex2html_deferred<<2889>>
\begin<<2471>>tt<<2471>>
\noindent \%\{              \\ 
declaration C1              \\ 
.\\ 
.\\ 
.\\                    \\ 
declaration CM              \\ 
\%\}              \\ 
macro\_name1 regular\_definition1                  \\ 
.\\ 
.\\ 
.\\                        \\ 
macro\_nameR regular\_definitionR                  \\ 
\begin<<2890>>tex2html_deferred<<2890>>\par\end<<2891>>tex2html_deferred<<2891>>
\noindent \%x exclusive\_state\\ 
\%s inclusive\_state\\ 
\%\%              \\ 
              \\ 
regular\_expression1 \{ action1(); \}              \\ 
.\\ 
.\\ 
.\\               \\ 
regular\_expressionN \{ actionN(); \}              \\ 
              \\ 
\%\%              \\ 
support\_routine1() \{              \\ 
\}              \\ 
.\\ 
.\\ 
.\\               \\ 
support\_routineS() \{              \\ 
\}              \\ 
\end<<2472>>tt<<2472>>
\begin<<2892>>tex2html_deferred<<2892>>\par\end<<2893>>tex2html_deferred<<2893>>
Como vemos,  un programa <tex2html_verb_mark>112<tex2html_verb_mark> consta de 3 secciones, separadas
por <tex2html_verb_mark>114<tex2html_verb_mark>. La primera secci\'on se denomina \index<<2840>>secci\'on de
definiciones<<2840>>\emph<<2841>>secci\'on de
definiciones<<2841>>,
la segunda \index<<2842>>secci\'on de reglas<<2842>>\emph<<2843>>secci\'on de reglas<<2843>> 
y la tercera \index<<2844>>secci\'on de c\'odigo<<2844>>\emph<<2845>>secci\'on de c\'odigo<<2845>>. 
La primera y la \'ultima son opcionales, as\'<<2476>>\i<<2476>> el programa legal <tex2html_verb_mark>115<tex2html_verb_mark> mas simple es:
\begin<<2894>>tex2html_deferred<<2894>>\par\end<<2895>>tex2html_deferred<<2895>>
\begin<<2477>>tabular<<2477>><<2825>>|p<<2478>>8cm<<2478>>|<<2825>>
\hline
\begin<<2479>>tex2html_preform<<2479>><tex2html_verbatim_mark>verbatim622#\end<<2480>>tex2html_preform<<2480>>\\ 
\hline
\end<<2481>>tabular<<2481>>
\begin<<2896>>tex2html_deferred<<2896>>\par\end<<2897>>tex2html_deferred<<2897>>
que genera un analizador que copia su entrada en <tex2html_verb_mark>116<tex2html_verb_mark>.
\begin<<2898>>tex2html_deferred<<2898>>\par\end<<2899>>tex2html_deferred<<2899>>
 
  \paragraph<<2846>>Compilación<<2846>>
  \begin<<2847>>tabular<<2847>><<2848>>c<<2848>>
  \end<<2849>>tabular<<2849>>

\begin<<2900>>tex2html_deferred<<2900>>\par\end<<2901>>tex2html_deferred<<2901>>
\noindent Una vez compilado el fichero de entrada <tex2html_verb_mark>117<tex2html_verb_mark>
mediante la correspondiente orden:
\begin<<2902>>tex2html_deferred<<2902>>\par\end<<2903>>tex2html_deferred<<2903>>
<tex2html_verb_mark>118<tex2html_verb_mark> 
\begin<<2904>>tex2html_deferred<<2904>>\par\end<<2905>>tex2html_deferred<<2905>>
\noindent obtenemos un fichero denominado <tex2html_verb_mark>119<tex2html_verb_mark>. Este fichero
contiene la rutina <tex2html_verb_mark>120<tex2html_verb_mark> que realiza el an\'alisis l\'exico
del lenguaje descrito en <tex2html_verb_mark>121<tex2html_verb_mark>. Supuesto que una de las
<tex2html_verb_mark>122<tex2html_verb_mark> es una funci\'on <tex2html_verb_mark>123<tex2html_verb_mark> que llama a la
funci\'on <tex2html_verb_mark>124<tex2html_verb_mark>, podemos compilar el fichero generado con un
compilador C para obtener un ejecutable <tex2html_verb_mark>125<tex2html_verb_mark>:
\begin<<2906>>tex2html_deferred<<2906>>\par\end<<2907>>tex2html_deferred<<2907>>
<tex2html_verb_mark>126<tex2html_verb_mark> 
\begin<<2908>>tex2html_deferred<<2908>>\par\end<<2909>>tex2html_deferred<<2909>>
\noindent La inclusi\'on de la opci\'on <tex2html_verb_mark>127<tex2html_verb_mark> enlaza con la
librer\'<<2483>>\i<<2483>>a de <tex2html_verb_mark>128<tex2html_verb_mark>, que contiene dos funciones: <tex2html_verb_mark>129<tex2html_verb_mark>
y <tex2html_verb_mark>130<tex2html_verb_mark>.
\begin<<2910>>tex2html_deferred<<2910>>\par\end<<2911>>tex2html_deferred<<2911>>
 
  \paragraph<<2850>>Ejecución<<2850>>
  \begin<<2851>>tabular<<2851>><<2852>>c<<2852>>
  \end<<2853>>tabular<<2853>>

\begin<<2912>>tex2html_deferred<<2912>>\par\end<<2913>>tex2html_deferred<<2913>>
Cuando ejecutamos el programa <tex2html_verb_mark>131<tex2html_verb_mark>, la funci\'on <tex2html_verb_mark>132<tex2html_verb_mark>
analiza las entradas, buscando la secuencia mas larga que casa con alguna
de las expresiones regulares (<tex2html_verb_mark>133<tex2html_verb_mark>) y ejecuta la
correspondiente acci\'on (<tex2html_verb_mark>134<tex2html_verb_mark>).
Si no se encuentra ningun  emparejamiento se ejecuta la \index<<2854>>regla por defecto<<2854>>\emph<<2855>>regla por defecto<<2855>>, que es:
\begin<<2914>>tex2html_deferred<<2914>>\par\end<<2915>>tex2html_deferred<<2915>>
<tex2html_verb_mark>136<tex2html_verb_mark>
\begin<<2916>>tex2html_deferred<<2916>>\par\end<<2917>>tex2html_deferred<<2917>>
Si encuentran dos expresiones regulares con las que la cadena mas larga
casa, elige la que figura primera en el programa <tex2html_verb_mark>137<tex2html_verb_mark>.
Una vez que <tex2html_verb_mark>138<tex2html_verb_mark> ha encontrado el \emph<<2486>>token<<2486>>, esto es, el
patr\'on que casa con la cadena mas larga, dicha cadena queda disponible
a trav\'es del puntero global  <<2856>>\begin<<2918>>tex2html_deferred<<2918>>\tt\end<<2919>>tex2html_deferred<<2919>>yytext<<2856>> , y su longitud queda en la
variable entera global  <<2857>>\begin<<2920>>tex2html_deferred<<2920>>\tt\end<<2921>>tex2html_deferred<<2921>>yyleng<<2857>> .
\begin<<2922>>tex2html_deferred<<2922>>\par\end<<2923>>tex2html_deferred<<2923>>
Una vez que se ha ejecutado la correspondiente acci\'on, <tex2html_verb_mark>139<tex2html_verb_mark>
contin\'ua con el resto de la entrada, buscando por subsiguientes
emparejamientos. Asi continúa hasta encontrar un <tex2html_verb_mark>140<tex2html_verb_mark>,
en cuyo caso termina, retornando un cero o bien hasta que una de las
acciones explicitamente ejecuta una sentencia <tex2html_verb_mark>141<tex2html_verb_mark>.
\begin<<2924>>tex2html_deferred<<2924>>\par\end<<2925>>tex2html_deferred<<2925>>
 
  \paragraph<<2858>>Secci\'on de definiciones<<2858>>
  \begin<<2859>>tabular<<2859>><<2860>>c<<2860>>
  \end<<2861>>tabular<<2861>>

\begin<<2926>>tex2html_deferred<<2926>>\par\end<<2927>>tex2html_deferred<<2927>>
La primera secci\'on contiene, si las hubiera,  las definiciones regulares
y las declaraciones de los estados de arranque.
\begin<<2928>>tex2html_deferred<<2928>>\par\end<<2929>>tex2html_deferred<<2929>>
Las definiciones tiene la forma:
\begin<<2930>>tex2html_deferred<<2930>>\par\end<<2931>>tex2html_deferred<<2931>>
\emph<<2490>>name regular\_definition<<2490>>
\begin<<2932>>tex2html_deferred<<2932>>\par\end<<2933>>tex2html_deferred<<2933>>
donde \emph<<2491>>name<<2491>> puede ser descrito mediante la expresi\'on regular:
\begin<<2934>>tex2html_deferred<<2934>>\par\end<<2935>>tex2html_deferred<<2935>>
<tex2html_verb_mark>142<tex2html_verb_mark> 
\begin<<2936>>tex2html_deferred<<2936>>\par\end<<2937>>tex2html_deferred<<2937>>
La \emph<<2492>>regular\_definition<<2492>> comienza en el primer car\'acter no
blanco que sigue a \emph<<2493>>name<<2493>> y termina al final de la l\'<<2494>>\i<<2494>>nea. La
definici\'on es una expresi\'on regular extendida. Las subsiguientes
definiciones pueden ``llamar'' a la macro <tex2html_verb_mark>143<tex2html_verb_mark> escribi\'endola
entre llaves. La macro se expande entonces a <tex2html_verb_mark>144<tex2html_verb_mark>
en <tex2html_verb_mark>145<tex2html_verb_mark> y a <tex2html_verb_mark>146<tex2html_verb_mark> en <tex2html_verb_mark>147<tex2html_verb_mark>.
\begin<<2938>>tex2html_deferred<<2938>>\par\end<<2939>>tex2html_deferred<<2939>>
El c\'odigo entre los delimitadores <tex2html_verb_mark>149<tex2html_verb_mark> y <tex2html_verb_mark>150<tex2html_verb_mark> se copia
verbatim al fichero de salida, situ\'andose en la parte de declaraciones
globales. Los delimitadores deben aparecer (s\'olos) al comienzo de
la l\'<<2495>>\i<<2495>>nea.
\begin<<2940>>tex2html_deferred<<2940>>\par\end<<2941>>tex2html_deferred<<2941>>
 
  \paragraph<<2862>>El Lenguaje de las Expresiones Regulares Flex<<2862>>
  \begin<<2863>>tabular<<2863>><<2864>>c<<2864>>
  \end<<2865>>tabular<<2865>>

\begin<<2942>>tex2html_deferred<<2942>>\par\end<<2943>>tex2html_deferred<<2943>>
La sint\'axis que puede utilizarse para la descripci\'on de las
expresiones regulares es la que se conoce como ``extendida'':
\begin<<2944>>tex2html_deferred<<2944>>\par\end<<2945>>tex2html_deferred<<2945>>
\begin<<2497>>itemize<<2497>>
\item
<tex2html_verb_mark>151<tex2html_verb_mark>	      Casa con 'x'
\item
<tex2html_verb_mark>152<tex2html_verb_mark>	      Cualquier car\'acter, excepto <tex2html_verb_mark>153<tex2html_verb_mark>.
\item
<tex2html_verb_mark>154<tex2html_verb_mark>      Una ``clase''; en este caso una de las letras <tex2html_verb_mark>155<tex2html_verb_mark>, <tex2html_verb_mark>156<tex2html_verb_mark>, <tex2html_verb_mark>157<tex2html_verb_mark>
\item
<tex2html_verb_mark>158<tex2html_verb_mark>   Una ``clase'' con un rango; casa con  <tex2html_verb_mark>159<tex2html_verb_mark>,  <tex2html_verb_mark>160<tex2html_verb_mark>, cualquier letra desde  <tex2html_verb_mark>161<tex2html_verb_mark> hasta <tex2html_verb_mark>162<tex2html_verb_mark>, o una <tex2html_verb_mark>163<tex2html_verb_mark>
\item
<tex2html_verb_mark>164<tex2html_verb_mark>     Una ``Clase complementada'' esto es, todos los caracteres que no est\'an en la clase. Cualquier car\'acter, excepto las letras may\'usculas. Obs\'ervese que el retorno de carro <tex2html_verb_mark>165<tex2html_verb_mark> casa
con esta expresion. As\'<<2498>>\i<<2498>> es posible que, ;SPMlt;un patr\'on como <tex2html_verb_mark>166<tex2html_verb_mark> pueda casar con todo el fichero!.
\item
<tex2html_verb_mark>167<tex2html_verb_mark>   Cualquier car\'acter, excepto las letras may\'usculas o un <tex2html_verb_mark>168<tex2html_verb_mark>.
\item
\begin<<2946>>tex2html_deferred<<2946>>\par\end<<2947>>tex2html_deferred<<2947>>
<tex2html_verb_mark>169<tex2html_verb_mark> Casa con cualquier caracter alfanum\'erico. Aqui <tex2html_verb_mark>170<tex2html_verb_mark> se refiere a una de las clases predefinidas. Las otras clases son: <tex2html_verb_mark>171<tex2html_verb_mark> <tex2html_verb_mark>172<tex2html_verb_mark> <tex2html_verb_mark>173<tex2html_verb_mark> <tex2html_verb_mark>174<tex2html_verb_mark> <tex2html_verb_mark>175<tex2html_verb_mark> <tex2html_verb_mark>176<tex2html_verb_mark> <tex2html_verb_mark>177<tex2html_verb_mark> <tex2html_verb_mark>178<tex2html_verb_mark> <tex2html_verb_mark>179<tex2html_verb_mark> <tex2html_verb_mark>180<tex2html_verb_mark> <tex2html_verb_mark>181<tex2html_verb_mark>. Estas clases designan el mismo conjunto de caracteres que la correspondiente funci\'on C <tex2html_verb_mark>182<tex2html_verb_mark>.
\begin<<2948>>tex2html_deferred<<2948>>\par\end<<2949>>tex2html_deferred<<2949>>
\item
<tex2html_verb_mark>183<tex2html_verb_mark>	Cero o mas <tex2html_verb_mark>184<tex2html_verb_mark>.
\item
<tex2html_verb_mark>185<tex2html_verb_mark>       Una o mas <tex2html_verb_mark>186<tex2html_verb_mark>.
\item
<tex2html_verb_mark>187<tex2html_verb_mark>	Cero o una  <tex2html_verb_mark>188<tex2html_verb_mark>.
\item
<tex2html_verb_mark>189<tex2html_verb_mark>     Entre 2 y 5  <tex2html_verb_mark>190<tex2html_verb_mark>.
\item
<tex2html_verb_mark>191<tex2html_verb_mark>      2 o mas <tex2html_verb_mark>192<tex2html_verb_mark>. 
<tex2html_verb_mark>193<tex2html_verb_mark>	  Exactamente 4 <tex2html_verb_mark>194<tex2html_verb_mark>. 
\item
<tex2html_verb_mark>195<tex2html_verb_mark>     La expansi\'on de <tex2html_verb_mark>196<tex2html_verb_mark> por su \emph<<2499>>regular\_definition<<2499>>
\item
<tex2html_verb_mark>197<tex2html_verb_mark> Exactamente la cadena: [xyz];SPMquot;foo
\item
<tex2html_verb_mark>198<tex2html_verb_mark>	      Si <tex2html_verb_mark>199<tex2html_verb_mark> is an <tex2html_verb_mark>200<tex2html_verb_mark>, <tex2html_verb_mark>201<tex2html_verb_mark>, <tex2html_verb_mark>202<tex2html_verb_mark>, <tex2html_verb_mark>203<tex2html_verb_mark>, <tex2html_verb_mark>204<tex2html_verb_mark>, <tex2html_verb_mark>205<tex2html_verb_mark>, o <tex2html_verb_mark>206<tex2html_verb_mark>, entonces, la interpretaci\'on ANSI-C de <tex2html_verb_mark>207<tex2html_verb_mark>.  En cualquier otro caso <tex2html_verb_mark>208<tex2html_verb_mark>.
\item
<tex2html_verb_mark>209<tex2html_verb_mark>	      El car\'acter NUL (ASCII 0).
\item
<tex2html_verb_mark>210<tex2html_verb_mark>	      El car\'acter cuyo c\'odigo octal es 123.
\item
<tex2html_verb_mark>211<tex2html_verb_mark>	      El car\'acter cuyo c\'odigo hexadecimal es 2a.
\item
<tex2html_verb_mark>212<tex2html_verb_mark>	      Los par\'entesis son utilizados para cambiar la precedencia.
\item
<tex2html_verb_mark>213<tex2html_verb_mark>	      Concatenation
\item
<tex2html_verb_mark>214<tex2html_verb_mark>	      Casa con  <tex2html_verb_mark>215<tex2html_verb_mark> o <tex2html_verb_mark>216<tex2html_verb_mark>
\item
<tex2html_verb_mark>217<tex2html_verb_mark>	      Una <tex2html_verb_mark>218<tex2html_verb_mark> pero s\'olo si va seguida de una <tex2html_verb_mark>219<tex2html_verb_mark>. El texto casado con <tex2html_verb_mark>220<tex2html_verb_mark> se incluye a la hora de decidir cual es el emparejamiento mas largo, pero se devuelve a la entrada cuando se ejecuta la acci\'on. La acci\'on s\'olo ve el texto asociado con <tex2html_verb_mark>221<tex2html_verb_mark>. Este tipo de patr\'on se denomina \emph<<2500>>trailing context<<2500>> o \emph<<2501>>lookahead<<2501>> positivo.  
\item
<tex2html_verb_mark>222<tex2html_verb_mark>	      Casa con <tex2html_verb_mark>223<tex2html_verb_mark>, al comienzo de una l\'<<2502>>\i<<2502>>nea.
                      Un <tex2html_verb_mark>224<tex2html_verb_mark> que no aparece al comienzo de la l\'<<2503>>\i<<2503>>nea o un <tex2html_verb_mark>225<tex2html_verb_mark> que no aparece al final de la l\'<<2504>>\i<<2504>>nea, pierde su naturaleza de ``ancla'' y es tratado como un car\'acter ordinario. Asi: <tex2html_verb_mark>226<tex2html_verb_mark> se empareja con <tex2html_verb_mark>227<tex2html_verb_mark>. Si lo que se quer\'<<2505>>\i<<2505>>a es la otra interpretaci\'on, es posible escribir <tex2html_verb_mark>228<tex2html_verb_mark>, o bien:
\begin<<2506>>tex2html_preform<<2506>><tex2html_verbatim_mark>verbatim623#\end<<2507>>tex2html_preform<<2507>>
\item
<tex2html_verb_mark>229<tex2html_verb_mark>	      Casa con <tex2html_verb_mark>230<tex2html_verb_mark>, al final de una l\'<<2508>>\i<<2508>>nea. Este es tambi\'en un operador de \emph<<2509>>trailing context<<2509>>. Una regla no puede tener mas de un operador de \emph<<2510>>trailing context<<2510>>. Por ejemplo, la expresi\'on <tex2html_verb_mark>231<tex2html_verb_mark> es incorrecta.
\item
<tex2html_verb_mark>232<tex2html_verb_mark>	      Casa con <tex2html_verb_mark>233<tex2html_verb_mark>, pero s\'olo si se est\'a en el estado <tex2html_verb_mark>234<tex2html_verb_mark>.
\item
<tex2html_verb_mark>235<tex2html_verb_mark>    Idem, si se esta en alguno de los estados <tex2html_verb_mark>236<tex2html_verb_mark>, <tex2html_verb_mark>237<tex2html_verb_mark>, or <tex2html_verb_mark>238<tex2html_verb_mark>
\item
<tex2html_verb_mark>239<tex2html_verb_mark>	      Casa con <tex2html_verb_mark>240<tex2html_verb_mark> cualquiera que sea el estado, incluso si este es exclusivo.
\item
<tex2html_verb_mark>241<tex2html_verb_mark>        Un final de fichero.
\item
<tex2html_verb_mark>242<tex2html_verb_mark> Un final de fichero, si los estados son <tex2html_verb_mark>243<tex2html_verb_mark> o <tex2html_verb_mark>244<tex2html_verb_mark>
\end<<2511>>itemize<<2511>>
\begin<<2950>>tex2html_deferred<<2950>>\par\end<<2951>>tex2html_deferred<<2951>>
Los operadores han sido listados en orden de precedencia, de la
mas alta a la mas baja. Por ejemplo <tex2html_verb_mark>245<tex2html_verb_mark> es lo mismo que
<tex2html_verb_mark>246<tex2html_verb_mark>.
\begin<<2952>>tex2html_deferred<<2952>>\par\end<<2953>>tex2html_deferred<<2953>>
 
  \paragraph<<2866>>Las Acciones Semánticas<<2866>>
  \begin<<2867>>tabular<<2867>><<2868>>c<<2868>>
  \end<<2869>>tabular<<2869>>

\begin<<2954>>tex2html_deferred<<2954>>\par\end<<2955>>tex2html_deferred<<2955>>
Cada patrón regular tiene su correspondiente acción asociada. El patrón
termina en el primer espacio en blanco (sin contar aquellos que están
entre comillas dobles o prefijados de secuencias de escape).
Si la acción comienza con <tex2html_verb_mark>247<tex2html_verb_mark>, entonces se puede extender a través
de multiples líneas, hasta la correspondiente <tex2html_verb_mark>248<tex2html_verb_mark>.  El programa
<tex2html_verb_mark>249<tex2html_verb_mark>  no hace un análisis del código C dentro de la acción.
Existen tres directivas que pueden insertarse dentro de las acciones:
<tex2html_verb_mark>250<tex2html_verb_mark>, <tex2html_verb_mark>251<tex2html_verb_mark> y <tex2html_verb_mark>252<tex2html_verb_mark>. Su uso se muestra en los
subsiguientes ejemplos.
\begin<<2956>>tex2html_deferred<<2956>>\par\end<<2957>>tex2html_deferred<<2957>>
La secci\'on de c\'odigo se copia verbatim en <tex2html_verb_mark>253<tex2html_verb_mark>. Es
utilizada para proveer las funciones de apoyo que se requieran para la
descripci\'on de las acciones asociadas con los patrones que parecen en
la secci\'on de reglas.
\begin<<2958>>tex2html_deferred<<2958>>\par\end<<2959>>tex2html_deferred<<2959>>
\section<<2513>>Versi\'on Utilizada<<2513>>
Todos los ejemplos que aparecen en este documento fueron
preparados con la versi\'on 2.5.4 de \emph<<2514>>flex<<2514>> en un entorno
Linux 
\begin<<2515>>tex2html_preform<<2515>><tex2html_verbatim_mark>verbatim624#\end<<2516>>tex2html_preform<<2516>>
y con la versi\'on 2.5.2 en un entorno Solaris
\begin<<2517>>tex2html_preform<<2517>><tex2html_verbatim_mark>verbatim625#\end<<2518>>tex2html_preform<<2518>>
\begin<<2960>>tex2html_deferred<<2960>>\par\end<<2961>>tex2html_deferred<<2961>>
\section<<2519>>Espacios en blanco dentro de la expresión regular<<2519>>
\label<<2520>>section:blancos<<2520>>
La expresión regular va desde el comienzo de la línea hasta el primer espacio en blanco 
no escapado. Todos los espacios en blanco que formen parte de la 
expresión regular 
deben ser escapados o protegidos entre comillas. Así, el siguiente
programa produce un error en tiempo de compilación C:
\begin<<2521>>tex2html_preform<<2521>><tex2html_verbatim_mark>verbatim626#\end<<2522>>tex2html_preform<<2522>>
Deberíamos escapar el blanco entre <tex2html_verb_mark>254<tex2html_verb_mark> y <tex2html_verb_mark>255<tex2html_verb_mark> o bien
proteger la cadena poniéndola entre comillas: <tex2html_verb_mark>256<tex2html_verb_mark>.
\begin<<2962>>tex2html_deferred<<2962>>\par\end<<2963>>tex2html_deferred<<2963>>
\section<<2523>>Ejemplo Simple<<2523>>
\label<<2524>>section:ejemplosimple<<2524>>
Este primer ejemplo sustituye las apariciones de la palabra 
\emph<<2525>>username<<2525>> por el \emph<<2526>>login<<2526>> del usuario:
\begin<<2527>>tex2html_preform<<2527>><tex2html_verbatim_mark>verbatim627#\end<<2528>>tex2html_preform<<2528>>
He presionado CTRL-D para finalizar la entrada.\\ 
Observe el uso de la opci\'on <tex2html_verb_mark>258<tex2html_verb_mark> en el fichero
\emph<<2529>>subst.l<<2529>> para hacer que \emph<<2530>>flex<<2530>> genere una funci\'on
\emph<<2531>>main<<2531>>. Tambi\'en merece especial
atenci\'on el uso de la opci\'on  <tex2html_verb_mark>259<tex2html_verb_mark> para cambiar el
nombre del fichero de salida, que por defecto ser\'a \emph<<2532>>lex.yy.c<<2532>>.
\begin<<2964>>tex2html_deferred<<2964>>\par\end<<2965>>tex2html_deferred<<2965>>
\section<<2533>>Suprimir<<2533>>
\label<<2534>>section:suprimir<<2534>>
Al igual que en \emph<<2535>>sed<<2535>> y \emph<<2536>>awk<<2536>>, es muy sencillo
suprimir las apariciones de una expresi\'on regular. 
\begin<<2537>>tex2html_preform<<2537>><tex2html_verbatim_mark>verbatim628#\end<<2538>>tex2html_preform<<2538>>
\begin<<2966>>tex2html_deferred<<2966>>\par\end<<2967>>tex2html_deferred<<2967>>
\section<<2539>>Declaraci\'on de yytext<<2539>>
\label<<2540>>section:yytextdec<<2540>>
En la sección de definiciones es posible utilizar las directivas
<tex2html_verb_mark>261<tex2html_verb_mark> o <tex2html_verb_mark>262<tex2html_verb_mark>. Estas directivas hacen que  <<2870>>\begin<<2968>>tex2html_deferred<<2968>>\tt\end<<2969>>tex2html_deferred<<2969>>yytext<<2870>> 
se declare como un puntero o un \emph<<2542>>array<<2542>> respectivamente.
La opción por defecto es declararlo como un puntero, salvo que se haya
usado la opción <tex2html_verb_mark>263<tex2html_verb_mark> en la línea de comandos, para garantizar una
mayor compatibilidad con <tex2html_verb_mark>264<tex2html_verb_mark>.
Sin embargo, y aunque la opci\'on  <tex2html_verb_mark>266<tex2html_verb_mark> es la mas eficiente
(el análisis es mas rápido y se evitan los \emph<<2543>>buffer overflow<<2543>>),
limita la posible manipulaci\'on de \emph<<2544>>yytext<<2544>> y de las llamadas
a <tex2html_verb_mark>267<tex2html_verb_mark>.
\begin<<2545>>tex2html_preform<<2545>><tex2html_verbatim_mark>verbatim629#\end<<2546>>tex2html_preform<<2546>>
Este error no aparece si se utiliza la opci\'on <tex2html_verb_mark>269<tex2html_verb_mark>:
\begin<<2547>>tex2html_preform<<2547>><tex2html_verbatim_mark>verbatim630#\end<<2548>>tex2html_preform<<2548>>
\begin<<2970>>tex2html_deferred<<2970>>\par\end<<2971>>tex2html_deferred<<2971>>
Además, algunos programs <tex2html_verb_mark>270<tex2html_verb_mark>  modifican directamente <tex2html_verb_mark>271<tex2html_verb_mark>, utilizando la declaración:
\begin<<2972>>tex2html_deferred<<2972>>\par\end<<2973>>tex2html_deferred<<2973>>
\noindent <tex2html_verb_mark>272<tex2html_verb_mark>
\begin<<2974>>tex2html_deferred<<2974>>\par\end<<2975>>tex2html_deferred<<2975>>
\noindent que es incompatible con la directiva <tex2html_verb_mark>274<tex2html_verb_mark> (pero correcta con <tex2html_verb_mark>275<tex2html_verb_mark>).
La directiva <tex2html_verb_mark>277<tex2html_verb_mark> define <tex2html_verb_mark>278<tex2html_verb_mark> como un \emph<<2549>>array<<2549>> de tamaño <tex2html_verb_mark>279<tex2html_verb_mark>.
Si deseamos trabajar con un mayor tamaño, basta con redefinir <tex2html_verb_mark>280<tex2html_verb_mark>.
\begin<<2976>>tex2html_deferred<<2976>>\par\end<<2977>>tex2html_deferred<<2977>>
\section<<2550>>Declaraci\'on de yylex()<<2550>>
\label<<2551>>section:yylexdec<<2551>>
Por defecto la funci\'on \emph<<2552>>yylex()<<2552>> que realiza el an\'alisis l\'exico es
declarada como  <tex2html_verb_mark>281<tex2html_verb_mark>. Es posible cambiar la declaraci\'on
por defecto utilizando la macro \emph<<2553>>YY\_DECL<<2553>>. En el siguiente ejemplo
la definici\'on:
\begin<<2554>>tex2html_preform<<2554>><tex2html_verbatim_mark>verbatim631#\end<<2555>>tex2html_preform<<2555>>
hace que la rutina de an\'alisis l\'exico pase a llamarse 
\emph<<2556>>scanner<<2556>> y tenga dos parametros de entrada, retornando
un valor de tipo <tex2html_verb_mark>282<tex2html_verb_mark>.
\begin<<2557>>tex2html_preform<<2557>><tex2html_verbatim_mark>verbatim632#\end<<2558>>tex2html_preform<<2558>>
La ejecuci\'on del programa anterior produce la siguiente salida:
\begin<<2559>>tex2html_preform<<2559>><tex2html_verbatim_mark>verbatim633#\end<<2560>>tex2html_preform<<2560>>
\begin<<2978>>tex2html_deferred<<2978>>\par\end<<2979>>tex2html_deferred<<2979>>
\section<<2561>>yywrap()<<2561>>
Cuando el analizador l\'exico alcanza el final del fichero, el
comportamiento en las subsiguientes llamadas a \emph<<2562>>yylex<<2562>>
resulta indefinido.  En el momento en que  \emph<<2563>>yylex()<<2563>>
alcanza el final del fichero llama a la funci\'on \emph<<2564>>yywrap<<2564>>, la cual retorna un
valor de 0 o 1 seg\'un haya mas entrada o no. Si el valor es 0,
la funci\'on \emph<<2565>>yylex<<2565>> asume que la propia \emph<<2566>>yywrap<<2566>>
se ha encargado de abrir el nuevo fichero y asignarselo
a  <<2871>>\begin<<2980>>tex2html_deferred<<2980>>\tt\end<<2981>>tex2html_deferred<<2981>>yyin<<2871>> .  Otra manera de continuar es haciendo uso de
la funci\'on \emph<<2568>>yyrestart(FILE *file)<<2568>>. 
El siguiente ejemplo cuenta el n\'umero de l\'<<2569>>\i<<2569>>neas, palabras y
caracteres en una lista de ficheros proporcionados como entrada.
\begin<<2982>>tex2html_deferred<<2982>>\par\end<<2983>>tex2html_deferred<<2983>>
\begin<<2570>>tex2html_preform<<2570>><tex2html_verbatim_mark>verbatim634#\end<<2571>>tex2html_preform<<2571>>
\begin<<2984>>tex2html_deferred<<2984>>\par\end<<2985>>tex2html_deferred<<2985>>
La figura muestra el proceso de compilaci\'on y la ejecuci\'on:
\begin<<2572>>tex2html_preform<<2572>><tex2html_verbatim_mark>verbatim635#\end<<2573>>tex2html_preform<<2573>>
La diferencia esencial entre asignar \emph<<2574>>yyin<<2574>> o llamar a la
funci\'on \emph<<2575>>yyrestart<<2575>> es que esta \'ultima puede ser utilizada para
conmutar entre ficheros en medio de un an\'alisis l\'exico. El
funcionamiento del programa anterior no se modifica si se 
se intercambian asignaciones a \emph<<2576>>yyin<<2576>> (\emph<<2577>>yyin = file<<2577>>)
y llamadas a \emph<<2578>>yyrestart(file)<<2578>>.
\begin<<2986>>tex2html_deferred<<2986>>\par\end<<2987>>tex2html_deferred<<2987>>
\section<<2579>>unput()<<2579>>
La funci\'on \emph<<2580>>unput(c)<<2580>> coloca el car\'acter \emph<<2581>>c<<2581>> en el flujo
de entrada, de manera que ser\'a el primer car\'acter le\'<<2582>>\i<<2582>>do en pr\'oxima
ocasi\'on.
\begin<<2583>>tex2html_preform<<2583>><tex2html_verbatim_mark>verbatim636#\end<<2584>>tex2html_preform<<2584>>
Un problema importante con \emph<<2585>>unput<<2585>> es que, cuando se utiliza la
opci\'on <tex2html_verb_mark>284<tex2html_verb_mark>, las llamadas a \emph<<2586>>unput<<2586>> destruyen los
contenidos de \emph<<2587>>yytext<<2587>>. Es por eso que, en el siguiente ejemplo se
hace una copia de \emph<<2588>>yytext<<2588>>. La otra alternativa es, por supuesto,
usar la opci\'on <tex2html_verb_mark>286<tex2html_verb_mark>.
\begin<<2589>>tex2html_preform<<2589>><tex2html_verbatim_mark>verbatim637#\end<<2590>>tex2html_preform<<2590>>
\begin<<2988>>tex2html_deferred<<2988>>\par\end<<2989>>tex2html_deferred<<2989>>
\section<<2591>>input()<<2591>>
\label<<2592>>section:input<<2592>>
La funci\'on \emph<<2593>>input()<<2593>> lee desde el flujo de entrada 
el siguiente car\'acter. Normalmente la utilizaremos si queremos 
tomar ``personalmente el control''  del an\'alisis. El ejemplo 
permite ``engullir'' los comentarios (no anidados):
\begin<<2594>>tex2html_preform<<2594>><tex2html_verbatim_mark>verbatim638#\end<<2595>>tex2html_preform<<2595>>
La funci\'on <tex2html_verb_mark>287<tex2html_verb_mark> termina la rutina de an\'alisis l\'exico y devuelve un cero indicándole a la rutina que llama que todo se ha acabado. 
Por defecto, <tex2html_verb_mark>288<tex2html_verb_mark> es llamada cuando se encuentra 
un final de fichero. Es una macro y puede ser redefinida.
\begin<<2596>>tex2html_preform<<2596>><tex2html_verbatim_mark>verbatim639#\end<<2597>>tex2html_preform<<2597>>
He presionado CTRL-D despu\'es de entrar la palabra \emph<<2598>>comment<<2598>>.
\begin<<2990>>tex2html_deferred<<2990>>\par\end<<2991>>tex2html_deferred<<2991>>
\section<<2599>>REJECT<<2599>>
La directiva  <tex2html_verb_mark>289<tex2html_verb_mark> le indica al analizador que proceda con la 
siguiente regla que casa con un prefijo de la entrada. Como es habitual en
\emph<<2600>>flex<<2600>>, se elige la siguiente regla que casa  con la cadena mas
larga. Consideremos el siguiente ejemplo:
\begin<<2601>>tex2html_preform<<2601>><tex2html_verbatim_mark>verbatim640#\end<<2602>>tex2html_preform<<2602>>
La salida es:
\begin<<2603>>tex2html_preform<<2603>><tex2html_verbatim_mark>verbatim641#\end<<2604>>tex2html_preform<<2604>>
Observe que <tex2html_verb_mark>290<tex2html_verb_mark> supone un cambio en el flujo de control:
El c\'odigo que figura despu\'es de <tex2html_verb_mark>291<tex2html_verb_mark> no es ejecutado.
\begin<<2992>>tex2html_deferred<<2992>>\par\end<<2993>>tex2html_deferred<<2993>>
\section<<2605>>yymore()<<2605>>
La funci\'on <tex2html_verb_mark>292<tex2html_verb_mark> hace que, en vez de vaciar \emph<<2606>>yytext<<2606>>
para el siguiente \emph<<2607>>matching<<2607>>, el valor actual se mantenga,
concatenando el valor actual de \emph<<2608>>yytext<<2608>> con el siguiente:
\begin<<2609>>tex2html_preform<<2609>><tex2html_verbatim_mark>verbatim642#\end<<2610>>tex2html_preform<<2610>>
La variable <tex2html_verb_mark>293<tex2html_verb_mark> no deber\'<<2611>>\i<<2611>>a ser modificada si se hace uso de la
funci\'on <tex2html_verb_mark>294<tex2html_verb_mark>.
\begin<<2994>>tex2html_deferred<<2994>>\par\end<<2995>>tex2html_deferred<<2995>>
\section<<2612>>yyless()<<2612>>
La funci\'on <tex2html_verb_mark>295<tex2html_verb_mark> permite retrasar el puntero de lectura  
de manera que apunta al car\'acter \emph<<2613>>n<<2613>> de \emph<<2614>>yytext<<2614>>. 
Veamos un ejemplo:
\begin<<2615>>tex2html_preform<<2615>><tex2html_verbatim_mark>verbatim643#\end<<2616>>tex2html_preform<<2616>>
Veamos un ejemplo mas ``real''. supongamos que tenemos que reconocer 
las cadenas entre comillas dobles, pero que pueden aparecer en las
mismas secuencias de escape <tex2html_verb_mark>296<tex2html_verb_mark>. La estrategia general del algoritmo
es utilizar la expresión regular <tex2html_verb_mark>297<tex2html_verb_mark> y examinar si
los dos últimos  carácteres en <tex2html_verb_mark>298<tex2html_verb_mark> son <tex2html_verb_mark>299<tex2html_verb_mark>. En tal caso, 
se concatena la cadena actual (sin la <tex2html_verb_mark>300<tex2html_verb_mark> final) como prefijo para
el próximo emparejamiento (utilizando <tex2html_verb_mark>301<tex2html_verb_mark>). 
La eliminación de la <tex2html_verb_mark>302<tex2html_verb_mark> se hace a través de la ejecución de 
<tex2html_verb_mark>303<tex2html_verb_mark>, que al mismo tiempo garantiza que el próximo emparejamiento 
tendrá lugar con este mismo patrón <tex2html_verb_mark>304<tex2html_verb_mark>.
\begin<<2617>>tex2html_preform<<2617>><tex2html_verbatim_mark>verbatim644#\end<<2618>>tex2html_preform<<2618>>
El ejemplo no puede entenderse si no se tiene en cuenta que
<tex2html_verb_mark>305<tex2html_verb_mark> actualiza los valores de \emph<<2619>>yyleng<<2619>> 
y \emph<<2620>>yytext<<2620>>, como muestra la salida.\\ 
¿Qu\'e ocurre si intercambiamos las posiciones de <tex2html_verb_mark>306<tex2html_verb_mark>
e <tex2html_verb_mark>307<tex2html_verb_mark> en el c\'odigo? ;SPMgt;Cambiara la salida? 
La respuesta es que no. Parece que la concatenaci\'on se hace con el valor
final de \emph<<2621>>yytext<<2621>> y no con el valor que este ten\'<<2622>>\i<<2622>>a en el momento de
la llamada a \emph<<2623>>yymore<<2623>>.\\ 
Otra observaci\'on  a tener en cuenta es que \emph<<2624>>yyless()<<2624>>
es una macro y que, por tanto,
s\'olo puede ser utilizada dentro del fichero \emph<<2625>>lex<<2625>> y no en otros
ficheros fuentes.
\begin<<2996>>tex2html_deferred<<2996>>\par\end<<2997>>tex2html_deferred<<2997>>
En general, el uso de estas funciones  nos puede resolver el problema
de reconocer l\'<<2626>>\i<<2626>>mites que de otra forma ser\'<<2627>>\i<<2627>>an dif\'<<2628>>\i<<2628>>ciles de expresar
con una expresi\'on regular.
\begin<<2629>>tex2html_preform<<2629>><tex2html_verbatim_mark>verbatim645#\end<<2630>>tex2html_preform<<2630>>
\begin<<2998>>tex2html_deferred<<2998>>\par\end<<2999>>tex2html_deferred<<2999>>
\section<<2631>>Estados<<2631>>
Las expresiones regulares pueden ser prefijadas mediante \emph<<2632>>estados<<2632>>.
Los estados o condiciones de arranque, se denotan mediante un
identificador entre \'angulos y se declaran
en la parte de las definiciones. Las declaraciones se hacen mediante 
<tex2html_verb_mark>309<tex2html_verb_mark> para los estados ``inclusivos'' o bien <tex2html_verb_mark>310<tex2html_verb_mark> para los estados ``exclusivos'',
seguidos de los nombres de los estados. No pueden haber caracteres en blanco antes de la declaración.
Un \emph<<2633>>estado<<2633>> se activa mediante la 
acci\'on BEGIN \emph<<2634>>estado<<2634>>. A partir de ese momento, las reglas que esten
prefijadas con el estado pasan a estar activas. En el caso de que el estado
sea inclusivo, las reglas no prefijadas tambi\'en permanecen activas.
Los estados exclusivos son especialmente útiles para especificar ``sub analizadores''
que analizan porciones de la entrada cuya estructura ``sintáctica'' es diferente
de la del resto de la entrada.
\begin<<3000>>tex2html_deferred<<3000>>\par\end<<3001>>tex2html_deferred<<3001>>
El ejemplo ``absorbe'' los comentarios, conservando el numero de
l\'<<2635>>\i<<2635>>neas del fichero en la variable <tex2html_verb_mark>311<tex2html_verb_mark>
\begin<<3002>>tex2html_deferred<<3002>>\par\end<<3003>>tex2html_deferred<<3003>>
\begin<<2636>>tex2html_preform<<2636>><tex2html_verbatim_mark>verbatim646#\end<<2637>>tex2html_preform<<2637>>
La opción <tex2html_verb_mark>312<tex2html_verb_mark> hace que <tex2html_verb_mark>313<tex2html_verb_mark> no llame a la función <tex2html_verb_mark>314<tex2html_verb_mark>
al final del fichero y que asuma que no hay mas entrada por procesar.
\begin<<3004>>tex2html_deferred<<3004>>\par\end<<3005>>tex2html_deferred<<3005>>
Los estados se traducen por enteros, pudiendo ser manipulados como tales.
La macro <tex2html_verb_mark>315<tex2html_verb_mark> puede utilizarse para referirse al estado 0.
Las macros <tex2html_verb_mark>316<tex2html_verb_mark> y <tex2html_verb_mark>317<tex2html_verb_mark> contienen el valor del estado actual.
\begin<<2638>>tex2html_preform<<2638>><tex2html_verbatim_mark>verbatim647#\end<<2639>>tex2html_preform<<2639>>
En \emph<<2640>>flex<<2640>> es posible asociar un \'ambito con los estados o 
condiciones iniciales. Basta con colocar entre llaves las 
parejas \emph<<2641>>patr\'on acci\'on<<2641>> gobernadas por ese estado.
El siguiente ejemplo procesa las cadenas \emph<<2642>>C<<2642>>:
\begin<<2643>>tex2html_preform<<2643>><tex2html_verbatim_mark>verbatim648#\end<<2644>>tex2html_preform<<2644>>
Obsérve la conducta del programa ante las siguientes entradas:
\begin<<2645>>itemize<<2645>>
\item
Entrada:
\begin<<2646>>tex2html_preform<<2646>><tex2html_verbatim_mark>verbatim649#\end<<2647>>tex2html_preform<<2647>>
¿Cuál será la salida? ¿Que patrón del programa anterior es el que casa aqui?
\item
Entrada:
<tex2html_verb_mark>318<tex2html_verb_mark>.
¿Cuál será la salida? ¿Que patrón del programa anterior es el que casa aqui?
\item
\begin<<2648>>tex2html_preform<<2648>><tex2html_verbatim_mark>verbatim650#\end<<2649>>tex2html_preform<<2649>>
Donde hay un retorno del carro después de <tex2html_verb_mark>319<tex2html_verb_mark>.
¿Cuál será la salida? <tex2html_comment_mark>494
\end<<2650>>itemize<<2650>>
\begin<<3006>>tex2html_deferred<<3006>>\par\end<<3007>>tex2html_deferred<<3007>>
\section<<2651>>La pila de estados<<2651>>
Mediante el uso de la opción
\begin<<3008>>tex2html_deferred<<3008>>\par\end<<3009>>tex2html_deferred<<3009>>
<tex2html_verb_mark>321<tex2html_verb_mark>
\begin<<3010>>tex2html_deferred<<3010>>\par\end<<3011>>tex2html_deferred<<3011>>
\noindent tendremos acceso a una pila de estados y a tres rutinas para  manipularla:\\ 
\begin<<2652>>itemize<<2652>>
\item
<tex2html_verb_mark>322<tex2html_verb_mark>\\ 
Empuja el estado actual y bifurca a <tex2html_verb_mark>323<tex2html_verb_mark>.\\ 
\item
<tex2html_verb_mark>324<tex2html_verb_mark>\\ 
Saca el estado en el \emph<<2653>>top<<2653>> de la pila y bifurca a el mismo.\\ 
\item
<tex2html_verb_mark>325<tex2html_verb_mark>\\ 
Nos devuelve el estado en el \emph<<2654>>top<<2654>> de la pila, sin alterar
los contenidos de la misma.
\end<<2655>>itemize<<2655>>
\begin<<3012>>tex2html_deferred<<3012>>\par\end<<3013>>tex2html_deferred<<3013>>
\subsection<<2656>>Ejemplo<<2656>>
El siguiente programa <tex2html_verb_mark>326<tex2html_verb_mark> utiliza las funciones de la pila
de estados para reconocer el lenguaje (no regular) 
\begin<<2872>>tex2html_wrap_inline<<2872>>$\{a^n b^n\ /\ n \in N\}$\end<<2873>>tex2html_wrap_inline<<2873>>
\begin<<3014>>tex2html_deferred<<3014>>\par\end<<3015>>tex2html_deferred<<3015>>
\begin<<2657>>tex2html_preform<<2657>><tex2html_verbatim_mark>verbatim651#\end<<2658>>tex2html_preform<<2658>>
\begin<<3016>>tex2html_deferred<<3016>>\par\end<<3017>>tex2html_deferred<<3017>>
\section<<2659>>Final de Fichero<<2659>>
El patrón <tex2html_verb_mark>327<tex2html_verb_mark> permite asociar acciones que se deban 
ejecutar cuando se ha encontrado un \emph<<2660>>end of file<<2660>> y la 
macro <tex2html_verb_mark>328<tex2html_verb_mark> ha devuelto un valor no nulo. 
\begin<<3018>>tex2html_deferred<<3018>>\par\end<<3019>>tex2html_deferred<<3019>>
Cualquiera que sea, la acción asociada deberá de optar por una de estas 
cuatro alternativas:
\begin<<2661>>itemize<<2661>>
\item
Asignar <tex2html_verb_mark>329<tex2html_verb_mark> a un nuevo fichero de entrada
\item
Ejecutar <tex2html_verb_mark>330<tex2html_verb_mark>
\item
Ejecutar <tex2html_verb_mark>331<tex2html_verb_mark> (véase  la sección \ref<<2662>>section:input<<2662>>)
\item
Cambiar de \emph<<2663>>buffer<<2663>> de entrada utilizando la función
<tex2html_verb_mark>332<tex2html_verb_mark> (véase  la sección \ref<<2664>>section:include<<2664>>).
\end<<2665>>itemize<<2665>>
\begin<<3020>>tex2html_deferred<<3020>>\par\end<<3021>>tex2html_deferred<<3021>>
El patrón <tex2html_verb_mark>333<tex2html_verb_mark> no puede usarse con otras expresiones regulares. Sin embargo, es correcto prefijarlo con estados.
\begin<<3022>>tex2html_deferred<<3022>>\par\end<<3023>>tex2html_deferred<<3023>>
Si  <tex2html_verb_mark>334<tex2html_verb_mark> aparece sin condiciones de arranque, la regla se aplica a todos los estados que no tienen una regla  <tex2html_verb_mark>335<tex2html_verb_mark> específica.
Si lo que se quiere es que la regla se restringa al ámbito del estado inicial se deberá escribir:
\begin<<3024>>tex2html_deferred<<3024>>\par\end<<3025>>tex2html_deferred<<3025>>
<tex2html_verb_mark>336<tex2html_verb_mark> 
\begin<<3026>>tex2html_deferred<<3026>>\par\end<<3027>>tex2html_deferred<<3027>>
Sigue un programa que reconoce los comentarios anidados en C.
Para detectar comentarios incacabados usaremos  <tex2html_verb_mark>337<tex2html_verb_mark>.
\label<<2666>>nestedcomments<<2666>>
\begin<<2667>>tex2html_preform<<2667>><tex2html_verbatim_mark>verbatim652#\end<<2668>>tex2html_preform<<2668>>
\begin<<3028>>tex2html_deferred<<3028>>\par\end<<3029>>tex2html_deferred<<3029>>
\begin<<2669>>tex2html_preform<<2669>><tex2html_verbatim_mark>verbatim653#\end<<2670>>tex2html_preform<<2670>>
\begin<<3030>>tex2html_deferred<<3030>>\par\end<<3031>>tex2html_deferred<<3031>>
\section<<2671>>Uso de Dos Analizadores<<2671>>
La opción <tex2html_verb_mark>338<tex2html_verb_mark> de flex cambia el prefijo por defecto <tex2html_verb_mark>339<tex2html_verb_mark>
para todas las variables globales y funciones. Por ejemplo 
<tex2html_verb_mark>340<tex2html_verb_mark> cambia el nombre de  <tex2html_verb_mark>341<tex2html_verb_mark> <tex2html_verb_mark>342<tex2html_verb_mark>.  
También cambia el nombre del fichero de salida 
de  <tex2html_verb_mark>343<tex2html_verb_mark>  a <tex2html_verb_mark>344<tex2html_verb_mark>.  
Sigue la lista de identificadores afectados:
\begin<<2672>>tex2html_preform<<2672>><tex2html_verbatim_mark>verbatim654#\end<<2673>>tex2html_preform<<2673>> 
Desde dentro del analizador léxico puedes referirte a las 
variables globales y funciones por cualquiera de los nombres,
pero externamente tienen el nombre cambiado.
Esta opción nos permite enlazar diferentes programas flex en un mismo ejecutable.
\begin<<3032>>tex2html_deferred<<3032>>\par\end<<3033>>tex2html_deferred<<3033>>
Sigue un ejemplo de uso de dos analizadores l\'exicos dentro del mismo programa:
\begin<<2674>>tex2html_preform<<2674>><tex2html_verbatim_mark>verbatim655#\end<<2675>>tex2html_preform<<2675>>
Como hemos mencionado, la compilaci\'on \emph<<2676>>flex<<2676>> se debe realizar con el opci\'on <tex2html_verb_mark>345<tex2html_verb_mark>,
que cambia el prefijo por defecto <tex2html_verb_mark>346<tex2html_verb_mark> de las funciones
y variables accesibles por el usuario.
El mismo efecto puede conseguirse utilizando la opción <tex2html_verb_mark>347<tex2html_verb_mark>, escribiendo
<tex2html_verb_mark>349<tex2html_verb_mark> y <tex2html_verb_mark>350<tex2html_verb_mark> en los respectivos programas 
<tex2html_verb_mark>351<tex2html_verb_mark> y <tex2html_verb_mark>352<tex2html_verb_mark>. 
\begin<<2677>>tex2html_preform<<2677>><tex2html_verbatim_mark>verbatim656#\end<<2678>>tex2html_preform<<2678>>
\begin<<3034>>tex2html_deferred<<3034>>\par\end<<3035>>tex2html_deferred<<3035>>
\section<<2826>>La Opción <<2679>>\begin<<3036>>tex2html_deferred<<3036>>\tt\end<<3037>>tex2html_deferred<<3037>>outfile<<2679>><<2826>>
Es posible utilizar la opción <tex2html_verb_mark>353<tex2html_verb_mark>  para escribir el 
analizador léxico en el fichero <tex2html_verb_mark>354<tex2html_verb_mark> en vez de  en <tex2html_verb_mark>355<tex2html_verb_mark>.
El mismo efecto puede obtenerse usando la opción <tex2html_verb_mark>356<tex2html_verb_mark> dentro
del programa <tex2html_verb_mark>357<tex2html_verb_mark>.
\begin<<3038>>tex2html_deferred<<3038>>\par\end<<3039>>tex2html_deferred<<3039>>
\section<<2680>>Leer desde una Cadena: YY\_INPUT<<2680>>
En general, la rutina que hace el an\'alisis l\'exico,
\emph<<2681>>yylex()<<2681>>, lee su entrada a trav\'es de la macro
<tex2html_verb_mark>358<tex2html_verb_mark>. Esta macro es llamada con tres par\'ametros
\begin<<2682>>center<<2682>>
<tex2html_verb_mark>359<tex2html_verb_mark> 
\end<<2683>>center<<2683>>
el primero, \emph<<2684>>buf<<2684>> es utilizado para guardar la entrada.
el tercero \emph<<2685>>max<<2685>> indica el n\'umero de caracteres que \emph<<2686>>yylex()<<2686>>
pretende leer de la entrada. El segundo \emph<<2687>>result<<2687>> contendr\'a el n\'umero 
de caracteres realmente le\'<<2688>>\i<<2688>>dos. Para poder leer desde una cadena
(\emph<<2689>>string<<2689>>) basta
con modificar <tex2html_verb_mark>360<tex2html_verb_mark> para que copie los datos de la cadena en
el \emph<<2690>>buffer<<2690>> pasado como par\'ametro a <tex2html_verb_mark>361<tex2html_verb_mark>. 
Sigue un ejemplo: 
\begin<<2691>>tex2html_preform<<2691>><tex2html_verbatim_mark>verbatim657#\end<<2692>>tex2html_preform<<2692>>
Este es el fichero conteniendo la funci\'on \emph<<2693>>main<<2693>>:
\begin<<2694>>tex2html_preform<<2694>><tex2html_verbatim_mark>verbatim658#\end<<2695>>tex2html_preform<<2695>>
Y esta es la salida:
\begin<<2696>>tex2html_preform<<2696>><tex2html_verbatim_mark>verbatim659#\end<<2697>>tex2html_preform<<2697>>
La cadena <tex2html_verb_mark>362<tex2html_verb_mark> definida en la línea 2 ha sido utilizada 
como entrada para el análisis léxico.
\begin<<3040>>tex2html_deferred<<3040>>\par\end<<3041>>tex2html_deferred<<3041>>
\section<<2698>>El operador de ``trailing context'' o ``lookahead'' positivo<<2698>>
En el lenguaje FORTRAN original los ``blancos'' no eran significativos
y no se distinguía entre mayúsculas y minúsculas.
Así pues la cadena <tex2html_verb_mark>363<tex2html_verb_mark> es equivalente a la cadena
<tex2html_verb_mark>364<tex2html_verb_mark>. Un conocido conflicto ocurre entre una cadena 
con la estructura <tex2html_verb_mark>365<tex2html_verb_mark> (esto es <tex2html_verb_mark>366<tex2html_verb_mark>) y  
la cadena anterior. En la primera <tex2html_verb_mark>367<tex2html_verb_mark> e <tex2html_verb_mark>368<tex2html_verb_mark> son dos
``tokens'' diferentes, el primero correspondiendo a la palabra reservada que indica un bucle. En la segunda, <tex2html_verb_mark>369<tex2html_verb_mark> constituye un único ``token''
y la sentencia se refiere a una asignación.
El conflicto puede resolverse utilizando el operador de ``trailing'' <tex2html_verb_mark>370<tex2html_verb_mark>. 
Como se mencionó, el operador de ``trailing''<tex2html_verb_mark>371<tex2html_verb_mark> permite reconocer una <tex2html_verb_mark>372<tex2html_verb_mark> pero s\'olo si va seguida de una <tex2html_verb_mark>373<tex2html_verb_mark>. El texto casado con <tex2html_verb_mark>374<tex2html_verb_mark> se incluye a la hora de decidir cual es el emparejamiento mas largo, pero se devuelve a la entrada cuando se ejecuta la acci\'on. La acci\'on s\'olo ve el texto asociado con <tex2html_verb_mark>375<tex2html_verb_mark>.  El fichero <tex2html_verb_mark>376<tex2html_verb_mark> ilustra una posible solución:
\begin<<2699>>tex2html_preform<<2699>><tex2html_verbatim_mark>verbatim660#\end<<2700>>tex2html_preform<<2700>>
La función 
\begin<<3042>>tex2html_deferred<<3042>>\par\end<<3043>>tex2html_deferred<<3043>>
<tex2html_verb_mark>377<tex2html_verb_mark> 
\begin<<3044>>tex2html_deferred<<3044>>\par\end<<3045>>tex2html_deferred<<3045>>
lee a lo mas uno menos que <tex2html_verb_mark>378<tex2html_verb_mark> caracteres desde <tex2html_verb_mark>379<tex2html_verb_mark> y los almacena en el \emph<<2701>>buffer<<2701>>
apuntado por <tex2html_verb_mark>380<tex2html_verb_mark>. La lectura termina después de un  <tex2html_verb_mark>381<tex2html_verb_mark> o un retorno de carro.
Si se lee un <tex2html_verb_mark>382<tex2html_verb_mark>, se almacena en el \emph<<2702>>buffer<<2702>>. La función pone un carácter nulo <tex2html_verb_mark>383<tex2html_verb_mark> 
como último carácter en el \emph<<2703>>buffer<<2703>>.
\begin<<3046>>tex2html_deferred<<3046>>\par\end<<3047>>tex2html_deferred<<3047>>
A continuación, puedes ver los detalles de una ejecución:
\begin<<2704>>tex2html_preform<<2704>><tex2html_verbatim_mark>verbatim661#\end<<2705>>tex2html_preform<<2705>>
\begin<<3048>>tex2html_deferred<<3048>>\par\end<<3049>>tex2html_deferred<<3049>>
\section<<2827>>Manejo de directivas <<2706>>\begin<<3050>>tex2html_deferred<<3050>>\tt\end<<3051>>tex2html_deferred<<3051>>include<<2706>><<2827>>
\label<<2707>>section:include<<2707>>
El analisis l\'exico de algunos lenguajes requiere que, durante la
ejecuci\'on, se realice la lectura desde
di\-fe\-ren\-tes ficheros de entrada. El ejemplo t\'<<2708>>\i<<2708>>pico es el manejo de las
directivas \emph<<2709>>include file<<2709>> existentes en la mayor\'<<2710>>\i<<2710>>a de los lenguajes de
programaci\'on.\\ 
¿Donde est\'a el problema? La dificultad reside en que los
analizadores generados por \emph<<2711>>flex<<2711>>
proveen almacenamiento intermedio (\emph<<2712>>buffers<<2712>>) para aumentar el
rendimiento. No basta con reescribir nuestro propio \emph<<2713>>YY\_INPUT<<2713>> de
manera que tenga en cuenta con que fichero se esta trabajando. 
El analizador s\'olo llama a \emph<<2714>>YY\_INPUT<<2714>> cuando alcanza el final de su
\emph<<2715>>buffer<<2715>>, lo cual puede ocurrir bastante despu\'es de haber
encontrado la sentencia \emph<<2716>>include<<2716>> que requiere el cambio de
fichero de entrada.
\begin<<2717>>tex2html_preform<<2717>><tex2html_verbatim_mark>verbatim662#\end<<2718>>tex2html_preform<<2718>>
La funci\'on <tex2html_verb_mark>384<tex2html_verb_mark> crea  un \emph<<2719>>buffer<<2719>>
lo suficientemente grande para mantener <tex2html_verb_mark>385<tex2html_verb_mark> caracteres. Devuelve un 
<tex2html_verb_mark>386<tex2html_verb_mark>, que puede ser pasado a otras rutinas. <tex2html_verb_mark>387<tex2html_verb_mark> es un puntero a
una estructura de datos opaca (<tex2html_verb_mark>388<tex2html_verb_mark>) que contiene la informaci\'on para la manipulaci\'on
del \emph<<2720>>buffer<<2720>>. Es posible por tanto inicializar un puntero <tex2html_verb_mark>389<tex2html_verb_mark>
usando la expresión <tex2html_verb_mark>390<tex2html_verb_mark>.
\begin<<3052>>tex2html_deferred<<3052>>\par\end<<3053>>tex2html_deferred<<3053>>
La funci\'on <tex2html_verb_mark>391<tex2html_verb_mark> conmuta la entrada 
del analizador l\'exico. La funci\'on <tex2html_verb_mark>392<tex2html_verb_mark>
se usa para recuperar la memoria consumida por un \emph<<2721>>buffer<<2721>>.  Tambi\'en se pueden limpiar 
los contenidos actuales de un buffer llamando a:
<tex2html_verb_mark>393<tex2html_verb_mark>
\begin<<3054>>tex2html_deferred<<3054>>\par\end<<3055>>tex2html_deferred<<3055>>
La regla especial <tex2html_verb_mark>394<tex2html_verb_mark> indica la acci\'on a ejecutar cuando 
se ha encontrado un final de fichero e <tex2html_verb_mark>395<tex2html_verb_mark> retorna un valor
distinto de cero. Cualquiera que sea la acci\'on asociada, esta debe terminar 
con uno de estos cuatro supuestos:
\begin<<2722>>enumerate<<2722>>
\item Asignar <tex2html_verb_mark>396<tex2html_verb_mark> a un nuevo fichero de entrada.
\item Ejecutar <tex2html_verb_mark>397<tex2html_verb_mark>.
\item Ejecutar <tex2html_verb_mark>398<tex2html_verb_mark>.
\item Cambiar a un nuevo buffer usando <tex2html_verb_mark>399<tex2html_verb_mark>.
\begin<<3056>>tex2html_deferred<<3056>>\par\end<<3057>>tex2html_deferred<<3057>>
La regla <tex2html_verb_mark>400<tex2html_verb_mark> no se puede mezclar con otros patrones.
\end<<2723>>enumerate<<2723>>
\begin<<3058>>tex2html_deferred<<3058>>\par\end<<3059>>tex2html_deferred<<3059>>
Este es el resultado de una ejecuci\'on del programa:
\begin<<2724>>tex2html_preform<<2724>><tex2html_verbatim_mark>verbatim663#\end<<2725>>tex2html_preform<<2725>>
Una alternativa a usar el patrón <tex2html_verb_mark>401<tex2html_verb_mark>
es dejar la responsabilidad de recuperar el \emph<<2726>>buffer<<2726>> anterior
a <tex2html_verb_mark>402<tex2html_verb_mark>. En tal caso suprimiríamos esta parajea patrón-acción
y reescribiríamos <tex2html_verb_mark>403<tex2html_verb_mark>:
\begin<<2727>>tex2html_preform<<2727>><tex2html_verbatim_mark>verbatim664#\end<<2728>>tex2html_preform<<2728>>
\begin<<3060>>tex2html_deferred<<3060>>\par\end<<3061>>tex2html_deferred<<3061>>
\section<<2828>>An\'alisis Léxico desde una Cadena: <<2729>>\begin<<3062>>tex2html_deferred<<3062>>\tt\end<<3063>>tex2html_deferred<<3063>>yy\_scan\_string<<2729>><<2828>>
El objetivo de este ejercicio es mostrar como realizar un
an\'alisis l\'exico de los argumentos pasados en la l\'<<2730>>\i<<2730>>nea de
comandos. Para ello \emph<<2731>>flex<<2731>> provee la funci\'on <tex2html_verb_mark>404<tex2html_verb_mark>.
Esta rutina crea un nuevo \emph<<2732>>buffer<<2732>> de entrada y devuelve el correspondiente
manejador <tex2html_verb_mark>405<tex2html_verb_mark> asociado con la cadena
<tex2html_verb_mark>406<tex2html_verb_mark>. Esta cadena debe estar terminada por un car\'acter <tex2html_verb_mark>407<tex2html_verb_mark>. 
Podemos liberar la memoria asociada con
dicho \emph<<2733>>buffer<<2733>> utilizando <tex2html_verb_mark>408<tex2html_verb_mark>.
La siguiente llamada a <tex2html_verb_mark>409<tex2html_verb_mark> realizar\'a el an\'alisis l\'exico
de la cadena <tex2html_verb_mark>410<tex2html_verb_mark>.
\begin<<3064>>tex2html_deferred<<3064>>\par\end<<3065>>tex2html_deferred<<3065>>
\begin<<2734>>tex2html_preform<<2734>><tex2html_verbatim_mark>verbatim665#\end<<2735>>tex2html_preform<<2735>>
Alternativamente, la función <tex2html_verb_mark>411<tex2html_verb_mark> podría haber sido escrita asi:
\begin<<2736>>tex2html_preform<<2736>><tex2html_verbatim_mark>verbatim666#\end<<2737>>tex2html_preform<<2737>>
La funci\'on <tex2html_verb_mark>412<tex2html_verb_mark> hace lo mismo que 
<tex2html_verb_mark>413<tex2html_verb_mark> pero en vez de una cadena terminada en
el car\'acter nulo, se usa la longitud <tex2html_verb_mark>414<tex2html_verb_mark>.
Ambas funciones <tex2html_verb_mark>415<tex2html_verb_mark> y
<tex2html_verb_mark>416<tex2html_verb_mark> hacen una copia
de la cadena pasada como argumento.
\begin<<3066>>tex2html_deferred<<3066>>\par\end<<3067>>tex2html_deferred<<3067>>
Estas dos funciones crean una copia de la cadena original. Es mejor que sea asi, ya que <tex2html_verb_mark>417<tex2html_verb_mark>
modifica los contenidos del \emph<<2738>>buffer<<2738>> de trabajo. Si queremos evitar la copia,
podemos usar 
\begin<<3068>>tex2html_deferred<<3068>>\par\end<<3069>>tex2html_deferred<<3069>>
<tex2html_verb_mark>418<tex2html_verb_mark>,
\begin<<3070>>tex2html_deferred<<3070>>\par\end<<3071>>tex2html_deferred<<3071>>
la cual trabaja directamente con el \emph<<2739>>buffer<<2739>> que comienza en <tex2html_verb_mark>419<tex2html_verb_mark>, 
de tamaño <tex2html_verb_mark>420<tex2html_verb_mark> \emph<<2740>>bytes<<2740>>, los últimos dos de los cuáles deben
ser <tex2html_verb_mark>421<tex2html_verb_mark> (ASCII  NUL).   
Estos dos últimos \emph<<2741>>bytes<<2741>> no son ``escaneados''. El área de rastreo va
desde <tex2html_verb_mark>422<tex2html_verb_mark> a <tex2html_verb_mark>423<tex2html_verb_mark>, inclusive.
Si nos olvidamos de hacerlo de este modo y no establecemos los dos \emph<<2742>>bytes<<2742>> finales,
la función <tex2html_verb_mark>424<tex2html_verb_mark> devuelve un puntero nulo
y no llega a crear el nuevo buffer de entrada.
El tipo  <tex2html_verb_mark>425<tex2html_verb_mark> es un tipo entero.
Como cabe esperar, <tex2html_verb_mark>426<tex2html_verb_mark> se refiere al tamaño del \emph<<2743>>buffer<<2743>>.
\begin<<3072>>tex2html_deferred<<3072>>\par\end<<3073>>tex2html_deferred<<3073>>
\section<<2829>>An\'alisis de la L\'<<2744>>\i<<2744>>nea de Comandos y 2 Analizadores<<2829>>
El objetivo de este ejercicio es mostrar como realizar un
an\'alisis l\'exico de los argumentos pasados en la l\'<<2745>>\i<<2745>>nea de
comandos.  Para ello dise\~naremos una librer\'<<2746>>\i<<2746>>a que proporcionar\'a un 
funci\'on <tex2html_verb_mark>427<tex2html_verb_mark> que hace el an\'alisis
de la l\'<<2747>>\i<<2747>>nea de acuerdo con la especificaci\'on
\emph<<2748>>flex<<2748>> correspondiente. En el ejemplo, esta descripci\'on del analizador l\'exico
es proporcionada en el fichero \emph<<2749>>fl.l<<2749>>.  Para complicar un poco mas
las cosas, supondremos que queremos hacer el an\'alisis l\'exico
de un fichero (especificado en la l\'<<2750>>\i<<2750>>nea de comandos) seg\'un 
se especifica en un segundo analizador l\'exico \emph<<2751>>trivial.l<<2751>>.
El siguiente ejemplo de ejecuci\'on muestra la conducta del programa:
\begin<<2752>>tex2html_preform<<2752>><tex2html_verbatim_mark>verbatim667#\end<<2753>>tex2html_preform<<2753>>
Los contenidos del fichero \emph<<2754>>Makefile<<2754>> definen las dependencias 
y la estructura de la aplicaci\'on:
\begin<<2755>>tex2html_preform<<2755>><tex2html_verbatim_mark>verbatim668#\end<<2756>>tex2html_preform<<2756>>
Observa el uso de la opci\'on <tex2html_verb_mark>428<tex2html_verb_mark> en la traducci\'on del fichero 
\emph<<2757>>fl.l<<2757>>. As\'<<2758>>\i<<2758>> no solo el fichero generado por \emph<<2759>>flex<<2759>>, sino todas las variables
y rutinas accesibles estar\'an prefijadas por \emph<<2760>>arg<<2760>> en vez de \emph<<2761>>yy<<2761>>. 
La librer\'<<2762>>\i<<2762>>a la denominamos \emph<<2763>>libflarg.a<<2763>>. (\emph<<2764>>flarg<<2764>> 
por \underline<<2765>>fl<<2765>>ex \underline<<2766>>arg<<2766>>uments). 
El correspondiente fichero cabecera ser\'a \emph<<2767>>flarg.h<<2767>>.
Los fuentes de las rutinas que compondr\'an la 
librer\'<<2768>>\i<<2768>>a se mantendr\'an en el fichero \emph<<2769>>flarg.c<<2769>>.
\begin<<3074>>tex2html_deferred<<3074>>\par\end<<3075>>tex2html_deferred<<3075>>
Lo que haremos ser\'a redefinir <tex2html_verb_mark>429<tex2html_verb_mark> para que
lea su entrada desde la l\'<<2770>>\i<<2770>>nea de argumentos.
\begin<<2771>>tex2html_preform<<2771>><tex2html_verbatim_mark>verbatim669#\end<<2772>>tex2html_preform<<2772>>
La funci\'on <tex2html_verb_mark>430<tex2html_verb_mark> utiliza los punteros
<tex2html_verb_mark>431<tex2html_verb_mark> y <tex2html_verb_mark>432<tex2html_verb_mark> para moverse a trav\'es
de la familia de argumentos. Mientras que el primero es utilizado para el
recorrido, el segundo marca el l\'<<2773>>\i<<2773>>mite final. Su inicializaci\'on ocurre en
\begin<<3076>>tex2html_deferred<<3076>>\par\end<<3077>>tex2html_deferred<<3077>>
\begin<<2774>>center<<2774>>
<tex2html_verb_mark>433<tex2html_verb_mark>
\end<<2775>>center<<2775>>
con las asignaciones:
\begin<<2776>>tex2html_preform<<2776>><tex2html_verbatim_mark>verbatim670#\end<<2777>>tex2html_preform<<2777>>
\begin<<3078>>tex2html_deferred<<3078>>\par\end<<3079>>tex2html_deferred<<3079>>
despues, de lo cual, se llama al analizador l\'exico generado, \emph<<2778>>arglex<<2778>> .
\begin<<3080>>tex2html_deferred<<3080>>\par\end<<3081>>tex2html_deferred<<3081>>
\begin<<2779>>tex2html_preform<<2779>><tex2html_verbatim_mark>verbatim671#\end<<2780>>tex2html_preform<<2780>>
El fichero \emph<<2781>>fl.l<<2781>> contiene el analizador l\'exico de la l\'<<2782>>\i<<2782>>nea de comandos:
\begin<<2783>>tex2html_preform<<2783>><tex2html_verbatim_mark>verbatim672#\end<<2784>>tex2html_preform<<2784>>
Observe el uso de la clase <tex2html_verb_mark>434<tex2html_verb_mark> para reconocer
los blancos. Las clases son las mismas que las introducidas
en \emph<<2785>>gawk<<2785>>.
\begin<<3082>>tex2html_deferred<<3082>>\par\end<<3083>>tex2html_deferred<<3083>>
El an\'alisis l\'exico del fichero que se lee despu\'es de procesar la
l\'<<2786>>\i<<2786>>nea de comandos es descrito en \emph<<2787>>trivial.l<<2787>>.
Partiendo de \emph<<2788>>trivial.l<<2788>>, la ejecuci\'on del \emph<<2789>>Makefile<<2789>>
da lugar a la construcci\'on por parte de \emph<<2790>>flex<<2790>> del fichero 
\emph<<2791>>lex.yy.c<<2791>> conteniendo la rutina \emph<<2792>>yylex<<2792>>.
\begin<<2793>>tex2html_preform<<2793>><tex2html_verbatim_mark>verbatim673#\end<<2794>>tex2html_preform<<2794>>
El fichero \emph<<2795>>tokens.h<<2795>> contiene la definici\'on de los \emph<<2796>>tokens<<2796>>
y es compartido con \emph<<2797>>main.c<<2797>>. 
\begin<<2798>>tex2html_preform<<2798>><tex2html_verbatim_mark>verbatim674#\end<<2799>>tex2html_preform<<2799>>
Nos queda por presentar el fichero \emph<<2800>>main.c<<2800>>:
\begin<<2801>>tex2html_preform<<2801>><tex2html_verbatim_mark>verbatim675#\end<<2802>>tex2html_preform<<2802>>
\begin<<3084>>tex2html_deferred<<3084>>\par\end<<3085>>tex2html_deferred<<3085>>
\section<<2803>>Declaraciones pointer y array<<2803>>
Como se coment\'o, las opciones <tex2html_verb_mark>436<tex2html_verb_mark> y <tex2html_verb_mark>437<tex2html_verb_mark>
controlan la definici\'on que
\emph<<2804>>flex<<2804>> hace de \emph<<2805>>yytext<<2805>>. en el caso en que eligamos la opci\'on 
<tex2html_verb_mark>439<tex2html_verb_mark> la variable <tex2html_verb_mark>440<tex2html_verb_mark> controla el tama\~no del
\emph<<2806>>array<<2806>>. Supongamos que en el fichero \emph<<2807>>trivial.l<<2807>> del ejemplo
anterior introducimos las siguientes modificaciones:
\begin<<2808>>tex2html_preform<<2808>><tex2html_verbatim_mark>verbatim676#\end<<2809>>tex2html_preform<<2809>>
En tal caso, la definici\'on excesivamente peque\~na de YYLMAX provoca
un error en tiempo de ejecuci\'on:
\begin<<2810>>tex2html_preform<<2810>><tex2html_verbatim_mark>verbatim677#\end<<2811>>tex2html_preform<<2811>>
\begin<<3086>>tex2html_deferred<<3086>>\par\end<<3087>>tex2html_deferred<<3087>>
\section<<2830>>Las Macros <<2812>>\begin<<3088>>tex2html_deferred<<3088>>\tt\end<<3089>>tex2html_deferred<<3089>>YY\_USER\_ACTION<<2812>>, <<2813>>\begin<<3090>>tex2html_deferred<<3090>>\tt\end<<3091>>tex2html_deferred<<3091>>yy\_act<<2813>> e <<2814>>\begin<<3092>>tex2html_deferred<<3092>>\tt\end<<3093>>tex2html_deferred<<3093>>YY\_NUM\_RULES<<2814>><<2830>>
La macro <tex2html_verb_mark>441<tex2html_verb_mark> permite ejecutar una acción inmediatamente después del ``emparejamiento'' y antes de  la ejecución de la acción asociada.
cuando se la invoca, la variable <tex2html_verb_mark>442<tex2html_verb_mark> contiene el número de la regla que ha emparejado (las reglas se numeran a partir de uno). La macro <tex2html_verb_mark>443<tex2html_verb_mark> contiene el número de reglas, incluyendo la regla por defecto.
\begin<<3094>>tex2html_deferred<<3094>>\par\end<<3095>>tex2html_deferred<<3095>>
El siguiente programa aprovecha
dichas macros para mostrar las frecuencias de uso de las reglas.
\begin<<2815>>tex2html_preform<<2815>><tex2html_verbatim_mark>verbatim678#\end<<2816>>tex2html_preform<<2816>>
\begin<<3096>>tex2html_deferred<<3096>>\par\end<<3097>>tex2html_deferred<<3097>>
\section<<2831>>Las opciones <<2817>>\begin<<3098>>tex2html_deferred<<3098>>\tt\end<<3099>>tex2html_deferred<<3099>>interactive<<2817>><<2831>>
La opción <tex2html_verb_mark>444<tex2html_verb_mark>  hace que <tex2html_verb_mark>445<tex2html_verb_mark> genere un analizador que considera que su entrada es ``interactiva''. Concretamente, el analizador para cada nuevo fichero de entrada, intenta determinar si se trata de un a entrada interactiva o desde fichero haciendo una llamada a la función <tex2html_verb_mark>446<tex2html_verb_mark>.  Vea un ejemplo de uso de esta función:
\begin<<3100>>tex2html_deferred<<3100>>\par\end<<3101>>tex2html_deferred<<3101>>
\begin<<2818>>tex2html_preform<<2818>><tex2html_verbatim_mark>verbatim679#\end<<2819>>tex2html_preform<<2819>>
cuando se usa la opción <tex2html_verb_mark>447<tex2html_verb_mark>, se elimina esta llamada.
\begin<<3102>>tex2html_deferred<<3102>>\par\end<<3103>>tex2html_deferred<<3103>>
\section<<2832>>La macro <<2820>>\begin<<3104>>tex2html_deferred<<3104>>\tt\end<<3105>>tex2html_deferred<<3105>>YY\_BREAK<<2820>><<2832>>
Las acciones asociadas con los patrones se agrupan en 
la rutina de análisis léxico <tex2html_verb_mark>448<tex2html_verb_mark> en una sentencia
<tex2html_verb_mark>449<tex2html_verb_mark> y se separan mediante llamadas a la
macro <tex2html_verb_mark>450<tex2html_verb_mark>. Asi, al compilar con
<tex2html_verb_mark>451<tex2html_verb_mark> el siguiente fichero <tex2html_verb_mark>452<tex2html_verb_mark>
\begin<<2821>>tex2html_preform<<2821>><tex2html_verbatim_mark>verbatim680#\end<<2822>>tex2html_preform<<2822>>
tenemos el fichero de salida <tex2html_verb_mark>453<tex2html_verb_mark>
que aparece a continuación (hemos omitido 
las líneas de código en las que estamos menos interesados, 
sustituyendolas por puntos suspensivos)
\begin<<2823>>tex2html_preform<<2823>><tex2html_verbatim_mark>verbatim681#\end<<2824>>tex2html_preform<<2824>>
Por defecto, la macro \verb 
<tex2html_endfile>#./chapter2/flex.tex#
\begin<<3106>>tex2html_deferred<<3106>>\par\end<<3107>>tex2html_deferred<<3107>>
