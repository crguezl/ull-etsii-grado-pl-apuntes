<tex2html_file>#./chapter_bottomup/analisis_bottomup_en_perl.tex#
\section<<18218>><<17250>>\begin<<19232>>tex2html_deferred<<19232>>\tt\end<<19233>>tex2html_deferred<<19233>>Parse::Yapp<<17250>>: Ejemplo de Uso<<18218>>
\label<<17251>>section:ejemplodeuso<<17251>>
El generador de analizadores sintácticos  <<18308>>\begin<<19234>>tex2html_deferred<<19234>>\tt\end<<19235>>tex2html_deferred<<19235>>Parse::Yapp<<18308>>  es un
analizador LALR inspirado en  <<18309>>\begin<<19236>>tex2html_deferred<<19236>>\tt\end<<19237>>tex2html_deferred<<19237>>yacc<<18309>> . El módulo
<tex2html_verb_mark>2220<tex2html_verb_mark> no viene con la distribución de Perl, por lo que es necesario
bajarlo desde CPAN, en la dirección 
\begin<<19238>>tex2html_deferred<<19238>>\par\end<<19239>>tex2html_deferred<<19239>>
<tex2html_verbatim_mark>rawhtml6093#
\begin<<19240>>tex2html_deferred<<19240>>\par\end<<19241>>tex2html_deferred<<19241>>
o bien en nuestros servidores locales,
por ejemplo en el mismo directorio en que se guarda
la versión HTML de estos apuntes encontrará una copia de 
\htmladdnormallink<<17254>>Parse-Yapp-1.05.tar.gz<<17254>><<17255>>Parse-Yapp-1.05.tar.gz<<17255>>.
La versión a la que se refiere este capítulo es la 1.05.
\begin<<19242>>tex2html_deferred<<19242>>\par\end<<19243>>tex2html_deferred<<19243>>
Para ilustrar su uso veamos
un ejemplo en el que se genera una sencilla calculadora numérica. 
Los contenidos del programa  <<18310>>\begin<<19244>>tex2html_deferred<<19244>>\tt\end<<19245>>tex2html_deferred<<19245>>yapp<<18310>>  los hemos guardado
en un fichero denominado <tex2html_verb_mark>2221<tex2html_verb_mark>
(el código completo figura en el apéndice 
en la página \pageref<<17257>>apendice:calcyp<<17257>>)
\begin<<19246>>tex2html_deferred<<19246>>\par\end<<19247>>tex2html_deferred<<19247>>
\begin<<17258>>tex2html_preform<<17258>><tex2html_verbatim_mark>verbatim6094#\end<<17259>>tex2html_preform<<17259>>
Se pueden poner comentarios tipo Perl o tipo C (<tex2html_verb_mark>2222<tex2html_verb_mark>)
a lo largo del fichero.
\begin<<17260>>tex2html_preform<<17260>><tex2html_verbatim_mark>verbatim6095#\end<<17261>>tex2html_preform<<17261>>
las declaraciones  <<18311>>\begin<<19248>>tex2html_deferred<<19248>>\tt\end<<19249>>tex2html_deferred<<19249>>\%left<<18311>>  y  <<18312>>\begin<<19250>>tex2html_deferred<<19250>>\tt\end<<19251>>tex2html_deferred<<19251>>\%right<<18312>>  expresan la asociatividad
y precedencia de los terminales, permitiendo decidir que árbol construir 
en caso de  ambiguedad. 
\emph<<17264>> Los terminales declarados en líneas 
posteriores tienen mas prioridad que los declarados en las líneas anteriores<<17264>>.
Véase la sección \ref<<17265>>section:prioridades<<17265>> para mas detalles.
\begin<<19252>>tex2html_deferred<<19252>>\par\end<<19253>>tex2html_deferred<<19253>>
Un programa <tex2html_verb_mark>2223<tex2html_verb_mark> consta de tres partes: la cabeza, el cuerpo
y la cola. Cada una de las partes va separada de las otras por el
símbolo <tex2html_verb_mark>2225<tex2html_verb_mark> en una línea aparte. Así, el <tex2html_verb_mark>2226<tex2html_verb_mark> de la línea 15
separa la cabeza del cuerpo. En la cabecera se colocan el
código de inicialización, las declaraciones de terminales, las reglas
de precedencia, etc.  El cuerpo contiene las reglas de la gramática y
las acciones asociadas. Por último, la cola de un program <tex2html_verb_mark>2227<tex2html_verb_mark>
contiene las rutinas de soporte al código que aparece en las acciones 
asi como, posiblemente, rutinas para el análisis léxico 
y el tratamiento de errores.
\begin<<19254>>tex2html_deferred<<19254>>\par\end<<19255>>tex2html_deferred<<19255>>
En <tex2html_verb_mark>2228<tex2html_verb_mark> las acciones son convertidas en subrutinas
anónimas. Mas bien en métodos anónimos. 
Así pues el primer argumento de la subrutina se identifica con 
una referencia al analizador (<tex2html_verb_mark>2229<tex2html_verb_mark>).  Los restantes parámetros
se corresponden con los \index<<18313>>atributos de los símbolos<<18313>>\emph<<18314>>atributos de los símbolos<<18314>>
en la parte derecha de la regla de producción (<tex2html_verb_mark>2230<tex2html_verb_mark> \ldots ).
Por ejemplo, el código en la línea 21 imprime el atributo asociado
con la variable sintáctica <tex2html_verb_mark>2231<tex2html_verb_mark>, que en este caso es su valor numérico.
\begin<<19256>>tex2html_deferred<<19256>>\par\end<<19257>>tex2html_deferred<<19257>>
La línea 17 indica que el atributo asociado con la variable
sintáctica <tex2html_verb_mark>2232<tex2html_verb_mark> es una referencia
a una pila y que el atributo asociado con la variable sintáctica
<tex2html_verb_mark>2233<tex2html_verb_mark> debe empujarse
en la pila. De hecho, el atributo asociado con <tex2html_verb_mark>2234<tex2html_verb_mark> es el valor
de la expresión. Asi pues el atributo retornado por <tex2html_verb_mark>2235<tex2html_verb_mark> es
una referencia a una lista conteniendo los valores de las expresiones
evaluadas.
\begin<<19258>>tex2html_deferred<<19258>>\par\end<<19259>>tex2html_deferred<<19259>>
Para saber mas sobre las estructuras internas de 
<tex2html_verb_mark>2236<tex2html_verb_mark> para la representación  de las acciones asociadas con las reglas
véase la sección \ref<<17267>>section:tablas<<17267>>.
\begin<<19260>>tex2html_deferred<<19260>>\par\end<<19261>>tex2html_deferred<<19261>>
\begin<<17268>>tex2html_preform<<17268>><tex2html_verbatim_mark>verbatim6096#\end<<17269>>tex2html_preform<<17269>>
\begin<<19262>>tex2html_deferred<<19262>>\par\end<<19263>>tex2html_deferred<<19263>>
El terminal
<tex2html_verb_mark>2237<tex2html_verb_mark> en la línea 22 esta asociado con la aparición de un error.
El tratamiento es el mismo que en <tex2html_verb_mark>2238<tex2html_verb_mark>. Cuando se produce un error
en el análisis, <tex2html_verb_mark>2239<tex2html_verb_mark> emite un mensaje de error y
produce ``mágicamente'' un terminal especial denominado
<tex2html_verb_mark>2240<tex2html_verb_mark>. A partir de ahí permanecerá silencioso,
consumiendo terminales hasta encontrar uno de los terminales que le
hemos indicado en las reglas de recuperación de errores,
en este caso, cuando encuentre un retorno de carro.
Como se ha dicho, en <tex2html_verb_mark>2241<tex2html_verb_mark> el primer argumento de la acción denota al 
analizador sintáctico. Así pues el código <tex2html_verb_mark>2242<tex2html_verb_mark>
es una llamada al método <tex2html_verb_mark>2243<tex2html_verb_mark> del analizador. Este método
funciona como la macro <tex2html_verb_mark>2244<tex2html_verb_mark> de <tex2html_verb_mark>2245<tex2html_verb_mark>, indicando 
que la presencia del retorno del carro (<tex2html_verb_mark>2246<tex2html_verb_mark>) la podemos considerar
un signo seguro de que nos hemos recuperado del error. A partir
de este momento, <tex2html_verb_mark>2247<tex2html_verb_mark> volverá a emitir mensajes de error.
Para saber más sobre la recuperación de 
errores en <tex2html_verb_mark>2248<tex2html_verb_mark> léase la sección
\ref<<17270>>section:errores<<17270>>.
\begin<<19264>>tex2html_deferred<<19264>>\par\end<<19265>>tex2html_deferred<<19265>>
\begin<<17271>>tex2html_preform<<17271>><tex2html_verbatim_mark>verbatim6097#\end<<17272>>tex2html_preform<<17272>>
La acción por defecto es retornar <tex2html_verb_mark>2249<tex2html_verb_mark>. 
Por tanto, en este caso el valor retornado es el asociado a <tex2html_verb_mark>2250<tex2html_verb_mark>.
\begin<<17273>>tex2html_preform<<17273>><tex2html_verbatim_mark>verbatim6098#\end<<17274>>tex2html_preform<<17274>>
El método <tex2html_verb_mark>2251<tex2html_verb_mark> provee acceso a un hash que contiene los datos 
que están siendo analizados. En este caso creamos una entrada
<tex2html_verb_mark>2252<tex2html_verb_mark> que es una referencia a un hash en el que guardamos las
variables. Este hash es la tabla de símbolos de la calculadora.
\begin<<17275>>tex2html_preform<<17275>><tex2html_verbatim_mark>verbatim6099#\end<<17276>>tex2html_preform<<17276>>
Hay numerosas ambiguedades en esta gramática. Por ejemplo,
\begin<<19266>>tex2html_deferred<<19266>>\par\end<<19267>>tex2html_deferred<<19267>>
\begin<<17277>>itemize<<17277>>
\item
¿Como debo interpretar la expresión <tex2html_verb_mark>2253<tex2html_verb_mark>?
¿Como <tex2html_verb_mark>2254<tex2html_verb_mark>? ¿o bien <tex2html_verb_mark>2255<tex2html_verb_mark>?
La respuesta la da la asignación de asociatividad a los operadores
que hicimos en las líneas 9-13.
Al declarar como asociativo a izquierdas al terminal <tex2html_verb_mark>2256<tex2html_verb_mark> 
(línea 10) hemos 
resuelto este tipo de ambiguedad. Lo que estamos haciendo es
indicarle al analizador que a la hora de elegir entre 
los árboles abstractos 
\begin<<18504>>tex2html_wrap_inline<<18504>>$-(-(4,5),2)$\end<<18505>>tex2html_wrap_inline<<18505>>\space y \begin<<18506>>tex2html_wrap_inline<<18506>>$-(4, -(5,2))$\end<<18507>>tex2html_wrap_inline<<18507>>\space elija siempre
el árbol que se hunde a izquierdas.
\item
¿Como debo interpretar la expresión <tex2html_verb_mark>2257<tex2html_verb_mark>?
¿Como <tex2html_verb_mark>2258<tex2html_verb_mark>? ¿o bien <tex2html_verb_mark>2259<tex2html_verb_mark>?
Al declarar que <tex2html_verb_mark>2260<tex2html_verb_mark> tiene mayor prioridad que <tex2html_verb_mark>2261<tex2html_verb_mark> estamos
resolviendo esta otra fuente de ambiguedad. Esto es así pues
<tex2html_verb_mark>2262<tex2html_verb_mark> fué declarado en la línea 11 y <tex2html_verb_mark>2263<tex2html_verb_mark> en la 10.
\end<<17278>>itemize<<17278>>
\begin<<19268>>tex2html_deferred<<19268>>\par\end<<19269>>tex2html_deferred<<19269>>
\begin<<17279>>tex2html_preform<<17279>><tex2html_verbatim_mark>verbatim6100#\end<<17280>>tex2html_preform<<17280>>
\begin<<19270>>tex2html_deferred<<19270>>\par\end<<19271>>tex2html_deferred<<19271>>
En la regla de la división comprobamos que el divisor es 
distinto de cero. Si es cero inicializamos el atributo 
<tex2html_verb_mark>2264<tex2html_verb_mark> en la zona de datos con el mensaje de
error apropiado. Este mensaje es aprovechado por la subrutina
de tratamiento de errores (véase la subrutina <tex2html_verb_mark>2265<tex2html_verb_mark>
en la zona de la cola). La subrutina <tex2html_verb_mark>2266<tex2html_verb_mark> es llamada
automáticamente por <tex2html_verb_mark>2267<tex2html_verb_mark> cada vez que ocurre un error
sintáctico. Esto es asi por que en la llamada 
al analizador se especifican quienes son las diferentes
rutinas de apoyo:
\begin<<19272>>tex2html_deferred<<19272>>\par\end<<19273>>tex2html_deferred<<19273>>
\begin<<17281>>tex2html_preform<<17281>><tex2html_verbatim_mark>verbatim6101#\end<<17282>>tex2html_preform<<17282>>
\begin<<19274>>tex2html_deferred<<19274>>\par\end<<19275>>tex2html_deferred<<19275>>
Por defecto, \emph<<17283>>una regla de producción
tiene la prioridad del último terminal que aparece
en su parte derecha<<17283>>.
Una regla de producción puede ir seguida de una directiva
<tex2html_verb_mark>2269<tex2html_verb_mark> la cual le da una prioridad explícita.  
Esto puede ser de gran ayuda en ciertos casos de 
ambiguedad.
\begin<<19276>>tex2html_deferred<<19276>>\par\end<<19277>>tex2html_deferred<<19277>>
\begin<<17284>>tex2html_preform<<17284>><tex2html_verbatim_mark>verbatim6102#\end<<17285>>tex2html_preform<<17285>>
¿Cual es la ambiguedad que surge con esta regla? 
Una de las ambiguedad de esta regla 
esta relacionada con el doble significado
del menos como operador unario y binario: hay frases
como <tex2html_verb_mark>2270<tex2html_verb_mark> que tiene dos posibles interpretaciones:
Podemos verla como <tex2html_verb_mark>2271<tex2html_verb_mark> o bien como <tex2html_verb_mark>2272<tex2html_verb_mark>.
Hay dos árboles posibles. El analizador, cuando este analizando
la entrada <tex2html_verb_mark>2273<tex2html_verb_mark> y vea el
segundo <tex2html_verb_mark>2274<tex2html_verb_mark> deberá escoger uno de los dos árboles. 
¿Cuál?. El conflicto puede verse como una ``lucha'' entre
la regla <tex2html_verb_mark>2275<tex2html_verb_mark> la cual interpreta la frase como
<tex2html_verb_mark>2276<tex2html_verb_mark> y la segunda aparición del terminal <tex2html_verb_mark>2277<tex2html_verb_mark> 
el cuál ``quiere entrar'' para que gane la regla <tex2html_verb_mark>2278<tex2html_verb_mark>
y dar lugar a la interpretación <tex2html_verb_mark>2279<tex2html_verb_mark>.
En este caso, las dos reglas 
\begin<<18508>>tex2html_wrap_inline<<18508>>$E \rightarrow - E$\end<<18509>>tex2html_wrap_inline<<18509>>\space y \begin<<18510>>tex2html_wrap_inline<<18510>>$E \rightarrow E - E$\end<<18511>>tex2html_wrap_inline<<18511>>\space tienen, en principio
la prioridad del terminal <tex2html_verb_mark>2280<tex2html_verb_mark>, el cual fué declarado en la
línea 10.
La prioridad expresada explícitamente
para la regla por la declaración <tex2html_verb_mark>2282<tex2html_verb_mark> de la línea
39 hace que la regla tenga la prioridad
del terminal <tex2html_verb_mark>2283<tex2html_verb_mark> (línea 12) y por tanto mas prioridad
que el terminal <tex2html_verb_mark>2284<tex2html_verb_mark>. Esto hará que <tex2html_verb_mark>2285<tex2html_verb_mark> finalmente opte
por la regla <tex2html_verb_mark>2286<tex2html_verb_mark>.
\begin<<19278>>tex2html_deferred<<19278>>\par\end<<19279>>tex2html_deferred<<19279>>
La declaración de <tex2html_verb_mark>2287<tex2html_verb_mark> como asociativo a derechas y con un nivel
de prioridad alto resuelve las ambiguedades relacionadas 
con este operador:
\begin<<19280>>tex2html_deferred<<19280>>\par\end<<19281>>tex2html_deferred<<19281>>
\begin<<17286>>tex2html_preform<<17286>><tex2html_verbatim_mark>verbatim6103#\end<<17287>>tex2html_preform<<17287>>
\begin<<19282>>tex2html_deferred<<19282>>\par\end<<19283>>tex2html_deferred<<19283>>
Después de la parte de la gramática, y separada de la anterior
por el símbolo <tex2html_verb_mark>2289<tex2html_verb_mark>, sigue la parte en la que se 
suelen poner las rutinas de apoyo. Hay al menos dos rutinas de apoyo que 
el analizador sintáctico requiere le sean pasados como argumentos: 
la de manejo de errores y la de análisis léxico. El método <tex2html_verb_mark>2290<tex2html_verb_mark>
ilustra como se hace la llamada al método de análisis sintáctico 
generado, utilizando la técnica de llamada con argumentos con nombre 
y pasándole las referencias a las dos subrutinas (en Perl,
es un convenio que si el nombre de una subrutina comienza
por un guión bajo es que el autor la considera privada):
\begin<<17288>>tex2html_preform<<17288>><tex2html_verbatim_mark>verbatim6104#\end<<17289>>tex2html_preform<<17289>>
\begin<<19284>>tex2html_deferred<<19284>>\par\end<<19285>>tex2html_deferred<<19285>>
La subrutina de manejo de errores <tex2html_verb_mark>2291<tex2html_verb_mark> imprime 
el mensaje de error proveído por el usuario, el cual, si existe, fué guardado en
<tex2html_verb_mark>2292<tex2html_verb_mark>.
\begin<<17290>>tex2html_preform<<17290>><tex2html_verbatim_mark>verbatim6105#\end<<17291>>tex2html_preform<<17291>>
A continuación sigue el método que implanta
el  análisis léxico <tex2html_verb_mark>2293<tex2html_verb_mark>.
En primer lugar se comprueba la existencia de
datos en <tex2html_verb_mark>2294<tex2html_verb_mark>. Si no es el caso, los datos
se tomarán de la entrada estándar:
\begin<<17292>>tex2html_preform<<17292>><tex2html_verbatim_mark>verbatim6106#\end<<17293>>tex2html_preform<<17293>>
Cuando el analizador léxico alcanza el final de la entrada
debe devolver la pareja <tex2html_verb_mark>2295<tex2html_verb_mark>.
\begin<<19286>>tex2html_deferred<<19286>>\par\end<<19287>>tex2html_deferred<<19287>>
Eliminamos los blancos iniciales (lo que en inglés se conoce por
\index<<18315>>trimming<<18315>>\emph<<18316>>trimming<<18316>>):
\begin<<17295>>tex2html_preform<<17295>><tex2html_verbatim_mark>verbatim6107#\end<<17296>>tex2html_preform<<17296>>
A continuación vamos detectando los números, identificadores
y los símbolos individuales. El bucle <tex2html_verb_mark>2296<tex2html_verb_mark>
se ejecuta mientras la cadena
en <tex2html_verb_mark>2297<tex2html_verb_mark> no sea vacía, lo que ocurrirá cuando todos 
los terminales hayan sido consumidos.
\begin<<19288>>tex2html_deferred<<19288>>\par\end<<19289>>tex2html_deferred<<19289>>
\begin<<17297>>tex2html_preform<<17297>><tex2html_verbatim_mark>verbatim6108#\end<<17298>>tex2html_preform<<17298>>
\begin<<19290>>tex2html_deferred<<19290>>\par\end<<19291>>tex2html_deferred<<19291>>
\begin<<18256>>theorem_type<<18256>>[exercise][exercise][section][][][]
\begin<<17300>>enumerate<<17300>>
\item ¿Quién es la variable índice en la línea 65? 
\item ¿Sobre quién ocurre el binding en las líneas 66, 68 y 70? 
\item ¿Cual es la razón por la que <tex2html_verb_mark>2298<tex2html_verb_mark> se 
ve modificado si no aparece como variable para el binding en las líneas 66, 68 y 70?
\end<<17301>>enumerate<<17301>>\end<<18257>>theorem_type<<18257>>
\begin<<19292>>tex2html_deferred<<19292>>\par\end<<19293>>tex2html_deferred<<19293>>
Construimos el módulo <tex2html_verb_mark>2299<tex2html_verb_mark> a partir del fichero <tex2html_verb_mark>2300<tex2html_verb_mark>
especificando la gramática, usando un fichero <tex2html_verb_mark>2301<tex2html_verb_mark>:
\begin<<17303>>tex2html_preform<<17303>><tex2html_verbatim_mark>verbatim6109#\end<<17304>>tex2html_preform<<17304>>
Esta compilación genera el fichero <tex2html_verb_mark>2302<tex2html_verb_mark> conteniendo el
analizador:
\begin<<17305>>tex2html_preform<<17305>><tex2html_verbatim_mark>verbatim6110#\end<<17306>>tex2html_preform<<17306>>
\begin<<19294>>tex2html_deferred<<19294>>\par\end<<19295>>tex2html_deferred<<19295>>
El script <tex2html_verb_mark>2303<tex2html_verb_mark> es un \emph<<17307>>frontend<<17307>> al módulo <tex2html_verb_mark>2304<tex2html_verb_mark>.
Admite diversas formas de uso:
\begin<<19296>>tex2html_deferred<<19296>>\par\end<<19297>>tex2html_deferred<<19297>>
\begin<<17308>>itemize<<17308>>
\item
<<18219>>\begin<<19298>>tex2html_deferred<<19298>>\tt\end<<19299>>tex2html_deferred<<19299>>yapp [options] \textit<<17309>>grammar<<17309>>[.yp]<<18219>>
\begin<<19300>>tex2html_deferred<<19300>>\par\end<<19301>>tex2html_deferred<<19301>>
El sufijo <<17310>>\begin<<19302>>tex2html_deferred<<19302>>\tt\end<<19303>>tex2html_deferred<<19303>>.yp<<17310>> es opcional.
\item
<<18220>>\begin<<19304>>tex2html_deferred<<19304>>\tt\end<<19305>>tex2html_deferred<<19305>>yapp \textit<<17311>>-V<<17311>><<18220>>
\begin<<19306>>tex2html_deferred<<19306>>\par\end<<19307>>tex2html_deferred<<19307>>
Nos muestra la versión:
\begin<<17312>>tex2html_preform<<17312>><tex2html_verbatim_mark>verbatim6111#\end<<17313>>tex2html_preform<<17313>>
\begin<<19308>>tex2html_deferred<<19308>>\par\end<<19309>>tex2html_deferred<<19309>>
\item
<<18221>>\begin<<19310>>tex2html_deferred<<19310>>\tt\end<<19311>>tex2html_deferred<<19311>>yapp \textit<<17314>>-h<<17314>><<18221>>
\begin<<19312>>tex2html_deferred<<19312>>\par\end<<19313>>tex2html_deferred<<19313>>
Nos muestra la ayuda:
\begin<<19314>>tex2html_deferred<<19314>>\par\end<<19315>>tex2html_deferred<<19315>>
\begin<<17315>>tex2html_preform<<17315>><tex2html_verbatim_mark>verbatim6112#\end<<17316>>tex2html_preform<<17316>>
\begin<<19316>>tex2html_deferred<<19316>>\par\end<<19317>>tex2html_deferred<<19317>>
\end<<17317>>itemize<<17317>>
\begin<<19318>>tex2html_deferred<<19318>>\par\end<<19319>>tex2html_deferred<<19319>>
La opción \textit<<17318>>-m module<<17318>> \mbox<<17319>><<17319>>
da el nombre  al paquete o espacio de nombres o clase encapsulando el
analizador. Por defecto toma el nombre de la gramática.  En el ejemplo
podría haberse omitido.
\begin<<19320>>tex2html_deferred<<19320>>\par\end<<19321>>tex2html_deferred<<19321>>
La opción \textit<<17320>>-o outfile<<17320>> \mbox<<17321>><<17321>>
da el nombre del fichero de salida. Por defecto toma el nombre de la gramática,
seguido del sufijo <tex2html_verb_mark>2305<tex2html_verb_mark>. sin embargo, si hemos especificado la opción
\textit<<17322>>-m A::Module::Name<<17322>> el valor por defecto será  \emph<<17323>>Name.pm<<17323>>.
\begin<<19322>>tex2html_deferred<<19322>>\par\end<<19323>>tex2html_deferred<<19323>>
Veamos los contenidos del ejecutable <tex2html_verb_mark>2306<tex2html_verb_mark> el cuál
utiliza el módulo generado por <tex2html_verb_mark>2307<tex2html_verb_mark>:
\begin<<17324>>tex2html_preform<<17324>><tex2html_verbatim_mark>verbatim6113#\end<<17325>>tex2html_preform<<17325>>
Al ejecutar obtenemos:
\begin<<17326>>tex2html_preform<<17326>><tex2html_verbatim_mark>verbatim6114#\end<<17327>>tex2html_preform<<17327>>
Pulsamos al final <tex2html_verb_mark>2308<tex2html_verb_mark> para generar el final de fichero.
El analizador devuelve la lista de valores computados la cual es 
finalmente impresa.
\begin<<19324>>tex2html_deferred<<19324>>\par\end<<19325>>tex2html_deferred<<19325>>
¿En que orden ejecuta <tex2html_verb_mark>2309<tex2html_verb_mark> las acciones? 
La respuesta es que el analizador generado por 
<tex2html_verb_mark>2310<tex2html_verb_mark> construye una derivación a derechas 
inversa y ejecuta las acciones asociadas a las reglas de producción
que se han aplicado. Así, para la frase <tex2html_verb_mark>2311<tex2html_verb_mark> la antiderivación es:
\begin<<19326>>tex2html_deferred<<19326>>\par\end<<19327>>tex2html_deferred<<19327>>
\begin<<17328>>center<<17328>>
\begin<<17329>>math<<17329>>
NUM + NUM \stackrel<<17330>>NUM \leftarrow E<<17330>><<17331>>\Longleftarrow<<17331>> E + NUM \stackrel<<17332>>NUM \leftarrow E<<17332>><<17333>>\Longleftarrow<<17333>> E + E \stackrel<<17334>>E +E \leftarrow E<<17334>><<17335>>\Longleftarrow<<17335>> E
\end<<17336>>math<<17336>>
\end<<17337>>center<<17337>>
\begin<<19328>>tex2html_deferred<<19328>>\par\end<<19329>>tex2html_deferred<<19329>>
por tanto las acciones ejecutadas son las asociadas con las correspondientes reglas 
de producción:
\begin<<17338>>enumerate<<17338>>
\item
La acción de la línea 25:
\begin<<17339>>tex2html_preform<<17339>><tex2html_verbatim_mark>verbatim6115#\end<<17340>>tex2html_preform<<17340>>
Esta instancia de <tex2html_verb_mark>2312<tex2html_verb_mark> tiene ahora como atributo <tex2html_verb_mark>2313<tex2html_verb_mark>.
\item
De nuevo la acción de la línea 25:
\begin<<17341>>tex2html_preform<<17341>><tex2html_verbatim_mark>verbatim6116#\end<<17342>>tex2html_preform<<17342>>
Esta nueva instancia de <tex2html_verb_mark>2314<tex2html_verb_mark> tiene como atributo <tex2html_verb_mark>2315<tex2html_verb_mark>.
\item
La acción asociada con \begin<<18512>>tex2html_wrap_inline<<18512>>$E \rightarrow E + E$\end<<18513>>tex2html_wrap_inline<<18513>>, en la línea 28:
\begin<<17343>>tex2html_preform<<17343>><tex2html_verbatim_mark>verbatim6117#\end<<17344>>tex2html_preform<<17344>>
La nueva instancia (nodo) <tex2html_verb_mark>2316<tex2html_verb_mark> tiene como atributo <tex2html_verb_mark>2317<tex2html_verb_mark>. 
\end<<17345>>enumerate<<17345>>
Obsérvese que la antiderivación a derechas da lugar a un
recorrido ascendente y a izquierdas del árbol:
\begin<<19330>>tex2html_deferred<<19330>>\par\end<<19331>>tex2html_deferred<<19331>>
\begin<<17346>>tex2html_preform<<17346>><tex2html_verbatim_mark>verbatim6118#\end<<17347>>tex2html_preform<<17347>>
\begin<<19332>>tex2html_deferred<<19332>>\par\end<<19333>>tex2html_deferred<<19333>>
Los números entre paréntesis indican el orden de visita de las producciones.
\begin<<19334>>tex2html_deferred<<19334>>\par\end<<19335>>tex2html_deferred<<19335>>
\section<<17348>>Conceptos Básicos<<17348>>
\label<<17349>>section:conceptosbasicos<<17349>>
Los analizadores generador por <tex2html_verb_mark>2318<tex2html_verb_mark> entran en la categoría de analizadores
\index<<18317>>LR<<18317>>\emph<<18318>>LR<<18318>>. Estos analizadores construyen una derivación a derechas inversa 
(o \index<<18319>>antiderivación<<18319>>\emph<<18320>>antiderivación<<18320>>).
De ahí la R en LR (del inglés \index<<18321>>rightmost derivation<<18321>>\emph<<18322>>rightmost derivation<<18322>>). El árbol sintáctico 
es construido de las hojas hacia la raíz, siendo el último paso en la antiderivación
la construcción de la primera derivación desde el símbolo de arranque.
\begin<<19336>>tex2html_deferred<<19336>>\par\end<<19337>>tex2html_deferred<<19337>>
Empezaremos entonces considerando las frases que pueden aparecer en una derivación
a derechas. Tales frases consituyen el lenguaje \begin<<18514>>tex2html_wrap_inline<<18514>>$FSD$\end<<18515>>tex2html_wrap_inline<<18515>>:
\begin<<19338>>tex2html_deferred<<19338>>\par\end<<19339>>tex2html_deferred<<19339>>
\begin<<18258>>theorem_type<<18258>>[definition][definition][section][][][]
Dada una gramática \begin<<18516>>tex2html_wrap_inline<<18516>>$G=(\Sigma,V,P,S)$\end<<18517>>tex2html_wrap_inline<<18517>>\space no ambigua, se denota por \begin<<18518>>tex2html_wrap_inline<<18518>>$FSD$\end<<18519>>tex2html_wrap_inline<<18519>> 
(lenguaje de las formas Sentenciales a Derechas) al lenguaje de 
las sentencias que aparecen en una derivación a derechas desde el símbolo de arranque.
\begin<<19340>>tex2html_deferred<<19340>>\par\end<<19341>>tex2html_deferred<<19341>>
\begin<<17354>>center<<17354>>
\begin<<18520>>tex2html_wrap_inline<<18520>>$FSD = \left \{ \alpha \in (\Sigma \cup V)* : \exists S \begin<<17355>>array<<17355>><<17356>>c<<17356>> *\\  \Longrightarrow \\  <<17357>>\scriptstyle RM<<17357>> \end<<17358>>array<<17358>> \alpha \right \}$\end<<18521>>tex2html_wrap_inline<<18521>>
\end<<17359>>center<<17359>>
\begin<<19342>>tex2html_deferred<<19342>>\par\end<<19343>>tex2html_deferred<<19343>>
Donde la notacion RM indica una derivación a derechas (\emph<<17360>>rightmost<<17360>>).
Los elementos de \begin<<18522>>tex2html_wrap_inline<<18522>>$FSD$\end<<18523>>tex2html_wrap_inline<<18523>>\space se llaman ``formas sentenciales derechas''.\end<<18259>>theorem_type<<18259>>
\begin<<19344>>tex2html_deferred<<19344>>\par\end<<19345>>tex2html_deferred<<19345>>
Dada una gramática no ambigua \begin<<18524>>tex2html_wrap_inline<<18524>>$G=(\Sigma,V,P,S)$\end<<18525>>tex2html_wrap_inline<<18525>>\space y una frase \begin<<18526>>tex2html_wrap_inline<<18526>>$x \in L(G)$\end<<18527>>tex2html_wrap_inline<<18527>>\space el proceso
de antiderivación consiste en encontrar la última derivación a derechas que dió lugar a 
\begin<<18528>>tex2html_wrap_inline<<18528>>$x$\end<<18529>>tex2html_wrap_inline<<18529>>. Esto es, si \begin<<18530>>tex2html_wrap_inline<<18530>>$x \in L(G)$\end<<18531>>tex2html_wrap_inline<<18531>>\space es porque existe una derivación a derechas de la forma
\begin<<19346>>tex2html_deferred<<19346>>\par\end<<19347>>tex2html_deferred<<19347>>
\begin<<17362>>center<<17362>>
\begin<<18532>>tex2html_wrap_inline<<18532>>$S \stackrel<<17363>>*<<17363>><<17364>>\Longrightarrow<<17364>> y A z \Longrightarrow y w z = x$\end<<18533>>tex2html_wrap_inline<<18533>>. 
\end<<17365>>center<<17365>>
\begin<<19348>>tex2html_deferred<<19348>>\par\end<<19349>>tex2html_deferred<<19349>>
El problema es averiguar que regla \begin<<18534>>tex2html_wrap_inline<<18534>>$A \rightarrow w$\end<<18535>>tex2html_wrap_inline<<18535>>\space se aplicó y en que lugar 
de la cadena \begin<<18536>>tex2html_wrap_inline<<18536>>$x$\end<<18537>>tex2html_wrap_inline<<18537>>\space se aplicó. En general, si queremos antiderivar
una forma sentencial derecha \begin<<18538>>tex2html_wrap_inline<<18538>>$\beta \alpha w$\end<<18539>>tex2html_wrap_inline<<18539>> 
debemos averiguar por que regla \begin<<18540>>tex2html_wrap_inline<<18540>>$A \rightarrow \alpha$\end<<18541>>tex2html_wrap_inline<<18541>>
seguir y en que lugar de la forma (después de \begin<<18542>>tex2html_wrap_inline<<18542>>$\beta$\end<<18543>>tex2html_wrap_inline<<18543>>\space en el ejemplo)
aplicarla. 
\begin<<19350>>tex2html_deferred<<19350>>\par\end<<19351>>tex2html_deferred<<19351>>
\begin<<17366>>center<<17366>>
\begin<<18544>>tex2html_wrap_inline<<18544>>$S \stackrel<<17367>>*<<17367>><<17368>>\Longrightarrow<<17368>> \beta A w \Longrightarrow \beta \alpha w$\end<<18545>>tex2html_wrap_inline<<18545>>. 
\end<<17369>>center<<17369>>
\begin<<19352>>tex2html_deferred<<19352>>\par\end<<19353>>tex2html_deferred<<19353>>
La pareja formada por la regla y la posición 
se denomina mango o manecilla de la forma. Esta denominación viene
de la visualización gráfica de la regla de producción como una mano
que nos permite escalar hacia arriba en el árbol. Los ``dedos'' serían los
símbolos en la parte derecha de la regla de producción.
\begin<<19354>>tex2html_deferred<<19354>>\par\end<<19355>>tex2html_deferred<<19355>>
\begin<<18260>>theorem_type<<18260>>[definition][definition][section][][][]
Dada una gramática \begin<<18546>>tex2html_wrap_inline<<18546>>$G=(\Sigma,V,P,S)$\end<<18547>>tex2html_wrap_inline<<18547>>\space no ambigua, y dada una forma sentencial derecha 
\begin<<18548>>tex2html_wrap_inline<<18548>>$\alpha = \beta \gamma x$\end<<18549>>tex2html_wrap_inline<<18549>>, con \begin<<18550>>tex2html_wrap_inline<<18550>>$x \in \Sigma^*$\end<<18551>>tex2html_wrap_inline<<18551>>, el \index<<18323>>mango<<18323>>\emph<<18324>>mango<<18324>> o \index<<18325>>handle<<18325>>\emph<<18326>>handle<<18326>>  de 
\begin<<18552>>tex2html_wrap_inline<<18552>>$\alpha$\end<<18553>>tex2html_wrap_inline<<18553>>\space es la última producción/posición  que dió lugar a \begin<<18554>>tex2html_wrap_inline<<18554>>$\alpha$\end<<18555>>tex2html_wrap_inline<<18555>>:
\begin<<19356>>tex2html_deferred<<19356>>\par\end<<19357>>tex2html_deferred<<19357>>
\begin<<17373>>center<<17373>>
\begin<<18556>>tex2html_wrap_inline<<18556>>$ S \begin<<17374>>array<<17374>><<17375>>c<<17375>> *\\ \Longrightarrow  \\  <<17376>>\scriptstyle RM<<17376>> \end<<17377>>array<<17377>> \beta B x \Longrightarrow \beta \gamma x = \alpha$\end<<18557>>tex2html_wrap_inline<<18557>>
\end<<17378>>center<<17378>>
\begin<<19358>>tex2html_deferred<<19358>>\par\end<<19359>>tex2html_deferred<<19359>>\end<<18261>>theorem_type<<18261>>
Escribiremos: 
\begin<<18558>>tex2html_wrap_inline<<18558>>$handle(\alpha) = (B \rightarrow \gamma, \beta \gamma)$\end<<18559>>tex2html_wrap_inline<<18559>>. La función \begin<<18560>>tex2html_wrap_inline<<18560>>$handle$\end<<18561>>tex2html_wrap_inline<<18561>>\space tiene dos componentes:
\begin<<18562>>tex2html_wrap_inline<<18562>>$handle_1(\alpha) = B \rightarrow \gamma$\end<<18563>>tex2html_wrap_inline<<18563>>\space y 
\begin<<18564>>tex2html_wrap_inline<<18564>>$handle_2(\alpha) =  \beta \gamma$\end<<18565>>tex2html_wrap_inline<<18565>>
\begin<<19360>>tex2html_deferred<<19360>>\par\end<<19361>>tex2html_deferred<<19361>>
Si dispusieramos de un procedimiento que fuera capaz de identificar el mango,
esto es, de detectar la regla y el lugar en el que se posiciona, tendríamos un
mecanismo para construir un analizador. 
Lo curioso es que, a menudo es posible encontrar un autómata finito que
reconoce el lenguaje de los prefijos \begin<<18566>>tex2html_wrap_inline<<18566>>$\beta \gamma$\end<<18567>>tex2html_wrap_inline<<18567>>\space  que terminan 
en el mango. Con mas precisión, del lenguaje:
\begin<<19362>>tex2html_deferred<<19362>>\par\end<<19363>>tex2html_deferred<<19363>>
\begin<<18262>>theorem_type<<18262>>[definition][definition][section][][][]
El conjunto de \emph<<17381>>prefijos viables<<17381>> de una gramática G se define
como  el conjunto:
\begin<<19364>>tex2html_deferred<<19364>>\par\end<<19365>>tex2html_deferred<<19365>>
\begin<<17382>>center<<17382>>
\begin<<18568>>tex2html_wrap_inline<<18568>>$PV = \left \{ \delta \in (\Sigma \cup V)* :  \exists S \begin<<17383>>array<<17383>><<17384>>c<<17384>> *\\  \Longrightarrow \\  <<17385>>\scriptstyle RM<<17385>> \end<<17386>>array<<17386>> \alpha\  y\ \delta\ es\ un\ prefijo\ de\  handle_2(\alpha) \right \}$\end<<18569>>tex2html_wrap_inline<<18569>> 
\end<<17387>>center<<17387>>\end<<18263>>theorem_type<<18263>>
\begin<<19366>>tex2html_deferred<<19366>>\par\end<<19367>>tex2html_deferred<<19367>>
Esto es, es el lenguaje de los prefijos viables es el 
conjunto de frases que son prefijos de 
\begin<<18570>>tex2html_wrap_inline<<18570>>$handle_2(\alpha)) =  \beta \gamma$\end<<18571>>tex2html_wrap_inline<<18571>>, 
siendo \begin<<18572>>tex2html_wrap_inline<<18572>>$\alpha$\end<<18573>>tex2html_wrap_inline<<18573>>\space una forma sentencial derecha (\begin<<18574>>tex2html_wrap_inline<<18574>>$\alpha \in FSD$\end<<18575>>tex2html_wrap_inline<<18575>>). Los
elementos de \begin<<18576>>tex2html_wrap_inline<<18576>>$PV$\end<<18577>>tex2html_wrap_inline<<18577>>\space se denominan prefijos viables.
\begin<<19368>>tex2html_deferred<<19368>>\par\end<<19369>>tex2html_deferred<<19369>>
Obsérvese que si se dispone de un autómata que reconoce 
\begin<<18578>>tex2html_wrap_inline<<18578>>$PV$\end<<18579>>tex2html_wrap_inline<<18579>>\space entonces se dispone de un mecanismo para investigar el lugar y 
el aspecto que pueda tener el mango. Si damos como 
entrada la sentencia \begin<<18580>>tex2html_wrap_inline<<18580>>$\alpha = \beta \gamma x$\end<<18581>>tex2html_wrap_inline<<18581>>
a dicho autómata, el autómata aceptará la cadena \begin<<18582>>tex2html_wrap_inline<<18582>>$\beta \gamma$\end<<18583>>tex2html_wrap_inline<<18583>>\space pero rechazará
cualquier extensión del prefijo. Ahora sabemos que el mango 
será alguna regla de producción de \begin<<18584>>tex2html_wrap_inline<<18584>>$G$\end<<18585>>tex2html_wrap_inline<<18585>>\space cuya parte derecha 
sea un sufijo de  \begin<<18586>>tex2html_wrap_inline<<18586>>$\beta \gamma$\end<<18587>>tex2html_wrap_inline<<18587>>.
\begin<<19370>>tex2html_deferred<<19370>>\par\end<<19371>>tex2html_deferred<<19371>>
\begin<<18264>>theorem_type<<18264>>[definition][definition][section][][][]
\label<<17390>>definition:slrautomata<<17390>>
El siguiente autómata finito no determinista puede ser utilizado para
reconocer el lenguaje de los prefijos viables PV:
\begin<<17391>>itemize<<17391>>
\item
\begin<<18588>>tex2html_wrap_inline<<18588>>$Alfabeto = V \cup \Sigma$\end<<18589>>tex2html_wrap_inline<<18589>>
\item
Los estados del autómata se denominan LR(0) items. Son parejas formadas
por una regla de producción de la gramática y una posición en la parte derecha 
de la regla de producción. Por ejemplo, \begin<<18590>>tex2html_wrap_inline<<18590>>$(E \rightarrow E + E, 2)$\end<<18591>>tex2html_wrap_inline<<18591>>\space sería un
LR(0) item para la gramática de las expresiones.
\begin<<19372>>tex2html_deferred<<19372>>\par\end<<19373>>tex2html_deferred<<19373>>
Conjunto de Estados:
\begin<<19374>>tex2html_deferred<<19374>>\par\end<<19375>>tex2html_deferred<<19375>>
\begin<<18592>>tex2html_wrap_inline<<18592>>$Q =  \left \{ (A \rightarrow \alpha, n) :  A \rightarrow \alpha \in P,\ n \le |\alpha| \right \}$\end<<18593>>tex2html_wrap_inline<<18593>>
\begin<<19376>>tex2html_deferred<<19376>>\par\end<<19377>>tex2html_deferred<<19377>>
La notación \begin<<18594>>tex2html_wrap_inline<<18594>>$\mid \alpha \mid$\end<<18595>>tex2html_wrap_inline<<18595>>\space denota la longitud de la cadena \begin<<18596>>tex2html_wrap_inline<<18596>>$\mid \alpha \mid$\end<<18597>>tex2html_wrap_inline<<18597>>.
 En vez de la notación \begin<<18598>>tex2html_wrap_inline<<18598>>$(A \rightarrow \alpha, n)$\end<<18599>>tex2html_wrap_inline<<18599>>\space escribiremos: 
 \begin<<18600>>tex2html_wrap_inline<<18600>>$A \rightarrow \beta _\uparrow \gamma$\end<<18601>>tex2html_wrap_inline<<18601>>\space \begin<<18602>>tex2html_wrap_inline<<18602>>$ = \alpha$\end<<18603>>tex2html_wrap_inline<<18603>>, 
 donde la flecha ocupa el lugar indicado por el número \begin<<18604>>tex2html_wrap_inline<<18604>>$n = \mid \beta \mid$\end<<18605>>tex2html_wrap_inline<<18605>>\space :
\item
Función de transición:
\begin<<19378>>tex2html_deferred<<19378>>\par\end<<19379>>tex2html_deferred<<19379>>
\begin<<18606>>tex2html_wrap_inline<<18606>>$\delta(A \rightarrow \alpha _\uparrow X \beta, X) = A \rightarrow \alpha X _\uparrow \beta\ \forall X \in  V \cup \Sigma$\end<<18607>>tex2html_wrap_inline<<18607>> 
\begin<<19380>>tex2html_deferred<<19380>>\par\end<<19381>>tex2html_deferred<<19381>>
\begin<<18608>>tex2html_wrap_inline<<18608>>$\delta(A \rightarrow \alpha _\uparrow B \beta, \epsilon) = B \rightarrow \gamma  \forall B \in  V$\end<<18609>>tex2html_wrap_inline<<18609>> 
\item
Estado de arranque: Se añade la ``superregla'' \begin<<18610>>tex2html_wrap_inline<<18610>>$S' \rightarrow S$\end<<18611>>tex2html_wrap_inline<<18611>>\space a la gramática \begin<<18612>>tex2html_wrap_inline<<18612>>$G = (\Sigma,V,P,S)$\end<<18613>>tex2html_wrap_inline<<18613>>. El LR(0) item 
\begin<<18614>>tex2html_wrap_inline<<18614>>$S' \rightarrow _\uparrow S$\end<<18615>>tex2html_wrap_inline<<18615>>\space es el estado de arranque.
\item
Todos los estados definidos (salvo el de muerte) son de aceptación.
\end<<17392>>itemize<<17392>>\end<<18265>>theorem_type<<18265>>
\begin<<19382>>tex2html_deferred<<19382>>\par\end<<19383>>tex2html_deferred<<19383>>
Denotaremos por \begin<<18616>>tex2html_wrap_inline<<18616>>$LR(0)$\end<<18617>>tex2html_wrap_inline<<18617>>\space a este autómata. Sus estados se denominan \begin<<18618>>tex2html_wrap_inline<<18618>>$LR(0)-items$\end<<18619>>tex2html_wrap_inline<<18619>>. La idea es que este
autómata nos ayuda a reconocer los prefijos viables \begin<<18620>>tex2html_wrap_inline<<18620>>$PV$\end<<18621>>tex2html_wrap_inline<<18621>>.
\begin<<19384>>tex2html_deferred<<19384>>\par\end<<19385>>tex2html_deferred<<19385>>
Una vez que se tiene un autómata que reconoce los prefijos viables es posible construir un analizador sintáctico que construye una antiderivación a derechas. La estrategia consiste en ``alimentar'' el autómata con la forma sentencial derecha. El lugar en el que el autómata se detiene, rechazando indica el lugar exacto en el que termina el \emph<<17394>>handle<<17394>> de dicha forma.
\begin<<19386>>tex2html_deferred<<19386>>\par\end<<19387>>tex2html_deferred<<19387>>
\begin<<18266>>theorem_type<<18266>>[example][example][section][][][]
\label<<17396>>example:asb<<17396>>
Consideremos la gramática:
\begin<<19388>>tex2html_deferred<<19388>>\par\end<<19389>>tex2html_deferred<<19389>>
\vspace<<17397>>0.5cm<<17397>>
\begin<<17398>>center<<17398>>
\begin<<17399>>tabular<<17399>><<17400>>l<<17400>>
S      \begin<<18622>>tex2html_wrap_inline<<18622>>$\rightarrow$\end<<18623>>tex2html_wrap_inline<<18623>>\space  a S b\\ 
S      \begin<<18624>>tex2html_wrap_inline<<18624>>$\rightarrow$\end<<18625>>tex2html_wrap_inline<<18625>>\space \begin<<18626>>tex2html_wrap_inline<<18626>>$\epsilon$\end<<18627>>tex2html_wrap_inline<<18627>> 
\end<<17401>>tabular<<17401>>
\end<<17402>>center<<17402>>
\vspace<<17403>>0.25cm<<17403>>
\begin<<19390>>tex2html_deferred<<19390>>\par\end<<19391>>tex2html_deferred<<19391>>
El lenguaje generado por esta gramática es \begin<<18628>>tex2html_wrap_inline<<18628>>$L(G) = \{ a^n b^n\ :\ n \ge 0 \}$\end<<18629>>tex2html_wrap_inline<<18629>>
Es bien sabido que el lenguaje \begin<<18630>>tex2html_wrap_inline<<18630>>$L(G)$\end<<18631>>tex2html_wrap_inline<<18631>>\space no es regular.
La figura \ref<<17404>>fig:nfa<<17404>> muestra 
el \index<<18327>>autómata finito no determinista con \begin<<18632>>tex2html_wrap_inline<<18632>>$\epsilon$\end<<18633>>tex2html_wrap_inline<<18633>>-transiciones<<18327>>\emph<<18328>>autómata finito no determinista con \begin<<18634>>tex2html_wrap_inline<<18634>>$\epsilon$\end<<18635>>tex2html_wrap_inline<<18635>>-transiciones<<18328>> 
(\index<<18329>>NFA<<18329>>\emph<<18330>>NFA<<18330>>)
que reconoce los prefijos viables de esta gramática, construido
de acuerdo con el algoritmo \ref<<17407>>definition:slrautomata<<17407>>.
\begin<<19392>>tex2html_deferred<<19392>>\par\end<<19393>>tex2html_deferred<<19393>>
\begin<<17408>>center<<17408>>
\begin<<17409>>figure<<17409>>[htb]
\begin<<19394>>tex2html_deferred<<19394>>\caption<<17410>>NFA que reconoce los prefijos viables<<17410>>\end<<19395>>tex2html_deferred<<19395>>
\label<<17411>>fig:nfa<<17411>>
\end<<17412>>figure<<17412>>
\end<<17413>>center<<17413>>\end<<18267>>theorem_type<<18267>>
\begin<<19396>>tex2html_deferred<<19396>>\par\end<<19397>>tex2html_deferred<<19397>>
\begin<<18268>>theorem_type<<18268>>[exercise][exercise][section][][][]
Simule el comportamiento del autómata sobre la entrada \begin<<18636>>tex2html_wrap_inline<<18636>>$aabb$\end<<18637>>tex2html_wrap_inline<<18637>>. ¿Donde rechaza?
¿En que estados está el autómata en el momento del rechazo?. ¿Qué etiquetas tienen?
Haga también las
trazas del autómata para las entradas \begin<<18638>>tex2html_wrap_inline<<18638>>$aaSbb$\end<<18639>>tex2html_wrap_inline<<18639>>\space y \begin<<18640>>tex2html_wrap_inline<<18640>>$aSb$\end<<18641>>tex2html_wrap_inline<<18641>>. ¿Que antiderivación 
ha construido el autómata con sus sucesivos rechazos? ¿Que terminales
se puede esperar que hayan en la entrada cuando se produce el rechazo
del autómata?\end<<18269>>theorem_type<<18269>>
\begin<<19398>>tex2html_deferred<<19398>>\par\end<<19399>>tex2html_deferred<<19399>>
\section<<17417>>Construcción de las Tablas para el Análisis SLR<<17417>>
\begin<<19400>>tex2html_deferred<<19400>>\par\end<<19401>>tex2html_deferred<<19401>>
\subsection<<17418>>Los conjuntos de Primeros y Siguientes<<17418>>
Repasemos las nociones de conjuntos de \index<<18331>>Primeros<<18331>>\emph<<18332>>Primeros<<18332>> y \index<<18333>>siguientes<<18333>>\emph<<18334>>siguientes<<18334>>:
\begin<<19402>>tex2html_deferred<<19402>>\par\end<<19403>>tex2html_deferred<<19403>>
\begin<<18270>>theorem_type<<18270>>[definition][definition][section][][][]
Dada una gramática \begin<<18642>>tex2html_wrap_inline<<18642>>$G=(\Sigma,V,P,S)$\end<<18643>>tex2html_wrap_inline<<18643>>\space y un símbolo \begin<<18644>>tex2html_wrap_inline<<18644>>$\alpha \in (V \cup \Sigma)^*$\end<<18645>>tex2html_wrap_inline<<18645>>\space se define el conjunto \begin<<18646>>tex2html_wrap_inline<<18646>>$FIRST(\alpha)$\end<<18647>>tex2html_wrap_inline<<18647>>\space como:
\begin<<19404>>tex2html_deferred<<19404>>\par\end<<19405>>tex2html_deferred<<19405>>
\begin<<18648>>tex2html_wrap_inline<<18648>>$FIRST(\alpha) = \left \{ b \in \Sigma :  \alpha  \stackrel<<17422>>*<<17422>><<17423>>\Longrightarrow<<17423>>  b \beta \right \}
\cup N(\alpha)$\end<<18649>>tex2html_wrap_inline<<18649>> 
\begin<<19406>>tex2html_deferred<<19406>>\par\end<<19407>>tex2html_deferred<<19407>>
\noindent donde:
\begin<<19408>>tex2html_deferred<<19408>>\par\end<<19409>>tex2html_deferred<<19409>>
\begin<<18652>>tex2html_wrap_inline<<18652>>$N(\alpha) = \left \{ \begin<<17424>>array<<17424>><<17425>>ll<<17425>>
                         \left \{ \epsilon \right \};SPMamp; \mbox<<18222>>si \begin<<18650>>tex2html_wrap_inline<<18650>>$\alpha \stackrel<<17426>>*<<17426>><<17427>>\Longrightarrow<<17427>> \epsilon$\end<<18651>>tex2html_wrap_inline<<18651>><<18222>> \\ 
                         \emptyset ;SPMamp; \mbox<<17428>>en otro caso<<17428>> 
                      \end<<17429>>array<<17429>>
             \right. $\end<<18653>>tex2html_wrap_inline<<18653>> 
\begin<<19410>>tex2html_deferred<<19410>>\par\end<<19411>>tex2html_deferred<<19411>>\end<<18271>>theorem_type<<18271>>
\begin<<19412>>tex2html_deferred<<19412>>\par\end<<19413>>tex2html_deferred<<19413>>
\begin<<18272>>theorem_type<<18272>>[definition][definition][section][][][]
Dada una gramática \begin<<18654>>tex2html_wrap_inline<<18654>>$G=(\Sigma,V,P,S)$\end<<18655>>tex2html_wrap_inline<<18655>>\space y una variable \begin<<18656>>tex2html_wrap_inline<<18656>>$A \in V$\end<<18657>>tex2html_wrap_inline<<18657>>\space se define el conjunto \begin<<18658>>tex2html_wrap_inline<<18658>>$FOLLOW(A)$\end<<18659>>tex2html_wrap_inline<<18659>>\space como: 
\begin<<19414>>tex2html_deferred<<19414>>\par\end<<19415>>tex2html_deferred<<19415>>
\begin<<18660>>tex2html_wrap_inline<<18660>>$FOLLOW(A) = \left \{ b \in \Sigma :  \exists\ S  \stackrel<<17432>>*<<17432>><<17433>>\Longrightarrow<<17433>>  \alpha A b \beta \right \} \cup E(A)$\end<<18661>>tex2html_wrap_inline<<18661>>
\begin<<19416>>tex2html_deferred<<19416>>\par\end<<19417>>tex2html_deferred<<19417>>
\noindent donde
\begin<<19418>>tex2html_deferred<<19418>>\par\end<<19419>>tex2html_deferred<<19419>>
\begin<<18664>>tex2html_wrap_inline<<18664>>$E(A) = \left \{ \begin<<17434>>array<<17434>><<17435>>ll<<17435>>
                         \{ \$  \};SPMamp; \mbox<<18223>>si \begin<<18662>>tex2html_wrap_inline<<18662>>$S \stackrel<<17436>>*<<17436>><<17437>>\Longrightarrow<<17437>> \alpha A$\end<<18663>>tex2html_wrap_inline<<18663>><<18223>> \\ 
                         \emptyset ;SPMamp; \mbox<<17438>>en otro caso<<17438>> 
                      \end<<17439>>array<<17439>>
             \right. $\end<<18665>>tex2html_wrap_inline<<18665>> 
\begin<<19420>>tex2html_deferred<<19420>>\par\end<<19421>>tex2html_deferred<<19421>>\end<<18273>>theorem_type<<18273>>
\begin<<19422>>tex2html_deferred<<19422>>\par\end<<19423>>tex2html_deferred<<19423>>
\begin<<18274>>theorem_type<<18274>>[algorithm][algorithm][section][][][]
Construcción de los conjuntos \begin<<18666>>tex2html_wrap_inline<<18666>>$FIRST(X)$\end<<18667>>tex2html_wrap_inline<<18667>>
\begin<<17442>>enumerate<<17442>>
\item
\begin<<18668>>tex2html_wrap_inline<<18668>>$Si\ X \in \Sigma\ entonces\ FIRST(X) = <<17443>>X<<17443>>$\end<<18669>>tex2html_wrap_inline<<18669>>
\item
\begin<<18670>>tex2html_wrap_inline<<18670>>$Si\ X \rightarrow \epsilon\ entonces\ FIRST(X) =  FIRST(X) \cup \{ \epsilon \}$\end<<18671>>tex2html_wrap_inline<<18671>>
\item
\begin<<18672>>tex2html_wrap_inline<<18672>>$Si X \in V \ y\ X \rightarrow Y_1 Y_2 \cdots Y_k \in P\ entonces$\end<<18673>>tex2html_wrap_inline<<18673>>
\begin<<17444>>eqnarray*<<17444>>
;SPMamp;;SPMamp;i = 1; \\ 
;SPMamp;;SPMamp;do\\ 
;SPMamp;;SPMamp;\ \ FIRST(X) = FIRST(X) \cup FIRST(Y_i) - \{ \epsilon \};\\ 
;SPMamp;;SPMamp;\ \ i++;\\ 
;SPMamp;;SPMamp;mientras\ (\epsilon \in FIRST(Y_i)\ and\ (i \leq k))\\ 
;SPMamp;;SPMamp;si\ (\epsilon \in FIRST(Y_k)\ and\ i ;SPMgt; k)\ FIRST(X) = FIRST(X) \cup \{ \epsilon \}
\end<<17445>>eqnarray*<<17445>>
\end<<17446>>enumerate<<17446>>\end<<18275>>theorem_type<<18275>>
Este algoritmo puede ser extendido para calcular \begin<<18674>>tex2html_wrap_inline<<18674>>$FIRST(\alpha)$\end<<18675>>tex2html_wrap_inline<<18675>>\space para \begin<<18676>>tex2html_wrap_inline<<18676>>$\alpha = X_1 X_2 \cdots X_n \in (V \cup \Sigma)^*$\end<<18677>>tex2html_wrap_inline<<18677>>.
\begin<<19424>>tex2html_deferred<<19424>>\par\end<<19425>>tex2html_deferred<<19425>>
\begin<<18276>>theorem_type<<18276>>[algorithm][algorithm][section][][][]
Construcción del conjunto \begin<<18678>>tex2html_wrap_inline<<18678>>$FIRST(\alpha)$\end<<18679>>tex2html_wrap_inline<<18679>> 
\begin<<17449>>eqnarray*<<17449>>
;SPMamp;;SPMamp;i = 1; \nonumber\\ 
;SPMamp;;SPMamp;FIRST(\alpha) = \emptyset; \nonumber\\ 
;SPMamp;;SPMamp;do \nonumber\\ 
;SPMamp;;SPMamp;\ \ FIRST(\alpha) = FIRST(\alpha) \cup FIRST(X_i) - \{ \epsilon \}; \nonumber\\ 
;SPMamp;;SPMamp;\ \ i++; \nonumber\\ 
;SPMamp;;SPMamp;mientras\ (\epsilon \in FIRST(X_i)\ and\ (i \leq n)) \nonumber\\ 
;SPMamp;;SPMamp;si\ (\epsilon \in FIRST(X_n)\ and\ i ;SPMgt; n)\ FIRST(\alpha) = FIRST(X) \cup \{ \epsilon \}
\end<<17450>>eqnarray*<<17450>>\end<<18277>>theorem_type<<18277>>
\begin<<19426>>tex2html_deferred<<19426>>\par\end<<19427>>tex2html_deferred<<19427>>
\begin<<18278>>theorem_type<<18278>>[algorithm][algorithm][section][][][]
Construcción de los conjuntos \begin<<18680>>tex2html_wrap_inline<<18680>>$FOLLOW(A)$\end<<18681>>tex2html_wrap_inline<<18681>>
para las variables sintácticas \begin<<18682>>tex2html_wrap_inline<<18682>>$A \in V$\end<<18683>>tex2html_wrap_inline<<18683>>: 
\begin<<19428>>tex2html_deferred<<19428>>\par\end<<19429>>tex2html_deferred<<19429>>
Repetir los siguientes pasos hasta que ninguno de los conjuntos \begin<<18684>>tex2html_wrap_inline<<18684>>$FOLLOW$\end<<18685>>tex2html_wrap_inline<<18685>>\space cambie:
\begin<<17453>>enumerate<<17453>> 
\item 
\begin<<18686>>tex2html_wrap_inline<<18686>>$FOLLOW(S) = \{\$\} $\end<<18687>>tex2html_wrap_inline<<18687>>\space  (\begin<<18688>>tex2html_wrap_inline<<18688>>$\$$\end<<18689>>tex2html_wrap_inline<<18689>>\space representa el final de la entrada)
\item
\begin<<18690>>tex2html_wrap_inline<<18690>>$Si\ A \rightarrow \alpha B \beta\ entonces$\end<<18691>>tex2html_wrap_inline<<18691>>
\begin<<18500>>displaymath<<18500>> FOLLOW(B) =  FOLLOW(B) \cup (FIRST(\beta) - \{\epsilon\})\end<<18502>>displaymath<<18502>>
\item
\begin<<18692>>tex2html_wrap_inline<<18692>>$Si\ A \rightarrow \alpha B$\end<<18693>>tex2html_wrap_inline<<18693>>\space o bien \begin<<18694>>tex2html_wrap_inline<<18694>>$A \rightarrow \alpha B \beta$\end<<18695>>tex2html_wrap_inline<<18695>>
y \begin<<18696>>tex2html_wrap_inline<<18696>>$\epsilon \in FIRST(\beta)$\end<<18697>>tex2html_wrap_inline<<18697>>\space  entonces
\begin<<19430>>tex2html_deferred<<19430>>\par\end<<19431>>tex2html_deferred<<19431>>
\begin<<18501>>displaymath<<18501>> FOLLOW(B) = FOLLOW(B) \cup FOLLOW(A)\end<<18503>>displaymath<<18503>>
\end<<17454>>enumerate<<17454>>\end<<18279>>theorem_type<<18279>>
\begin<<19432>>tex2html_deferred<<19432>>\par\end<<19433>>tex2html_deferred<<19433>>
\subsection<<17456>>Construcción de las Tablas<<17456>>
\label<<17457>>subsection:nfa2dfa<<17457>>
\begin<<19434>>tex2html_deferred<<19434>>\par\end<<19435>>tex2html_deferred<<19435>>
Para la construcción de las tablas de un analizador SLR
se construye el \index<<18335>>autómata finito determinista<<18335>>\emph<<18336>>autómata finito determinista<<18336>> (\index<<18337>>DFA<<18337>>\emph<<18338>>DFA<<18338>>) 
\begin<<18698>>tex2html_wrap_inline<<18698>>$(Q, \Sigma, \delta, q_0)$\end<<18699>>tex2html_wrap_inline<<18699>>\space equivalente al NFA 
presentado en la sección
\ref<<17460>>section:conceptosbasicos<<17460>>
usando el \index<<18339>>algoritmo de construcción del subconjunto<<18339>>\emph<<18340>>algoritmo de construcción del subconjunto<<18340>>.
\begin<<19436>>tex2html_deferred<<19436>>\par\end<<19437>>tex2html_deferred<<19437>>
Como recordará, en la construcción del subconjunto,
partiendo del estado de arranque \begin<<18700>>tex2html_wrap_inline<<18700>>$q_0$\end<<18701>>tex2html_wrap_inline<<18701>>\space del NFA con \begin<<18702>>tex2html_wrap_inline<<18702>>$\epsilon$\end<<18703>>tex2html_wrap_inline<<18703>>-transiciones
se calcula su \index<<18341>>clausura<<18341>>\emph<<18342>>clausura<<18342>> \begin<<18704>>tex2html_wrap_inline<<18704>>$\overline<<17463>>\{q_0\}<<17463>>$\end<<18705>>tex2html_wrap_inline<<18705>>\space y las 
clausuras de los conjuntos de estados \begin<<18706>>tex2html_wrap_inline<<18706>>$\overline<<18224>>\delta(\overline<<17464>>\{q_0\}<<17464>>,a)<<18224>>$\end<<18707>>tex2html_wrap_inline<<18707>> 
a los que transita.  Se repite el proceso
con los conjuntos resultantes hasta que no se introducen nuevos
conjuntos-estado.
\begin<<19438>>tex2html_deferred<<19438>>\par\end<<19439>>tex2html_deferred<<19439>>
La clausura \begin<<18708>>tex2html_wrap_inline<<18708>>$\overline<<17465>>A<<17465>>$\end<<18709>>tex2html_wrap_inline<<18709>>\space de un subconjunto de estados del autómata \begin<<18710>>tex2html_wrap_inline<<18710>>$A$\end<<18711>>tex2html_wrap_inline<<18711>>\space esta formada
por todos los estados que pueden ser alcanzados mediante transiciones
etiquetadas con la palabra vacía (denominadas \begin<<18712>>tex2html_wrap_inline<<18712>>$\epsilon$\end<<18713>>tex2html_wrap_inline<<18713>>\space transiciones)
desde los estados de \begin<<18714>>tex2html_wrap_inline<<18714>>$A$\end<<18715>>tex2html_wrap_inline<<18715>>. Se incluyen en \begin<<18716>>tex2html_wrap_inline<<18716>>$\overline<<17466>>A<<17466>>$\end<<18717>>tex2html_wrap_inline<<18717>>, naturalmente los estados 
de \begin<<18718>>tex2html_wrap_inline<<18718>>$A$\end<<18719>>tex2html_wrap_inline<<18719>>.
\begin<<19440>>tex2html_deferred<<19440>>\par\end<<19441>>tex2html_deferred<<19441>>
\begin<<17467>>center<<17467>>
\begin<<18720>>tex2html_wrap_inline<<18720>>$\overline<<17468>>A<<17468>> = \{ q \in Q\ /\  \exists q' \in Q\ :\ \hat<<17469>>\delta<<17469>>(q, \epsilon) = q \}$\end<<18721>>tex2html_wrap_inline<<18721>>
\end<<17470>>center<<17470>>
\begin<<19442>>tex2html_deferred<<19442>>\par\end<<19443>>tex2html_deferred<<19443>>
Aquí \begin<<18722>>tex2html_wrap_inline<<18722>>$\hat<<17471>>\delta<<17471>>$\end<<18723>>tex2html_wrap_inline<<18723>>\space denota la \index<<18343>>función de transición del autómata<<18343>>\emph<<18344>>función de transición del autómata<<18344>> extendida  a cadenas
de \begin<<18724>>tex2html_wrap_inline<<18724>>$\Sigma^*$\end<<18725>>tex2html_wrap_inline<<18725>>.
\begin<<19444>>tex2html_deferred<<19444>>\par\end<<19445>>tex2html_deferred<<19445>>
\begin<<17473>>equation<<17473>>
\label<<17474>>equation:deltahat<<17474>>
\hat<<17475>>\delta<<17475>>(q, x) = \left \{ \begin<<17476>>array<<17476>><<17477>>ll<<17477>>
                         \delta(\hat<<17478>>\delta<<17478>>(q,y),a) ;SPMamp; \mbox<<17479>>si \begin<<18726>>tex2html_wrap_inline<<18726>>$x = ya$\end<<18727>>tex2html_wrap_inline<<18727>><<17479>> \\ 
                         q ;SPMamp; \mbox<<17480>>si \begin<<18728>>tex2html_wrap_inline<<18728>>$x = \epsilon$\end<<18729>>tex2html_wrap_inline<<18729>><<17480>> 
                      \end<<17481>>array<<17481>>
             \right.  
\end<<17482>>equation<<17482>>
\begin<<19446>>tex2html_deferred<<19446>>\par\end<<19447>>tex2html_deferred<<19447>>
En la práctica, y a partir de ahora así lo haremos, se prescinde de diferenciar
entre \begin<<18730>>tex2html_wrap_inline<<18730>>$\delta$\end<<18731>>tex2html_wrap_inline<<18731>>\space y \begin<<18732>>tex2html_wrap_inline<<18732>>$\hat<<17483>>\delta<<17483>>$\end<<18733>>tex2html_wrap_inline<<18733>>\space usándose indistintamente la notación
\begin<<18734>>tex2html_wrap_inline<<18734>>$\delta$\end<<18735>>tex2html_wrap_inline<<18735>>\space para ambas funciones.
\begin<<19448>>tex2html_deferred<<19448>>\par\end<<19449>>tex2html_deferred<<19449>>
La clausura puede ser computada usando una estructura de pila o aplicando 
la expresión recursiva dada en la ecuación \ref<<17484>>equation:deltahat<<17484>>.
\begin<<19450>>tex2html_deferred<<19450>>\par\end<<19451>>tex2html_deferred<<19451>>
Para el NFA mostrado en el ejemplo \ref<<17485>>example:asb<<17485>> el DFA construído mediante esta
técnica es el que se muestra en la figura \ref<<17486>>fig:dfa<<17486>>. Se ha utilizado el símbolo
<tex2html_verb_mark>2319<tex2html_verb_mark> como marcador. Se ha omitido el número 3 para que los estados coincidan
en numeración con los generados por <tex2html_verb_mark>2320<tex2html_verb_mark> (véase el cuadro
\ref<<17487>>table:tablaslalr<<17487>>).
\begin<<19452>>tex2html_deferred<<19452>>\par\end<<19453>>tex2html_deferred<<19453>>
\begin<<17488>>center<<17488>>
\begin<<17489>>figure<<17489>>
\begin<<19454>>tex2html_deferred<<19454>>\caption<<18225>>DFA equivalente al NFA de la figura \ref<<17490>>fig:nfa<<17490>><<18225>>\end<<19455>>tex2html_deferred<<19455>>
\label<<17491>>fig:dfa<<17491>>
\end<<17492>>figure<<17492>>
\end<<17493>>center<<17493>>
\begin<<19456>>tex2html_deferred<<19456>>\par\end<<19457>>tex2html_deferred<<19457>>
Un analizador sintáctico LR utiliza una tabla para su análisis.
Esa tabla se construye a partir de la tabla de transiciones del DFA.
De hecho, la tabla se divide en dos tablas, una llamada 
\index<<18345>>tabla de saltos<<18345>>\emph<<18346>>tabla de saltos<<18346>> o \index<<18347>>tabla de gotos<<18347>>\emph<<18348>>tabla de gotos<<18348>> y la otra
\index<<18349>>tabla de acciones<<18349>>\emph<<18350>>tabla de acciones<<18350>>.
\begin<<19458>>tex2html_deferred<<19458>>\par\end<<19459>>tex2html_deferred<<19459>>
La tabla \index<<18351>>goto<<18351>>\emph<<18352>>goto<<18352>> de un analizador \index<<18353>>SLR<<18353>>\emph<<18354>>SLR<<18354>>
no es más que la tabla de transiciones del autómata DFA 
obtenido aplicando la construcción del subconjunto al NFA
definido en \ref<<17499>>definition:slrautomata<<17499>>. De hecho es la tabla
de transiciones restringida a \begin<<18736>>tex2html_wrap_inline<<18736>>$V$\end<<18737>>tex2html_wrap_inline<<18737>>\space (recuerde que el alfabeto del
autómata es \begin<<18738>>tex2html_wrap_inline<<18738>>$V \cup \Sigma$\end<<18739>>tex2html_wrap_inline<<18739>>).
Esto es, 
\begin<<19460>>tex2html_deferred<<19460>>\par\end<<19461>>tex2html_deferred<<19461>>
\begin<<17500>>center<<17500>>
\begin<<18740>>tex2html_wrap_inline<<18740>>$\delta_<<17501>>| V \times Q<<17501>> :  V \times Q \rightarrow Q$\end<<18741>>tex2html_wrap_inline<<18741>>. 
\begin<<19462>>tex2html_deferred<<19462>>\par\end<<19463>>tex2html_deferred<<19463>>
donde se define \begin<<18742>>tex2html_wrap_inline<<18742>>$goto(i, A) = \delta(A,I_i)$\end<<18743>>tex2html_wrap_inline<<18743>>
\end<<17502>>center<<17502>>
\begin<<19464>>tex2html_deferred<<19464>>\par\end<<19465>>tex2html_deferred<<19465>>
La parte de la función de transiciones
del DFA que corresponde a los terminales que no producen rechazo, 
esto es, \begin<<18744>>tex2html_wrap_inline<<18744>>$\delta_<<17503>>| \Sigma \times Q<<17503>> :  \Sigma \times Q \rightarrow Q$\end<<18745>>tex2html_wrap_inline<<18745>>
se adjunta a una tabla que se denomina \index<<18355>>tabla de acciones<<18355>>\emph<<18356>>tabla de acciones<<18356>>.
La tabla de acciones es una tabla de doble entrada en los estados
y en los símbolos de \begin<<18746>>tex2html_wrap_inline<<18746>>$\Sigma$\end<<18747>>tex2html_wrap_inline<<18747>>.
Las acciones de transición ante terminales 
se denominan \index<<18357>>acciones de desplazamiento<<18357>>\emph<<18358>>acciones de desplazamiento<<18358>> o (\index<<18359>>acciones shift<<18359>>\emph<<18360>>acciones shift<<18360>>):
\begin<<19466>>tex2html_deferred<<19466>>\par\end<<19467>>tex2html_deferred<<19467>>
\begin<<17507>>center<<17507>>
\begin<<18748>>tex2html_wrap_inline<<18748>>$\delta_<<17508>>| \Sigma \times Q<<17508>> :  \Sigma \times Q \rightarrow Q$\end<<18749>>tex2html_wrap_inline<<18749>>
\begin<<19468>>tex2html_deferred<<19468>>\par\end<<19469>>tex2html_deferred<<19469>>
donde se define \begin<<18750>>tex2html_wrap_inline<<18750>>$action(i, a) = \delta(a,I_i)$\end<<18751>>tex2html_wrap_inline<<18751>>
\end<<17509>>center<<17509>>
\begin<<19470>>tex2html_deferred<<19470>>\par\end<<19471>>tex2html_deferred<<19471>>
Cuando un estado \begin<<18752>>tex2html_wrap_inline<<18752>>$s$\end<<18753>>tex2html_wrap_inline<<18753>>\space contiene un LR(0)-item de la forma 
\begin<<18754>>tex2html_wrap_inline<<18754>>$A \rightarrow \alpha_\uparrow$\end<<18755>>tex2html_wrap_inline<<18755>>, 
esto es, el estado corresponde a un posible rechazo,
ello indica que hemos llegado a un final del prefijo viable, que hemos
visto \begin<<18756>>tex2html_wrap_inline<<18756>>$\alpha$\end<<18757>>tex2html_wrap_inline<<18757>>\space y que, por tanto, es probable que \begin<<18758>>tex2html_wrap_inline<<18758>>$A \rightarrow \alpha$\end<<18759>>tex2html_wrap_inline<<18759>>
sea el \emph<<17510>>handle<<17510>> de la forma sentencial derecha actual. Por tanto,
añadiremos en entradas de la forma \begin<<18760>>tex2html_wrap_inline<<18760>>$(s,a)$\end<<18761>>tex2html_wrap_inline<<18761>>\space de la tabla de acciones 
una acción que indique que hemos encontrado el mango en la 
posición actual y que la regla asociada es \begin<<18762>>tex2html_wrap_inline<<18762>>$A \rightarrow \alpha$\end<<18763>>tex2html_wrap_inline<<18763>>.
A una acción de este tipo se la denomina \index<<18361>>acción de reducción<<18361>>\emph<<18362>>acción de reducción<<18362>>.
\begin<<19472>>tex2html_deferred<<19472>>\par\end<<19473>>tex2html_deferred<<19473>>
La cuestión es, ¿para que valores de \begin<<18764>>tex2html_wrap_inline<<18764>>$a \in \Sigma$\end<<18765>>tex2html_wrap_inline<<18765>>\space debemos disponer que
la acción para \begin<<18766>>tex2html_wrap_inline<<18766>>$(s, a)$\end<<18767>>tex2html_wrap_inline<<18767>>\space es de reducción?
Podríamos decidir que ante cualquier terminal \begin<<18768>>tex2html_wrap_inline<<18768>>$a \in \Sigma$\end<<18769>>tex2html_wrap_inline<<18769>>
que produzca un rechazo del autómata, pero podemos ser un poco mas
selectivos. No cualquier terminal puede estar en la entrada en el momento
en el que se produce la antiderivación o reducción. 
Observemos que si \begin<<18770>>tex2html_wrap_inline<<18770>>$A \rightarrow \alpha$\end<<18771>>tex2html_wrap_inline<<18771>>\space es el \emph<<17512>>handle<<17512>>
de \begin<<18772>>tex2html_wrap_inline<<18772>>$\gamma$\end<<18773>>tex2html_wrap_inline<<18773>>\space es porque:
\begin<<19474>>tex2html_deferred<<19474>>\par\end<<19475>>tex2html_deferred<<19475>>
\begin<<17513>>center<<17513>>
\begin<<18774>>tex2html_wrap_inline<<18774>>$\exists S \begin<<17514>>array<<17514>><<17515>>c<<17515>> *\\  \Longrightarrow \\  <<17516>>\scriptstyle RM<<17516>> \end<<17517>>array<<17517>> \beta A b x \begin<<17518>>array<<17518>><<17519>>c<<17519>> *\\  \Longrightarrow \\  <<17520>>\scriptstyle RM<<17520>> \end<<17521>>array<<17521>>  
\beta \alpha b x = \gamma$\end<<18775>>tex2html_wrap_inline<<18775>>
\end<<17522>>center<<17522>>
\begin<<19476>>tex2html_deferred<<19476>>\par\end<<19477>>tex2html_deferred<<19477>>
Por tanto, cuando estamos reduciendo por \begin<<18776>>tex2html_wrap_inline<<18776>>$A \rightarrow \alpha$\end<<18777>>tex2html_wrap_inline<<18777>>
los únicos terminales legales que cabe esperar en una reducción por \begin<<18778>>tex2html_wrap_inline<<18778>>$A \rightarrow \alpha$\end<<18779>>tex2html_wrap_inline<<18779>>\space son los terminales \begin<<18780>>tex2html_wrap_inline<<18780>>$b \in FOLLOW(A)$\end<<18781>>tex2html_wrap_inline<<18781>>.
\begin<<19478>>tex2html_deferred<<19478>>\par\end<<19479>>tex2html_deferred<<19479>>
Dada una gramática \begin<<18782>>tex2html_wrap_inline<<18782>>$G=(\Sigma,V,P,S)$\end<<18783>>tex2html_wrap_inline<<18783>>, podemos construir las tablas de acciones (\emph<<17523>>action table<<17523>>) y  transiciones (\emph<<17524>>gotos table<<17524>>) mediante el siguiente algoritmo:
\begin<<19480>>tex2html_deferred<<19480>>\par\end<<19481>>tex2html_deferred<<19481>>
\begin<<18280>>theorem_type<<18280>>[algorithm][algorithm][section][][][]
\label<<17526>>alg:tables<<17526>>       
Construcción de Tablas \index<<18363>>SLR<<18363>>\emph<<18364>>SLR<<18364>>
\begin<<19482>>tex2html_deferred<<19482>>\par\end<<19483>>tex2html_deferred<<19483>>
\begin<<17528>>enumerate<<17528>>
\item
Utilizando el Algoritmo de Construcción del Subconjunto, se construye
el Autómata Finito Determinista (DFA) \begin<<18784>>tex2html_wrap_inline<<18784>>$(Q, V \cup \Sigma, \delta, I_0, F)$\end<<18785>>tex2html_wrap_inline<<18785>>
equivalente al Autómata Finito No
Determinista (NFA) definido en \ref<<17529>>definition:slrautomata<<17529>>.
Sea \begin<<18786>>tex2html_wrap_inline<<18786>>$C = \left \{ I_1, I_2, \cdots I_n \right \}$\end<<18787>>tex2html_wrap_inline<<18787>>\space el conjunto de estados
del DFA. Cada estado \begin<<18788>>tex2html_wrap_inline<<18788>>$I_i$\end<<18789>>tex2html_wrap_inline<<18789>>\space es un conjunto de LR(0)-items o estados
del NFA. Asociemos un índice \begin<<18790>>tex2html_wrap_inline<<18790>>$i$\end<<18791>>tex2html_wrap_inline<<18791>>\space con cada conjunto \begin<<18792>>tex2html_wrap_inline<<18792>>$I_i$\end<<18793>>tex2html_wrap_inline<<18793>>.
\item
La tabla de \emph<<17530>>gotos<<17530>> no es más que la función de transición del 
autómata restringida a las variables de la gramática:
\begin<<19484>>tex2html_deferred<<19484>>\par\end<<19485>>tex2html_deferred<<19485>>
\begin<<17531>>center<<17531>>
\begin<<18794>>tex2html_wrap_inline<<18794>>$goto(i,A) = \delta(I_i, A)$\end<<18795>>tex2html_wrap_inline<<18795>>\space para todo \begin<<18796>>tex2html_wrap_inline<<18796>>$A \in V$\end<<18797>>tex2html_wrap_inline<<18797>>
\end<<17532>>center<<17532>>
\item
Las acciones para el estado \begin<<18798>>tex2html_wrap_inline<<18798>>$I_i$\end<<18799>>tex2html_wrap_inline<<18799>>\space se determinan como sigue:
  \begin<<17533>>enumerate<<17533>>
  \item
  Si \begin<<18800>>tex2html_wrap_inline<<18800>>$A \rightarrow \alpha _\uparrow a \beta \in I_i$\end<<18801>>tex2html_wrap_inline<<18801>>, \begin<<18802>>tex2html_wrap_inline<<18802>>$\delta(I_i,a) = I_j$\end<<18803>>tex2html_wrap_inline<<18803>>, \begin<<18804>>tex2html_wrap_inline<<18804>>$a \in \Sigma$\end<<18805>>tex2html_wrap_inline<<18805>> 
  entonces:
\begin<<19486>>tex2html_deferred<<19486>>\par\end<<19487>>tex2html_deferred<<19487>>
\begin<<17534>>center<<17534>>
  \begin<<18806>>tex2html_wrap_inline<<18806>>$action[i][a] = shift\ j$\end<<18807>>tex2html_wrap_inline<<18807>>
\end<<17535>>center<<17535>>
  \item
  Si \begin<<18808>>tex2html_wrap_inline<<18808>>$S' \rightarrow S_\uparrow \in I_i$\end<<18809>>tex2html_wrap_inline<<18809>>\space entonces 
\begin<<19488>>tex2html_deferred<<19488>>\par\end<<19489>>tex2html_deferred<<19489>>
\begin<<17536>>center<<17536>>
  \begin<<18810>>tex2html_wrap_inline<<18810>>$action[i][\$] = accept$\end<<18811>>tex2html_wrap_inline<<18811>>
\end<<17537>>center<<17537>>
  \item
  Para cualquier otro caso de la forma \begin<<18812>>tex2html_wrap_inline<<18812>>$A \rightarrow \alpha _\uparrow \in I_i$\end<<18813>>tex2html_wrap_inline<<18813>> 
  distinto del anterior hacer
\begin<<19490>>tex2html_deferred<<19490>>\par\end<<19491>>tex2html_deferred<<19491>>
\begin<<17538>>center<<17538>>
  \begin<<18814>>tex2html_wrap_inline<<18814>>$\forall a \in\ FOLLOW(A):\ action[i][a] = reduce\ A \rightarrow \alpha$\end<<18815>>tex2html_wrap_inline<<18815>>
\end<<17539>>center<<17539>>
  \end<<17540>>enumerate<<17540>>
\item
  Las entradas de la tabla de acción que queden indefinidas después de aplicado el proceso anterior corresponden a acciones de ``\begin<<18816>>tex2html_wrap_inline<<18816>>$error$\end<<18817>>tex2html_wrap_inline<<18817>>''.
\end<<17541>>enumerate<<17541>>\end<<18281>>theorem_type<<18281>>
\begin<<19492>>tex2html_deferred<<19492>>\par\end<<19493>>tex2html_deferred<<19493>>
\begin<<18282>>theorem_type<<18282>>[definition][definition][section][][][]
Si alguna de las entradas de la tabla resulta multievaluada, decimos
que existe un conflicto y que la gramática no es \index<<18365>>SLR<<18365>>\emph<<18366>>SLR<<18366>>.
\begin<<19494>>tex2html_deferred<<19494>>\par\end<<19495>>tex2html_deferred<<19495>>
\begin<<17545>>enumerate<<17545>>
\item
En tal caso, si una de las acciones es de `reducción'' y la otra es de
`desplazamiento'', decimos que hay un \index<<18367>>conflicto shift-reduce<<18367>>\emph<<18368>>conflicto shift-reduce<<18368>> o
\index<<18369>>conflicto de desplazamiento-reducción<<18369>>\emph<<18370>>conflicto de desplazamiento-reducción<<18370>>. 
\item
Si las
dos reglas indican una acción de reducción, decimos que tenemos un 
\index<<18371>>conflicto reduce-reduce<<18371>>\emph<<18372>>conflicto reduce-reduce<<18372>> o de \index<<18373>>reducción-reducción<<18373>>\emph<<18374>>reducción-reducción<<18374>>.
\end<<17550>>enumerate<<17550>>\end<<18283>>theorem_type<<18283>>
\begin<<19496>>tex2html_deferred<<19496>>\par\end<<19497>>tex2html_deferred<<19497>>
\begin<<18284>>theorem_type<<18284>>[example][example][section][][][]
\label<<17553>>example:tablasslr<<17553>>
Al aplicar el algoritmo \ref<<17554>>alg:tables<<17554>>       
a la gramática \ref<<17555>>example:asb<<17555>> 
\begin<<19498>>tex2html_deferred<<19498>>\par\end<<19499>>tex2html_deferred<<19499>>
\vspace<<17556>>0.5cm<<17556>>
\begin<<17557>>center<<17557>>
\begin<<17558>>tabular<<17558>><<17559>>|l|l|<<17559>>
\hline
1 ;SPMamp; S      \begin<<18818>>tex2html_wrap_inline<<18818>>$\rightarrow$\end<<18819>>tex2html_wrap_inline<<18819>>\space  a S b\\ 
\hline
2 ;SPMamp; S      \begin<<18820>>tex2html_wrap_inline<<18820>>$\rightarrow$\end<<18821>>tex2html_wrap_inline<<18821>>\space \begin<<18822>>tex2html_wrap_inline<<18822>>$\epsilon$\end<<18823>>tex2html_wrap_inline<<18823>>\space \\ 
\hline
\end<<17560>>tabular<<17560>>
\end<<17561>>center<<17561>>
\vspace<<17562>>0.25cm<<17562>>
\begin<<19500>>tex2html_deferred<<19500>>\par\end<<19501>>tex2html_deferred<<19501>>
partiendo del autómata finito determinista
que se construyó en 
la figura \ref<<17563>>fig:dfa<<17563>> y calculando los 
conjuntos de primeros y siguientes
\begin<<19502>>tex2html_deferred<<19502>>\par\end<<19503>>tex2html_deferred<<19503>>
\begin<<17564>>center<<17564>>
\begin<<17565>>tabular<<17565>><<17566>>|l|l|l|<<17566>>
\hline
     ;SPMamp; FIRST  ;SPMamp; FOLLOW \\ 
\hline
S    ;SPMamp; a, \begin<<18824>>tex2html_wrap_inline<<18824>>$\epsilon$\end<<18825>>tex2html_wrap_inline<<18825>>\space ;SPMamp; b, \$\\ 
\hline
\end<<17567>>tabular<<17567>>
\end<<17568>>center<<17568>>
\begin<<19504>>tex2html_deferred<<19504>>\par\end<<19505>>tex2html_deferred<<19505>>
obtenemos la siguiente tabla de acciones SLR:
\begin<<19506>>tex2html_deferred<<19506>>\par\end<<19507>>tex2html_deferred<<19507>>
\begin<<17569>>center<<17569>>
\begin<<17570>>tabular<<17570>><<17571>>|l|l|l|l|<<17571>>
\hline
     ;SPMamp;  a  ;SPMamp;  b  ;SPMamp; \$ \\ 
\hline
0    ;SPMamp; s2  ;SPMamp;  r2 ;SPMamp; r2 \\ 
\hline
1    ;SPMamp;     ;SPMamp;     ;SPMamp; aceptar\\ 
\hline
2    ;SPMamp; s2  ;SPMamp; r2  ;SPMamp; r2\\ 
\hline
4    ;SPMamp;     ;SPMamp; s5  ;SPMamp;   \\ 
\hline
5    ;SPMamp;     ;SPMamp; r1  ;SPMamp; r1\\ 
\hline
\end<<17572>>tabular<<17572>>
\end<<17573>>center<<17573>>
\begin<<19508>>tex2html_deferred<<19508>>\par\end<<19509>>tex2html_deferred<<19509>>
Las entradas denotadas con \begin<<18826>>tex2html_wrap_inline<<18826>>$s$\end<<18827>>tex2html_wrap_inline<<18827>>\space \begin<<18828>>tex2html_wrap_inline<<18828>>$n$\end<<18829>>tex2html_wrap_inline<<18829>>\space (\begin<<18830>>tex2html_wrap_inline<<18830>>$s$\end<<18831>>tex2html_wrap_inline<<18831>>\space por shift) indican un desplazamiento
al estado \begin<<18832>>tex2html_wrap_inline<<18832>>$n$\end<<18833>>tex2html_wrap_inline<<18833>>, las denotadas con \begin<<18834>>tex2html_wrap_inline<<18834>>$r$\end<<18835>>tex2html_wrap_inline<<18835>>\space \begin<<18836>>tex2html_wrap_inline<<18836>>$n$\end<<18837>>tex2html_wrap_inline<<18837>>\space (\begin<<18838>>tex2html_wrap_inline<<18838>>$r$\end<<18839>>tex2html_wrap_inline<<18839>>\space por reduce o reducción) indican una operación
de reducción o antiderivación por la regla \begin<<18840>>tex2html_wrap_inline<<18840>>$n$\end<<18841>>tex2html_wrap_inline<<18841>>.  Las entradas vacías 
corresponden a acciones de error.\end<<18285>>theorem_type<<18285>>
\begin<<19510>>tex2html_deferred<<19510>>\par\end<<19511>>tex2html_deferred<<19511>>
El método de análisis \index<<18375>>LALR<<18375>>\emph<<18376>>LALR<<18376>> usado por <tex2html_verb_mark>2321<tex2html_verb_mark>
es una extensión del método SLR esbozado
aqui. Supone un compromiso entre potencia (conjunto de gramáticas
englobadas) y eficiencia (cantidad de memoria utilizada, tiempo de
proceso).
Veamos como <tex2html_verb_mark>2322<tex2html_verb_mark> aplica la construcción del subconjunto a la 
gramática del ejemplo
\ref<<17576>>example:asb<<17576>>.
Para ello construimos el siguiente programa <tex2html_verb_mark>2323<tex2html_verb_mark>:
\begin<<17577>>tex2html_preform<<17577>><tex2html_verbatim_mark>verbatim6119#\end<<17578>>tex2html_preform<<17578>>
y compilamos, haciendo uso de la opción <tex2html_verb_mark>2324<tex2html_verb_mark> para que <tex2html_verb_mark>2325<tex2html_verb_mark> produzca
las tablas en el fichero <tex2html_verb_mark>2326<tex2html_verb_mark>:
\begin<<17579>>tex2html_preform<<17579>><tex2html_verbatim_mark>verbatim6120#\end<<17580>>tex2html_preform<<17580>>
\begin<<19512>>tex2html_deferred<<19512>>\par\end<<19513>>tex2html_deferred<<19513>>
El contenido del fichero <tex2html_verb_mark>2327<tex2html_verb_mark> se muestra
en la tabla 
\ref<<17581>>table:tablaslalr<<17581>>.
Los números de referencia a las producciones en las acciones
de reducción vienen dados por:
\begin<<19514>>tex2html_deferred<<19514>>\par\end<<19515>>tex2html_deferred<<19515>>
\begin<<17582>>tex2html_preform<<17582>><tex2html_verbatim_mark>verbatim6121#\end<<17583>>tex2html_preform<<17583>> 
\begin<<19516>>tex2html_deferred<<19516>>\par\end<<19517>>tex2html_deferred<<19517>>
Observe que el final de la entrada se denota 
por <tex2html_verb_mark>2328<tex2html_verb_mark> y el marcador en un LR-item 
por un punto. Fíjese en el estado 2: 
En ese estado están también los items
\begin<<19518>>tex2html_deferred<<19518>>\par\end<<19519>>tex2html_deferred<<19519>>
\begin<<17584>>center<<17584>>
 <tex2html_verb_mark>2329<tex2html_verb_mark>
y <tex2html_verb_mark>2330<tex2html_verb_mark>
\end<<17585>>center<<17585>>
\begin<<19520>>tex2html_deferred<<19520>>\par\end<<19521>>tex2html_deferred<<19521>>
sin embargo no se explicitan
por que se entiende que su pertenencia es
consecuencia directa de aplicar la operación 
de clausura. Los LR items cuyo marcador
no está al principio se denominan
\index<<18377>>items núcleo<<18377>>\emph<<18378>>items núcleo<<18378>>. 
\begin<<19522>>tex2html_deferred<<19522>>\par\end<<19523>>tex2html_deferred<<19523>>
\vspace<<17587>>0.5cm<<17587>>
\begin<<17588>>table<<17588>>[htb]
\begin<<17589>>center<<17589>>
\begin<<17590>>tabular<<17590>><<18226>>|p<<17591>>4cm<<17591>>|p<<17592>>4cm<<17592>>|p<<17593>>4cm<<17593>>|<<18226>>
\hline
Estado 0 ;SPMamp; Estado 1 ;SPMamp; Estado 2\\ 
\hline
\begin<<17594>>tex2html_preform<<17594>><tex2html_verbatim_mark>verbatim6122#\end<<17595>>tex2html_preform<<17595>> 
;SPMamp;
\begin<<17596>>tex2html_preform<<17596>><tex2html_verbatim_mark>verbatim6123#\end<<17597>>tex2html_preform<<17597>> 
;SPMamp;
\begin<<17598>>tex2html_preform<<17598>><tex2html_verbatim_mark>verbatim6124#\end<<17599>>tex2html_preform<<17599>> 
\begin<<19524>>tex2html_deferred<<19524>>\par\end<<19525>>tex2html_deferred<<19525>>
\\ 
\begin<<19526>>tex2html_deferred<<19526>>\par\end<<19527>>tex2html_deferred<<19527>>
\hline
Estado 3 ;SPMamp; Estado 4 ;SPMamp; Estado 5\\ 
\hline
\begin<<19528>>tex2html_deferred<<19528>>\par\end<<19529>>tex2html_deferred<<19529>>
\begin<<17600>>tex2html_preform<<17600>><tex2html_verbatim_mark>verbatim6125#\end<<17601>>tex2html_preform<<17601>> 
;SPMamp;
\begin<<17602>>tex2html_preform<<17602>><tex2html_verbatim_mark>verbatim6126#\end<<17603>>tex2html_preform<<17603>> 
;SPMamp;
\begin<<17604>>tex2html_preform<<17604>><tex2html_verbatim_mark>verbatim6127#\end<<17605>>tex2html_preform<<17605>>
\\ 
\hline
\end<<17606>>tabular<<17606>>
\end<<17607>>center<<17607>>
\begin<<19530>>tex2html_deferred<<19530>>\caption<<18227>>Tablas generadas por <<17608>>\tt yapp<<17608>>. El estado 3 resulta de transitar con \$<<18227>>\end<<19531>>tex2html_deferred<<19531>>
\label<<17609>>table:tablaslalr<<17609>>
\end<<17610>>table<<17610>>
Puede encontrar el listado completo de las tablas en <tex2html_verb_mark>2331<tex2html_verb_mark>
en el apéndice que se encuentra en la página 
\ref<<17611>>apendice:asb<<17611>>.
\begin<<19532>>tex2html_deferred<<19532>>\par\end<<19533>>tex2html_deferred<<19533>>
\begin<<18286>>theorem_type<<18286>>[exercise][exercise][section][][][]
Compare la tabla \ref<<17613>>table:tablaslalr<<17613>> resultante de 
aplicar <tex2html_verb_mark>2332<tex2html_verb_mark> con la que obtuvo en el ejemplo
\ref<<17614>>example:tablasslr<<17614>>.\end<<18287>>theorem_type<<18287>>
\begin<<19534>>tex2html_deferred<<19534>>\par\end<<19535>>tex2html_deferred<<19535>>
\section<<18228>>El módulo Generado por <<17616>>\begin<<19536>>tex2html_deferred<<19536>>\tt\end<<19537>>tex2html_deferred<<19537>>yapp<<17616>><<18228>>
\label<<17617>>section:tablas<<17617>>
La ejecución de la orden <tex2html_verb_mark>2333<tex2html_verb_mark> produce 
como salida el módulo <tex2html_verb_mark>2334<tex2html_verb_mark> el cual contiene las tablas LALR(1)
para la gramática descrita en <tex2html_verb_mark>2335<tex2html_verb_mark>. Estas tablas son las que
dirigen al analizador LR. 
Puede ver el código completo del módulo en el apéndice
que se encuentra en la página \pageref<<17618>>apendice:calcpm<<17618>>.
La  estructura del módulo <tex2html_verb_mark>2336<tex2html_verb_mark> es como sigue:
\begin<<19538>>tex2html_deferred<<19538>>\par\end<<19539>>tex2html_deferred<<19539>>
\begin<<17619>>tex2html_preform<<17619>><tex2html_verbatim_mark>verbatim6128#\end<<17620>>tex2html_preform<<17620>>
\begin<<19540>>tex2html_deferred<<19540>>\par\end<<19541>>tex2html_deferred<<19541>>
La clase <tex2html_verb_mark>2337<tex2html_verb_mark> hereda de <tex2html_verb_mark>2338<tex2html_verb_mark>, pero el objeto creado
será bendecido en la clase <tex2html_verb_mark>2339<tex2html_verb_mark> (Línea 4, véanse también 
la figura \ref<<17621>>fig:yappinheritance<<17621>> 
y la línea 72 del fuente). 
Por tanto, el constructor llamado en la línea 11 es el de <tex2html_verb_mark>2340<tex2html_verb_mark>.
Se utiliza la estrategia de llamada con parámetros con nombre. 
El valor para la clave <tex2html_verb_mark>2341<tex2html_verb_mark> es una referencia anónima 
al array de estados y el valor para la clave <tex2html_verb_mark>2342<tex2html_verb_mark> 
es una referencia anónima a las reglas.
\begin<<17622>>tex2html_preform<<17622>><tex2html_verbatim_mark>verbatim6129#\end<<17623>>tex2html_preform<<17623>>
Se ve que un estado se pasa como un hash anónimo indexado en las acciones
y los saltos. 
\begin<<19542>>tex2html_deferred<<19542>>\par\end<<19543>>tex2html_deferred<<19543>>
Para consultar los números asociados con las reglas de producción
vea el apéndice en la página \pageref<<17624>>apendice:calcouput<<17624>>
conteniendo el fichero <tex2html_verb_mark>2343<tex2html_verb_mark>.
\begin<<19544>>tex2html_deferred<<19544>>\par\end<<19545>>tex2html_deferred<<19545>>
A continuación vienen las reglas:
\begin<<17625>>tex2html_preform<<17625>><tex2html_verbatim_mark>verbatim6130#\end<<17626>>tex2html_preform<<17626>>
Las reglas son arrays anónimos conteniendo el nombre de la regla o
variable sintáctica (<tex2html_verb_mark>2344<tex2html_verb_mark>), el número de símbolos en la parte
derecha y la subrutina anónima con el código asociado.
\begin<<19546>>tex2html_deferred<<19546>>\par\end<<19547>>tex2html_deferred<<19547>>
Vemos como la acción es convertida en una subrutina anónima. 
Los argumentos de dicha subrutina son los atributos semánticos
asociados con los símbolos en la parte derecha de la regla de 
producción. El valor retornado por la acción/subrutina
es el valor asociado con la reducción.
\begin<<19548>>tex2html_deferred<<19548>>\par\end<<19549>>tex2html_deferred<<19549>>
Para hacer que 
el compilador Perl diagnostique los errores relativos al fuente 
<tex2html_verb_mark>2345<tex2html_verb_mark> se usa una directiva <tex2html_verb_mark>2346<tex2html_verb_mark>.
\begin<<19550>>tex2html_deferred<<19550>>\par\end<<19551>>tex2html_deferred<<19551>>
\begin<<17627>>tex2html_preform<<17627>><tex2html_verbatim_mark>verbatim6131#\end<<17628>>tex2html_preform<<17628>>
\begin<<19552>>tex2html_deferred<<19552>>\par\end<<19553>>tex2html_deferred<<19553>>
la bendición con dos argumentos hace que el objeto pertenezca a la
clase <tex2html_verb_mark>2347<tex2html_verb_mark>. A continuación siguen las subrutinas de soporte:
\begin<<17629>>tex2html_preform<<17629>><tex2html_verbatim_mark>verbatim6132#\end<<17630>>tex2html_preform<<17630>>
\begin<<19554>>tex2html_deferred<<19554>>\par\end<<19555>>tex2html_deferred<<19555>>
\section<<17631>>Algoritmo de Análisis LR<<17631>>
\label<<17632>>section:algoritmoLR<<17632>>
Asi  pues la tabla de transiciones del autómata nos genera dos tablas:
la tabla de acciones y la de saltos.
El  algoritmo  de análisis sintáctico \emph<<17633>>LR<<17633>> en el  que 
se basa \emph<<17634>>yapp<<17634>> utiliza una pila y dos tablas 
para analizar la entrada. <tex2html_comment_mark>5840
Como se ha visto, la tabla  de acciones contiene cuatro tipo de acciones: 
\begin<<17635>>enumerate<<17635>>
\item
Desplazar (\emph<<17636>>shift<<17636>>)
\item
Reducir (\emph<<17637>>reduce<<17637>>)
\item
Aceptar
\item
Error
\end<<17638>>enumerate<<17638>>
El algoritmo utiliza una pila en la que se guardan los estados
del autómata. De este modo se evita tener que ``comenzar'' 
el procesado de la forma sentencial derecha resultante
después de una reducción (antiderivación).
\begin<<18288>>theorem_type<<18288>>[algorithm][algorithm][section][][][]
\label<<17640>>alg:parser<<17640>>       
Análizador LR
\begin<<17641>>tex2html_preform<<17641>><tex2html_verbatim_mark>verbatim6133#\end<<17642>>tex2html_preform<<17642>>\end<<18289>>theorem_type<<18289>>
Como es habitual, \begin<<18842>>tex2html_wrap_inline<<18842>>$|x|$\end<<18843>>tex2html_wrap_inline<<18843>>\space denota la longitud de la cadena \begin<<18844>>tex2html_wrap_inline<<18844>>$x$\end<<18845>>tex2html_wrap_inline<<18845>>.
La función <tex2html_verb_mark>2348<tex2html_verb_mark> devuelve el elemento que ocupa la 
posición <tex2html_verb_mark>2349<tex2html_verb_mark> desde el \emph<<17644>>top<<17644>> de la pila (esto es, está a profundidad <tex2html_verb_mark>2350<tex2html_verb_mark>).
La función <tex2html_verb_mark>2351<tex2html_verb_mark> extrae <tex2html_verb_mark>2352<tex2html_verb_mark> elementos de la pila.
La notación <tex2html_verb_mark>2353<tex2html_verb_mark> hace referencia al atributo
asociado con cada estado. Denotamos por <tex2html_verb_mark>2354<tex2html_verb_mark>
el código de la acción asociada con la regla \begin<<18846>>tex2html_wrap_inline<<18846>>$A \rightarrow \alpha$\end<<18847>>tex2html_wrap_inline<<18847>>.
\begin<<19556>>tex2html_deferred<<19556>>\par\end<<19557>>tex2html_deferred<<19557>>
Todos los analizadores LR comparten, salvo pequeñas
exepciones, el mismo algoritmo
de análisis. Lo que más los diferencia es la forma en 
la que construyen las tablas.
En <tex2html_verb_mark>2355<tex2html_verb_mark>
la construcción de las tablas de \emph<<17645>>acciones<<17645>> y \emph<<17646>>gotos<<17646>>
se realiza mediante el algoritmo \emph<<17647>>LALR<<17647>>.
\begin<<19558>>tex2html_deferred<<19558>>\par\end<<19559>>tex2html_deferred<<19559>>
\section<<18229>>Depuración en <<17648>>\begin<<19560>>tex2html_deferred<<19560>>\tt\end<<19561>>tex2html_deferred<<19561>>yapp<<17648>><<18229>>
\label<<17649>>section:depuracion<<17649>>
Es posible añadir un parámetro en la llamada a <tex2html_verb_mark>2356<tex2html_verb_mark>
con nombre \index<<18379>>yydebug<<18379>>\emph<<18380>>yydebug<<18380>> y valor el nivel de depuración requerido.
Ello 
nos permite observar la conducta del analizador. Los 
posibles valores de depuración son:
\begin<<19562>>tex2html_deferred<<19562>>\par\end<<19563>>tex2html_deferred<<19563>>
\vspace<<17651>>0.5cm<<17651>>
\begin<<17652>>center<<17652>>
\begin<<17653>>tabular<<17653>><<17654>>|l|l|<<17654>>
\hline
   Bit      ;SPMamp;    Información de Depuración \\ 
\hline
    0x01    ;SPMamp;    Lectura de los terminales\\ 
\hline
    0x02    ;SPMamp;    Información sobre los estados\\ 
\hline
    0x04    ;SPMamp;    Acciones (shifts, reduces, accept \ldots)\\ 
\hline
    0x08    ;SPMamp;    Volcado de la pila\\ 
\hline
    0x10    ;SPMamp;    Recuperación de errores\\ 
\hline
\end<<17655>>tabular<<17655>>
\end<<17656>>center<<17656>>
\vspace<<17657>>0.5cm<<17657>>
\begin<<19564>>tex2html_deferred<<19564>>\par\end<<19565>>tex2html_deferred<<19565>>
Veamos un ejemplo de salida para la gramática
 que se describe en la página 
 \pageref<<17658>>apendice:asb<<17658>>
 cuando se llama con: 
\begin<<19566>>tex2html_deferred<<19566>>\par\end<<19567>>tex2html_deferred<<19567>>
<tex2html_verb_mark>2357<tex2html_verb_mark>
\begin<<19568>>tex2html_deferred<<19568>>\par\end<<19569>>tex2html_deferred<<19569>>
\begin<<17659>>tex2html_preform<<17659>><tex2html_verbatim_mark>verbatim6134#\end<<17660>>tex2html_preform<<17660>>
\begin<<19570>>tex2html_deferred<<19570>>\par\end<<19571>>tex2html_deferred<<19571>>
\section<<17661>>Precedencia y Asociatividad<<17661>>
\label<<17662>>section:prioridades<<17662>>
Recordemos que si al construir la tabla LALR,
alguna de las entradas de la tabla resulta multievaluada, decimos
que existe un conflicto.
Si una de las acciones es de `reducción'' y la otra es de
`desplazamiento'', se dice que hay un \index<<18381>>conflicto shift-reduce<<18381>>\emph<<18382>>conflicto shift-reduce<<18382>> o
\index<<18383>>conflicto de desplazamiento-reducción<<18383>>\emph<<18384>>conflicto de desplazamiento-reducción<<18384>>. Si las
dos reglas indican una acción de reducción, decimos que tenemos un 
\index<<18385>>conflicto reduce-reduce<<18385>>\emph<<18386>>conflicto reduce-reduce<<18386>> o de \index<<18387>>reducción-reducción<<18387>>\emph<<18388>>reducción-reducción<<18388>>.
En caso de que no existan indicaciones específicas \emph<<17667>>yapp<<17667>> resuelve
los conflictos que aparecen en la construcción de la tabla utilizando
las siguientes reglas:
\begin<<19572>>tex2html_deferred<<19572>>\par\end<<19573>>tex2html_deferred<<19573>>
\begin<<17668>>enumerate<<17668>>
\item
Un conflicto \emph<<17669>>reduce-reduce<<17669>> se resuelve eligiendo la producción
que se listó primero en la especificación de la gramática.
\item
Un conflicto \emph<<17670>>shift-reduce<<17670>> se resuelve siempre en favor del \emph<<17671>>shift<<17671>>
\end<<17672>>enumerate<<17672>>
\begin<<19574>>tex2html_deferred<<19574>>\par\end<<19575>>tex2html_deferred<<19575>>
Las declaraciones de precedencia y asociatividad mediante las
palabras reservadas  <<18389>>\begin<<19576>>tex2html_deferred<<19576>>\tt\end<<19577>>tex2html_deferred<<19577>>\%left<<18389>> ,  <<18390>>\begin<<19578>>tex2html_deferred<<19578>>\tt\end<<19579>>tex2html_deferred<<19579>>\%right<<18390>> ,  <<18391>>\begin<<19580>>tex2html_deferred<<19580>>\tt\end<<19581>>tex2html_deferred<<19581>>\%nonassoc<<18391>> 
se utilizan para modificar estos criterios por defecto. 
La declaración de  <<18392>>\begin<<19582>>tex2html_deferred<<19582>>\tt\end<<19583>>tex2html_deferred<<19583>>token<<18392>> s mediante la palabra
reservada  <<18393>>\begin<<19584>>tex2html_deferred<<19584>>\tt\end<<19585>>tex2html_deferred<<19585>>\%token<<18393>>  no modifica la precedencia. Si lo hacen las
declaraciones realizadas usando las palabras  <<18394>>\begin<<19586>>tex2html_deferred<<19586>>\tt\end<<19587>>tex2html_deferred<<19587>>left<<18394>> ,  <<18395>>\begin<<19588>>tex2html_deferred<<19588>>\tt\end<<19589>>tex2html_deferred<<19589>>right<<18395>> 
y  <<18396>>\begin<<19590>>tex2html_deferred<<19590>>\tt\end<<19591>>tex2html_deferred<<19591>>nonassoc<<18396>> . 
\begin<<19592>>tex2html_deferred<<19592>>\par\end<<19593>>tex2html_deferred<<19593>>
\begin<<17681>>enumerate<<17681>>
\item
Los \emph<<17682>>tokens<<17682>> declarados  en la misma línea
tienen igual precedencia e igual asociatividad. 
La precedencia es mayor cuanto mas abajo 
su posición en
el texto. Así, en el ejemplo de la calculadora en la sección 
\ref<<17683>>section:ejemplodeuso<<17683>>, el \emph<<17684>>token<<17684>> <tex2html_verb_mark>2358<tex2html_verb_mark> tiene 
mayor precedencia que <tex2html_verb_mark>2359<tex2html_verb_mark> pero la misma que <tex2html_verb_mark>2360<tex2html_verb_mark>.
\item
La precedencia de una regla \begin<<18848>>tex2html_wrap_inline<<18848>>$A \rightarrow \alpha$\end<<18849>>tex2html_wrap_inline<<18849>>\space se
define como la del terminal mas a la derecha que aparece en
\begin<<18850>>tex2html_wrap_inline<<18850>>$\alpha$\end<<18851>>tex2html_wrap_inline<<18851>>. En el ejemplo, la producción 
\begin<<19594>>tex2html_deferred<<19594>>\par\end<<19595>>tex2html_deferred<<19595>>
\begin<<17685>>center<<17685>>
<tex2html_verb_mark>2361<tex2html_verb_mark> 
\end<<17686>>center<<17686>>
\begin<<19596>>tex2html_deferred<<19596>>\par\end<<19597>>tex2html_deferred<<19597>>
tiene la precedencia del \emph<<17687>>token<<17687>> <tex2html_verb_mark>2362<tex2html_verb_mark>.
\item
Para decidir en un conflicto \emph<<17688>>shift-reduce<<17688>> se comparan la precedencia 
de la regla con la del terminal que va a ser desplazado. Si la de la
regla es mayor se reduce
si la del \emph<<17689>>token<<17689>> es mayor, se desplaza.
\item
Si en un conflicto \emph<<17690>>shift-reduce<<17690>> ambos la regla y el terminal que
va a ser desplazado tiene la misma precedencia \emph<<17691>>yapp<<17691>> considera la
asociatividad, si es asociativa a izquierdas, reduce y si es asociativa
a derechas desplaza. Si no es asociativa, genera un mensaje de error.\\ 
Obsérvese que, en esta situación, la asociatividad de la regla y la del
\emph<<17692>>token<<17692>> han de ser por fuerza, las mismas.  Ello es así, porque en
\emph<<17693>>yapp<<17693>> los \emph<<17694>>tokens<<17694>> con la misma precedencia se declaran en
la misma línea y sólo se permite una declaración por línea.
\begin<<19598>>tex2html_deferred<<19598>>\par\end<<19599>>tex2html_deferred<<19599>>
\item
\emph<<18230>> Por tanto es imposible declarar dos \emph<<17695>>tokens<<17695>> con diferente
asociatividad y la misma precedencia<<18230>>.
\item
Es posible modificar la precedencia ``natural'' de una regla, calificándola
con un \emph<<17696>>token<<17696>> específico.  para ello se escribe a la derecha de
la regla <tex2html_verb_mark>2363<tex2html_verb_mark>, donde <tex2html_verb_mark>2364<tex2html_verb_mark> es un \emph<<17697>>token<<17697>> con
la precedencia que deseamos. Vea el uso del \emph<<17698>>token<<17698>> <tex2html_verb_mark>2365<tex2html_verb_mark>
en el siguiente ejercicio.
\end<<17699>>enumerate<<17699>>
\begin<<19600>>tex2html_deferred<<19600>>\par\end<<19601>>tex2html_deferred<<19601>>
Para ilustrar las reglas anteriores usaremos el siguiente 
programa <tex2html_verb_mark>2366<tex2html_verb_mark>:
\begin<<19602>>tex2html_deferred<<19602>>\par\end<<19603>>tex2html_deferred<<19603>>
\begin<<17700>>tex2html_preform<<17700>><tex2html_verbatim_mark>verbatim6135#\end<<17701>>tex2html_preform<<17701>>            
\begin<<19604>>tex2html_deferred<<19604>>\par\end<<19605>>tex2html_deferred<<19605>>
El código del programa cliente es el siguiente:
\begin<<19606>>tex2html_deferred<<19606>>\par\end<<19607>>tex2html_deferred<<19607>>
\begin<<17702>>tex2html_preform<<17702>><tex2html_verbatim_mark>verbatim6136#\end<<17703>>tex2html_preform<<17703>>
\begin<<19608>>tex2html_deferred<<19608>>\par\end<<19609>>tex2html_deferred<<19609>>
Observe la llamada al analizador en la línea 34. Hemos 
añadido el parámetro con nombre \index<<18397>>yydebug<<18397>>\emph<<18398>>yydebug<<18398>> 
con argumento <tex2html_verb_mark>2367<tex2html_verb_mark> (véase la
sección \ref<<17705>>section:depuracion<<17705>> para ver los posibles
valores de depuración).
\begin<<19610>>tex2html_deferred<<19610>>\par\end<<19611>>tex2html_deferred<<19611>>
Compilamos a continuación el módulo usando la opción <tex2html_verb_mark>2368<tex2html_verb_mark> para
producir información sobre los conflictos y las tablas de salto y 
de acciones:
\begin<<17706>>tex2html_preform<<17706>><tex2html_verbatim_mark>verbatim6137#\end<<17707>>tex2html_preform<<17707>>
\begin<<19612>>tex2html_deferred<<19612>>\par\end<<19613>>tex2html_deferred<<19613>>
La opción <tex2html_verb_mark>2369<tex2html_verb_mark> genera el fichero <tex2html_verb_mark>2370<tex2html_verb_mark>
el cual contiene información detallada sobre el autómata:
\begin<<19614>>tex2html_deferred<<19614>>\par\end<<19615>>tex2html_deferred<<19615>>
\begin<<17708>>tex2html_preform<<17708>><tex2html_verbatim_mark>verbatim6138#\end<<17709>>tex2html_preform<<17709>>
¿Porqué se produce un conflicto en el estado 8 entre la regla
6 (<tex2html_verb_mark>2371<tex2html_verb_mark>) y el terminal <tex2html_verb_mark>2372<tex2html_verb_mark>?. Editando el fichero
<tex2html_verb_mark>2373<tex2html_verb_mark> podemos ver los contenidos
del estado 8:
\begin<<17710>>tex2html_preform<<17710>><tex2html_verbatim_mark>verbatim6139#\end<<17711>>tex2html_preform<<17711>>
El item de la línea 88 indica que debemos desplazar, el de 
la línea 89 que debemos reducir por la regla 6. ¿Porqué <tex2html_verb_mark>2374<tex2html_verb_mark>
resuelve el conflicto optando por reducir?
¿Que prioridad tiene la regla 6?
¿Que asociatividad tiene la regla 6?
La declaración en la línea 13 modifica la precedencia y asociatividad
de la regla:
\begin<<19616>>tex2html_deferred<<19616>>\par\end<<19617>>tex2html_deferred<<19617>>
\begin<<17712>>tex2html_preform<<17712>><tex2html_verbatim_mark>verbatim6140#\end<<17713>>tex2html_preform<<17713>>
\begin<<19618>>tex2html_deferred<<19618>>\par\end<<19619>>tex2html_deferred<<19619>>
de manera que la regla pasa a tener la precedencia y asociatividad
de <tex2html_verb_mark>2375<tex2html_verb_mark>. Recuerde que habíamos declarado <tex2html_verb_mark>2376<tex2html_verb_mark> como
asociativo a derechas:
\begin<<17714>>tex2html_preform<<17714>><tex2html_verbatim_mark>verbatim6141#\end<<17715>>tex2html_preform<<17715>>
¿Que ocurre? Que <tex2html_verb_mark>2377<tex2html_verb_mark> tiene mayor prioridad
que <tex2html_verb_mark>2378<tex2html_verb_mark> y por tanto la regla tiene mayor prioridad
que el terminal: por tanto se reduce.
\begin<<19620>>tex2html_deferred<<19620>>\par\end<<19621>>tex2html_deferred<<19621>>
¿Que ocurre cuando el terminal en conflicto es <tex2html_verb_mark>2379<tex2html_verb_mark>?
En ese caso la regla y el terminal tienen la misma prioridad.
Se hace uso de la asociatividad a derechas que indica que el conflicto
debe resolverse desplazando.
\begin<<19622>>tex2html_deferred<<19622>>\par\end<<19623>>tex2html_deferred<<19623>>
\begin<<18290>>theorem_type<<18290>>[exercise][exercise][section][][][]
Explique la forma en que <tex2html_verb_mark>2380<tex2html_verb_mark> resuelve 
los conflictos que aparecen en el estado 9.
Esta es la información sobre el estado 9:
\begin<<19624>>tex2html_deferred<<19624>>\par\end<<19625>>tex2html_deferred<<19625>>
\begin<<17717>>tex2html_preform<<17717>><tex2html_verbatim_mark>verbatim6142#\end<<17718>>tex2html_preform<<17718>>\end<<18291>>theorem_type<<18291>>
\begin<<19626>>tex2html_deferred<<19626>>\par\end<<19627>>tex2html_deferred<<19627>>
Veamos un ejemplo de ejecución:
\begin<<19628>>tex2html_deferred<<19628>>\par\end<<19629>>tex2html_deferred<<19629>>
\begin<<17720>>tex2html_preform<<17720>><tex2html_verbatim_mark>verbatim6143#\end<<17721>>tex2html_preform<<17721>>
Lo primero que ocurre es una reducción por la regla 
en la que <tex2html_verb_mark>2381<tex2html_verb_mark> produce vacío. Si miramos el estado 0
del autómata vemos que contiene:
\begin<<17722>>tex2html_preform<<17722>><tex2html_verbatim_mark>verbatim6144#\end<<17723>>tex2html_preform<<17723>>
A continuación se transita desde 0 con <tex2html_verb_mark>2382<tex2html_verb_mark>
y se consume el primer terminal:
\begin<<17724>>tex2html_preform<<17724>><tex2html_verbatim_mark>verbatim6145#\end<<17725>>tex2html_preform<<17725>>
En el estado 5 se reduce por la regla <tex2html_verb_mark>2383<tex2html_verb_mark>.
Esto hace que se retire el estado 5 de la pila y se
transite desde el estado 1 viendo el símbolo <tex2html_verb_mark>2384<tex2html_verb_mark>:
\begin<<17726>>tex2html_preform<<17726>><tex2html_verbatim_mark>verbatim6146#\end<<17727>>tex2html_preform<<17727>>
Obsérvese la resolución del conflicto en el estado 8
\begin<<19630>>tex2html_deferred<<19630>>\par\end<<19631>>tex2html_deferred<<19631>>
La presencia de conflictos, aunque no siempre, en muchos casos es debida
a la introducción de ambiguedad en la gramática. Si el conflicto 
es de desplazamiento-reducción se puede resolver explicitando 
alguna regla que rompa la ambiguedad. Los conflictos de
reducción-reducción suelen producirse por un diseño erróneo
de la gramática. En tales casos, suele ser mas adecuado
modificar la gramática.
\begin<<19632>>tex2html_deferred<<19632>>\par\end<<19633>>tex2html_deferred<<19633>>
\section<<18231>>Generación interactiva de analizadores <<17728>>\begin<<19634>>tex2html_deferred<<19634>>\tt\end<<19635>>tex2html_deferred<<19635>>Yapp<<17728>><<18231>>
En el siguiente código, la subrutina <<17729>>\begin<<19636>>tex2html_deferred<<19636>>\tt\end<<19637>>tex2html_deferred<<19637>>create\_yapp\_package<<17729>> 
nos muestra como crear un analizador <<17730>>\begin<<19638>>tex2html_deferred<<19638>>\tt\end<<19639>>tex2html_deferred<<19639>>Yapp<<17730>> en tiempo de ejecución.
Las dos líneas:
\begin<<17731>>tex2html_preform<<17731>><tex2html_verbatim_mark>verbatim6147#\end<<17732>>tex2html_preform<<17732>>
crean una cadena en <tex2html_verb_mark>2385<tex2html_verb_mark> conteniendo el código de 
la clase que implanta el analizador. Todo el truco está en hacer
\begin<<17733>>tex2html_preform<<17733>><tex2html_verbatim_mark>verbatim6148#\end<<17734>>tex2html_preform<<17734>>
para tener el paquete a mano:
\begin<<17735>>tex2html_preform<<17735>><tex2html_verbatim_mark>verbatim6149#\end<<17736>>tex2html_preform<<17736>>
Sigue un ejemplo de ejecución:
\begin<<17737>>tex2html_preform<<17737>><tex2html_verbatim_mark>verbatim6150#\end<<17738>>tex2html_preform<<17738>>
\begin<<19640>>tex2html_deferred<<19640>>\par\end<<19641>>tex2html_deferred<<19641>>
\section<<17739>>Construcción del Árbol Sintáctico<<17739>>
El siguiente ejemplo usa <tex2html_verb_mark>2386<tex2html_verb_mark> 
para construir el árbol sintáctico de una expresión en infijo:
\begin<<17740>>tex2html_preform<<17740>><tex2html_verbatim_mark>verbatim6151#\end<<17741>>tex2html_preform<<17741>>
Para compilar hacemos:
\begin<<17742>>tex2html_preform<<17742>><tex2html_verbatim_mark>verbatim6152#\end<<17743>>tex2html_preform<<17743>>
El guión que usa el analizador anterior es similar al que vimos en la 
sección \ref<<17744>>section:ejemplodeuso<<17744>>:
\begin<<17745>>tex2html_preform<<17745>><tex2html_verbatim_mark>verbatim6153#\end<<17746>>tex2html_preform<<17746>>
Veamos un ejemplo de ejecución:
\begin<<17747>>tex2html_preform<<17747>><tex2html_verbatim_mark>verbatim6154#\end<<17748>>tex2html_preform<<17748>>
\begin<<19642>>tex2html_deferred<<19642>>\par\end<<19643>>tex2html_deferred<<19643>>
\section<<17749>>Acciones en Medio de una Regla<<17749>>
A veces necesitamos insertar una acción en medio de una regla.
Una acción en medio de una regla puede hacer referencia a los atributos de
los símbolos que la preceden (usando <tex2html_verb_mark>2387<tex2html_verb_mark>), pero no a los que le siguen.
\begin<<19644>>tex2html_deferred<<19644>>\par\end<<19645>>tex2html_deferred<<19645>>
Cuando se  inserta una acción \begin<<18852>>tex2html_wrap_inline<<18852>>$\left \{ action_1\right \}$\end<<18853>>tex2html_wrap_inline<<18853>>
para su ejecución en medio de una regla \begin<<18854>>tex2html_wrap_inline<<18854>>$A \rightarrow \alpha
\beta$\end<<18855>>tex2html_wrap_inline<<18855>>\space :
\begin<<17750>>center<<17750>>
\begin<<18856>>tex2html_wrap_inline<<18856>>$A \rightarrow \alpha \left \{ action_1 \right \} \beta \left \{ action_2\right \}$\end<<18857>>tex2html_wrap_inline<<18857>> 
\end<<17751>>center<<17751>>
<tex2html_verb_mark>2388<tex2html_verb_mark> crea una variable sintáctica temporal \begin<<18858>>tex2html_wrap_inline<<18858>>$T$\end<<18859>>tex2html_wrap_inline<<18859>>\space e introduce una nueva regla:
\begin<<19646>>tex2html_deferred<<19646>>\par\end<<19647>>tex2html_deferred<<19647>>
\begin<<17752>>center<<17752>>
\begin<<17753>>enumerate<<17753>>
\item
\begin<<18860>>tex2html_wrap_inline<<18860>>$A \rightarrow \alpha T \beta \left \{ action_2\right \}$\end<<18861>>tex2html_wrap_inline<<18861>> 
\item
\begin<<18862>>tex2html_wrap_inline<<18862>>$T \rightarrow \epsilon \left \{ action_1 \right \}$\end<<18863>>tex2html_wrap_inline<<18863>> 
\end<<17754>>enumerate<<17754>>
\end<<17755>>center<<17755>>
\begin<<19648>>tex2html_deferred<<19648>>\par\end<<19649>>tex2html_deferred<<19649>>
Las acciones en mitad de una regla cuentan como un símbolo mas en la parte 
derecha de la regla. Asi pues, en una acción posterior en la regla,
se deberán referenciar los  atributos de los símbolos, teniendo en cuenta este hecho.
\begin<<19650>>tex2html_deferred<<19650>>\par\end<<19651>>tex2html_deferred<<19651>>
Las acciones en mitad de la regla pueden tener un atributo. 
Las acciones posteriores
en la regla se referirán a él como <tex2html_verb_mark>2389<tex2html_verb_mark>, siendo <tex2html_verb_mark>2390<tex2html_verb_mark> su número de orden
en la parte derecha. 
\begin<<19652>>tex2html_deferred<<19652>>\par\end<<19653>>tex2html_deferred<<19653>>
\section<<17756>>Esquemas de Traducción<<17756>>
Un \index<<18399>>esquema de traducción<<18399>>\emph<<18400>>esquema de traducción<<18400>> es una gramática independiente del
contexto en la cuál se han asociado atributos a los símbolos de la gramática.
Un atributo queda caracterizado por un identificador
o nombre y un tipo o clase. Además se han insertado acciones, esto es,
código Perl/Python/C, \ldots en medio de las partes derechas.
En ese código es posible referenciar los atributos de los
símbolos de la gramática como variables del lenguaje subyacente.
\begin<<19654>>tex2html_deferred<<19654>>\par\end<<19655>>tex2html_deferred<<19655>>
Recuerde que el orden en que se evalúan los fragmentos de código
es el de un recorrido primero-profundo del árbol de análisis sintáctico.
Mas específicamente, considerando a las acciones como hijos-hoja del nodo,
el recorrido que realiza un esquema de traducción es:
\begin<<19656>>tex2html_deferred<<19656>>\par\end<<19657>>tex2html_deferred<<19657>>
\begin<<17758>>tex2html_preform<<17758>><tex2html_verbatim_mark>verbatim6155#\end<<17759>>tex2html_preform<<17759>>
\begin<<19658>>tex2html_deferred<<19658>>\par\end<<19659>>tex2html_deferred<<19659>>
Obsérvese que, como el bucle de la línea 4 recorre a los hijos
de izquierda a derecha, se debe dar la siguiente
condición para que un esquema  de traducción funcione:
\begin<<19660>>tex2html_deferred<<19660>>\par\end<<19661>>tex2html_deferred<<19661>>
Para cualquier regla de producción aumentada con acciones, de la forma 
\begin<<19662>>tex2html_deferred<<19662>>\par\end<<19663>>tex2html_deferred<<19663>>
\begin<<17760>>center<<17760>>
\begin<<18864>>tex2html_wrap_inline<<18864>>$A \rightarrow X_1 \ldots X_j$\end<<18865>>tex2html_wrap_inline<<18865>><tex2html_verb_mark>2391<tex2html_verb_mark>\begin<<18866>>tex2html_wrap_inline<<18866>>$_1$\end<<18867>>tex2html_wrap_inline<<18867>><tex2html_verb_mark>2392<tex2html_verb_mark>\begin<<18868>>tex2html_wrap_inline<<18868>>$ \ldots$\end<<18869>>tex2html_wrap_inline<<18869>><tex2html_verb_mark>2393<tex2html_verb_mark>\begin<<18870>>tex2html_wrap_inline<<18870>>$_n$\end<<18871>>tex2html_wrap_inline<<18871>><tex2html_verb_mark>2394<tex2html_verb_mark>\begin<<18872>>tex2html_wrap_inline<<18872>>$X_<<17761>>j+1<<17761>> \ldots X_n$\end<<18873>>tex2html_wrap_inline<<18873>>
\end<<17762>>center<<17762>>
\begin<<19664>>tex2html_deferred<<19664>>\par\end<<19665>>tex2html_deferred<<19665>>
debe ocurrir que los atributos evaluados en
la acción insertada después de \begin<<18874>>tex2html_wrap_inline<<18874>>$X_j$\end<<18875>>tex2html_wrap_inline<<18875>> 
dependan de atributos y variables que fueron computadas durante
la visita de los hermanos izquierdos o de sus ancestros.
En particular no deberían depender de atributos asociados
con las variables \begin<<18876>>tex2html_wrap_inline<<18876>>$X_<<17763>>j+1<<17763>> \ldots X_n$\end<<18877>>tex2html_wrap_inline<<18877>>. Ello no significa que
no sea correcto evaluar atributos de \begin<<18878>>tex2html_wrap_inline<<18878>>$X_<<17764>>j+1<<17764>> \ldots X_n$\end<<18879>>tex2html_wrap_inline<<18879>>
en esa acción.
\begin<<19666>>tex2html_deferred<<19666>>\par\end<<19667>>tex2html_deferred<<19667>>
\section<<17765>>Definición Dirigida por la Sintáxis<<17765>>
Una \index<<18401>>definición dirigida por la sintáxis<<18401>>\emph<<18402>>definición dirigida por la sintáxis<<18402>> es un pariente cercano
de los esquemas de traducción. En una definición dirigida por la
sintáxis una gramática \begin<<18880>>tex2html_wrap_inline<<18880>>$G = (V, \Sigma, P, S)$\end<<18881>>tex2html_wrap_inline<<18881>>\space se aumenta 
con nuevas características:
\begin<<17767>>itemize<<17767>>
\item
A cada símbolo \begin<<18882>>tex2html_wrap_inline<<18882>>$S \in V \cup \Sigma$\end<<18883>>tex2html_wrap_inline<<18883>>\space de la gramática se le asocian
cero o mas atributos. Un atributo queda caracterizado por un identificador
o nombre y un tipo o clase. A este nivel son \index<<18403>>atributos formales<<18403>>\emph<<18404>>atributos formales<<18404>>,
como los parámetros formales, en el sentido de que su realización 
se produce cuando el nodo del árbol es creado.
\item
A cada regla de producción \begin<<18884>>tex2html_wrap_inline<<18884>>$A \rightarrow X_1 X_2 \ldots X_n \in P$\end<<18885>>tex2html_wrap_inline<<18885>>
se le asocian un conjunto de \index<<18405>>reglas de evaluación de los atributos<<18405>>\emph<<18406>>reglas de evaluación de los atributos<<18406>>
o \index<<18407>>reglas semánticas<<18407>>\emph<<18408>>reglas semánticas<<18408>> que indican que el atributo en la parte
izquierda de la regla semántica depende de los atributos que aparecen en la parte
derecha de la regla. El atributo que aparece en la parte izquierda de la regla semántica
puede estar asociado con un símbolo en la parte derecha de la regla de producción.
\item
Los atributos de cada símbolo de la gramática \begin<<18886>>tex2html_wrap_inline<<18886>>$X \in V \cup \Sigma$\end<<18887>>tex2html_wrap_inline<<18887>>
se dividen en dos grupos disjuntos: \index<<18409>>atributos sintetizados<<18409>>\emph<<18410>>atributos sintetizados<<18410>>
y \index<<18411>>atributos heredados<<18411>>\emph<<18412>>atributos heredados<<18412>>. Un atributo de \begin<<18888>>tex2html_wrap_inline<<18888>>$X$\end<<18889>>tex2html_wrap_inline<<18889>>\space es un \index<<18413>>atributo heredado<<18413>>\emph<<18414>>atributo heredado<<18414>> 
si depende de atributos de su padre y hermános en el árbol.
Un \index<<18415>>atributo sintetizado<<18415>>\emph<<18416>>atributo sintetizado<<18416>> es aquél tal que el valor del atributo depende
de los valores de los atributos de los hijos, 
es decir en tal caso \begin<<18890>>tex2html_wrap_inline<<18890>>$X$\end<<18891>>tex2html_wrap_inline<<18891>>\space ha de ser una variable sintáctica
y los atributos en la parte derecha de la regla semántica deben
ser atributos de símbolos en la parte derecha de la regla de producción 
asociada.
\item
Los atributos predefinidos se denominán \index<<18417>>atributos intrínsecos<<18417>>\emph<<18418>>atributos intrínsecos<<18418>>.
Ejemplos de atributos intrínsecos son los atributos 
sintetizados de los terminales, los cuáles se han
computado durante la fase de análisis léxico. También
son atributos intrínsecos los atributos heredados del símbolo
de arranque, los cuales son pasados como parámetros 
al comienzo de la computación.
\end<<17776>>itemize<<17776>>
\begin<<19668>>tex2html_deferred<<19668>>\par\end<<19669>>tex2html_deferred<<19669>>
La diferencia principal con un esquema de traducción está en que
no se especifica el orden de ejecución de las reglas semánticas.
Se asume que, bien de forma manual o automática, se resolverán
las dependencias existentes entre los atributos determinadas
por la aplicación de las reglas semánticas, de manera
que serán evaluados primero aquellos atributos que no dependen
de ningún otro, despues los que dependen de estos, etc. siguiendo
un esquema de ejecución que viene guiado por las dependencias
existentes entre los datos.
\begin<<19670>>tex2html_deferred<<19670>>\par\end<<19671>>tex2html_deferred<<19671>>
Aunque hay muchas formas de realizar un evaluador de una definición
dirigida por la sintáxis, conceptualmente, tal evaluador debe:
\begin<<19672>>tex2html_deferred<<19672>>\par\end<<19673>>tex2html_deferred<<19673>>
\begin<<17777>>enumerate<<17777>>
\item
Construir el árbol de análisis sintáctico para la gramática
y la entrada dadas.
\item
Analizar las reglas semánticas para determinar los atributos,
su clase y las dependencias entre los mismos.
\item
Construir el \index<<18419>>grafo de dependencias<<18419>>\emph<<18420>>grafo de dependencias<<18420>> de los atributos,
el cual tiene
un nodo para cada ocurrencia de un atributo en el árbol de análisis
sintáctico etiquetado con dicho atributo. El grafo tiene una arista entre dos
nodos si existe una dependencia entre los dos atributos a través de alguna
regla semántica. 
\item
Supuesto que el grafo de dependencias determina un \index<<18421>>orden parcial<<18421>>\emph<<18422>>orden parcial<<18422>>
(esto es cumple las propiedades reflexiva, antisimétrica y transitiva) 
construir un \index<<18423>>orden topológico<<18423>>\emph<<18424>>orden topológico<<18424>> compatible con el orden parcial.
\item
Evaluar las reglas semánticas de acuerdo con el orden topológico.
\end<<17781>>enumerate<<17781>>
\begin<<19674>>tex2html_deferred<<19674>>\par\end<<19675>>tex2html_deferred<<19675>>
Una definición dirigida por la sintáxis en la que las reglas semánticas
no tienen efectos laterales se denomina una \index<<18425>>gramática atribuída<<18425>>\emph<<18426>>gramática atribuída<<18426>>.
\begin<<19676>>tex2html_deferred<<19676>>\par\end<<19677>>tex2html_deferred<<19677>>
Si la definición dirigida por la sintáxis puede ser realizada 
mediante un esquema de traducción se dice que es \index<<18427>>L-atribuída<<18427>>\emph<<18428>>L-atribuída<<18428>>.
Para que una definición dirigida por la sintáxis sea L-atribuída
deben cumplirse que cualquiera que sea la regla de producción
\begin<<18892>>tex2html_wrap_inline<<18892>>$A \rightarrow X_1 \ldots X_n$\end<<18893>>tex2html_wrap_inline<<18893>>, los atributos heredados de
\begin<<18894>>tex2html_wrap_inline<<18894>>$X_j$\end<<18895>>tex2html_wrap_inline<<18895>>\space pueden depender únicamente de:
\begin<<17784>>enumerate<<17784>>
\item
Los atributos de los símbolos a la izquierda de \begin<<18896>>tex2html_wrap_inline<<18896>>$X_j$\end<<18897>>tex2html_wrap_inline<<18897>>
\item
Los atributos heredados de \begin<<18898>>tex2html_wrap_inline<<18898>>$A$\end<<18899>>tex2html_wrap_inline<<18899>>
\end<<17785>>enumerate<<17785>>
\begin<<19678>>tex2html_deferred<<19678>>\par\end<<19679>>tex2html_deferred<<19679>>
Nótese que las restricciones se refieren a los atributos heredados.
El cálculo de los atributos sintetizados no supone 
problema para un esquema de traducción. Si la gramática
es LL(1), resulta fácil realizar una definición 
L-atribuída en un analizador descendente recursivo predictivo.
\begin<<19680>>tex2html_deferred<<19680>>\par\end<<19681>>tex2html_deferred<<19681>>
Si la definición dirigida por la sintáxis sólo utiliza 
atributos sintetizados se denomina \index<<18429>>S-atribuída<<18429>>\emph<<18430>>S-atribuída<<18430>>. Una
definición S-atribuída puede ser fácilmente trasladada a un programa
<tex2html_verb_mark>2395<tex2html_verb_mark>.
\begin<<19682>>tex2html_deferred<<19682>>\par\end<<19683>>tex2html_deferred<<19683>>
\section<<18232>>Manejo en <<17787>>\begin<<19684>>tex2html_deferred<<19684>>\tt\end<<19685>>tex2html_deferred<<19685>>yapp<<17787>> de Atributos Heredados<<18232>>
\label<<17788>>section:heredados<<17788>>
Supongamos  que <tex2html_verb_mark>2396<tex2html_verb_mark> esta inmerso 
en la construcción de la antiderivación a derechas y que la forma sentencial
derecha en ese momento es:
\begin<<19686>>tex2html_deferred<<19686>>\par\end<<19687>>tex2html_deferred<<19687>>
\begin<<17789>>center<<17789>>
\begin<<18900>>tex2html_wrap_inline<<18900>>$X_m \ldots X_1 X_0 Y_1 \ldots  Y_n a_1 \ldots a_0$\end<<18901>>tex2html_wrap_inline<<18901>>
\end<<17790>>center<<17790>>
\begin<<19688>>tex2html_deferred<<19688>>\par\end<<19689>>tex2html_deferred<<19689>>
y que el mango es \begin<<18902>>tex2html_wrap_inline<<18902>>$B \rightarrow Y_1 \ldots  Y_n$\end<<18903>>tex2html_wrap_inline<<18903>>\space y en la entrada quedan por 
procesar \begin<<18904>>tex2html_wrap_inline<<18904>>$a_1 \ldots a_0$\end<<18905>>tex2html_wrap_inline<<18905>>.
\begin<<19690>>tex2html_deferred<<19690>>\par\end<<19691>>tex2html_deferred<<19691>>
Es posible acceder en <tex2html_verb_mark>2397<tex2html_verb_mark> a los valores de los atributos de los estados en la pila
del analizador que se encuentran ``por debajo'' o si se quiere
``a la izquierda'' de los estados asociados
con la regla por la que se reduce. Para ello se usa una llamada al método
\index<<18434>><<18436>>\begin<<19692>>tex2html_deferred<<19692>>\tt\end<<19693>>tex2html_deferred<<19693>>YYSemval<<18436>><<18434>>\emph<<18435>><<18437>>\begin<<19694>>tex2html_deferred<<19694>>\tt\end<<19695>>tex2html_deferred<<19695>>YYSemval<<18437>><<18435>>. La llamada es de la forma 
<tex2html_verb_mark>2398<tex2html_verb_mark>, donde <tex2html_verb_mark>2399<tex2html_verb_mark> es un entero.
Cuando se usan los valores <tex2html_verb_mark>2400<tex2html_verb_mark> \ldots <tex2html_verb_mark>2401<tex2html_verb_mark> devuelve lo mismo
que <tex2html_verb_mark>2402<tex2html_verb_mark>, \ldots <tex2html_verb_mark>2403<tex2html_verb_mark>. Esto es 
<tex2html_verb_mark>2404<tex2html_verb_mark> es el atributo asociado con \begin<<18906>>tex2html_wrap_inline<<18906>>$Y_1$\end<<18907>>tex2html_wrap_inline<<18907>>\space y <tex2html_verb_mark>2405<tex2html_verb_mark> es el atributo
asociado con \begin<<18908>>tex2html_wrap_inline<<18908>>$Y_n$\end<<18909>>tex2html_wrap_inline<<18909>>.  Cuando se usa con el valor
0 devolverá el valor del atributo asociado con el símbolo que esta a la izquierda 
del mango actual, esto es el atributo asociado con \begin<<18910>>tex2html_wrap_inline<<18910>>$X_0$\end<<18911>>tex2html_wrap_inline<<18911>>, 
si se llama con -1 el que está dos unidades a la izquierda de la variable actual, 
esto es, el asociado con \begin<<18912>>tex2html_wrap_inline<<18912>>$X_1$\end<<18913>>tex2html_wrap_inline<<18913>>\space etc. Así <tex2html_verb_mark>2406<tex2html_verb_mark> denota el atributo
de \begin<<18914>>tex2html_wrap_inline<<18914>>$X_m$\end<<18915>>tex2html_wrap_inline<<18915>>.
\begin<<19696>>tex2html_deferred<<19696>>\par\end<<19697>>tex2html_deferred<<19697>>
Esta forma de acceder a los atributos es especialmente útil cuando se 
trabaja con \index<<18438>>atributos heredados<<18438>>\emph<<18439>>atributos heredados<<18439>>. Esto es, cuando un atributo
de un nodo del árbol sintáctico se computa en términos
de valores de atributos de su padre y/o sus hermanos.
Ejemplos de atributos heredados son la clase y tipo en la declaración
de variables. Supongamos que tenemos el siguiente 
\index<<18440>>esquema de traducción<<18440>>\emph<<18441>>esquema de traducción<<18441>> para calcular la clase (C) y tipo (T) en 
las declaraciones (D) de listas (L) de identificadores:
\begin<<19698>>tex2html_deferred<<19698>>\par\end<<19699>>tex2html_deferred<<19699>>
\vspace<<17794>>0.5cm<<17794>>
\begin<<17795>>center<<17795>>
\begin<<17796>>tabular<<17796>><<17797>>|ll|<<17797>>
\hline
D \begin<<18916>>tex2html_wrap_inline<<18916>>$\rightarrow$\end<<18917>>tex2html_wrap_inline<<18917>>;SPMamp; C T <tex2html_verb_mark>2407<tex2html_verb_mark> L\\ 
C \begin<<18918>>tex2html_wrap_inline<<18918>>$\rightarrow$\end<<18919>>tex2html_wrap_inline<<18919>>;SPMamp; global   <tex2html_verb_mark>2408<tex2html_verb_mark>\\ 
C \begin<<18920>>tex2html_wrap_inline<<18920>>$\rightarrow$\end<<18921>>tex2html_wrap_inline<<18921>>;SPMamp; local    <tex2html_verb_mark>2409<tex2html_verb_mark>\\ 
T \begin<<18922>>tex2html_wrap_inline<<18922>>$\rightarrow$\end<<18923>>tex2html_wrap_inline<<18923>>;SPMamp; integer  <tex2html_verb_mark>2410<tex2html_verb_mark>\\ 
T \begin<<18924>>tex2html_wrap_inline<<18924>>$\rightarrow$\end<<18925>>tex2html_wrap_inline<<18925>>;SPMamp; float    <tex2html_verb_mark>2411<tex2html_verb_mark>\\ 
L \begin<<18926>>tex2html_wrap_inline<<18926>>$\rightarrow$\end<<18927>>tex2html_wrap_inline<<18927>>;SPMamp; <tex2html_verb_mark>2412<tex2html_verb_mark>\begin<<18928>>tex2html_wrap_inline<<18928>>$_1$\end<<18929>>tex2html_wrap_inline<<18929>><tex2html_verb_mark>2413<tex2html_verb_mark>\begin<<18930>>tex2html_wrap_inline<<18930>>$_1$\end<<18931>>tex2html_wrap_inline<<18931>><tex2html_verb_mark>2414<tex2html_verb_mark> L\begin<<18932>>tex2html_wrap_inline<<18932>>$_1$\end<<18933>>tex2html_wrap_inline<<18933>>\space ','\\ 
               ;SPMamp; id <tex2html_verb_mark>2415<tex2html_verb_mark>\\ 
L \begin<<18934>>tex2html_wrap_inline<<18934>>$\rightarrow$\end<<18935>>tex2html_wrap_inline<<18935>>;SPMamp; id   <tex2html_verb_mark>2416<tex2html_verb_mark>\\ 
\hline
\end<<17798>>tabular<<17798>>
\end<<17799>>center<<17799>>
\vspace<<17800>>0.25cm<<17800>>
\begin<<19700>>tex2html_deferred<<19700>>\par\end<<19701>>tex2html_deferred<<19701>>
Los atributos <tex2html_verb_mark>2417<tex2html_verb_mark> y <tex2html_verb_mark>2418<tex2html_verb_mark> denotan respectivamente
la clase y el tipo. 
\begin<<19702>>tex2html_deferred<<19702>>\par\end<<19703>>tex2html_deferred<<19703>>
\begin<<18292>>theorem_type<<18292>>[exercise][exercise][section][][][]
Evalúe el esquema de traducción para la entrada
<tex2html_verb_mark>2419<tex2html_verb_mark>. Represente el árbol de análisis, las
acciones incrustadas y determine el orden de ejecución.
\begin<<19704>>tex2html_deferred<<19704>>\par\end<<19705>>tex2html_deferred<<19705>>
Olvide por un momento la notación usada en las acciones y 
suponga que se tratara de acciones <tex2html_verb_mark>2420<tex2html_verb_mark>. ¿En que orden
construye <tex2html_verb_mark>2421<tex2html_verb_mark> el árbol y en que orden ejecutará las
acciones?\end<<18293>>theorem_type<<18293>>
\begin<<19706>>tex2html_deferred<<19706>>\par\end<<19707>>tex2html_deferred<<19707>>
A la hora de transformar este esquema de traducción en un programa
<tex2html_verb_mark>2422<tex2html_verb_mark> es importante darse cuenta que en cualquier derivación a derechas
desde D, cuando se reduce por una de las reglas 
\begin<<19708>>tex2html_deferred<<19708>>\par\end<<19709>>tex2html_deferred<<19709>>
\begin<<17803>>center<<17803>>
L \begin<<18936>>tex2html_wrap_inline<<18936>>$\rightarrow$\end<<18937>>tex2html_wrap_inline<<18937>>\space id \begin<<18938>>tex2html_wrap_inline<<18938>>$|$\end<<18939>>tex2html_wrap_inline<<18939>>\space L\begin<<18940>>tex2html_wrap_inline<<18940>>$_1$\end<<18941>>tex2html_wrap_inline<<18941>>\space  ',' id
\end<<17804>>center<<17804>>
\begin<<19710>>tex2html_deferred<<19710>>\par\end<<19711>>tex2html_deferred<<19711>>
el símbolo a la izquierda de L es T y el que esta a la izquierda de T es C.
Considere, por ejemplo la derivación a derechas:
\begin<<19712>>tex2html_deferred<<19712>>\par\end<<19713>>tex2html_deferred<<19713>>
\begin<<17805>>center<<17805>>
D \begin<<18942>>tex2html_wrap_inline<<18942>>$\Longrightarrow$\end<<18943>>tex2html_wrap_inline<<18943>>\space C T L \begin<<18944>>tex2html_wrap_inline<<18944>>$\Longrightarrow$\end<<18945>>tex2html_wrap_inline<<18945>>\space C T L, id \begin<<18946>>tex2html_wrap_inline<<18946>>$\Longrightarrow$\end<<18947>>tex2html_wrap_inline<<18947>>\space C T L, id, id
\begin<<18948>>tex2html_wrap_inline<<18948>>$\Longrightarrow$\end<<18949>>tex2html_wrap_inline<<18949>>\space C T id, id, id \begin<<18950>>tex2html_wrap_inline<<18950>>$\Longrightarrow$\end<<18951>>tex2html_wrap_inline<<18951>>\space \\ 
\begin<<18952>>tex2html_wrap_inline<<18952>>$\Longrightarrow$\end<<18953>>tex2html_wrap_inline<<18953>>\space C float id, id, id \begin<<18954>>tex2html_wrap_inline<<18954>>$\Longrightarrow$\end<<18955>>tex2html_wrap_inline<<18955>>\space local float id, id, id
\end<<17806>>center<<17806>>
\begin<<19714>>tex2html_deferred<<19714>>\par\end<<19715>>tex2html_deferred<<19715>>
\noindent Observe que el orden de recorrido de <tex2html_verb_mark>2423<tex2html_verb_mark> es:
\begin<<17807>>center<<17807>>
local float id, id, id \begin<<18956>>tex2html_wrap_inline<<18956>>$\Longleftarrow$\end<<18957>>tex2html_wrap_inline<<18957>>\space C float id, id \begin<<18958>>tex2html_wrap_inline<<18958>>$\Longleftarrow$\end<<18959>>tex2html_wrap_inline<<18959>>
C T id, id, id \begin<<18960>>tex2html_wrap_inline<<18960>>$\Longleftarrow$\end<<18961>>tex2html_wrap_inline<<18961>>\\ 
\begin<<18962>>tex2html_wrap_inline<<18962>>$\Longleftarrow$\end<<18963>>tex2html_wrap_inline<<18963>>\space C T L, id, id \begin<<18964>>tex2html_wrap_inline<<18964>>$\Longleftarrow$\end<<18965>>tex2html_wrap_inline<<18965>>\space C T L, id \begin<<18966>>tex2html_wrap_inline<<18966>>$\Longleftarrow$\end<<18967>>tex2html_wrap_inline<<18967>>\space C T L \begin<<18968>>tex2html_wrap_inline<<18968>>$\Longleftarrow$\end<<18969>>tex2html_wrap_inline<<18969>>\space D
\end<<17808>>center<<17808>>
\begin<<19716>>tex2html_deferred<<19716>>\par\end<<19717>>tex2html_deferred<<19717>>
\noindent en la antiderivación, cuando el mango es una de las dos reglas 
para listas de identificadores, L \begin<<18970>>tex2html_wrap_inline<<18970>>$\rightarrow$\end<<18971>>tex2html_wrap_inline<<18971>>\space id y L \begin<<18972>>tex2html_wrap_inline<<18972>>$\rightarrow$\end<<18973>>tex2html_wrap_inline<<18973>>\space L, id 
es decir durante las tres ultimas antiderivaciones:
\begin<<19718>>tex2html_deferred<<19718>>\par\end<<19719>>tex2html_deferred<<19719>>
\begin<<17809>>center<<17809>>
C T L, id, id \begin<<18974>>tex2html_wrap_inline<<18974>>$\Longleftarrow$\end<<18975>>tex2html_wrap_inline<<18975>>\space C T L, id \begin<<18976>>tex2html_wrap_inline<<18976>>$\Longleftarrow$\end<<18977>>tex2html_wrap_inline<<18977>>\space C T L \begin<<18978>>tex2html_wrap_inline<<18978>>$\Longleftarrow$\end<<18979>>tex2html_wrap_inline<<18979>>\space D
\end<<17810>>center<<17810>>
\begin<<19720>>tex2html_deferred<<19720>>\par\end<<19721>>tex2html_deferred<<19721>>
\noindent las variables a la izquierda del mango son
T y C. Esto ocurre siempre. 
Estas observaciones nos conducen al siguiente
programa <tex2html_verb_mark>2424<tex2html_verb_mark>: 
\begin<<19722>>tex2html_deferred<<19722>>\par\end<<19723>>tex2html_deferred<<19723>>
\begin<<17811>>tex2html_preform<<17811>><tex2html_verbatim_mark>verbatim6156#\end<<17812>>tex2html_preform<<17812>>
\begin<<19724>>tex2html_deferred<<19724>>\par\end<<19725>>tex2html_deferred<<19725>>
A continuación escribimos el programa que usa 
el módulo generado por <tex2html_verb_mark>2425<tex2html_verb_mark>:
\begin<<19726>>tex2html_deferred<<19726>>\par\end<<19727>>tex2html_deferred<<19727>>
\begin<<17813>>tex2html_preform<<17813>><tex2html_verbatim_mark>verbatim6157#\end<<17814>>tex2html_preform<<17814>>
En las líneas de la 15 a la 51 esta nuestro analizador léxico.
La entrada se lee en una variable local cuyo valor permanece
entre llamadas: hemos creado una clausura con la variable
<tex2html_verb_mark>2426<tex2html_verb_mark> (véase la sección \externalref<<18442>>section:clausura<<18442>> \cite<<18443>>CasianoIntroAPerl<<18443>> para mas detalles
sobre el uso de clausuras en Perl). Aunque la variable <tex2html_verb_mark>2427<tex2html_verb_mark>
queda inaccesible desde fuera de la clausura, persiste entre llamadas
como consecuencia de que la subrutina <tex2html_verb_mark>2428<tex2html_verb_mark> la utiliza.
\begin<<19728>>tex2html_deferred<<19728>>\par\end<<19729>>tex2html_deferred<<19729>>
A continuación sigue un ejemplo de ejecución:
\begin<<19730>>tex2html_deferred<<19730>>\par\end<<19731>>tex2html_deferred<<19731>>
\begin<<17816>>tex2html_preform<<17816>><tex2html_verbatim_mark>verbatim6158#\end<<17817>>tex2html_preform<<17817>>
\begin<<19732>>tex2html_deferred<<19732>>\par\end<<19733>>tex2html_deferred<<19733>>
\begin<<18294>>theorem_type<<18294>>[exercise][exercise][section][][][]
El siguiente programa <tex2html_verb_mark>2429<tex2html_verb_mark> calcula 
un árbol de análisis abstracto para la gramática
del ejemplo anterior:
\begin<<17819>>tex2html_preform<<17819>><tex2html_verbatim_mark>verbatim6159#\end<<17820>>tex2html_preform<<17820>>
sigue un ejemplo de ejecución:
\begin<<17821>>tex2html_preform<<17821>><tex2html_verbatim_mark>verbatim6160#\end<<17822>>tex2html_preform<<17822>>
\begin<<19734>>tex2html_deferred<<19734>>\par\end<<19735>>tex2html_deferred<<19735>>
Extienda el programa del ejemplo para que la gramática 
incluya las acciones del esquema de traducción.
Las acciones se tratarán como un terminal <tex2html_verb_mark>2430<tex2html_verb_mark>
y serán devueltas por el analizador léxico. Su atributo
asociado es el texto del código. El programa 
<tex2html_verb_mark>2431<tex2html_verb_mark> deberá devolver el árbol abstracto
extendido con las acciones-terminales.
La parte mas difícil de este problema consiste en ``reconocer''
el código Perl incrustado. La estrategia seguir consiste
en contar el número de llaves que se abren y se cierran.
Cuando el contador alcanza cero es que hemos llegado
al final del código Perl incrustado. Esta estrategia
tiene una serie de problemas. ¿Sabría decir cuáles?
(sugerencia: repase la sección \ref<<17823>>subsection:elcuerpo<<17823>> 
o vea como <tex2html_verb_mark>2432<tex2html_verb_mark> resuelve el problema).\end<<18295>>theorem_type<<18295>>
\begin<<19736>>tex2html_deferred<<19736>>\par\end<<19737>>tex2html_deferred<<19737>>
\section<<17825>>Acciones en Medio de una Regla y Atributos Heredados<<17825>>
\label<<17826>>section:mediaregla<<17826>>
La estrategia utilizada en la sección \ref<<17827>>section:heredados<<17827>> funciona
si podemos predecir la posición del atributo en la pila del analizador.
En el ejemplo anterior los atributos clase y tipo estaban siempre,
cualquiera que fuera la derivación a derechas, 
en las posiciones 0 y -1. Esto no siempre es asi. Consideremos
la siguiente \index<<18444>>definición dirigida por la sintáxis<<18444>>\emph<<18445>>definición dirigida por la sintáxis<<18445>>:
\begin<<19738>>tex2html_deferred<<19738>>\par\end<<19739>>tex2html_deferred<<19739>>
\vspace<<17829>>0.5cm<<17829>>
\begin<<17830>>center<<17830>>
\begin<<17831>>tabular<<17831>><<17832>>|l|l|<<17832>>
\hline
S \begin<<18980>>tex2html_wrap_inline<<18980>>$\rightarrow$\end<<18981>>tex2html_wrap_inline<<18981>>\space a A C   ;SPMamp; <tex2html_verb_mark>2433<tex2html_verb_mark>\\ 
\hline
S \begin<<18982>>tex2html_wrap_inline<<18982>>$\rightarrow$\end<<18983>>tex2html_wrap_inline<<18983>>\space b A B C ;SPMamp; <tex2html_verb_mark>2434<tex2html_verb_mark>\\ 
\hline
C \begin<<18984>>tex2html_wrap_inline<<18984>>$\rightarrow$\end<<18985>>tex2html_wrap_inline<<18985>>\space c       ;SPMamp; <tex2html_verb_mark>2435<tex2html_verb_mark>\\ 
\hline
A \begin<<18986>>tex2html_wrap_inline<<18986>>$\rightarrow$\end<<18987>>tex2html_wrap_inline<<18987>>\space a       ;SPMamp; <tex2html_verb_mark>2436<tex2html_verb_mark>\\ 
\hline
B \begin<<18988>>tex2html_wrap_inline<<18988>>$\rightarrow$\end<<18989>>tex2html_wrap_inline<<18989>>\space b       ;SPMamp; <tex2html_verb_mark>2437<tex2html_verb_mark>\\ 
\hline
\end<<17833>>tabular<<17833>>
\end<<17834>>center<<17834>>
\vspace<<17835>>0.25cm<<17835>>
\begin<<19740>>tex2html_deferred<<19740>>\par\end<<19741>>tex2html_deferred<<19741>>
\begin<<18296>>theorem_type<<18296>>[exercise][exercise][section][][][]
Determine un orden correcto de evaluación de la anterior
definición dirigida por la sintáxis para la entrada <tex2html_verb_mark>2438<tex2html_verb_mark>.\end<<18297>>theorem_type<<18297>>
\begin<<19742>>tex2html_deferred<<19742>>\par\end<<19743>>tex2html_deferred<<19743>>
C hereda el atributo sintetizado de A. El problema es que, en la pila
del analizador el atributo <tex2html_verb_mark>2439<tex2html_verb_mark> puede estar en la posición 0 
o -1 dependiendo de si la regla por la que se derivó fué
S \begin<<18990>>tex2html_wrap_inline<<18990>>$\rightarrow$\end<<18991>>tex2html_wrap_inline<<18991>>\space a A C o bien S \begin<<18992>>tex2html_wrap_inline<<18992>>$\rightarrow$\end<<18993>>tex2html_wrap_inline<<18993>>\space b A B C. La solución
a este tipo de problemas consiste en insertar acciones 
intermedias de copia del atributo de manera que se garantize que el atributo
de interés está siempre a una distancia fija. Esto es, se inserta
una variable sintáctica intermedia auxiliar M la cual deriva a vacío
y que tiene como acción asociada una regla de copia:
\begin<<19744>>tex2html_deferred<<19744>>\par\end<<19745>>tex2html_deferred<<19745>>
\vspace<<17838>>0.5cm<<17838>>
\begin<<17839>>center<<17839>>
\begin<<17840>>tabular<<17840>><<17841>>|l|l|<<17841>>
\hline
S \begin<<18994>>tex2html_wrap_inline<<18994>>$\rightarrow$\end<<18995>>tex2html_wrap_inline<<18995>>\space a A C   ;SPMamp; <tex2html_verb_mark>2440<tex2html_verb_mark>\\ 
\hline
S \begin<<18996>>tex2html_wrap_inline<<18996>>$\rightarrow$\end<<18997>>tex2html_wrap_inline<<18997>>\space b A B M C ;SPMamp; <tex2html_verb_mark>2441<tex2html_verb_mark>\\ 
\hline
C \begin<<18998>>tex2html_wrap_inline<<18998>>$\rightarrow$\end<<18999>>tex2html_wrap_inline<<18999>>\space c       ;SPMamp; <tex2html_verb_mark>2442<tex2html_verb_mark>\\ 
\hline
A \begin<<19000>>tex2html_wrap_inline<<19000>>$\rightarrow$\end<<19001>>tex2html_wrap_inline<<19001>>\space a       ;SPMamp; <tex2html_verb_mark>2443<tex2html_verb_mark>\\ 
\hline
B \begin<<19002>>tex2html_wrap_inline<<19002>>$\rightarrow$\end<<19003>>tex2html_wrap_inline<<19003>>\space b       ;SPMamp; <tex2html_verb_mark>2444<tex2html_verb_mark>\\ 
\hline
M \begin<<19004>>tex2html_wrap_inline<<19004>>$\rightarrow \epsilon$\end<<19005>>tex2html_wrap_inline<<19005>>;SPMamp; <tex2html_verb_mark>2445<tex2html_verb_mark>\\ 
\hline
\end<<17842>>tabular<<17842>>
\end<<17843>>center<<17843>>
\vspace<<17844>>0.25cm<<17844>>
\begin<<19746>>tex2html_deferred<<19746>>\par\end<<19747>>tex2html_deferred<<19747>>
El nuevo esquema de traducción puede ser implantado mediante
un programa <tex2html_verb_mark>2446<tex2html_verb_mark>:
\begin<<19748>>tex2html_deferred<<19748>>\par\end<<19749>>tex2html_deferred<<19749>>
\begin<<17845>>tex2html_preform<<17845>><tex2html_verbatim_mark>verbatim6161#\end<<17846>>tex2html_preform<<17846>>
\begin<<19750>>tex2html_deferred<<19750>>\par\end<<19751>>tex2html_deferred<<19751>>
La ejecución muestra como se ha propagado el valor del atributo:
\begin<<17847>>tex2html_preform<<17847>><tex2html_verbatim_mark>verbatim6162#\end<<17848>>tex2html_preform<<17848>>
\begin<<19752>>tex2html_deferred<<19752>>\par\end<<19753>>tex2html_deferred<<19753>>
En este momento se esta ejecutando la acción intermedia.
Lo podemos comprobar revisando el fichero <tex2html_verb_mark>2447<tex2html_verb_mark>
que fué generado usando la opción <tex2html_verb_mark>2448<tex2html_verb_mark> al llamar a <tex2html_verb_mark>2449<tex2html_verb_mark>.
La regla 2 por la que se reduce es la asociada con la acción 
intermedia:
\begin<<19754>>tex2html_deferred<<19754>>\par\end<<19755>>tex2html_deferred<<19755>>
\begin<<17849>>tex2html_preform<<17849>><tex2html_verbatim_mark>verbatim6163#\end<<17850>>tex2html_preform<<17850>>
\begin<<19756>>tex2html_deferred<<19756>>\par\end<<19757>>tex2html_deferred<<19757>>
Obsérvese la notación usada por <tex2html_verb_mark>2450<tex2html_verb_mark> para la 
\index<<18446>>acción en medio de la regla<<18446>>\emph<<18447>>acción en medio de la regla<<18447>>: <tex2html_verb_mark>2451<tex2html_verb_mark>.
Continuamos con la antiderivación:
\begin<<19758>>tex2html_deferred<<19758>>\par\end<<19759>>tex2html_deferred<<19759>>
\begin<<17852>>tex2html_preform<<17852>><tex2html_verbatim_mark>verbatim6164#\end<<17853>>tex2html_preform<<17853>>
\begin<<19760>>tex2html_deferred<<19760>>\par\end<<19761>>tex2html_deferred<<19761>>
El método puede ser generalizado a casos en los
que el atributo de interés este a diferentes distancias en
diferentes reglas sin mas que introducir las correspondientes
acciones intermedias de copia.
\begin<<19762>>tex2html_deferred<<19762>>\par\end<<19763>>tex2html_deferred<<19763>>
\section<<17854>>Recuperación de Errores<<17854>>
\label<<17855>>section:errores<<17855>>
Las entradas de un traductor pueden contener errores. 
El lenguaje <tex2html_verb_mark>2452<tex2html_verb_mark> proporciona un \emph<<17856>>token<<17856>> especial,
<tex2html_verb_mark>2453<tex2html_verb_mark>, que puede ser utilizado en el programa fuente
para extender el traductor con ``producciones de error'' 
que lo doten de cierta capacidad para 
recuperase de  una entrada errónea y poder continuar 
analizando el resto de la entrada.
\begin<<19764>>tex2html_deferred<<19764>>\par\end<<19765>>tex2html_deferred<<19765>>
Consideremos lo que ocurre al ejecutar nuestra calculadora
<tex2html_verb_mark>2454<tex2html_verb_mark> con una entrada errónea. Recordemos 
la gramática:
\begin<<19766>>tex2html_deferred<<19766>>\par\end<<19767>>tex2html_deferred<<19767>>
\begin<<17857>>tex2html_preform<<17857>><tex2html_verbatim_mark>verbatim6165#\end<<17858>>tex2html_preform<<17858>>
\begin<<19768>>tex2html_deferred<<19768>>\par\end<<19769>>tex2html_deferred<<19769>>
La regla <tex2html_verb_mark>2455<tex2html_verb_mark>\begin<<19006>>tex2html_wrap_inline<<19006>>$\rightarrow$\end<<19007>>tex2html_wrap_inline<<19007>>\space <tex2html_verb_mark>2456<tex2html_verb_mark> es una producción de
error. La idea general de uso es que, a traves de la misma, el programador 
le indica a <tex2html_verb_mark>2457<tex2html_verb_mark> que, cuando se produce un error
dentro de una expresión, descarte todos los \emph<<17859>>tokens<<17859>> hasta llegar al
retorno del carro y prosiga con el análisis. 
Además, mediante la llamada al método <tex2html_verb_mark>2458<tex2html_verb_mark> el programador
anuncia que, si se alcanza este punto, la recuperación puede considerarse 
``completa''  y que <tex2html_verb_mark>2459<tex2html_verb_mark> puede emitir a partir de ese momento 
mensajes de error
con la seguridad de que no son consecuencia de un comportamiento inestable
provocado por el primer error.
\begin<<19770>>tex2html_deferred<<19770>>\par\end<<19771>>tex2html_deferred<<19771>>
El resto de la gramática de la calculadora era como sigue:
\begin<<19772>>tex2html_deferred<<19772>>\par\end<<19773>>tex2html_deferred<<19773>>
\begin<<17860>>tex2html_preform<<17860>><tex2html_verbatim_mark>verbatim6166#\end<<17861>>tex2html_preform<<17861>>
en la ejecución activamos el flag <tex2html_verb_mark>2460<tex2html_verb_mark> a <tex2html_verb_mark>2461<tex2html_verb_mark> para 
obtener información sobre el tratamiento de errores:
\begin<<17862>>tex2html_preform<<17862>><tex2html_verbatim_mark>verbatim6167#\end<<17863>>tex2html_preform<<17863>>
Pasemos a darle una primera entrada errónea:
\begin<<19774>>tex2html_deferred<<19774>>\par\end<<19775>>tex2html_deferred<<19775>>
\begin<<17864>>tex2html_preform<<17864>><tex2html_verbatim_mark>verbatim6168#\end<<17865>>tex2html_preform<<17865>>
\begin<<19776>>tex2html_deferred<<19776>>\par\end<<19777>>tex2html_deferred<<19777>>
El esquema general del algoritmo de recuperación de errores usado 
por la versión actual de <tex2html_verb_mark>2462<tex2html_verb_mark> es el siguiente:
\begin<<19778>>tex2html_deferred<<19778>>\par\end<<19779>>tex2html_deferred<<19779>>
\begin<<17866>>enumerate<<17866>>
\item
Cuando se encuentra ante una acción de error, el analizador genera un 
\emph<<17867>>token<<17867>> <tex2html_verb_mark>2463<tex2html_verb_mark>.
\begin<<19780>>tex2html_deferred<<19780>>\par\end<<19781>>tex2html_deferred<<19781>>
\item
A continuación pasa a retirar estados de la pila hasta que descubre un
estado capaz de transitar ante el \emph<<17868>>token<<17868>> <tex2html_verb_mark>2464<tex2html_verb_mark>. 
En el ejemplo anterior el analizador estaba en el estado 12 y lo retira
de la pila. Los contenidos del estado 12 son:
\begin<<17869>>tex2html_preform<<17869>><tex2html_verbatim_mark>verbatim6169#\end<<17870>>tex2html_preform<<17870>>
Obviamente no esperabamos ver un <tex2html_verb_mark>2465<tex2html_verb_mark> aqui. El siguiente
estado en la cima de la pila es el 3, el cual tampoco
tiene ninguna transición ante el terminal <tex2html_verb_mark>2466<tex2html_verb_mark>:
\begin<<19782>>tex2html_deferred<<19782>>\par\end<<19783>>tex2html_deferred<<19783>>
\begin<<17871>>tex2html_preform<<17871>><tex2html_verbatim_mark>verbatim6170#\end<<17872>>tex2html_preform<<17872>>
El pop sobre el estado 3 deja expuesto en la superficie al estado
1, el cuál ``sabe'' como manejar el error:
\begin<<17873>>tex2html_preform<<17873>><tex2html_verbatim_mark>verbatim6171#\end<<17874>>tex2html_preform<<17874>>
\begin<<19784>>tex2html_deferred<<19784>>\par\end<<19785>>tex2html_deferred<<19785>>
\item
En este punto transita al estado correspondiente a desplazar el 
\emph<<17875>>token<<17875>> <tex2html_verb_mark>2467<tex2html_verb_mark>. 
\begin<<19786>>tex2html_deferred<<19786>>\par\end<<19787>>tex2html_deferred<<19787>>
En consecuencia, con lo dicho, en el ejemplo se va al estado 9:
\begin<<17876>>tex2html_preform<<17876>><tex2html_verbatim_mark>verbatim6172#\end<<17877>>tex2html_preform<<17877>>
\begin<<19788>>tex2html_deferred<<19788>>\par\end<<19789>>tex2html_deferred<<19789>>
\item
Entonces el algoritmo de recuperación va
leyendo \emph<<17878>>tokens<<17878>> y descartandolos hasta encontrar
uno que sea aceptable. En este caso hemos especificado
que el terminal que nos da cierta confianza de recuperación
es el retorno de carro:
\begin<<17879>>tex2html_preform<<17879>><tex2html_verbatim_mark>verbatim6173#\end<<17880>>tex2html_preform<<17880>>
\begin<<19790>>tex2html_deferred<<19790>>\par\end<<19791>>tex2html_deferred<<19791>>
\item
Sólo se envían nuevos mensajes de error una vez asimilados (desplazados)
algunos símbolos terminales. De este modos se intenta evitar la aparición
masiva de mensajes de error.
\end<<17881>>enumerate<<17881>>
\begin<<19792>>tex2html_deferred<<19792>>\par\end<<19793>>tex2html_deferred<<19793>>
\section<<17882>>Recuperación de Errores en Listas<<17882>>
Aunque no existe un método exacto para decidir como ubicar
las reglas de recuperación de errores, 
en general, los s\'<<17883>>\i<<17883>>mbolos de error deben ubicarse intentado 
satisfacer las siguientes reglas:
\begin<<19794>>tex2html_deferred<<19794>>\par\end<<19795>>tex2html_deferred<<19795>>
\begin<<17884>>itemize<<17884>>
\item
Tan cerca como sea posible del s\'<<17885>>\i<<17885>>mbolo de arranque.
\item
Tan cerca como sea posible de los s\'<<17886>>\i<<17886>>mbolos terminales.
\item
Sin introducir nuevos conflictos.
\end<<17887>>itemize<<17887>>
\begin<<19796>>tex2html_deferred<<19796>>\par\end<<19797>>tex2html_deferred<<19797>>
En el caso particular de las listas, se recomienda seguir el
siguiente esquema:
\begin<<19798>>tex2html_deferred<<19798>>\par\end<<19799>>tex2html_deferred<<19799>>
\vspace<<17888>>0.5cm<<17888>>
\begin<<17889>>table<<17889>>
\begin<<17890>>center<<17890>>
\begin<<17891>>tabular<<17891>><<17892>>|l|l|l|<<17892>>
\hline
Construcción       ;SPMamp; EBNF ;SPMamp; yapp\\ 
\hline
secuencia opcional ;SPMamp; x:\{y\}   ;SPMamp; <tex2html_verb_mark>2468<tex2html_verb_mark>\\  
                   ;SPMamp;           ;SPMamp; <tex2html_verb_mark>2469<tex2html_verb_mark>\\ 
                   ;SPMamp;           ;SPMamp; <tex2html_verb_mark>2470<tex2html_verb_mark>\\ 
\hline
secuencia          ;SPMamp; x:y\{y\}  ;SPMamp; <tex2html_verb_mark>2471<tex2html_verb_mark>\\  
                  ;SPMamp;           ;SPMamp; <tex2html_verb_mark>2472<tex2html_verb_mark>\\ 
                ;SPMamp;           ;SPMamp; <tex2html_verb_mark>2473<tex2html_verb_mark>\\ 
                ;SPMamp;           ;SPMamp; <tex2html_verb_mark>2474<tex2html_verb_mark>\\ 
\hline
lista              ;SPMamp; x:y\{Ty\} ;SPMamp; <tex2html_verb_mark>2475<tex2html_verb_mark>\\  
                  ;SPMamp;           ;SPMamp; <tex2html_verb_mark>2476<tex2html_verb_mark>\\ 
                ;SPMamp;           ;SPMamp; <tex2html_verb_mark>2477<tex2html_verb_mark>\\ 
                ;SPMamp;           ;SPMamp; <tex2html_verb_mark>2478<tex2html_verb_mark>\\ 
                ;SPMamp;           ;SPMamp; <tex2html_verb_mark>2479<tex2html_verb_mark>\\ 
                ;SPMamp;           ;SPMamp; <tex2html_verb_mark>2480<tex2html_verb_mark>\\ 
\hline
\end<<17893>>tabular<<17893>>
\end<<17894>>center<<17894>>
\begin<<19800>>tex2html_deferred<<19800>>\caption<<17895>>Recuperación de errores en listas<<17895>>\end<<19801>>tex2html_deferred<<19801>>
\label<<17896>>table:err<<17896>>
\end<<17897>>table<<17897>>
\vspace<<17898>>0.25cm<<17898>>
\begin<<19802>>tex2html_deferred<<19802>>\par\end<<19803>>tex2html_deferred<<19803>>
\begin<<18298>>theorem_type<<18298>>[exercise][exercise][section][][][]
Compruebe el funcionamiento de la metodología 
para la recuperación de errores en listas presentada
en la tabla \ref<<17900>>table:err<<17900>>
estudie el siguiente programa <tex2html_verb_mark>2481<tex2html_verb_mark> siguiendo la traza de estados,
generando entradas con todos los tipos de error posibles.
¿Cómo se recupera el analizador en caso de existencia de un segundo
error? ¿Que ocurre si dos errores consecutivos 
están muy próximos?
El programa corresponde al tercer caso de la tabla \ref<<17901>>table:err<<17901>>, 
el caso x:y\{Ty\} con 
x = <<17902>>\begin<<19804>>tex2html_deferred<<19804>>\tt\end<<19805>>tex2html_deferred<<19805>>list<<17902>>, T = <<17903>>\begin<<19806>>tex2html_deferred<<19806>>\tt\end<<19807>>tex2html_deferred<<19807>>','<<17903>> e y = <<17904>>\begin<<19808>>tex2html_deferred<<19808>>\tt\end<<19809>>tex2html_deferred<<19809>>NUMBER<<17904>>:
\begin<<17905>>tex2html_preform<<17905>><tex2html_verbatim_mark>verbatim6174#\end<<17906>>tex2html_preform<<17906>> \end<<18299>>theorem_type<<18299>>
\begin<<19810>>tex2html_deferred<<19810>>\par\end<<19811>>tex2html_deferred<<19811>>
\section<<18234>>Consejos a seguir al escribir un programa <<17908>>\begin<<19812>>tex2html_deferred<<19812>>\tt\end<<19813>>tex2html_deferred<<19813>>yapp<<17908>><<18234>>
\label<<17909>>section:consejosyapp<<17909>>
Cuando escriba un programa <tex2html_verb_mark>2482<tex2html_verb_mark> asegurese
de seguir los siguientes consejos:
\begin<<19814>>tex2html_deferred<<19814>>\par\end<<19815>>tex2html_deferred<<19815>>
\begin<<17910>>enumerate<<17910>>
\item
Coloque el punto y coma de separación de reglas en una línea aparte.
Un punto y coma ``pegado'' al final de una regla puede confundirse
con un terminal de la regla.
\begin<<19816>>tex2html_deferred<<19816>>\par\end<<19817>>tex2html_deferred<<19817>>
\item
Si hay una regla que produce vacío, coloquela en primer lugar y acompáñela de 
un comentario resaltando ese hecho.
\item
Nunca escriba dos reglas de producción en la misma línea.
\item
Sangre convenientemente todas las partes derechas de las reglas
de producción de una variable, de modo que queden
alineadas.
\item
Ponga nombres representativos a sus variables sintácticas. No llame 
<tex2html_verb_mark>2483<tex2html_verb_mark> a una variable que representa el concepto ``lista de parámetros'',
llámela <tex2html_verb_mark>2484<tex2html_verb_mark>.
\item
Es conveniente que declare los terminales simbólicos, esto es, aquellos que 
llevan un identificador asociado. Si no llevan prioridad asociada o no 
es necesaria, use una declaración <tex2html_verb_mark>2486<tex2html_verb_mark>. De esta manera
el lector de su programa se dará cuenta rápidamente que dichos identificadores
no se corresponden con variables sintácticas. Por la misma razón,
si se trata de terminales
asociados con caracteres o cadenas no es tan necesario que los declare, 
a menos que, 
como en el ejemplo de la calculadora para <tex2html_verb_mark>2487<tex2html_verb_mark> y <tex2html_verb_mark>2488<tex2html_verb_mark>,
sea necesario asociarles una
precedencia.
\item
Es importante que use la opción <tex2html_verb_mark>2489<tex2html_verb_mark> para producir
el fichero <tex2html_verb_mark>2490<tex2html_verb_mark> conteniendo información detallada sobre
los conflictos y el autómata. Cuando haya un conflicto shift-reduce
no resuelto busque en el fichero el estado implicado y 
vea que LR(0) items \begin<<19008>>tex2html_wrap_inline<<19008>>$A \rightarrow \alpha_\uparrow$\end<<19009>>tex2html_wrap_inline<<19009>>
y \begin<<19010>>tex2html_wrap_inline<<19010>>$B \rightarrow \beta_\uparrow \gamma$\end<<19011>>tex2html_wrap_inline<<19011>>\space entran en conflicto.
\begin<<19818>>tex2html_deferred<<19818>>\par\end<<19819>>tex2html_deferred<<19819>>
\item
\label<<17911>>item:conflictos<<17911>>
Si según el informe de <tex2html_verb_mark>2491<tex2html_verb_mark>
el conflicto se produce ante un terminal \begin<<19012>>tex2html_wrap_inline<<19012>>$a$\end<<19013>>tex2html_wrap_inline<<19013>>,
es porque \begin<<19014>>tex2html_wrap_inline<<19014>>$a \in FOLLOW(A)$\end<<19015>>tex2html_wrap_inline<<19015>>\space y
\begin<<19016>>tex2html_wrap_inline<<19016>>$a \in FIRST(\gamma)$\end<<19017>>tex2html_wrap_inline<<19017>>. Busque las causas por las que esto ocurre 
y modifique su gramática con vistas a eliminar la presencia
del terminal \begin<<19018>>tex2html_wrap_inline<<19018>>$a$\end<<19019>>tex2html_wrap_inline<<19019>>\space en uno de los dos conjuntos implicados
o bien establezca reglas de prioridad entre los terminales
implicados que resuelvan el conflicto.
\begin<<19820>>tex2html_deferred<<19820>>\par\end<<19821>>tex2html_deferred<<19821>>
\item
Nótese que cuando existe un conflicto de desplazamiento 
reducción entre \begin<<19020>>tex2html_wrap_inline<<19020>>$A \rightarrow \alpha_\uparrow$\end<<19021>>tex2html_wrap_inline<<19021>> 
y  \begin<<19022>>tex2html_wrap_inline<<19022>>$B \rightarrow \beta_\uparrow \gamma$\end<<19023>>tex2html_wrap_inline<<19023>>, el programa
<tex2html_verb_mark>2492<tex2html_verb_mark> contabiliza un error por cada terminal 
\begin<<19024>>tex2html_wrap_inline<<19024>>$a \in FOLLOW(A) \cap FIRST(\gamma)$\end<<19025>>tex2html_wrap_inline<<19025>>. Por esta razón,
si hay 16 elementos en \begin<<19026>>tex2html_wrap_inline<<19026>>$FOLLOW(A) \cap FIRST(\gamma)$\end<<19027>>tex2html_wrap_inline<<19027>>,
el analizador <tex2html_verb_mark>2493<tex2html_verb_mark> informará de la existencia
de 16 conflictos \emph<<17912>>shift-reduce<<17912>>,
cuando en realidad se trata de uno sólo. No desespere, 
los conflictos ``auténticos'' suelen
ser menos de los que <tex2html_verb_mark>2494<tex2html_verb_mark> anuncia.
\begin<<19822>>tex2html_deferred<<19822>>\par\end<<19823>>tex2html_deferred<<19823>>
\item
Si necesita declarar variables globales, inicializaciones, etc.
que afectan la conducta global del analizador, escriba el código 
correspondiente en la cabecera del analizador, protegido
por los delimitadores <tex2html_verb_mark>2496<tex2html_verb_mark> y <tex2html_verb_mark>2497<tex2html_verb_mark>. Estos delimitadores
deberán aparecer en una línea aparte. Por ejemplo:
\begin<<19824>>tex2html_deferred<<19824>>\par\end<<19825>>tex2html_deferred<<19825>>
\begin<<17913>>tex2html_preform<<17913>><tex2html_verbatim_mark>verbatim6175#\end<<17914>>tex2html_preform<<17914>>
\begin<<19826>>tex2html_deferred<<19826>>\par\end<<19827>>tex2html_deferred<<19827>>
\item
Si tiene problemas en tiempo de ejecución con el comportamiento del análizador
sintáctico use la opción <tex2html_verb_mark>2498<tex2html_verb_mark> en la llamada al analizador.
\begin<<19828>>tex2html_deferred<<19828>>\par\end<<19829>>tex2html_deferred<<19829>>
\item
Si trabaja en windows y pasa los ficheros a unix tenga cuidado con la posible
introducción de caractéres espúreos en el fichero. Debido
a la presencia de caractéres de control invisibles, el analizador <tex2html_verb_mark>2499<tex2html_verb_mark> 
pasará a rechazar una gramatica aparentemente correcta.
\begin<<19830>>tex2html_deferred<<19830>>\par\end<<19831>>tex2html_deferred<<19831>>
\item
Sea consciente de que los analizadores sintáctico y  léxico mantienen
una relación de corutinas en <tex2html_verb_mark>2500<tex2html_verb_mark>: Cada vez que 
el analizador sintáctico necesita un nuevo terminal para decidir que regla de
producción se aplica, llama al analizador léxico, el cuál deberá retornar el siguiente
terminal. La estrategia es diferente de la utilizada en el ejemplo
usado para el lenguaje Tutu en el capítulo 
\ref<<17915>>chapter:introcomp<<17915>>. Allí generabamos en una primera fase
la lista de terminales. Aquí los terminales se generan  de uno en uno
y cada vez que se encuentra uno nuevo se retorna al analizador sintáctico.
La ventaja que tiene este método es que permite colaborar al analizador sintáctico
y al analizador léxico para ``dinámicamente'' modificar la conducta 
del análisis léxico. Por ejemplo en los compiladores del lenguaje C
es común hacer que el analizador léxico cuando descubre un identificador que 
previamente ha sido declarado como identificador de tipo (mediante 
el uso de <tex2html_verb_mark>2501<tex2html_verb_mark>) retorne un terminal <tex2html_verb_mark>2502<tex2html_verb_mark> 
diferente del terminal <tex2html_verb_mark>2503<tex2html_verb_mark>
que caracteriza a los identificadores. Para ello, el analizador
sintáctico, cuando detecta una tal declaración, ``avisa'' al analizador 
léxico para que modifique su conducta. El analizador sintáctico volverá
a avisarlo cuando la declaración del identificador como
identificador de tipo salga de ámbito y pierda
su especial condición.  
\begin<<19832>>tex2html_deferred<<19832>>\par\end<<19833>>tex2html_deferred<<19833>>
\item
En <tex2html_verb_mark>2504<tex2html_verb_mark> el analizador sintáctico espera que el analizador
léxico devuelva de cada vez una pareja formada por dos escalares.
El primer escalar es la cadena que designa el terminal. A diferencia
de la habitual costumbre <tex2html_verb_mark>2505<tex2html_verb_mark> de codificar los terminales
como enteros, en <tex2html_verb_mark>2506<tex2html_verb_mark> se suelen codificar como cadenas.
La segunda componente de la pareja es el atributo asociado con el terminal.
Si el atributo es un atributo complejo que necesitas representar
mediante un hash o un vector, lo mejor es hacer que esta componente
sea una referencia al objeto describiendo el atributo.
El analizador léxico le indica al sintáctico la
finalización de la entrada enviándole la pareja 
<tex2html_verb_mark>2507<tex2html_verb_mark> formada por la palabra vacía con atributo <tex2html_verb_mark>2508<tex2html_verb_mark>.
\begin<<19834>>tex2html_deferred<<19834>>\par\end<<19835>>tex2html_deferred<<19835>>
\item
Hay fundamentalmente dos formas de hacer el analizador
léxico: hacerlo destructivo o no destructivo.
En los destructivos se usa el operador de sustitución <tex2html_verb_mark>2509<tex2html_verb_mark>
(véase el ejemplo de la sección 
\ref<<17916>>section:ejemplodeuso<<17916>>), en cuyo caso la entrada procesada
es retirada de la cadena leída.
En los no destructivos utilizamos el operador
de emparejamiento <tex2html_verb_mark>2510<tex2html_verb_mark>. Véase 
el ejemplo de analizador léxico en
la sección \ref<<17917>>section:heredados<<17917>>
(concretamente la subrutina <tex2html_verb_mark>2511<tex2html_verb_mark> en la 
línea 20 del fichero <tex2html_verb_mark>2512<tex2html_verb_mark>)
\end<<17918>>enumerate<<17918>>
\begin<<19836>>tex2html_deferred<<19836>>\par\end<<19837>>tex2html_deferred<<19837>>
\begin<<18300>>theorem_type<<18300>>[example][example][section][][][]
Consideremos de nuevo el programa <tex2html_verb_mark>2513<tex2html_verb_mark> para producir
árboles para las expresiones en infijo. Supongamos que olvidamos
introducir una prioridad explícita al terminal <tex2html_verb_mark>2514<tex2html_verb_mark>:
\begin<<17920>>tex2html_preform<<17920>><tex2html_verbatim_mark>verbatim6176#\end<<17921>>tex2html_preform<<17921>>
en este caso al compilar encontraremos conflictos:
\begin<<17922>>tex2html_preform<<17922>><tex2html_verbatim_mark>verbatim6177#\end<<17923>>tex2html_preform<<17923>>
En tal caso lo que debemos hacer es editar el fichero <tex2html_verb_mark>2515<tex2html_verb_mark>.
El comienzo del fichero es como sigue:
\begin<<17924>>tex2html_preform<<17924>><tex2html_verbatim_mark>verbatim6178#\end<<17925>>tex2html_preform<<17925>>
Tal y como indica la expresión \ldots <tex2html_verb_mark>2516<tex2html_verb_mark> \ldots,
las líneas como la 7, la 8 y siguientes se refieren a conflictos resueltos.
Mas abajo encontraremos información sobre 
la causa de nuestros conflictos no resueltos:
\begin<<17926>>tex2html_preform<<17926>><tex2html_verbatim_mark>verbatim6179#\end<<17927>>tex2html_preform<<17927>>
Lo que nos informa que los conflictos 
ocurren en el estado 25 ante 4 terminales
distintos. Nos vamos a la parte del fichero 
en la que aparece la información relativa al estado 25. Para ello,
como el fichero es grande, buscamos por la cadena adecuada.
En <tex2html_verb_mark>2517<tex2html_verb_mark> buscaríamos por <tex2html_verb_mark>2518<tex2html_verb_mark>. Las líneas
correspondientes contienen:
\begin<<19838>>tex2html_deferred<<19838>>\par\end<<19839>>tex2html_deferred<<19839>>
\begin<<17928>>tex2html_preform<<17928>><tex2html_verbatim_mark>verbatim6180#\end<<17929>>tex2html_preform<<17929>>
El comentario en la línea 308 (<tex2html_verb_mark>2519<tex2html_verb_mark> \ldots )
indica que por defecto, ante cualquier
otro terminal que no sea uno de los explícitamente listados, 
la acción a tomar por el analizador será reducir por la regla 8.
\begin<<19840>>tex2html_deferred<<19840>>\par\end<<19841>>tex2html_deferred<<19841>>
Una revisión a la numeración de la gramática, al comienzo
del fichero <tex2html_verb_mark>2520<tex2html_verb_mark> nos permite ver cuál
es la regla 8:
\begin<<17930>>tex2html_preform<<17930>><tex2html_verbatim_mark>verbatim6181#\end<<17931>>tex2html_preform<<17931>>
Efectivamente, es la regla de asignación <tex2html_verb_mark>2521<tex2html_verb_mark>.
El conflicto aparece por que los terminales 
<tex2html_verb_mark>2522<tex2html_verb_mark> están en el conjunto FOLLOW(<tex2html_verb_mark>2523<tex2html_verb_mark>)
y también cabe esperarlos respectivamente 
en las reglas 9, 10, 11 y 12 ya que el estado 
25 contiene:
\begin<<19842>>tex2html_deferred<<19842>>\par\end<<19843>>tex2html_deferred<<19843>>
\begin<<17932>>tex2html_preform<<17932>><tex2html_verbatim_mark>verbatim6182#\end<<17933>>tex2html_preform<<17933>>
\begin<<19844>>tex2html_deferred<<19844>>\par\end<<19845>>tex2html_deferred<<19845>>
Estamos ante un caso en el que se aplica el consejo número
\ref<<17934>>item:conflictos<<17934>>.
Los items de la forma
\begin<<19028>>tex2html_wrap_inline<<19028>>$B \rightarrow \beta_\uparrow \gamma$\end<<19029>>tex2html_wrap_inline<<19029>>, son los
de la forma <tex2html_verb_mark>2524<tex2html_verb_mark>, etc.
El item de la forma \begin<<19030>>tex2html_wrap_inline<<19030>>$A \rightarrow \alpha_\uparrow$\end<<19031>>tex2html_wrap_inline<<19031>> 
es en este caso <tex2html_verb_mark>2525<tex2html_verb_mark>.
\begin<<19846>>tex2html_deferred<<19846>>\par\end<<19847>>tex2html_deferred<<19847>>
En efecto, en una expresión como <tex2html_verb_mark>2526<tex2html_verb_mark> se produce
una ambiguedad. ¿Debe interpretarse como <tex2html_verb_mark>2527<tex2html_verb_mark>?
¿O bien como <tex2html_verb_mark>2528<tex2html_verb_mark>?. La primera interpretación
corresponde a reducir por la regla 8. La segunda a desplazar al
estado 13.  En este ejemplo, el conflicto
se resuelve haciendo que tenga prioridad el desplazamiento,
dando menor prioridad al terminal <tex2html_verb_mark>2529<tex2html_verb_mark> que a los 
terminales <tex2html_verb_mark>2530<tex2html_verb_mark>.\end<<18301>>theorem_type<<18301>>
\begin<<19848>>tex2html_deferred<<19848>>\par\end<<19849>>tex2html_deferred<<19849>>
\begin<<18302>>theorem_type<<18302>>[exercise][exercise][section][][][]
¿Que ocurre en el ejemplo anterior si dejamos que <tex2html_verb_mark>2531<tex2html_verb_mark> aplique 
las reglas por defecto?\end<<18303>>theorem_type<<18303>>
\begin<<19850>>tex2html_deferred<<19850>>\par\end<<19851>>tex2html_deferred<<19851>>
\section<<18448>>Práctica: Un C simplificado<<18448>>
   \index<<18449>>Práctica!Un C simplificado<<18449>>
  
\label<<17939>>section:samplec<<17939>>
Escriba un analizador sintáctico 
usando <tex2html_verb_mark>2532<tex2html_verb_mark> para el siguiente lenguaje.
La descripción utiliza una notación tipo BNF: las llaves indican 
0 o mas repeticiones y los corchetes opcionalidad.
\begin<<19852>>tex2html_deferred<<19852>>\par\end<<19853>>tex2html_deferred<<19853>>
\vspace<<17940>>0.5cm<<17940>>
\begin<<17941>>tabular<<17941>><<17942>>lll<<17942>>
program      ;SPMamp;\begin<<19032>>tex2html_wrap_inline<<19032>>$\rightarrow$\end<<19033>>tex2html_wrap_inline<<19033>>;SPMamp; definitions \{ definitions \}\\ 
definitions  ;SPMamp;\begin<<19034>>tex2html_wrap_inline<<19034>>$\rightarrow$\end<<19035>>tex2html_wrap_inline<<19035>>;SPMamp; datadefinition \begin<<19036>>tex2html_wrap_inline<<19036>>$|$\end<<19037>>tex2html_wrap_inline<<19037>>\space functiondefinition\\ 
datadefinition   ;SPMamp;\begin<<19038>>tex2html_wrap_inline<<19038>>$\rightarrow$\end<<19039>>tex2html_wrap_inline<<19039>>;SPMamp; basictype declarator \{ ',' declarator \} ';'\\ 
declarator  ;SPMamp;\begin<<19040>>tex2html_wrap_inline<<19040>>$\rightarrow$\end<<19041>>tex2html_wrap_inline<<19041>>;SPMamp; ID \{ '\begin<<19042>>tex2html_wrap_inline<<19042>>$[$\end<<19043>>tex2html_wrap_inline<<19043>>' constantexp '\begin<<19044>>tex2html_wrap_inline<<19044>>$]$\end<<19045>>tex2html_wrap_inline<<19045>>' \}\\ 
functiondefinition ;SPMamp;\begin<<19046>>tex2html_wrap_inline<<19046>>$\rightarrow$\end<<19047>>tex2html_wrap_inline<<19047>>;SPMamp; \begin<<19048>>tex2html_wrap_inline<<19048>>$[$\end<<19049>>tex2html_wrap_inline<<19049>>\space basictype \begin<<19050>>tex2html_wrap_inline<<19050>>$]$\end<<19051>>tex2html_wrap_inline<<19051>>\space functionheader functionbody\\ 
basictype    ;SPMamp;\begin<<19052>>tex2html_wrap_inline<<19052>>$\rightarrow$\end<<19053>>tex2html_wrap_inline<<19053>>;SPMamp; INT  \begin<<19054>>tex2html_wrap_inline<<19054>>$|$\end<<19055>>tex2html_wrap_inline<<19055>>\space CHAR\\ 
functionheader ;SPMamp;\begin<<19056>>tex2html_wrap_inline<<19056>>$\rightarrow$\end<<19057>>tex2html_wrap_inline<<19057>>;SPMamp; ID '(' \begin<<19058>>tex2html_wrap_inline<<19058>>$[$\end<<19059>>tex2html_wrap_inline<<19059>>\space parameters \begin<<19060>>tex2html_wrap_inline<<19060>>$]$\end<<19061>>tex2html_wrap_inline<<19061>>\space ')'\\ 
parameters ;SPMamp;\begin<<19062>>tex2html_wrap_inline<<19062>>$\rightarrow$\end<<19063>>tex2html_wrap_inline<<19063>>;SPMamp; basictype declarator \{ ',' basictype declarator \} \\ 
functionbody ;SPMamp;\begin<<19064>>tex2html_wrap_inline<<19064>>$\rightarrow$\end<<19065>>tex2html_wrap_inline<<19065>>;SPMamp; '\{' \{ datadefinition \} \{ statement \} '\}'\\ 
statement ;SPMamp;\begin<<19066>>tex2html_wrap_inline<<19066>>$\rightarrow$\end<<19067>>tex2html_wrap_inline<<19067>>;SPMamp; \begin<<19068>>tex2html_wrap_inline<<19068>>$[$\end<<19069>>tex2html_wrap_inline<<19069>>\space exp \begin<<19070>>tex2html_wrap_inline<<19070>>$]$\end<<19071>>tex2html_wrap_inline<<19071>>\space ';'\\ 
          ;SPMamp;;SPMamp;\begin<<19072>>tex2html_wrap_inline<<19072>>$|$\end<<19073>>tex2html_wrap_inline<<19073>>\space '\{' \{ datadefinition \} \{ statement \} '\}'\\ 
          ;SPMamp;;SPMamp;\begin<<19074>>tex2html_wrap_inline<<19074>>$|$\end<<19075>>tex2html_wrap_inline<<19075>>\space  IF '(' exp ')' statement \begin<<19076>>tex2html_wrap_inline<<19076>>$[$\end<<19077>>tex2html_wrap_inline<<19077>>\space ELSE statement \begin<<19078>>tex2html_wrap_inline<<19078>>$]$\end<<19079>>tex2html_wrap_inline<<19079>>\\ 
          ;SPMamp;;SPMamp;\begin<<19080>>tex2html_wrap_inline<<19080>>$|$\end<<19081>>tex2html_wrap_inline<<19081>>\space  WHILE '(' exp ')' statement\\ 
          ;SPMamp;;SPMamp;\begin<<19082>>tex2html_wrap_inline<<19082>>$|$\end<<19083>>tex2html_wrap_inline<<19083>>\space  RETURN \begin<<19084>>tex2html_wrap_inline<<19084>>$[$\end<<19085>>tex2html_wrap_inline<<19085>>\space exp \begin<<19086>>tex2html_wrap_inline<<19086>>$]$\end<<19087>>tex2html_wrap_inline<<19087>>\space ';'\\ 
constantexp  ;SPMamp;\begin<<19088>>tex2html_wrap_inline<<19088>>$\rightarrow$\end<<19089>>tex2html_wrap_inline<<19089>>;SPMamp; exp \\ 
exp       ;SPMamp;\begin<<19090>>tex2html_wrap_inline<<19090>>$\rightarrow$\end<<19091>>tex2html_wrap_inline<<19091>>;SPMamp; lvalue '=' exp \begin<<19092>>tex2html_wrap_inline<<19092>>$|$\end<<19093>>tex2html_wrap_inline<<19093>>\space lvalue '+=' exp \\ 
          ;SPMamp;;SPMamp;\begin<<19094>>tex2html_wrap_inline<<19094>>$|$\end<<19095>>tex2html_wrap_inline<<19095>>\space exp '\&\&' exp \begin<<19096>>tex2html_wrap_inline<<19096>>$|$\end<<19097>>tex2html_wrap_inline<<19097>>\space exp '\begin<<19098>>tex2html_wrap_inline<<19098>>$||$\end<<19099>>tex2html_wrap_inline<<19099>>' exp  \begin<<19100>>tex2html_wrap_inline<<19100>>$|$\end<<19101>>tex2html_wrap_inline<<19101>>\\ 
          ;SPMamp;;SPMamp;\begin<<19102>>tex2html_wrap_inline<<19102>>$|$\end<<19103>>tex2html_wrap_inline<<19103>>\space exp '==' exp \begin<<19104>>tex2html_wrap_inline<<19104>>$|$\end<<19105>>tex2html_wrap_inline<<19105>>\space exp '!=' exp  \begin<<19106>>tex2html_wrap_inline<<19106>>$|$\end<<19107>>tex2html_wrap_inline<<19107>>\\ 
          ;SPMamp;;SPMamp;\begin<<19108>>tex2html_wrap_inline<<19108>>$|$\end<<19109>>tex2html_wrap_inline<<19109>>\space exp '\begin<<19110>>tex2html_wrap_inline<<19110>>$;SPMlt;$\end<<19111>>tex2html_wrap_inline<<19111>>' exp \begin<<19112>>tex2html_wrap_inline<<19112>>$|$\end<<19113>>tex2html_wrap_inline<<19113>>\space exp '\begin<<19114>>tex2html_wrap_inline<<19114>>$;SPMgt;$\end<<19115>>tex2html_wrap_inline<<19115>>' exp  \begin<<19116>>tex2html_wrap_inline<<19116>>$|$\end<<19117>>tex2html_wrap_inline<<19117>>\space exp '\begin<<19118>>tex2html_wrap_inline<<19118>>$;SPMlt;=$\end<<19119>>tex2html_wrap_inline<<19119>>' exp \begin<<19120>>tex2html_wrap_inline<<19120>>$|$\end<<19121>>tex2html_wrap_inline<<19121>>\space exp '\begin<<19122>>tex2html_wrap_inline<<19122>>$;SPMgt;=$\end<<19123>>tex2html_wrap_inline<<19123>>' exp  \begin<<19124>>tex2html_wrap_inline<<19124>>$|$\end<<19125>>tex2html_wrap_inline<<19125>>\\ 
          ;SPMamp;;SPMamp;\begin<<19126>>tex2html_wrap_inline<<19126>>$|$\end<<19127>>tex2html_wrap_inline<<19127>>\space exp '+' exp \begin<<19128>>tex2html_wrap_inline<<19128>>$|$\end<<19129>>tex2html_wrap_inline<<19129>>\space exp '-' exp  \begin<<19130>>tex2html_wrap_inline<<19130>>$|$\end<<19131>>tex2html_wrap_inline<<19131>>\\ 
          ;SPMamp;;SPMamp;\begin<<19132>>tex2html_wrap_inline<<19132>>$|$\end<<19133>>tex2html_wrap_inline<<19133>>\space exp '*' exp \begin<<19134>>tex2html_wrap_inline<<19134>>$|$\end<<19135>>tex2html_wrap_inline<<19135>>\space exp '/' exp \begin<<19136>>tex2html_wrap_inline<<19136>>$|$\end<<19137>>tex2html_wrap_inline<<19137>>\\ 
          ;SPMamp;;SPMamp;\begin<<19138>>tex2html_wrap_inline<<19138>>$|$\end<<19139>>tex2html_wrap_inline<<19139>>\space unary\\ 
unary     ;SPMamp;\begin<<19140>>tex2html_wrap_inline<<19140>>$\rightarrow$\end<<19141>>tex2html_wrap_inline<<19141>>;SPMamp; '\begin<<19142>>tex2html_wrap_inline<<19142>>$++$\end<<19143>>tex2html_wrap_inline<<19143>>' lvalue  \begin<<19144>>tex2html_wrap_inline<<19144>>$|$\end<<19145>>tex2html_wrap_inline<<19145>>\space '\begin<<19146>>tex2html_wrap_inline<<19146>>$--$\end<<19147>>tex2html_wrap_inline<<19147>>' lvalue \begin<<19148>>tex2html_wrap_inline<<19148>>$|$\end<<19149>>tex2html_wrap_inline<<19149>>\space primary\\ 
primary   ;SPMamp;\begin<<19150>>tex2html_wrap_inline<<19150>>$\rightarrow$\end<<19151>>tex2html_wrap_inline<<19151>>;SPMamp; '(' exp ')' \begin<<19152>>tex2html_wrap_inline<<19152>>$|$\end<<19153>>tex2html_wrap_inline<<19153>>\space ID '(' \begin<<19154>>tex2html_wrap_inline<<19154>>$[$\end<<19155>>tex2html_wrap_inline<<19155>>\space argumentlist \begin<<19156>>tex2html_wrap_inline<<19156>>$]$\end<<19157>>tex2html_wrap_inline<<19157>>\space ')' \begin<<19158>>tex2html_wrap_inline<<19158>>$|$\end<<19159>>tex2html_wrap_inline<<19159>>\space lvalue \begin<<19160>>tex2html_wrap_inline<<19160>>$|$\end<<19161>>tex2html_wrap_inline<<19161>>\space NUM \begin<<19162>>tex2html_wrap_inline<<19162>>$|$\end<<19163>>tex2html_wrap_inline<<19163>>\space CHARACTER\\ 
lvalue   ;SPMamp;\begin<<19164>>tex2html_wrap_inline<<19164>>$\rightarrow$\end<<19165>>tex2html_wrap_inline<<19165>>;SPMamp; ID  \{ '\begin<<19166>>tex2html_wrap_inline<<19166>>$[$\end<<19167>>tex2html_wrap_inline<<19167>>' exp '\begin<<19168>>tex2html_wrap_inline<<19168>>$]$\end<<19169>>tex2html_wrap_inline<<19169>>' \}\\ 
argumentlist ;SPMamp;\begin<<19170>>tex2html_wrap_inline<<19170>>$\rightarrow$\end<<19171>>tex2html_wrap_inline<<19171>>;SPMamp; exp \{ ',' exp \}
\end<<17943>>tabular<<17943>>
\vspace<<17944>>0.25cm<<17944>>
Su analizador, además de seguir los consejos explícitados en la 
sección \ref<<17945>>section:consejosyapp<<17945>>,
deberá cumplir las siguientes especificaciones:
\begin<<19854>>tex2html_deferred<<19854>>\par\end<<19855>>tex2html_deferred<<19855>>
\begin<<17946>>enumerate<<17946>>
\item <<17947>>\begin<<19856>>tex2html_deferred<<19856>>\bf\end<<19857>>tex2html_deferred<<19857>>Método de Trabajo<<17947>>
\begin<<19858>>tex2html_deferred<<19858>>\par\end<<19859>>tex2html_deferred<<19859>>
Parta de la definición BNF y proceda a introducir las reglas poco a poco:
\begin<<17948>>tex2html_preform<<17948>><tex2html_verbatim_mark>verbatim6183#\end<<17949>>tex2html_preform<<17949>>
\begin<<19860>>tex2html_deferred<<19860>>\par\end<<19861>>tex2html_deferred<<19861>>
\begin<<17950>>enumerate<<17950>>
\item
Comienze trabajando en el cuerpo de la gramática.
\item
Olvídese del 
analizador léxico por ahora. Su objetivo es tener una gramática limpia
de conflictos y que reconozca el lenguaje dado. 
\item
Sustituya las repeticiones
BNF por listas. Si una variable describe una lista de <tex2html_verb_mark>2533<tex2html_verb_mark> llámela
<tex2html_verb_mark>2534<tex2html_verb_mark>. 
\item
Si tiene un elemento opcional en la BNF, por ejemplo, en la regla: 
\begin<<19862>>tex2html_deferred<<19862>>\par\end<<19863>>tex2html_deferred<<19863>>
functiondefinition \begin<<19172>>tex2html_wrap_inline<<19172>>$\rightarrow$\end<<19173>>tex2html_wrap_inline<<19173>>\space \begin<<19174>>tex2html_wrap_inline<<19174>>$[$\end<<19175>>tex2html_wrap_inline<<19175>>\space basictype \begin<<19176>>tex2html_wrap_inline<<19176>>$]$\end<<19177>>tex2html_wrap_inline<<19177>>\space functionheader functionbody
\begin<<19864>>tex2html_deferred<<19864>>\par\end<<19865>>tex2html_deferred<<19865>>
sustitúyala por dos reglas una en la que aparece el elemento y otra en la 
que no.
\begin<<17951>>tex2html_preform<<17951>><tex2html_verbatim_mark>verbatim6184#\end<<17952>>tex2html_preform<<17952>>
\item
Cada par de reglas que introduzca vuelva a recompilar con <tex2html_verb_mark>2535<tex2html_verb_mark> la gramática
para ver si se han producido conflictos. Cuando estoy editando la gramática
suelo escribir a menudo la orden 
\begin<<19866>>tex2html_deferred<<19866>>\par\end<<19867>>tex2html_deferred<<19867>>
<tex2html_verb_mark>2537<tex2html_verb_mark> 
\begin<<19868>>tex2html_deferred<<19868>>\par\end<<19869>>tex2html_deferred<<19869>>
para recompilar:
\begin<<19870>>tex2html_deferred<<19870>>\par\end<<19871>>tex2html_deferred<<19871>>
\vspace<<17953>>0.5cm<<17953>>
\begin<<17954>>tabular<<17954>><<18235>>|p<<17955>>14.5cm<<17955>>|<<18235>>
\hline
\begin<<17956>>tex2html_preform<<17956>><tex2html_verbatim_mark>verbatim6185#\end<<17957>>tex2html_preform<<17957>>\\ 
\hline
\end<<17958>>tabular<<17958>>
\vspace<<17959>>0.5cm<<17959>>
\begin<<19872>>tex2html_deferred<<19872>>\par\end<<19873>>tex2html_deferred<<19873>>
Esto llama a <tex2html_verb_mark>2538<tex2html_verb_mark> con el fichero bajo edición. Si hay errores los detectaré
enseguida.
\item
Insisto, procure detectar la aparición de un conflicto lo antes posible. Es terrible
tener que limpiar una gramática llena de conflictos.
\item
\underline<<17960>>Ponga nombres significativos a las variables y terminales<<17960>>. Por favor,
no los llame <tex2html_verb_mark>2539<tex2html_verb_mark>, <tex2html_verb_mark>2540<tex2html_verb_mark>, etc.
\item
Cuando esté en el proceso de construcción de la gramática y aún le queden
por rellenar variables sintácticas, declárelas como terminales mediante
<tex2html_verb_mark>2542<tex2html_verb_mark> como en el código que aparece encima. De esta manera
evitará las quejas de <tex2html_verb_mark>2543<tex2html_verb_mark>.
\end<<17961>>enumerate<<17961>>
\begin<<19874>>tex2html_deferred<<19874>>\par\end<<19875>>tex2html_deferred<<19875>>
\item <<17962>>\begin<<19876>>tex2html_deferred<<19876>>\bf\end<<19877>>tex2html_deferred<<19877>>Resolución de Conflictos<<17962>>
\begin<<19878>>tex2html_deferred<<19878>>\par\end<<19879>>tex2html_deferred<<19879>>
Las operaciones de asignación tienen la prioridad mas baja,
seguidas  de las lógicas, los test de igualdad y después 
de los de comparación, a continuación las aditivas, multiplicativas y por 
último los <tex2html_verb_mark>2544<tex2html_verb_mark> y <tex2html_verb_mark>2545<tex2html_verb_mark>. Exprese la asociatividad natural y la
prioridad especificada usando
los mecanismos que <tex2html_verb_mark>2546<tex2html_verb_mark> provee al efecto.
\begin<<19880>>tex2html_deferred<<19880>>\par\end<<19881>>tex2html_deferred<<19881>>
La gramática es ambigua, ya que para una sentencia como 
\begin<<19882>>tex2html_deferred<<19882>>\par\end<<19883>>tex2html_deferred<<19883>>
\begin<<17963>>center<<17963>>
if \begin<<19178>>tex2html_wrap_inline<<19178>>$E_1$\end<<19179>>tex2html_wrap_inline<<19179>>\space then if \begin<<19180>>tex2html_wrap_inline<<19180>>$E_2$\end<<19181>>tex2html_wrap_inline<<19181>>\space then \begin<<19182>>tex2html_wrap_inline<<19182>>$S_1$\end<<19183>>tex2html_wrap_inline<<19183>>\space else \begin<<19184>>tex2html_wrap_inline<<19184>>$S_2$\end<<19185>>tex2html_wrap_inline<<19185>>
\end<<17964>>center<<17964>>
\begin<<19884>>tex2html_deferred<<19884>>\par\end<<19885>>tex2html_deferred<<19885>>
existen dos árboles posibles: uno que asocia el ``else'' con el primer ``if'' y otra
que lo asocia con el segundo. Los dos árboles corresponden a las
dos posibles parentizaciones:
\begin<<19886>>tex2html_deferred<<19886>>\par\end<<19887>>tex2html_deferred<<19887>>
\begin<<17965>>center<<17965>>
if \begin<<19186>>tex2html_wrap_inline<<19186>>$E_1$\end<<19187>>tex2html_wrap_inline<<19187>>\space then (if \begin<<19188>>tex2html_wrap_inline<<19188>>$E_2$\end<<19189>>tex2html_wrap_inline<<19189>>\space then \begin<<19190>>tex2html_wrap_inline<<19190>>$S_1$\end<<19191>>tex2html_wrap_inline<<19191>>\space else \begin<<19192>>tex2html_wrap_inline<<19192>>$S_2$\end<<19193>>tex2html_wrap_inline<<19193>>)
\end<<17966>>center<<17966>>
\begin<<19888>>tex2html_deferred<<19888>>\par\end<<19889>>tex2html_deferred<<19889>>
Esta es la regla de prioridad usada en la mayor parte de los lenguajes:
un ``else'' casa con el ``if'' mas cercano. La otra posible parentización
es:
\begin<<19890>>tex2html_deferred<<19890>>\par\end<<19891>>tex2html_deferred<<19891>>
\begin<<17967>>center<<17967>>
if \begin<<19194>>tex2html_wrap_inline<<19194>>$E_1$\end<<19195>>tex2html_wrap_inline<<19195>>\space then (if \begin<<19196>>tex2html_wrap_inline<<19196>>$E_2$\end<<19197>>tex2html_wrap_inline<<19197>>\space then \begin<<19198>>tex2html_wrap_inline<<19198>>$S_1$\end<<19199>>tex2html_wrap_inline<<19199>>) else \begin<<19200>>tex2html_wrap_inline<<19200>>$S_2$\end<<19201>>tex2html_wrap_inline<<19201>>
\end<<17968>>center<<17968>>
\begin<<19892>>tex2html_deferred<<19892>>\par\end<<19893>>tex2html_deferred<<19893>>
Utilice los mecanismos de priorización proporcionados por <tex2html_verb_mark>2547<tex2html_verb_mark>
para resolver el conflicto shift-reduce generado. ¿Es correcta 
en este caso particular la conducta a la que da lugar la acción <tex2html_verb_mark>2548<tex2html_verb_mark>
por defecto?
\begin<<19894>>tex2html_deferred<<19894>>\par\end<<19895>>tex2html_deferred<<19895>>
\item <<17969>>\begin<<19896>>tex2html_deferred<<19896>>\bf\end<<19897>>tex2html_deferred<<19897>>Analizador Léxico<<17969>>
\begin<<19898>>tex2html_deferred<<19898>>\par\end<<19899>>tex2html_deferred<<19899>>
Además del tipo de terminal y su valor el analizador
léxico deberá devolver el número de línea.
El analizador léxico deberá aceptar comentarios C.
En la gramática, el terminal <tex2html_verb_mark>2549<tex2html_verb_mark> se refiere a 
caracteres entre comillas simples (por ejemplo <tex2html_verb_mark>2550<tex2html_verb_mark>).
\begin<<19900>>tex2html_deferred<<19900>>\par\end<<19901>>tex2html_deferred<<19901>>
Se aconseja que las palabras reservadas del lenguaje
no se traten con expresiones regulares específicas sino que se
capturen en el patrón de identificador <tex2html_verb_mark>2551<tex2html_verb_mark>. 
Se mantiene para ello un hash con las palabras reservadas 
que es inicializado al comienzo del programa. Cuando 
el analizador léxico encuentra un identificador
mira en primer lugar en dicho hash 
para ver si es una palabra reservada y,
si lo es, devuelve el terminal correspondiente.
En caso contrario se trata de un identificador.
\begin<<19902>>tex2html_deferred<<19902>>\par\end<<19903>>tex2html_deferred<<19903>>
\item <<17970>>\begin<<19904>>tex2html_deferred<<19904>>\bf\end<<19905>>tex2html_deferred<<19905>>Recuperación de Errores<<17970>>
\begin<<19906>>tex2html_deferred<<19906>>\par\end<<19907>>tex2html_deferred<<19907>>
Extienda la práctica 
con reglas para la recuperación de errores. 
Para las listas, siga los consejos 
dados en la sección \ref<<17971>>table:err<<17971>>.
En aquellos casos en los que la introducción de las reglas
de recuperación produzca ambiguedad, resuelva los conflictos.
\begin<<19908>>tex2html_deferred<<19908>>\par\end<<19909>>tex2html_deferred<<19909>>
\item <<17972>>\begin<<19910>>tex2html_deferred<<19910>>\bf\end<<19911>>tex2html_deferred<<19911>>Árbol de Análisis Abstracto<<17972>>
\begin<<19912>>tex2html_deferred<<19912>>\par\end<<19913>>tex2html_deferred<<19913>>
La semántica del lenguaje es similar a la del lenguaje C (por ejemplo,
las expresiones lógicas se tratan como expresiones enteras).
El analizador deberá producir un árbol sintáctico abstracto. Como se hizo para el
lenguaje Tutu introducido en el capítulo 
\ref<<17973>>chapter:introcomp<<17973>>, cada clase de nodo 
deberá corresponderse con una clase Perl. 
Por ejemplo, para una regla como 
\begin<<19914>>tex2html_deferred<<19914>>\par\end<<19915>>tex2html_deferred<<19915>>
\begin<<17974>>center<<17974>>
<tex2html_verb_mark>2552<tex2html_verb_mark>
\end<<17975>>center<<17975>>
\begin<<19916>>tex2html_deferred<<19916>>\par\end<<19917>>tex2html_deferred<<19917>>
la acción asociada sería algo parecido a 
\begin<<19918>>tex2html_deferred<<19918>>\par\end<<19919>>tex2html_deferred<<19919>>
\begin<<17976>>center<<17976>>
<tex2html_verb_mark>2553<tex2html_verb_mark>
\end<<17977>>center<<17977>>
\begin<<19920>>tex2html_deferred<<19920>>\par\end<<19921>>tex2html_deferred<<19921>>
donde usamos un array anónimo. Mejor aún es usar un hash anónimo:
\begin<<19922>>tex2html_deferred<<19922>>\par\end<<19923>>tex2html_deferred<<19923>>
\begin<<17978>>center<<17978>>
<tex2html_verb_mark>2554<tex2html_verb_mark>
\end<<17979>>center<<17979>>
\begin<<19924>>tex2html_deferred<<19924>>\par\end<<19925>>tex2html_deferred<<19925>>
Defina formalmente el arbol especificando la gramática árbol correspondiente a su diseño
(repase la sección \ref<<17980>>subsection:lenguajesarbol<<17980>>).
Introduzca en esta parte la tabla de símbolos.
La tabla de símbolos es, como en el compilador de Tutu, una lista 
de referencias a hashes conteniendo las tablas de símbolos locales a 
cada bloque.  En cada momento, la lista refleja el anidamiento de bloques 
actual. Es posible que, en la declaración 
de funciones, le interese crear un nuevo bloque en el que guardar los parámetros,
de manera que las variables globales queden a nivel 0, los parámetros 
de una función a nivel 1 y las variables locales de la función a nivel 2
o superior.
\end<<17981>>enumerate<<17981>>
\begin<<19926>>tex2html_deferred<<19926>>\par\end<<19927>>tex2html_deferred<<19927>>
\section<<18236>>La Gramática de <<17982>>\begin<<19928>>tex2html_deferred<<19928>>\tt\end<<19929>>tex2html_deferred<<19929>>yapp<<17982>> / <<17983>>\begin<<19930>>tex2html_deferred<<19930>>\tt\end<<19931>>tex2html_deferred<<19931>>yacc<<17983>><<18236>>
En esta sección veremos con mas detalle, la sintaxis de <tex2html_verb_mark>2555<tex2html_verb_mark>,
usando la propia notación <tex2html_verb_mark>2556<tex2html_verb_mark> para describir el lenguaje.
Un programa <tex2html_verb_mark>2557<tex2html_verb_mark> consta de tres partes:
la cabeza, el cuerpo y la cola. Cada una de las partes
va separada de las otras por el símbolo <tex2html_verb_mark>2559<tex2html_verb_mark> en una
línea aparte.
\begin<<19932>>tex2html_deferred<<19932>>\par\end<<19933>>tex2html_deferred<<19933>>
\begin<<17984>>tex2html_preform<<17984>><tex2html_verbatim_mark>verbatim6186#\end<<17985>>tex2html_preform<<17985>>
\begin<<19934>>tex2html_deferred<<19934>>\par\end<<19935>>tex2html_deferred<<19935>>
\subsection<<17986>>La Cabecera<<17986>>
En la cabecera se colocan las declaraciones de variables,
terminales, etc. 
\begin<<17987>>tex2html_preform<<17987>><tex2html_verbatim_mark>verbatim6187#\end<<17988>>tex2html_preform<<17988>>
\begin<<19936>>tex2html_deferred<<19936>>\par\end<<19937>>tex2html_deferred<<19937>>
El terminal  <<18450>>\begin<<19938>>tex2html_deferred<<19938>>\tt\end<<19939>>tex2html_deferred<<19939>>START<<18450>>  se corresponde con una declaración 
<tex2html_verb_mark>2561<tex2html_verb_mark> indicando cual es el símbolo de arranque de la gramática.
Por defecto, el símbolo de arranque es el primero de la gramática.
\begin<<19940>>tex2html_deferred<<19940>>\par\end<<19941>>tex2html_deferred<<19941>>
El terminal <tex2html_verb_mark>2562<tex2html_verb_mark> está por los terminales que indican
precedencia y asociatividad.
Esto se ve claro si se analiza el contenido del fichero 
<tex2html_verb_mark>2563<tex2html_verb_mark> (\pageref<<17990>>chapter:parseyp<<17990>>)
en el que se puede encontrar 
el código del analizador léxico del módulo 
<tex2html_verb_mark>2564<tex2html_verb_mark>.
El código dice:
\begin<<19942>>tex2html_deferred<<19942>>\par\end<<19943>>tex2html_deferred<<19943>>
\begin<<17991>>tex2html_preform<<17991>><tex2html_verbatim_mark>verbatim6188#\end<<17992>>tex2html_preform<<17992>>
La variable <tex2html_verb_mark>2565<tex2html_verb_mark> indica en que sección nos encontramos:
cabecera, cuerpo o cola. El terminal <tex2html_verb_mark>2566<tex2html_verb_mark> 
indica la presencia de una declaración <tex2html_verb_mark>2568<tex2html_verb_mark> en el fuente,
la cual cuando es seguida de un número indica el numero de
conflictos shift-reduce que cabe esperar. Use <tex2html_verb_mark>2569<tex2html_verb_mark>
si quiere silenciar las advertencias de <tex2html_verb_mark>2570<tex2html_verb_mark> sobre la presencia
de conflictos cuya resolución automática considere correcta.
\begin<<19944>>tex2html_deferred<<19944>>\par\end<<19945>>tex2html_deferred<<19945>>
\subsection<<18237>>La Cabecera: Diferencias entre <<17993>>\begin<<19946>>tex2html_deferred<<19946>>\tt\end<<19947>>tex2html_deferred<<19947>>yacc<<17993>> y <<17994>>\begin<<19948>>tex2html_deferred<<19948>>\tt\end<<19949>>tex2html_deferred<<19949>>yapp<<17994>><<18237>>
\label<<17995>>subsection:cabecerayaccyapp<<17995>>
Las declaraciones de tipo
correspondientes a <tex2html_verb_mark>2572<tex2html_verb_mark> y a las especificaciones de 
tipo entre símbolos menor mayor (<tex2html_verb_mark>2573<tex2html_verb_mark>) en declaraciones <tex2html_verb_mark>2574<tex2html_verb_mark> y 
<tex2html_verb_mark>2576<tex2html_verb_mark> no son usadas por <tex2html_verb_mark>2577<tex2html_verb_mark>. Estas declaraciones son
necesarias cuando el código de las acciones semánticas
se escribe en <tex2html_verb_mark>2578<tex2html_verb_mark> como es el caso de \index<<18453>><<18455>>\begin<<19950>>tex2html_deferred<<19950>>\tt\end<<19951>>tex2html_deferred<<19951>>yacc<<18455>><<18453>><<18454>>\begin<<19952>>tex2html_deferred<<19952>>\tt\end<<19953>>tex2html_deferred<<19953>>yacc<<18454>> y \index<<18458>><<18460>>\begin<<19954>>tex2html_deferred<<19954>>\tt\end<<19955>>tex2html_deferred<<19955>>bison<<18460>><<18458>><<18459>>\begin<<19956>>tex2html_deferred<<19956>>\tt\end<<19957>>tex2html_deferred<<19957>>bison<<18459>>.
Sigue un ejemplo de programa <tex2html_verb_mark>2579<tex2html_verb_mark>/<tex2html_verb_mark>2580<tex2html_verb_mark> que usa declaraciones <tex2html_verb_mark>2582<tex2html_verb_mark>
y de tipo para los atributos:
\begin<<19958>>tex2html_deferred<<19958>>\par\end<<19959>>tex2html_deferred<<19959>>
\begin<<17998>>tex2html_preform<<17998>><tex2html_verbatim_mark>verbatim6189#\end<<17999>>tex2html_preform<<17999>>
La declaración <tex2html_verb_mark>2584<tex2html_verb_mark> de la línea 8 indica que los atributos
son de dos tipos: enteros y punteros a caracteres. 
El nombre del campo es posteriormente usado en las 
declaraciones de las líneas 13-17 para indicar el tipo 
del atributo asociado con la variable o con el terminal.
Así, la declaración de la línea 13 indica 
que los terminales <tex2html_verb_mark>2585<tex2html_verb_mark> e <tex2html_verb_mark>2586<tex2html_verb_mark>
son de tipo entero, mientras que la declaración de la línea 16 nos
dice que el terminal <tex2html_verb_mark>2587<tex2html_verb_mark> es de tipo cadena.
\begin<<18000>>tex2html_preform<<18000>><tex2html_verbatim_mark>verbatim6190#\end<<18001>>tex2html_preform<<18001>>
La información proveída sobre los tipos permite a <tex2html_verb_mark>2588<tex2html_verb_mark> 
introducir automáticamente en el código <tex2html_verb_mark>2589<tex2html_verb_mark> producido 
los \emph<<18002>>typecasting<<18002>> o ahormados
para las asignaciones de las líneas 30-31 y 35-36. Obsérve que
en <tex2html_verb_mark>2590<tex2html_verb_mark> el atributo de la variable en la parte izquierda
se denota por <tex2html_verb_mark>2591<tex2html_verb_mark>.
\begin<<19960>>tex2html_deferred<<19960>>\par\end<<19961>>tex2html_deferred<<19961>>
Otra diferencia entre <tex2html_verb_mark>2592<tex2html_verb_mark> y <tex2html_verb_mark>2593<tex2html_verb_mark> es que en <tex2html_verb_mark>2594<tex2html_verb_mark> los 
atributos de la parte derecha no constituyen un vector, denotándose
por <tex2html_verb_mark>2595<tex2html_verb_mark>, <tex2html_verb_mark>2596<tex2html_verb_mark>, <tex2html_verb_mark>2597<tex2html_verb_mark> \ldots 
\begin<<19962>>tex2html_deferred<<19962>>\par\end<<19963>>tex2html_deferred<<19963>>
En ocasiones <tex2html_verb_mark>2598<tex2html_verb_mark> no puede determinar el tipo de un atributo. 
En particular cuando se habla del atributo asociado con una acción
intermedia, ya que esta no tiene variable sintáctica asociada 
explícitamente o bien cuando se habla de los atributos
de símbolos que están a la izquierda de la reducción actual
(véase la sección \ref<<18003>>section:heredados<<18003>>). Los atributos de símbolos 
a la izquierda de la producción actual se denotan en <tex2html_verb_mark>2599<tex2html_verb_mark> por números 
no positivos <tex2html_verb_mark>2600<tex2html_verb_mark>, <tex2html_verb_mark>2601<tex2html_verb_mark>, <tex2html_verb_mark>2602<tex2html_verb_mark> \ldots. 
\begin<<19964>>tex2html_deferred<<19964>>\par\end<<19965>>tex2html_deferred<<19965>>
En estos casos 
el programador deberá especificar explícitamente el tipo del 
atributo usando la notación <tex2html_verb_mark>2603<tex2html_verb_mark>. Donde <tex2html_verb_mark>2604<tex2html_verb_mark> es 
uno de los campos de la <tex2html_verb_mark>2605<tex2html_verb_mark> y <tex2html_verb_mark>2606<tex2html_verb_mark> es el numeral 
del símbolo correspondiente:
\begin<<19966>>tex2html_deferred<<19966>>\par\end<<19967>>tex2html_deferred<<19967>>
\begin<<18004>>tex2html_preform<<18004>><tex2html_verbatim_mark>verbatim6191#\end<<18005>>tex2html_preform<<18005>>
\begin<<19968>>tex2html_deferred<<19968>>\par\end<<19969>>tex2html_deferred<<19969>>
\subsection<<18006>>El Cuerpo<<18006>>
\label<<18007>>subsection:elcuerpo<<18007>>
El cuerpo de un programa <tex2html_verb_mark>2607<tex2html_verb_mark> contiene la gramática
y las acciones 
\begin<<18008>>tex2html_preform<<18008>><tex2html_verbatim_mark>verbatim6192#\end<<18009>>tex2html_preform<<18009>>
Las acciones semánticas (variable sintáctica <tex2html_verb_mark>2608<tex2html_verb_mark> y terminal <tex2html_verb_mark>2609<tex2html_verb_mark>)
se ejecutan siempre que ocurre una reducción por una regla y, en general, devuelven 
un valor semántico. El código de la acción se copia verbatim
en el analizador. La estrategia usada por el analizador léxico
es contar las llaves abrir y cerrar en 
el texto. Véase el correspondiente fragmento del analizador
léxico:
\begin<<18010>>tex2html_preform<<18010>><tex2html_verbatim_mark>verbatim6193#\end<<18011>>tex2html_preform<<18011>>
Las llaves dentro de cadenas y comentarios no son significativas en la cuenta.
El problema es que el reconocimiento de cadenas en Perl es mas difícil que
en otros lenguajes: existe toda una variedad de formas de denotar una cadena.
Por tanto, si el programador usuario de <tex2html_verb_mark>2610<tex2html_verb_mark> necesita 
escribir una llave dentro de una cadena de doble comilla, deberá escaparla.
Si la cadena es de simple comilla escaparla no es solución, pues 
aparecería el símbolo de escape en la cadena. En ese caso se deberá añadir 
un comentario con la correspondiente falsa llave. Siguen
algunos ejemplos tomadados de la documentación de <tex2html_verb_mark>2611<tex2html_verb_mark>
\begin<<18012>>tex2html_preform<<18012>><tex2html_verbatim_mark>verbatim6194#\end<<18013>>tex2html_preform<<18013>>
\begin<<19970>>tex2html_deferred<<19970>>\par\end<<19971>>tex2html_deferred<<19971>>
\begin<<18304>>theorem_type<<18304>>[exercise][exercise][section][][][]
Genere programas de prueba <tex2html_verb_mark>2612<tex2html_verb_mark> con cadenas que produzcan confusión
en el analizador y observe el comportamiento. Pruébelas en las diferentes
secciones en las que puede ocurrir código: en la cabecera, en el cuerpo 
y en la cola.\end<<18305>>theorem_type<<18305>>
\begin<<19972>>tex2html_deferred<<19972>>\par\end<<19973>>tex2html_deferred<<19973>>
\subsection<<18240>>La Cola: Diferencias entre <<18016>>\begin<<19974>>tex2html_deferred<<19974>>\tt\end<<19975>>tex2html_deferred<<19975>>yacc<<18016>> y <<18017>>\begin<<19976>>tex2html_deferred<<19976>>\tt\end<<19977>>tex2html_deferred<<19977>>yapp<<18017>><<18240>>
\label<<18018>>subsection:colayaccyapp<<18018>>
La cola de un program <tex2html_verb_mark>2613<tex2html_verb_mark> contiene las rutinas de soporte.
\begin<<18019>>tex2html_preform<<18019>><tex2html_verbatim_mark>verbatim6195#\end<<18020>>tex2html_preform<<18020>>
el terminal <tex2html_verb_mark>2614<tex2html_verb_mark> al igual que los terminales
<tex2html_verb_mark>2615<tex2html_verb_mark> y <tex2html_verb_mark>2616<tex2html_verb_mark> indican que en ese punto se puede encontrar 
código Perl. La detección de <tex2html_verb_mark>2617<tex2html_verb_mark> y <tex2html_verb_mark>2618<tex2html_verb_mark> son mas sencillas
que las de <tex2html_verb_mark>2619<tex2html_verb_mark>.
\begin<<19978>>tex2html_deferred<<19978>>\par\end<<19979>>tex2html_deferred<<19979>>
La cola de un programa <tex2html_verb_mark>2620<tex2html_verb_mark> es similar.
Para el programa <tex2html_verb_mark>2621<tex2html_verb_mark> cuya cabecera y cuerpo
se mostraron en la sección 
\ref<<18021>>subsection:cabecerayaccyapp<<18021>>
la cola es:
\begin<<18022>>tex2html_preform<<18022>><tex2html_verbatim_mark>verbatim6196#\end<<18023>>tex2html_preform<<18023>>
\begin<<19980>>tex2html_deferred<<19980>>\par\end<<19981>>tex2html_deferred<<19981>>
La declaración del manejador de fichero <tex2html_verb_mark>2622<tex2html_verb_mark> en la línea 14 
referencia el archivo 
de entrada para el analizador. La variable (comentada, línea 7) 
<tex2html_verb_mark>2623<tex2html_verb_mark> controla la información para la depuración de la gramática.
Para que sea realmente efectiva, el programa deberá además compilarse
definiendo la macro <tex2html_verb_mark>2624<tex2html_verb_mark>. Sigue un ejemplo
de <tex2html_verb_mark>2625<tex2html_verb_mark>:
\begin<<18024>>tex2html_preform<<18024>><tex2html_verbatim_mark>verbatim6197#\end<<18025>>tex2html_preform<<18025>>
\begin<<19982>>tex2html_deferred<<19982>>\par\end<<19983>>tex2html_deferred<<19983>>
Al compilar tenemos:
\begin<<18026>>tex2html_preform<<18026>><tex2html_verbatim_mark>verbatim6198#\end<<18027>>tex2html_preform<<18027>>
\begin<<19984>>tex2html_deferred<<19984>>\par\end<<19985>>tex2html_deferred<<19985>>
\subsection<<18241>>El Análisis Léxico en <<18028>>\begin<<19986>>tex2html_deferred<<19986>>\tt\end<<19987>>tex2html_deferred<<19987>>yacc<<18028>>: <<18029>>\begin<<19988>>tex2html_deferred<<19988>>\tt\end<<19989>>tex2html_deferred<<19989>>flex<<18029>><<18241>>
\label<<18030>>subsection:flex<<18030>>
El analizador léxico para <tex2html_verb_mark>2626<tex2html_verb_mark> desarrollado
en las secciones anteriores ha sido escrito
usando la variante \index<<18463>><<18465>>\begin<<19990>>tex2html_deferred<<19990>>\tt\end<<19991>>tex2html_deferred<<19991>>flex<<18465>><<18463>><<18464>>\begin<<19992>>tex2html_deferred<<19992>>\tt\end<<19993>>tex2html_deferred<<19993>>flex<<18464>> del lenguaje \index<<18468>><<18470>>\begin<<19994>>tex2html_deferred<<19994>>\tt\end<<19995>>tex2html_deferred<<19995>>LEX<<18470>><<18468>><<18469>>\begin<<19996>>tex2html_deferred<<19996>>\tt\end<<19997>>tex2html_deferred<<19997>>LEX<<18469>>. Un programa
<tex2html_verb_mark>2627<tex2html_verb_mark> tiene una estructura similar a la 
de un program <tex2html_verb_mark>2628<tex2html_verb_mark> con tres partes: cabeza, cuerpo
y cola separados por <tex2html_verb_mark>2630<tex2html_verb_mark>. Veamos como ejemplo de manejo de
<tex2html_verb_mark>2631<tex2html_verb_mark>, los contenidos
del fichero flex <tex2html_verb_mark>2632<tex2html_verb_mark> utilizado en las secciones
anteriores:
\begin<<19998>>tex2html_deferred<<19998>>\par\end<<19999>>tex2html_deferred<<19999>>
\begin<<18033>>tex2html_preform<<18033>><tex2html_verbatim_mark>verbatim6199#\end<<18034>>tex2html_preform<<18034>>
La cabeza contiene declaraciones <tex2html_verb_mark>2633<tex2html_verb_mark> asi como definiciones
regulares. El fichero <tex2html_verb_mark>2634<tex2html_verb_mark> que es incluído en la línea
3, fué generado 
por <tex2html_verb_mark>2635<tex2html_verb_mark> y contiene, entre otras cosas,
la información recolectada
por <tex2html_verb_mark>2636<tex2html_verb_mark> sobre los tipos de los atributos 
(declaración <tex2html_verb_mark>2638<tex2html_verb_mark>) y la enumeración de los terminales.
Es, por tanto, necesario que la compilación con <tex2html_verb_mark>2639<tex2html_verb_mark>
preceda a la compilación con <tex2html_verb_mark>2640<tex2html_verb_mark>.
La información en <tex2html_verb_mark>2641<tex2html_verb_mark> es usada por el analizador léxico
para ``sincronizarse'' con el analizador sintáctico.
Se definen en las líneas 5 y 6 las 
macros para el reconocimiento de identificadores (<tex2html_verb_mark>2642<tex2html_verb_mark>)
y blancos (<tex2html_verb_mark>2643<tex2html_verb_mark>). Estas macros son llamadas en el cuerpo
en las líneas 12 y 13. 
La estructura del cuerpo
consiste en parejas formadas por una definición
regular seguidas de una acción.
La variable <tex2html_verb_mark>2644<tex2html_verb_mark> contiene el atributo asociado
con el terminal actual. Puesto que el token <tex2html_verb_mark>2645<tex2html_verb_mark>
fué declarado del tipo cadena (véase \ref<<18035>>subsection:cabecerayaccyapp<<18035>>), 
se usa el correspondiente
nombre de campo <tex2html_verb_mark>2646<tex2html_verb_mark>.
La cadena que acaba de casar queda guardada en la variable
<tex2html_verb_mark>2647<tex2html_verb_mark>, y su longitud queda en la
variable entera global <tex2html_verb_mark>2648<tex2html_verb_mark>.
\begin<<20000>>tex2html_deferred<<20000>>\par\end<<20001>>tex2html_deferred<<20001>>
Una vez compilado con <tex2html_verb_mark>2649<tex2html_verb_mark> el fuente,
obtenemos un fichero denominado <tex2html_verb_mark>2650<tex2html_verb_mark>. 
Este fichero contiene la rutina <tex2html_verb_mark>2651<tex2html_verb_mark> que realiza el an\'alisis
l\'exico del lenguaje descrito. 
\begin<<20002>>tex2html_deferred<<20002>>\par\end<<20003>>tex2html_deferred<<20003>>
La funci\'on <tex2html_verb_mark>2652<tex2html_verb_mark> analiza las entradas, buscando la
secuencia mas larga que casa con alguna de las expresiones regulares
y ejecuta la correspondiente acci\'on.
Si no se encuentra ningun  emparejamiento se ejecuta la regla ``por defecto'', que es:
\begin<<20004>>tex2html_deferred<<20004>>\par\end<<20005>>tex2html_deferred<<20005>>
\begin<<18036>>center<<18036>>
<tex2html_verb_mark>2654<tex2html_verb_mark>
\end<<18037>>center<<18037>>
\begin<<20006>>tex2html_deferred<<20006>>\par\end<<20007>>tex2html_deferred<<20007>>
Si encuentran dos expresiones regulares con las que la cadena mas larga
casa, elige la que figura primera en el programa <tex2html_verb_mark>2655<tex2html_verb_mark>.
\begin<<20008>>tex2html_deferred<<20008>>\par\end<<20009>>tex2html_deferred<<20009>>
Una vez que se ha ejecutado la correspondiente acci\'on, <tex2html_verb_mark>2656<tex2html_verb_mark>
contin\'ua con el resto de la entrada, buscando por subsiguientes
emparejamientos. Asi continúa hasta encontrar un final de fichero
en cuyo caso termina, retornando un cero o bien hasta que una de las
acciones explicitamente ejecuta una sentencia <tex2html_verb_mark>2657<tex2html_verb_mark>.
\begin<<20010>>tex2html_deferred<<20010>>\par\end<<20011>>tex2html_deferred<<20011>>
Cuando el analizador l\'exico alcanza el final del fichero, el
comportamiento en las subsiguientes llamadas a <tex2html_verb_mark>2658<tex2html_verb_mark>
resulta indefinido.  En el momento en que  <tex2html_verb_mark>2659<tex2html_verb_mark>
alcanza el final del fichero llama a la funci\'on <tex2html_verb_mark>2660<tex2html_verb_mark>, la cual retorna un
valor de 0 o 1 seg\'un haya mas entrada o no. Si el valor es 0,
la funci\'on <tex2html_verb_mark>2661<tex2html_verb_mark> asume que la propia <tex2html_verb_mark>2662<tex2html_verb_mark>
se ha encargado de abrir el nuevo fichero y asignarselo
a <tex2html_verb_mark>2663<tex2html_verb_mark>.  
\begin<<20012>>tex2html_deferred<<20012>>\par\end<<20013>>tex2html_deferred<<20013>>
\subsection<<18475>>Práctica: Uso de <<18477>>\begin<<20014>>tex2html_deferred<<20014>>\tt\end<<20015>>tex2html_deferred<<20015>>Yacc<<18477>> y <<18478>>\begin<<20016>>tex2html_deferred<<20016>>\tt\end<<20017>>tex2html_deferred<<20017>>Lex<<18478>><<18475>>
   \index<<18476>>Práctica!Uso de <<18479>>\begin<<20018>>tex2html_deferred<<20018>>\tt\end<<20019>>tex2html_deferred<<20019>>Yacc<<18479>> y <<18480>>\begin<<20020>>tex2html_deferred<<20020>>\tt\end<<20021>>tex2html_deferred<<20021>>Lex<<18480>><<18476>>
  
Use <tex2html_verb_mark>2664<tex2html_verb_mark> y <tex2html_verb_mark>2665<tex2html_verb_mark> para 
completar los analizadores sintáctico y léxico descritos en las secciones
\ref<<18040>>subsection:cabecerayaccyapp<<18040>>,
\ref<<18041>>subsection:colayaccyapp<<18041>> y
\ref<<18042>>subsection:flex<<18042>>. 
La gramática en cuestión es similar a la descrita
en la sección \ref<<18043>>section:heredados<<18043>>.
Usando la variable <tex2html_verb_mark>2666<tex2html_verb_mark> y la macro <tex2html_verb_mark>2667<tex2html_verb_mark>
analize el comportamiento para la entrada
<tex2html_verb_mark>2668<tex2html_verb_mark>. 
\begin<<20022>>tex2html_deferred<<20022>>\par\end<<20023>>tex2html_deferred<<20023>>
\section<<18245>>El Analizador Ascendente  <<18044>>\begin<<20024>>tex2html_deferred<<20024>>\tt\end<<20025>>tex2html_deferred<<20025>>Parse::Yapp<<18044>><<18245>>
\label<<18045>>section:analizadorLR<<18045>>
\begin<<20026>>tex2html_deferred<<20026>>\par\end<<20027>>tex2html_deferred<<20027>>
El program <tex2html_verb_mark>2669<tex2html_verb_mark> es un traductor y, por tanto, constituye
un ejemplo de como escribir un traductor. El lenguaje fuente
es el lenguaje <tex2html_verb_mark>2670<tex2html_verb_mark> y el lenguaje objeto es <tex2html_verb_mark>2671<tex2html_verb_mark>.
Como es habitual en muchos lenguajes, el lenguaje objeto se ve 
;SPMquot;expandido;SPMquot; con un conjunto de funciones de soporte. En el caso de 
<tex2html_verb_mark>2672<tex2html_verb_mark> estas funciones de soporte, son en 
realidad métodos y están en el módulo <tex2html_verb_mark>2673<tex2html_verb_mark>.
Cualquier módulo generado por <tex2html_verb_mark>2674<tex2html_verb_mark> hereda de dicho módulo
(véase por ejemplo, el módulo generado para nuestro ejemplo de la calculadora,
en la sección \ref<<18046>>section:tablas<<18046>>).
\begin<<20028>>tex2html_deferred<<20028>>\par\end<<20029>>tex2html_deferred<<20029>>
Como se ve en la figura \ref<<18047>>fig:yappinheritance<<18047>>, 
los módulos generados por <tex2html_verb_mark>2675<tex2html_verb_mark>
heredan y usan la clase <tex2html_verb_mark>2676<tex2html_verb_mark>
la  cual contiene el analizador sintáctico LR genérico.
Este módulo contiene los métodos de soporte visibles
al usuario <tex2html_verb_mark>2677<tex2html_verb_mark>, <tex2html_verb_mark>2678<tex2html_verb_mark>, <tex2html_verb_mark>2679<tex2html_verb_mark>, <tex2html_verb_mark>2680<tex2html_verb_mark>,
etc.
\begin<<20030>>tex2html_deferred<<20030>>\par\end<<20031>>tex2html_deferred<<20031>>
La figura \ref<<18048>>fig:yappinheritance<<18048>> muestra además el 
resto de los módulos
que conforman el ``compilador'' <tex2html_verb_mark>2681<tex2html_verb_mark>.
La herencia se ha representado mediante flechas contínuas.
Las flechas punteadas indican una relación de uso entre los módulos.
El guión <tex2html_verb_mark>2682<tex2html_verb_mark> es un programa aparte que es
usado para producir el correspondiente
módulo desde el fichero conteniendo la gramática.
\begin<<20032>>tex2html_deferred<<20032>>\par\end<<20033>>tex2html_deferred<<20033>>
\begin<<18049>>figure<<18049>>[htb]
\begin<<20034>>tex2html_deferred<<20034>>\caption<<18246>>Esquema de herencia de <<18050>>\tt Parse::Yapp<<18050>>. 
Las flechas contínuas indican herencia, las punteadas uso.
La clase <<18051>>\tt Calc<<18051>> es implementada en el módulo generado por <<18052>>\tt yapp<<18052>><<18246>>\end<<20035>>tex2html_deferred<<20035>>
\label<<18053>>fig:yappinheritance<<18053>>
\end<<18054>>figure<<18054>>
\begin<<20036>>tex2html_deferred<<20036>>\par\end<<20037>>tex2html_deferred<<20037>>
(Para ver el contenido de los módulos, descarge <tex2html_verb_mark>2683<tex2html_verb_mark> desde CPAN:
<tex2html_verbatim_mark>rawhtml6200#
o bien desde uno de nuestros servidores locales; en 
el mismo directorio en que se guarda la
versión HTML de estos apuntes encontrará una copia de 
\htmladdnormallink<<18055>>Parse-Yapp-1.05.tar.gz<<18055>><<18056>>Parse-Yapp-1.05.tar.gz<<18056>>).
La versión a la que se refiere este capítulo es la 1.05.
\begin<<20038>>tex2html_deferred<<20038>>\par\end<<20039>>tex2html_deferred<<20039>>
El módulo <tex2html_verb_mark>2684<tex2html_verb_mark> se limita a contener la documentación
y descansa toda la tarea de análisis en los otros módulos.
El módulo <tex2html_verb_mark>2685<tex2html_verb_mark> contiene los métodos
<tex2html_verb_mark>2686<tex2html_verb_mark> y <tex2html_verb_mark>2687<tex2html_verb_mark> los cuales se encargan de escribir
el analizador: partiendo de un esqueleto genérico rellenan 
las partes específicas a partir de la información computada
por los otros módulos. 
\begin<<20040>>tex2html_deferred<<20040>>\par\end<<20041>>tex2html_deferred<<20041>>
El módulo <tex2html_verb_mark>2688<tex2html_verb_mark>
analiza las opciones de entrada. El módulo <tex2html_verb_mark>2689<tex2html_verb_mark>
calcula las tablas de análisis LALR. Por último el módulo
<tex2html_verb_mark>2690<tex2html_verb_mark> contiene varios métodos de soporte 
para el tratamiento de la gramática.
\begin<<20042>>tex2html_deferred<<20042>>\par\end<<20043>>tex2html_deferred<<20043>>
El modulo <<18057>>\begin<<20044>>tex2html_deferred<<20044>>\tt\end<<20045>>tex2html_deferred<<20045>>Parse::Yapp::Driver<<18057>> contiene el método
<tex2html_verb_mark>2691<tex2html_verb_mark> encargado del análisis.
En realidad, el método <tex2html_verb_mark>2692<tex2html_verb_mark> delega 
en el método privado <tex2html_verb_mark>2693<tex2html_verb_mark> la tarea de análisis.
Esta es la estructura del analizador genérico usado por <tex2html_verb_mark>2694<tex2html_verb_mark>.
Léalo con cuidado y compare con la estructura explicada en la
sección \ref<<18058>>section:algoritmoLR<<18058>>.
\begin<<20046>>tex2html_deferred<<20046>>\par\end<<20047>>tex2html_deferred<<20047>>
\begin<<18059>>tex2html_preform<<18059>><tex2html_verbatim_mark>verbatim6201#\end<<18060>>tex2html_preform<<18060>>
La componente 0 de <tex2html_verb_mark>2695<tex2html_verb_mark> es el estado, la componente
1 es el atributo.
\begin<<18061>>tex2html_preform<<18061>><tex2html_verbatim_mark>verbatim6202#\end<<18062>>tex2html_preform<<18062>>
<tex2html_verb_mark>2696<tex2html_verb_mark> es una referencia a un vector. Cada entrada 
<tex2html_verb_mark>2697<tex2html_verb_mark> es una referencia a un hash que 
contiene dos claves. La clave <tex2html_verb_mark>2698<tex2html_verb_mark> contiene
las acciones para ese estado. La clave <tex2html_verb_mark>2699<tex2html_verb_mark>
contiene los saltos correspondientes a ese estado.
\begin<<18063>>tex2html_preform<<18063>><tex2html_verbatim_mark>verbatim6203#\end<<18064>>tex2html_preform<<18064>>
La entrada <tex2html_verb_mark>2700<tex2html_verb_mark> de una acción contiene la acción 
a ejecutar por defecto.
\begin<<18065>>tex2html_preform<<18065>><tex2html_verbatim_mark>verbatim6204#\end<<18066>>tex2html_preform<<18066>>
La línea 35 esta relacionada con la recuperación de errores.
Cuando <tex2html_verb_mark>2701<tex2html_verb_mark> ha podido desplazar varios terminales
sin que se produzca error considerará que se ha recuperado 
con éxito del último error.
\begin<<18067>>tex2html_preform<<18067>><tex2html_verbatim_mark>verbatim6205#\end<<18068>>tex2html_preform<<18068>>
A menos que se trate del final de fichero, se reinicializa
la pareja <tex2html_verb_mark>2702<tex2html_verb_mark> y se repite el bucle
de análisis.
Si <tex2html_verb_mark>2703<tex2html_verb_mark> es negativo se trata de una reducción
y la entrada <tex2html_verb_mark>2704<tex2html_verb_mark> es una referencia
a un vector con tres elementos: la variable sintáctica,
la longitud de la parte derecha y el código asociado:
\begin<<18069>>tex2html_preform<<18069>><tex2html_verbatim_mark>verbatim6206#\end<<18070>>tex2html_preform<<18070>>
Si <tex2html_verb_mark>2705<tex2html_verb_mark> es cero indica una acción de aceptación.
El método <tex2html_verb_mark>2706<tex2html_verb_mark> se encuentra en <tex2html_verb_mark>2707<tex2html_verb_mark>.
Simplemente contiene:
\begin<<20048>>tex2html_deferred<<20048>>\par\end<<20049>>tex2html_deferred<<20049>>
\begin<<18071>>tex2html_preform<<18071>><tex2html_verbatim_mark>verbatim6207#\end<<18072>>tex2html_preform<<18072>>
\begin<<20050>>tex2html_deferred<<20050>>\par\end<<20051>>tex2html_deferred<<20051>>
Esta entrada será comprobada al final de la iteración para comprobar
la condición de aceptación (a través de la 
variable <tex2html_verb_mark>2708<tex2html_verb_mark>, la cuál es una referencia).
\begin<<20052>>tex2html_deferred<<20052>>\par\end<<20053>>tex2html_deferred<<20053>>
\begin<<18073>>tex2html_preform<<18073>><tex2html_verbatim_mark>verbatim6208#\end<<18074>>tex2html_preform<<18074>>
En la línea 52 obtenemos el primer carácter en el nombre de la variable.
Las acciones intermedias en <tex2html_verb_mark>2709<tex2html_verb_mark> producen una variable
auxiliar que comienza por <tex2html_verb_mark>2710<tex2html_verb_mark> y casa con el patrón
especificado en la línea 54. Obsérvese que el número después
del guión contiene la posición relativa en la regla 
de la acción intermedia.
\begin<<18075>>tex2html_preform<<18075>><tex2html_verbatim_mark>verbatim6209#\end<<18076>>tex2html_preform<<18076>>
El array <tex2html_verb_mark>2711<tex2html_verb_mark> se inicia a la lista vacía 
si <tex2html_verb_mark>2712<tex2html_verb_mark> es nulo. En caso contrario
contiene la lista de los atributos de los últimos <tex2html_verb_mark>2713<tex2html_verb_mark>
elementos referenciados en la pila.
Si la regla es intermedia estamos haciendo referencia
a los atributos de los símbolos a su izquierda.
\begin<<18077>>tex2html_preform<<18077>><tex2html_verbatim_mark>verbatim6210#\end<<18078>>tex2html_preform<<18078>>
Es en este punto que ocurre la ejecución de la acción.
La subrutina referenciada por <tex2html_verb_mark>2714<tex2html_verb_mark> es llamada
con primer argumento la referencia al objeto analizador <tex2html_verb_mark>2715<tex2html_verb_mark>
y como argumentos los atributos que se han computado
previamente en <tex2html_verb_mark>2716<tex2html_verb_mark>. Si no existe tal código se devuelve 
el atributo del primer elemento, si es que existe un tal primer
elemento. 
\begin<<20054>>tex2html_deferred<<20054>>\par\end<<20055>>tex2html_deferred<<20055>>
El valor retornado por la subrutina/acción asociada es guardado en 
<tex2html_verb_mark>2717<tex2html_verb_mark>.
\begin<<20056>>tex2html_deferred<<20056>>\par\end<<20057>>tex2html_deferred<<20057>>
\begin<<18079>>tex2html_preform<<18079>><tex2html_verbatim_mark>verbatim6211#\end<<18080>>tex2html_preform<<18080>>
La funci\'on <tex2html_verb_mark>2718<tex2html_verb_mark> toma en general cuatro argumentos:
el array a modificar, el \'<<18081>>\i<<18081>>ndice en el cual es modificado,
el n\'umero de elementos a suprimir y la lista de elementos
extra a insertar. Aquí, la llamada a <tex2html_verb_mark>2719<tex2html_verb_mark> cambia los elementos de
<tex2html_verb_mark>2720<tex2html_verb_mark> a partir del índice <tex2html_verb_mark>2721<tex2html_verb_mark>.
El número de elementos a suprimir es <tex2html_verb_mark>2722<tex2html_verb_mark>.  
A continuación se comprueba si hay que terminar, bien 
porque se ha llegado al estado de aceptación (<tex2html_verb_mark>2723<tex2html_verb_mark>)
o porque ha habido un error fatal:
\begin<<18082>>tex2html_preform<<18082>><tex2html_verbatim_mark>verbatim6212#\end<<18083>>tex2html_preform<<18083>>
Si las cosas van bien, se empuja en la cima de la pila el estado
resultante de transitar desde el estado en la cima con la variable
sintáctica en el lado izquierdo:
\begin<<18084>>tex2html_preform<<18084>><tex2html_verbatim_mark>verbatim6213#\end<<18085>>tex2html_preform<<18085>>
La expresión <tex2html_verb_mark>2724<tex2html_verb_mark> es una referencia a un hash cuya
clave <tex2html_verb_mark>2725<tex2html_verb_mark> contiene una referencia a un hash conteniendo la 
tabla de transiciones del éstado en la cima de la pila (<tex2html_verb_mark>2726<tex2html_verb_mark>).
La entrada de clave <tex2html_verb_mark>2727<tex2html_verb_mark> contiene el estado al que se transita al ver la
variable sintáctica de la izquierda de la regla de producción. El atributo
asociado es el devuelto por la acción: <tex2html_verb_mark>2728<tex2html_verb_mark>.
\begin<<18086>>tex2html_preform<<18086>><tex2html_verbatim_mark>verbatim6214#\end<<18087>>tex2html_preform<<18087>>
\ldots<<18088>><<18088>> y el bucle <tex2html_verb_mark>2729<tex2html_verb_mark> de la línea 15 continúa.  
Compare este código con el seudo-código introducido
en la sección \ref<<18089>>section:algoritmoLR<<18089>>.
\begin<<20058>>tex2html_deferred<<20058>>\par\end<<20059>>tex2html_deferred<<20059>>
\section<<18247>>La Estructura de Datos Generada por <<18090>>\begin<<20060>>tex2html_deferred<<20060>>\tt\end<<20061>>tex2html_deferred<<20061>>YappParse.yp<<18090>><<18247>>
\begin<<20062>>tex2html_deferred<<20062>>\par\end<<20063>>tex2html_deferred<<20063>>
El fichero <tex2html_verb_mark>2730<tex2html_verb_mark>.
contiene la gramática <tex2html_verb_mark>2731<tex2html_verb_mark> del lenguaje
<tex2html_verb_mark>2732<tex2html_verb_mark>\begin<<20064>>tex2html_deferred<<20064>>\footnote<<18248>>La versión a la que se refiere esta sección es la 1.05
(\htmladdnormallink<<18091>>Parse-Yapp-1.05.tar.gz<<18091>><<18092>>Parse-Yapp-1.05.tar.gz<<18092>>)<<18248>>\end<<20065>>tex2html_deferred<<20065>>
. 
Además de las dos rutinas de soporte típicas,
la de tratamiento de errores <tex2html_verb_mark>2733<tex2html_verb_mark> y la
de análisis léxico <tex2html_verb_mark>2734<tex2html_verb_mark>, el fichero
contiene una subrutina para el manejo de las 
reglas <tex2html_verb_mark>2735<tex2html_verb_mark> y otra rutina <tex2html_verb_mark>2736<tex2html_verb_mark> la cuál
 actúa como \emph<<18093>>wrapper<<18093>> o filtro sobre el analizador
<tex2html_verb_mark>2737<tex2html_verb_mark>.
\begin<<20066>>tex2html_deferred<<20066>>\par\end<<20067>>tex2html_deferred<<20067>>
Durante el análisis sintáctico 
de un programa <tex2html_verb_mark>2738<tex2html_verb_mark> se construye una estructura de 
datos para la posterior manipulación y tratamiento de 
la gramática.  
Como ejemplo usaremosla gramática:
\begin<<18094>>tex2html_preform<<18094>><tex2html_verbatim_mark>verbatim6215#\end<<18095>>tex2html_preform<<18095>>
Para construir la estructura podemos usar la siguiente subrutina:
\begin<<18096>>tex2html_preform<<18096>><tex2html_verbatim_mark>verbatim6216#\end<<18097>>tex2html_preform<<18097>>
La llamada a <tex2html_verb_mark>2739<tex2html_verb_mark> produce la siguiente estructura de datos:
\begin<<18098>>tex2html_preform<<18098>><tex2html_verbatim_mark>verbatim6217#\end<<18099>>tex2html_preform<<18099>>
\begin<<20068>>tex2html_deferred<<20068>>\par\end<<20069>>tex2html_deferred<<20069>>
Las componentes del hash que aparece
arriba se corresponden
con diversas variables usadas por <tex2html_verb_mark>2740<tex2html_verb_mark> durante el análisis. La correspondencia
se establece dentro  del método <tex2html_verb_mark>2741<tex2html_verb_mark> cuando se hace la asignación:
\begin<<20070>>tex2html_deferred<<20070>>\par\end<<20071>>tex2html_deferred<<20071>>
\begin<<18100>>tex2html_preform<<18100>><tex2html_verbatim_mark>verbatim6218#\end<<18101>>tex2html_preform<<18101>>
esta asignación es la que crea el hash.
Las variables con identificadores en minúsculas son usadas 
en el analizador. Son visibles en todo el fichero ya que,
aunque declaradas léxicas, su declaración se encuentra 
en la cabecera del analizador:
\begin<<18102>>tex2html_preform<<18102>><tex2html_verbatim_mark>verbatim6219#\end<<18103>>tex2html_preform<<18103>>
\begin<<20072>>tex2html_deferred<<20072>>\par\end<<20073>>tex2html_deferred<<20073>>
\section<<18481>>Práctica:  El Análisis de las Acciones<<18481>>
   \index<<18482>>Práctica! El Análisis de las Acciones<<18482>>
  
Modifique el código de <tex2html_verb_mark>2742<tex2html_verb_mark> para que el análisis
léxico de las secciones de código (<tex2html_verb_mark>2743<tex2html_verb_mark>, <tex2html_verb_mark>2744<tex2html_verb_mark> y <tex2html_verb_mark>2745<tex2html_verb_mark>)
se haga a través de las correspondientes rutinas proveida como parámetros 
para el análisis por el usuario. La idea es ofrecer un primer paso
que facilite la generación de analizadores en diferentes 
lenguajes <tex2html_verb_mark>2746<tex2html_verb_mark>, <tex2html_verb_mark>2747<tex2html_verb_mark>, etc.
\begin<<20074>>tex2html_deferred<<20074>>\par\end<<20075>>tex2html_deferred<<20075>>
Estudie el módulo <tex2html_verb_mark>2748<tex2html_verb_mark>. Basándose en 
las funciones 
\begin<<20076>>tex2html_deferred<<20076>>\par\end<<20077>>tex2html_deferred<<20077>>
<tex2html_verb_mark>2749<tex2html_verb_mark> y <tex2html_verb_mark>2750<tex2html_verb_mark>
\begin<<20078>>tex2html_deferred<<20078>>\par\end<<20079>>tex2html_deferred<<20079>>
del módulo <tex2html_verb_mark>2751<tex2html_verb_mark>, resuelva el problema del reconocimiento
de código Perl dentro del analizador léxico de <tex2html_verb_mark>2752<tex2html_verb_mark>,
evitando forzar al usuario en la escritura de ``llaves fantasma''.
Compare el rendimiento de esta solución con la que provee <tex2html_verb_mark>2753<tex2html_verb_mark>.
Para analizar el \index<<18483>>rendimiento<<18483>>\emph<<18484>>rendimiento<<18484>> use el módulo \index<<18487>><<18489>>\begin<<20080>>tex2html_deferred<<20080>>\tt\end<<20081>>tex2html_deferred<<20081>>Benchmark<<18489>><<18487>><<18488>>\begin<<20082>>tex2html_deferred<<20082>>\tt\end<<20083>>tex2html_deferred<<20083>>Benchmark<<18488>>.
\begin<<20084>>tex2html_deferred<<20084>>\par\end<<20085>>tex2html_deferred<<20085>>
¿Cu\'ales son sus conclusiones? ¿Qué es mejor?
\begin<<20086>>tex2html_deferred<<20086>>\par\end<<20087>>tex2html_deferred<<20087>>
\section<<18490>>Práctica:  Autoacciones<<18490>>
   \index<<18491>>Práctica! Autoacciones<<18491>>
  
\begin<<20088>>tex2html_deferred<<20088>>\par\end<<20089>>tex2html_deferred<<20089>>
Extienda <tex2html_verb_mark>2754<tex2html_verb_mark> con una directiva <tex2html_verb_mark>2756<tex2html_verb_mark> la
cuál cambia la acción por defecto. Cuando una regla de producción 
no tenga una acción asociada, en vez de ejecutarse la acción
<tex2html_verb_mark>2757<tex2html_verb_mark> por defecto <tex2html_comment_mark>6018
se ejecutará el código especificado en <tex2html_verb_mark>2758<tex2html_verb_mark>. 
La directiva podrá aparecer en la
parte de cabecera o en el cuerpo del programa <tex2html_verb_mark>2759<tex2html_verb_mark> 
en una sóla línea aparte. Si aparece en el cuerpo no debe hacerlo
en medio de una regla.
\begin<<20090>>tex2html_deferred<<20090>>\par\end<<20091>>tex2html_deferred<<20091>>
Sigue un ejemplo de uso:
\begin<<20092>>tex2html_deferred<<20092>>\par\end<<20093>>tex2html_deferred<<20093>>
\begin<<18108>>tex2html_preform<<18108>><tex2html_verbatim_mark>verbatim6220#\end<<18109>>tex2html_preform<<18109>>
y un ejemplo de ejecución:
\begin<<18110>>tex2html_preform<<18110>><tex2html_verbatim_mark>verbatim6221#\end<<18111>>tex2html_preform<<18111>>
Analice la adecuación de los mensajes de error emitidos por
el compilador de Perl cuando el código en la auto-acción contiene
errores. ¿Son apropiados los números de línea?
\begin<<20094>>tex2html_deferred<<20094>>\par\end<<20095>>tex2html_deferred<<20095>>
Tenga en cuenta los siguientes consejos:
\begin<<20096>>tex2html_deferred<<20096>>\par\end<<20097>>tex2html_deferred<<20097>>
\begin<<18112>>itemize<<18112>>
\item
Cuando compile con <tex2html_verb_mark>2760<tex2html_verb_mark> su módulo use 
una orden como: <tex2html_verb_mark>2761<tex2html_verb_mark>. 
Este es un caso en que el nombre del fichero de salida (<tex2html_verb_mark>2762<tex2html_verb_mark>)
y el nómbre del package <tex2html_verb_mark>2763<tex2html_verb_mark> no coinciden. 
Este es un caso en que el nombre del fichero de salida (<tex2html_verb_mark>2764<tex2html_verb_mark>)
y el nómbre del package <tex2html_verb_mark>2765<tex2html_verb_mark> no coinciden.
\item
Ahora tiene dos versiones de <tex2html_verb_mark>2766<tex2html_verb_mark> en su ordenador.
El compilador de Perl va a intentar cargar la instalada. 
Para ello en su versión del script <tex2html_verb_mark>2767<tex2html_verb_mark> puede incluir
una línea que le indique al compilador que debe buscar primero
en el lugar en el que se encuentra nuestra librería:
\begin<<18113>>tex2html_preform<<18113>><tex2html_verbatim_mark>verbatim6222#\end<<18114>>tex2html_preform<<18114>>
\item ¿Qué estrategia a seguir? Una posibilidad es ``hacerle creer'' al
resto de los módulos en <tex2html_verb_mark>2768<tex2html_verb_mark> que el usuario ha escrito el 
código de la autoacción en aquellas reglas en las que no existe 
código explícito asociado. Es posible realizar esta práctica modificando
sólo el fichero <tex2html_verb_mark>2769<tex2html_verb_mark>. El código original 
<tex2html_verb_mark>2770<tex2html_verb_mark> usa <tex2html_verb_mark>2771<tex2html_verb_mark>
para indicar, en el campo adecuado, que una acción no fué definida.
La idea es sustituir ese <tex2html_verb_mark>2772<tex2html_verb_mark> por el código asociado con la
autoacción:
\begin<<20098>>tex2html_deferred<<20098>>\par\end<<20099>>tex2html_deferred<<20099>>
\begin<<18115>>tex2html_preform<<18115>><tex2html_verbatim_mark>verbatim6223#\end<<18116>>tex2html_preform<<18116>>
\begin<<20100>>tex2html_deferred<<20100>>\par\end<<20101>>tex2html_deferred<<20101>>
\end<<18117>>itemize<<18117>>
\begin<<20102>>tex2html_deferred<<20102>>\par\end<<20103>>tex2html_deferred<<20103>>
\section<<18492>>Práctica: Nuevos Métodos<<18492>>
   \index<<18493>>Práctica!Nuevos Métodos<<18493>>
  
Continuemos extendiendo <tex2html_verb_mark>2773<tex2html_verb_mark>.
\begin<<18119>>itemize<<18119>>
\item
Introduzca en el módulo <tex2html_verb_mark>2774<tex2html_verb_mark> de <tex2html_verb_mark>2775<tex2html_verb_mark>
un método <tex2html_verb_mark>2776<tex2html_verb_mark> que devuelva el identificador
de la variable sintáctica en el lado izquierdo de la regla 
de producción por la que se está reduciendo. 
\item
Para tener disponible el lado izquierdo
deberá modificar la conducta del analizador LALR 
(subrutina <tex2html_verb_mark>2777<tex2html_verb_mark>) para que guarde como un atributo
el identificador de dicho noterminal.
\item
¿Que identificador se devuelve asociado con las acciones
intermedias?
\end<<18120>>itemize<<18120>>
\begin<<20104>>tex2html_deferred<<20104>>\par\end<<20105>>tex2html_deferred<<20105>>
Sigue un ejemplo de como programar haciendo uso de esta y la 
anterior extensión:
\begin<<18121>>tex2html_preform<<18121>><tex2html_verbatim_mark>verbatim6224#\end<<18122>>tex2html_preform<<18122>>
Veamos la ejecución correspondiente al ejemplo anterior:
\begin<<18123>>tex2html_preform<<18123>><tex2html_verbatim_mark>verbatim6225#\end<<18124>>tex2html_preform<<18124>>
\begin<<20106>>tex2html_deferred<<20106>>\par\end<<20107>>tex2html_deferred<<20107>>
\section<<18494>>Práctica: Generación Automática de Árboles<<18494>>
   \index<<18495>>Práctica!Generación Automática de Árboles<<18495>>
  
Partiendo de la práctica anterior, introduzca una directiva
<tex2html_verb_mark>2779<tex2html_verb_mark> que de lugar a la construcción del árbol de análisis
concreto. La acción de construcción del árbol:
\begin<<18126>>tex2html_preform<<18126>><tex2html_verbatim_mark>verbatim6226#\end<<18127>>tex2html_preform<<18127>>
se ejecutará para cualquier regla que no tenga una acción
explícita asociada.
\begin<<20108>>tex2html_deferred<<20108>>\par\end<<20109>>tex2html_deferred<<20109>>
\section<<18128>>Recuperacion de Errores: Visión Detallada<<18128>>
La subrutina <tex2html_verb_mark>2780<tex2html_verb_mark> contiene el algoritmo de
análisis LR genérico. En esta sección 
nos concentraremos en la forma en la que se ha implantado en
<tex2html_verb_mark>2781<tex2html_verb_mark> la recuperación de errores.
\begin<<18129>>tex2html_preform<<18129>><tex2html_verbatim_mark>verbatim6227#\end<<18130>>tex2html_preform<<18130>>
 La variable <tex2html_verb_mark>2782<tex2html_verb_mark> nos indica la situación con respecto a la recuperación
 de errores. La variable <tex2html_verb_mark>2783<tex2html_verb_mark> contiene el número total de errores.
 \begin<<18131>>tex2html_preform<<18131>><tex2html_verbatim_mark>verbatim6228#\end<<18132>>tex2html_preform<<18132>>
Si <tex2html_verb_mark>2784<tex2html_verb_mark> no esta definida es que ha ocurrido un 
error. En tal caso no se entra a estudiar
si la acción es de desplazamiento o reducción.
\begin<<18133>>tex2html_preform<<18133>><tex2html_verbatim_mark>verbatim6229#\end<<18134>>tex2html_preform<<18134>>
Si <tex2html_verb_mark>2785<tex2html_verb_mark> es cero es que estamos
ante un nuevo error:
\begin<<18135>>tex2html_preform<<18135>><tex2html_verbatim_mark>verbatim6230#\end<<18136>>tex2html_preform<<18136>>
Como el error es ``nuevo'' se llama a la subrutina de 
tratamiento de errores <tex2html_verb_mark>2786<tex2html_verb_mark>. Obsérvese que no
se volverá a llamar a la rutina de manejo de errores
hasta que <tex2html_verb_mark>2787<tex2html_verb_mark> vuelva a alcanzar 
el valor cero. Puesto que <tex2html_verb_mark>2788<tex2html_verb_mark> ha sido
escrita por el usuario, es posible que este haya llamado
al método <tex2html_verb_mark>2789<tex2html_verb_mark>. Si ese es el caso, es que el
programador prefiere que el análisis continúe como
si la recuperación de errores se hubiera completado.
\begin<<20110>>tex2html_deferred<<20110>>\par\end<<20111>>tex2html_deferred<<20111>>
Ahora se pone <tex2html_verb_mark>2790<tex2html_verb_mark> a 3:
\begin<<18137>>tex2html_preform<<18137>><tex2html_verbatim_mark>verbatim6231#\end<<18138>>tex2html_preform<<18138>>
Cada vez que se logre un desplazamiento con éxito <tex2html_verb_mark>2791<tex2html_verb_mark>
será decrementado (línea 19).
\begin<<20112>>tex2html_deferred<<20112>>\par\end<<20113>>tex2html_deferred<<20113>>
A continuación se retiran estados de la pila hasta
que se encuentre alguno que pueda transitar ante el 
terminale especial <tex2html_verb_mark>2792<tex2html_verb_mark>:
\begin<<18139>>tex2html_preform<<18139>><tex2html_verbatim_mark>verbatim6232#\end<<18140>>tex2html_preform<<18140>>
Si la pila quedó vacía se devuelve <tex2html_verb_mark>2793<tex2html_verb_mark>. En caso contrario
es que el programador escribió alguna regla para la
recuperación de errores. En ese caso, se transita al estado
correspondiente:
\begin<<18141>>tex2html_preform<<18141>><tex2html_verbatim_mark>verbatim6233#\end<<18142>>tex2html_preform<<18142>>
Un poco antes tenemos el siguiente código:
\begin<<18143>>tex2html_preform<<18143>><tex2html_verbatim_mark>verbatim6234#\end<<18144>>tex2html_preform<<18144>>
Si hemos alcanzado el final de la entrada en una situación de error
se abandona devolviendo <tex2html_verb_mark>2794<tex2html_verb_mark>.
\begin<<18306>>theorem_type<<18306>>[exercise][exercise][section][][][]
Explique la razón para el comentario de la línea
41. Si <tex2html_verb_mark>2795<tex2html_verb_mark> es 3, el último
terminal no ha producido un desplazamiento correcto. ¿Porqué?\end<<18307>>theorem_type<<18307>>
A continuación aparecen los códigos de los métodos implicados en 
la recuperación de errores:
\begin<<18147>>tex2html_preform<<18147>><tex2html_verbatim_mark>verbatim6235#\end<<18148>>tex2html_preform<<18148>>
El método <tex2html_verb_mark>2796<tex2html_verb_mark> cambia el valor referenciado por <tex2html_verb_mark>2797<tex2html_verb_mark>.
De esta forma se le da al programador <tex2html_verb_mark>2798<tex2html_verb_mark> la oportunidad de anunciar
que es muy probable que la fase de recuperación de errores se haya completado.
\begin<<20114>>tex2html_deferred<<20114>>\par\end<<20115>>tex2html_deferred<<20115>>
Los dos siguientes métodos devuelven el número de errores hasta el momento
(<tex2html_verb_mark>2799<tex2html_verb_mark>)
y si nos encontramos o no en fase de recuperación de errores (<tex2html_verb_mark>2800<tex2html_verb_mark>):
\begin<<18149>>tex2html_preform<<18149>><tex2html_verbatim_mark>verbatim6236#\end<<18150>>tex2html_preform<<18150>>
\begin<<20116>>tex2html_deferred<<20116>>\par\end<<20117>>tex2html_deferred<<20117>>
\section<<18151>>Descripción Eyapp del Lenguaje  SimpleC<<18151>>
\label<<18152>>section:simplec<<18152>>
En este capítulo usaremos  <<18496>>\begin<<20118>>tex2html_deferred<<20118>>\tt\end<<20119>>tex2html_deferred<<20119>>Parse::Eyapp<<18496>>  para desarrollar
un compilador para el siguiente lenguaje, al que denominaremos  <<18497>>\begin<<20120>>tex2html_deferred<<20120>>\tt\end<<20121>>tex2html_deferred<<20121>>Simple C<<18497>> :
\begin<<20122>>tex2html_deferred<<20122>>\par\end<<20123>>tex2html_deferred<<20123>>
\begin<<18155>>tex2html_preform<<18155>><tex2html_verbatim_mark>verbatim6237#\end<<18156>>tex2html_preform<<18156>>
\begin<<20124>>tex2html_deferred<<20124>>\par\end<<20125>>tex2html_deferred<<20125>>
\section<<18250>>Diseño de Analizadores con <<18157>>\begin<<20126>>tex2html_deferred<<20126>>\tt\end<<20127>>tex2html_deferred<<20127>>Parse::Eyapp<<18157>><<18250>>
\label<<18158>>section:consejoseyapp<<18158>>
A la hora de construir un analizador sintáctico tenga en cuenta 
las siguientes normas de buena programación:
\begin<<20128>>tex2html_deferred<<20128>>\par\end<<20129>>tex2html_deferred<<20129>>
\begin<<18159>>enumerate<<18159>>
\item
Comienze trabajando en el cuerpo de la gramática.
\item
Olvídese al principio del 
analizador léxico. Su primer objetivo es tener una gramática limpia
de conflictos y que reconozca el lenguaje dado. 
\item
Sustituya las repeticiones
BNF por listas usando los operadores <tex2html_verb_mark>2801<tex2html_verb_mark> <tex2html_verb_mark>2802<tex2html_verb_mark>, <tex2html_verb_mark>2803<tex2html_verb_mark> y sus variantes con separadores. 
Si una variable describe una lista de <tex2html_verb_mark>2804<tex2html_verb_mark> pongale un adjetivo adecuado como
<tex2html_verb_mark>2805<tex2html_verb_mark>. 
\underline<<18160>>Ponga nombres significativos a las variables y terminales<<18160>>. 
No los llame <tex2html_verb_mark>2806<tex2html_verb_mark>, <tex2html_verb_mark>2807<tex2html_verb_mark>, etc.
\item
Si tiene un elemento opcional en la BNF, por ejemplo, en la regla: 
\begin<<20130>>tex2html_deferred<<20130>>\par\end<<20131>>tex2html_deferred<<20131>>
functiondefinition \begin<<19202>>tex2html_wrap_inline<<19202>>$\rightarrow$\end<<19203>>tex2html_wrap_inline<<19203>>\space \begin<<19204>>tex2html_wrap_inline<<19204>>$[$\end<<19205>>tex2html_wrap_inline<<19205>>\space basictype \begin<<19206>>tex2html_wrap_inline<<19206>>$]$\end<<19207>>tex2html_wrap_inline<<19207>>\space functionheader functionbody
\begin<<20132>>tex2html_deferred<<20132>>\par\end<<20133>>tex2html_deferred<<20133>>
use el operador <tex2html_verb_mark>2808<tex2html_verb_mark>.
\item
Cada par de reglas que introduzca vuelva a recompilar con <tex2html_verb_mark>2809<tex2html_verb_mark> la gramática
para ver si se introducido ambiguedad. Cuando estoy editando la gramática
suelo escribir a menudo la orden 
\begin<<20134>>tex2html_deferred<<20134>>\par\end<<20135>>tex2html_deferred<<20135>>
<tex2html_verb_mark>2811<tex2html_verb_mark> 
\begin<<20136>>tex2html_deferred<<20136>>\par\end<<20137>>tex2html_deferred<<20137>>
para recompilar:
\begin<<20138>>tex2html_deferred<<20138>>\par\end<<20139>>tex2html_deferred<<20139>>
\vspace<<18161>>0.5cm<<18161>>
\begin<<18162>>tabular<<18162>><<18251>>|p<<18163>>14.5cm<<18163>>|<<18251>>
\hline
\begin<<18164>>tex2html_preform<<18164>><tex2html_verbatim_mark>verbatim6238#\end<<18165>>tex2html_preform<<18165>>\\ 
\hline
\end<<18166>>tabular<<18166>>
\vspace<<18167>>0.5cm<<18167>>
\begin<<20140>>tex2html_deferred<<20140>>\par\end<<20141>>tex2html_deferred<<20141>>
Esto llama a <tex2html_verb_mark>2812<tex2html_verb_mark> con el fichero bajo edición. Si hay errores o conflictos (esto es,
hemos introducido ambiguedad) los detectarémos enseguida.
Procure detectar la aparición de un conflicto lo antes posible.
Observe el sangrado del ejemplo. Es el que le recomiendo.
\item
Cuando esté en el proceso de construcción de la gramática y aún le queden
por rellenar variables sintácticas, declárelas como terminales mediante
<tex2html_verb_mark>2814<tex2html_verb_mark>. De esta manera
evitará las quejas de <tex2html_verb_mark>2815<tex2html_verb_mark>.
\begin<<20142>>tex2html_deferred<<20142>>\par\end<<20143>>tex2html_deferred<<20143>>
\item <<18168>>\begin<<20144>>tex2html_deferred<<20144>>\bf\end<<20145>>tex2html_deferred<<20145>>Resolución de Ambiguedades y Conflictos<<18168>>
\begin<<20146>>tex2html_deferred<<20146>>\par\end<<20147>>tex2html_deferred<<20147>>
Las operaciones de asignación tienen la prioridad mas baja,
seguidas  de las lógicas, los test de igualdad,
los de comparación, a continuación las aditivas, multiplicativas y por 
último las operaciones de tipo <tex2html_verb_mark>2816<tex2html_verb_mark> y <tex2html_verb_mark>2817<tex2html_verb_mark>.
Exprese la asociatividad natural y la
prioridad especificada usando
los mecanismos que <tex2html_verb_mark>2818<tex2html_verb_mark> provee al efecto: <tex2html_verb_mark>2820<tex2html_verb_mark>, <tex2html_verb_mark>2821<tex2html_verb_mark>,
<tex2html_verb_mark>2823<tex2html_verb_mark> y <tex2html_verb_mark>2824<tex2html_verb_mark>.
\begin<<20148>>tex2html_deferred<<20148>>\par\end<<20149>>tex2html_deferred<<20149>>
\item
La gramática de SimpleC es ambigua, ya que para una sentencia como 
\begin<<20150>>tex2html_deferred<<20150>>\par\end<<20151>>tex2html_deferred<<20151>>
\begin<<18169>>center<<18169>>
if \begin<<19208>>tex2html_wrap_inline<<19208>>$E_1$\end<<19209>>tex2html_wrap_inline<<19209>>\space then if \begin<<19210>>tex2html_wrap_inline<<19210>>$E_2$\end<<19211>>tex2html_wrap_inline<<19211>>\space then \begin<<19212>>tex2html_wrap_inline<<19212>>$S_1$\end<<19213>>tex2html_wrap_inline<<19213>>\space else \begin<<19214>>tex2html_wrap_inline<<19214>>$S_2$\end<<19215>>tex2html_wrap_inline<<19215>>
\end<<18170>>center<<18170>>
\begin<<20152>>tex2html_deferred<<20152>>\par\end<<20153>>tex2html_deferred<<20153>>
existen dos árboles posibles: uno que asocia el ``else'' con el primer ``if'' y otra
que lo asocia con el segundo. Los dos árboles corresponden a las
dos posibles parentizaciones:
\begin<<20154>>tex2html_deferred<<20154>>\par\end<<20155>>tex2html_deferred<<20155>>
\begin<<18171>>center<<18171>>
if \begin<<19216>>tex2html_wrap_inline<<19216>>$E_1$\end<<19217>>tex2html_wrap_inline<<19217>>\space then (if \begin<<19218>>tex2html_wrap_inline<<19218>>$E_2$\end<<19219>>tex2html_wrap_inline<<19219>>\space then \begin<<19220>>tex2html_wrap_inline<<19220>>$S_1$\end<<19221>>tex2html_wrap_inline<<19221>>\space else \begin<<19222>>tex2html_wrap_inline<<19222>>$S_2$\end<<19223>>tex2html_wrap_inline<<19223>>)
\end<<18172>>center<<18172>>
\begin<<20156>>tex2html_deferred<<20156>>\par\end<<20157>>tex2html_deferred<<20157>>
Esta es la regla de prioridad usada en la mayor parte de los lenguajes:
un ``else'' casa con el ``if'' mas cercano. La otra posible parentización
es:
\begin<<20158>>tex2html_deferred<<20158>>\par\end<<20159>>tex2html_deferred<<20159>>
\begin<<18173>>center<<18173>>
if \begin<<19224>>tex2html_wrap_inline<<19224>>$E_1$\end<<19225>>tex2html_wrap_inline<<19225>>\space then (if \begin<<19226>>tex2html_wrap_inline<<19226>>$E_2$\end<<19227>>tex2html_wrap_inline<<19227>>\space then \begin<<19228>>tex2html_wrap_inline<<19228>>$S_1$\end<<19229>>tex2html_wrap_inline<<19229>>) else \begin<<19230>>tex2html_wrap_inline<<19230>>$S_2$\end<<19231>>tex2html_wrap_inline<<19231>>
\end<<18174>>center<<18174>>
\begin<<20160>>tex2html_deferred<<20160>>\par\end<<20161>>tex2html_deferred<<20161>>
\emph<<18252>>La conducta por defecto de <<18175>>\begin<<20162>>tex2html_deferred<<20162>>\tt\end<<20163>>tex2html_deferred<<20163>>eyapp<<18175>> es parentizar a derechas<<18252>>.
El generador  <<18176>>\begin<<20164>>tex2html_deferred<<20164>>\tt\end<<20165>>tex2html_deferred<<20165>>eyapp<<18176>>  nos informará del conflicto pero si no se le indica 
como resolverlo parentizará a derechas.
Resuelva este conflicto.
\begin<<20166>>tex2html_deferred<<20166>>\par\end<<20167>>tex2html_deferred<<20167>>
\item <<18177>>\begin<<20168>>tex2html_deferred<<20168>>\it\end<<20169>>tex2html_deferred<<20169>>¿Que clase de árbol debe producir el analizador?<<18177>>
La respuesta es que sea lo mas abstracto posible.
Debe 
\begin<<18178>>itemize<<18178>>
\item
Contener toda la información necesaria para el manejo eficiente
de las fases subsiguientes: Análisis de ámbito, Comprobación de tipos,
Optimización independiente de la máquina, etc.
\item 
Ser uniforme
\item
Legible (human-friendly)
\item
No contener nodos que no portan información. 
\end<<18179>>itemize<<18179>>
\begin<<20170>>tex2html_deferred<<20170>>\par\end<<20171>>tex2html_deferred<<20171>>
El siguiente ejemplo muestra una versión aceptable de árbol abstracto.
Cuando se le proporciona el programa de entrada:
\begin<<20172>>tex2html_deferred<<20172>>\par\end<<20173>>tex2html_deferred<<20173>>
\begin<<18180>>tex2html_preform<<18180>><tex2html_verbatim_mark>verbatim6239#\end<<18181>>tex2html_preform<<18181>>
\begin<<20174>>tex2html_deferred<<20174>>\par\end<<20175>>tex2html_deferred<<20175>>
El siguiente árbol ha sido producido por un analizador usando la directiva 
<tex2html_verb_mark>2826<tex2html_verb_mark> y añadiendo las correspondientes acciones de <tex2html_verb_mark>2827<tex2html_verb_mark>.
Puede considerarse un ejemplo aceptable de AST:
\begin<<20176>>tex2html_deferred<<20176>>\par\end<<20177>>tex2html_deferred<<20177>>
\begin<<18182>>tex2html_preform<<18182>><tex2html_verbatim_mark>verbatim6240#\end<<18183>>tex2html_preform<<18183>>
\begin<<20178>>tex2html_deferred<<20178>>\par\end<<20179>>tex2html_deferred<<20179>>
Es deseable  darle una estructura uniforme al árbol. Por ejemplo, como consecuencia 
de que la gramática admite funciones con declaración implícita del tipo
retornado cuando este es entero
\begin<<20180>>tex2html_deferred<<20180>>\par\end<<20181>>tex2html_deferred<<20181>>
\begin<<18184>>tex2html_preform<<18184>><tex2html_verbatim_mark>verbatim6241#\end<<18185>>tex2html_preform<<18185>>
\end<<18186>>enumerate<<18186>>
\begin<<20182>>tex2html_deferred<<20182>>\par\end<<20183>>tex2html_deferred<<20183>>
se producen dos tipos de árboles. Es conveniente
convertir las definiciones de función con declaración 
implícita en el mismo árbol que se obtiene con 
declaración explícita. 
\begin<<20184>>tex2html_deferred<<20184>>\par\end<<20185>>tex2html_deferred<<20185>>
\section<<18498>>Práctica: Construcción del AST para el Lenguaje Simple C<<18498>>
   \index<<18499>>Práctica!Construcción del AST para el Lenguaje Simple C<<18499>>
  
\label<<18188>>practica:esquemadetradsimple<<18188>>
Utilice 
\htmladdnormallink<<18189>>Parse-Eyapp<<18189>><<18190>>Parse-Eyapp.tar.gz<<18190>>.
para construir un árbol de análisis sintáctico abstracto 
para la gramática descrita en la sección
\ref<<18191>>section:simplec<<18191>>.
Su analizador deberá seguir los consejos explícitados en la 
sección \ref<<18192>>section:consejoseyapp<<18192>>.
\begin<<20186>>tex2html_deferred<<20186>>\par\end<<20187>>tex2html_deferred<<20187>>
\paragraph<<18193>>Analizador Léxico<<18193>>
\begin<<20188>>tex2html_deferred<<20188>>\par\end<<20189>>tex2html_deferred<<20189>>
Además del tipo de terminal y su valor el analizador
léxico deberá devolver el número de línea.
El analizador léxico deberá aceptar comentarios C.
En la gramática, el terminal <tex2html_verb_mark>2828<tex2html_verb_mark> se refiere a 
caracteres entre comillas simples (por ejemplo <tex2html_verb_mark>2829<tex2html_verb_mark>).
El terminal <tex2html_verb_mark>2830<tex2html_verb_mark> se refiere a 
caracteres entre comillas dobles (por ejemplo <tex2html_verb_mark>2831<tex2html_verb_mark>).
\begin<<20190>>tex2html_deferred<<20190>>\par\end<<20191>>tex2html_deferred<<20191>>
Se aconseja que las palabras reservadas del lenguaje
no se traten con expresiones regulares específicas sino que se
capturen en el patrón de identificador <tex2html_verb_mark>2832<tex2html_verb_mark>. 
Se mantiene para ello un hash con las palabras reservadas 
que es inicializado al comienzo del programa. Cuando 
el analizador léxico encuentra un identificador
mira en primer lugar en dicho hash 
para ver si es una palabra reservada y,
si lo es, devuelve el terminal correspondiente.
En caso contrario se trata de un identificador.
\begin<<20192>>tex2html_deferred<<20192>>\par\end<<20193>>tex2html_deferred<<20193>>
\section<<18253>>El Generador de Analizadores <<18194>>\begin<<20194>>tex2html_deferred<<20194>>\tt\end<<20195>>tex2html_deferred<<20195>>byacc<<18194>><<18253>>
Existe una version del <tex2html_verb_mark>2833<tex2html_verb_mark> de Berkeley que permite producir 
código para Perl:
\begin<<18195>>tex2html_preform<<18195>><tex2html_verbatim_mark>verbatim6242#\end<<18196>>tex2html_preform<<18196>>
Se trata por tanto de un generador de analizadores LALR.
Es bastante compatible con <tex2html_verb_mark>2834<tex2html_verb_mark>. Puedes encontrar 
una versión en formato <tex2html_verb_mark>2835<tex2html_verb_mark> en nuestro servidor
\htmladdnormallink<<18254>>http://nereida.deioc.ull.es/\~<<18197>><<18197>>pl/pyacc-pack.tgz<<18254>><<18198>>http://nereida.deioc.ull.es/~pl/pyacc-pack.tgz<<18198>>
o también desde 
\htmladdnormallink<<18199>>http://www.perl.com/CPAN/src/misc/<<18199>><<18200>>http://www.perl.com/CPAN/src/misc/<<18200>>.
\begin<<20196>>tex2html_deferred<<20196>>\par\end<<20197>>tex2html_deferred<<20197>>
El formato de llamada es:
\begin<<18201>>tex2html_preform<<18201>><tex2html_verbatim_mark>verbatim6243#\end<<18202>>tex2html_preform<<18202>>
\begin<<20198>>tex2html_deferred<<20198>>\par\end<<20199>>tex2html_deferred<<20199>>
Las opciones <tex2html_verb_mark>2836<tex2html_verb_mark> o <tex2html_verb_mark>2837<tex2html_verb_mark> permiten generar código C. Usando <tex2html_verb_mark>2838<tex2html_verb_mark>
se genera código Perl. Las opciones <tex2html_verb_mark>2839<tex2html_verb_mark> y <tex2html_verb_mark>2840<tex2html_verb_mark> funcionan como es usual en 
<tex2html_verb_mark>2841<tex2html_verb_mark>. Con <tex2html_verb_mark>2842<tex2html_verb_mark> se incorpora código para la depuración de la gramática.
Si se especifica <tex2html_verb_mark>2843<tex2html_verb_mark> el código del usuario no es insertado.
La opción <tex2html_verb_mark>2844<tex2html_verb_mark> permite generar ficheros separados para el código y las tablas. No la use
con Perl.
\begin<<20200>>tex2html_deferred<<20200>>\par\end<<20201>>tex2html_deferred<<20201>>
Fichero conteniendo la gramática:
\begin<<18203>>tex2html_preform<<18203>><tex2html_verbatim_mark>verbatim6244#\end<<18204>>tex2html_preform<<18204>>
La compilación con <tex2html_verb_mark>2845<tex2html_verb_mark> del fichero <tex2html_verb_mark>2846<tex2html_verb_mark>
conteniendo la descripción de la gramática produce el módulo 
Perl conteniendo el analizador.
\begin<<18205>>tex2html_preform<<18205>><tex2html_verbatim_mark>verbatim6245#\end<<18206>>tex2html_preform<<18206>>
Observe que la opción <tex2html_verb_mark>2847<tex2html_verb_mark> es la que permite producir código Perl.
Anteriormente se usaba la opción <tex2html_verb_mark>2848<tex2html_verb_mark>. Esto se hizo para mantener la 
compatibilidad con otras versiones de <tex2html_verb_mark>2849<tex2html_verb_mark> en las que la opción <tex2html_verb_mark>2850<tex2html_verb_mark>
se usa para cambiar el prefijo por defecto (<tex2html_verb_mark>2851<tex2html_verb_mark>). Ese es el significado actual
de la opción <tex2html_verb_mark>2852<tex2html_verb_mark> en <tex2html_verb_mark>2853<tex2html_verb_mark>.
\begin<<20202>>tex2html_deferred<<20202>>\par\end<<20203>>tex2html_deferred<<20203>>
El fichero <tex2html_verb_mark>2854<tex2html_verb_mark> generado contiene las definiciones de los \emph<<18207>>tokens<<18207>>:
\begin<<18208>>tex2html_preform<<18208>><tex2html_verbatim_mark>verbatim6246#\end<<18209>>tex2html_preform<<18209>>
El programa <tex2html_verb_mark>2855<tex2html_verb_mark> contiene la llamada al analizador 
y la definición del analizador léxico:
\begin<<18210>>tex2html_preform<<18210>><tex2html_verbatim_mark>verbatim6247#\end<<18211>>tex2html_preform<<18211>>
El módulo <tex2html_verb_mark>2856<tex2html_verb_mark> contiene una versión de <tex2html_verb_mark>2857<tex2html_verb_mark> 
que ha sido adaptada para funcionar con  <tex2html_verb_mark>2858<tex2html_verb_mark>. Todas las versiones de <tex2html_verb_mark>2859<tex2html_verb_mark> 
esperan que el analizador léxico devuelva un \emph<<18212>>token<<18212>> numérico, mientras que 
<tex2html_verb_mark>2860<tex2html_verb_mark> devuelbe un objeto de la clase \emph<<18213>>token<<18213>>.
Veamos un ejemplo de ejecución:
\begin<<18214>>tex2html_preform<<18214>><tex2html_verbatim_mark>verbatim6248#\end<<18215>>tex2html_preform<<18215>>
<tex2html_endfile>#./chapter_bottomup/analisis_bottomup_en_perl.tex#
\begin<<20204>>tex2html_deferred<<20204>>\par\end<<20205>>tex2html_deferred<<20205>>
\chapter<<18255>>Análisis Sintáctico Ascendente en C con <<18216>>\begin<<20206>>tex2html_deferred<<20206>>\tt\end<<20207>>tex2html_deferred<<20207>>yacc<<18216>> y <<18217>>\begin<<20208>>tex2html_deferred<<20208>>\tt\end<<20209>>tex2html_deferred<<20209>>bison<<18217>><<18255>>
