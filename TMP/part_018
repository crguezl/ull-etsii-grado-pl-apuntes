<tex2html_file>#./unicode/unicode.tex#
\section<<6986>>Unicode<<6986>>
\label<<6987>>section:unicode<<6987>>
\begin<<8822>>tex2html_deferred<<8822>>\par\end<<8823>>tex2html_deferred<<8823>>
 
  \paragraph<<8216>>Introducción<<8216>>
  \begin<<8217>>tabular<<8217>><<8218>>c<<8218>>
  \end<<8219>>tabular<<8219>>

\begin<<8824>>tex2html_deferred<<8824>>\par\end<<8825>>tex2html_deferred<<8825>>
\begin<<8204>>theorem_type<<8204>>[exercise][exercise][section][][][]
Antes de comenzar esta sección, lea los siguientes documentos:
\begin<<6990>>itemize<<6990>>
\item \htmladdnormallink<<6991>>The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)<<6991>><<6992>>http://joelonsoftware.com/articles/Unicode.html<<6992>>
\end<<6993>>itemize<<6993>>\end<<8205>>theorem_type<<8205>>
\begin<<8826>>tex2html_deferred<<8826>>\par\end<<8827>>tex2html_deferred<<8827>>
La siguiente introducción esta tomada de la sección la sección 'Unicode' en \htmladdnormallink<<8220>><<8222>>\begin<<8828>>tex2html_deferred<<8828>>\tt\end<<8829>>tex2html_deferred<<8829>>perluniintro<<8222>><<8220>>
<<8221>>http://perldoc.perl.org/perluniintro.html\#Unicode<<8221>>:
\begin<<8830>>tex2html_deferred<<8830>>\par\end<<8831>>tex2html_deferred<<8831>>
\begin<<6997>>it<<6997>>
\begin<<6998>>quote<<6998>>
\index<<8223>>Unicode<<8223>>\emph<<8224>>Unicode<<8224>> is a character set standard which plans to codify all of the
writing systems of the world, plus many other symbols.
\begin<<8832>>tex2html_deferred<<8832>>\par\end<<8833>>tex2html_deferred<<8833>>
Unicode and ISO/IEC 10646 are coordinated standards that provide 
\index<<8225>>code points<<8225>>\emph<<8226>>code points<<8226>> for characters in almost all modern character set standards,
covering more than 30 writing systems and hundreds of languages,
including all commercially-important modern languages. 
\begin<<8834>>tex2html_deferred<<8834>>\par\end<<8835>>tex2html_deferred<<8835>>
All characters
in the largest Chinese, Japanese, and Korean dictionaries are also
encoded. The standards will eventually cover almost all characters in
more than 250 writing systems and thousands of languages. Unicode 1.0
was released in October 1991, and 4.0 in April 2003.
\begin<<8836>>tex2html_deferred<<8836>>\par\end<<8837>>tex2html_deferred<<8837>>
A \index<<8227>>Unicode character<<8227>>\emph<<8228>>Unicode character<<8228>> is an abstract entity. It is not bound to any
particular integer width, especially not to the C language char . 
\begin<<8838>>tex2html_deferred<<8838>>\par\end<<8839>>tex2html_deferred<<8839>>
Unicode
is language-neutral and display-neutral: it does not encode the language
of the text and it does not generally define fonts or other graphical
layout details. Unicode operates on characters and on text built from
those characters.
\begin<<8840>>tex2html_deferred<<8840>>\par\end<<8841>>tex2html_deferred<<8841>>
Unicode defines characters like 
<tex2html_verb_mark>1106<tex2html_verb_mark> 
or <tex2html_verb_mark>1107<tex2html_verb_mark> and unique numbers for the characters, 
in this case <tex2html_verb_mark>1108<tex2html_verb_mark> and <tex2html_verb_mark>1109<tex2html_verb_mark>, respectively. 
These unique numbers are called \index<<8229>>code points<<8229>>\emph<<8230>>code points<<8230>>.
\begin<<8842>>tex2html_deferred<<8842>>\par\end<<8843>>tex2html_deferred<<8843>>
The Unicode standard prefers using hexadecimal notation for the code
points. 
\begin<<8844>>tex2html_deferred<<8844>>\par\end<<8845>>tex2html_deferred<<8845>>
The Unicode standard uses the
<<7003>>\begin<<8846>>tex2html_deferred<<8846>>\bf\end<<8847>>tex2html_deferred<<8847>>notation<<7003>> <tex2html_verb_mark>1110<tex2html_verb_mark>, to give the hexadecimal code
point and the normative name of the character.
\begin<<8848>>tex2html_deferred<<8848>>\par\end<<8849>>tex2html_deferred<<8849>>
Unicode also defines various \index<<8231>>Unicode properties<<8231>>\emph<<8232>>Unicode properties<<8232>> for the characters, like
<tex2html_verb_mark>1111<tex2html_verb_mark> or <tex2html_verb_mark>1112<tex2html_verb_mark>, <tex2html_verb_mark>1113<tex2html_verb_mark>, or <tex2html_verb_mark>1114<tex2html_verb_mark>; 
these
properties are independent of the names of the characters. 
\begin<<8850>>tex2html_deferred<<8850>>\par\end<<8851>>tex2html_deferred<<8851>>
Furthermore,
various operations on the characters like uppercasing, lowercasing,
and collating (sorting) are defined.
\begin<<8852>>tex2html_deferred<<8852>>\par\end<<8853>>tex2html_deferred<<8853>>
A \index<<8233>>Unicode character<<8233>>\emph<<8234>>Unicode character<<8234>> consists either of a single code point, or a
base character (like <tex2html_verb_mark>1115<tex2html_verb_mark> ), followed by one or more
<<7006>>\begin<<8854>>tex2html_deferred<<8854>>\bf\end<<8855>>tex2html_deferred<<8855>>modifiers<<7006>> (like <tex2html_verb_mark>1116<tex2html_verb_mark> ). This sequence of base character
and modifiers is called a \index<<8235>>combining character sequence<<8235>>\emph<<8236>>combining character sequence<<8236>>.
\begin<<8856>>tex2html_deferred<<8856>>\par\end<<8857>>tex2html_deferred<<8857>>
Whether to call these combining character sequences ;SPMquot;characters;SPMquot; depends on your point of view. 
If you are a programmer, you probably would tend towards seeing each element in the sequences as one unit, or ;SPMquot;character;SPMquot;. 
The whole sequence could be seen as one ;SPMquot;character;SPMquot;, however, from the user's point of view, 
since that's probably what it looks like in the context of the user's language.
\begin<<8858>>tex2html_deferred<<8858>>\par\end<<8859>>tex2html_deferred<<8859>>
With this ;SPMquot;whole sequence;SPMquot; view of characters, the total number
of characters is open-ended. But in the programmer's ;SPMquot;one unit is
one character;SPMquot; point of view, the concept of ;SPMquot;characters;SPMquot; is more
deterministic. 
\begin<<8860>>tex2html_deferred<<8860>>\par\end<<8861>>tex2html_deferred<<8861>>
<<7008>>\begin<<8862>>tex2html_deferred<<8862>>\bf\end<<8863>>tex2html_deferred<<8863>>In this document, we take that second point of view:
one ;SPMquot;character;SPMquot; is one Unicode code point, be it a base character or a
combining character<<7008>>.
\begin<<8864>>tex2html_deferred<<8864>>\par\end<<8865>>tex2html_deferred<<8865>>
For some combinations, there are \index<<8237>>precomposed characters<<8237>>\emph<<8238>>precomposed characters<<8238>>. 
<tex2html_verb_mark>1117<tex2html_verb_mark> , for example, is defined as a single code
point. 
\begin<<8866>>tex2html_deferred<<8866>>\par\end<<8867>>tex2html_deferred<<8867>>
These precomposed characters are, however, only available for
some combinations, and are mainly meant to support round-trip conversions
between Unicode and legacy standards (like the \htmladdnormallink<<8239>>ISO 8859<<8239>>
<<8240>>http://en.wikipedia.org/wiki/ISO\_8859<<8240>>). 
\begin<<8868>>tex2html_deferred<<8868>>\par\end<<8869>>tex2html_deferred<<8869>>
In the general
case, the composing method is more extensible. To support conversion
between different compositions of the characters, various normalization
forms to standardize representations are also defined.
\begin<<8870>>tex2html_deferred<<8870>>\par\end<<8871>>tex2html_deferred<<8871>>
Because of backward compatibility with legacy encodings, the ;SPMquot;a unique
number for every character;SPMquot; idea breaks down a bit: instead, there is
;SPMquot;at least one number for every character;SPMquot;. 
\begin<<8872>>tex2html_deferred<<8872>>\par\end<<8873>>tex2html_deferred<<8873>>
The same character could be
represented differently in several \htmladdnormallink<<8241>>legacy encodings<<8241>>
<<8242>>http://en.wikipedia.org/wiki//Legacy\_encoding<<8242>>. 
\begin<<8874>>tex2html_deferred<<8874>>\par\end<<8875>>tex2html_deferred<<8875>>
The converse is also
not true: some code points do not have an assigned character. 
\begin<<8876>>tex2html_deferred<<8876>>\par\end<<8877>>tex2html_deferred<<8877>>
\begin<<7014>>itemize<<7014>>
\item
Firstly,
there are unallocated code points within otherwise used blocks.
\item Secondly,
there are special Unicode control characters that do not represent
true characters.
\end<<7015>>itemize<<7015>>
\begin<<8878>>tex2html_deferred<<8878>>\par\end<<8879>>tex2html_deferred<<8879>>
A common myth about Unicode is that it would be ;SPMquot;16-bit;SPMquot;, that is,
Unicode is only represented as 0x10000 (or 65536) characters from 0x0000
to 0xFFFF . This is untrue. Since Unicode 2.0 (July 1996), Unicode has
been defined all the way up to 21 bits (0x10FFFF ), and since Unicode 3.1
(March 2001), characters have been defined beyond 0xFFFF . The first
0x10000 characters are called the Plane 0, or the \index<<8243>>Basic Multilingual Plane<<8243>>\emph<<8244>>Basic Multilingual Plane<<8244>>
(\index<<8245>>BMP<<8245>>\emph<<8246>>BMP<<8246>>). With Unicode 3.1, 17 (yes, seventeen) \index<<8247>>planes<<8247>>\emph<<8248>>planes<<8248>> in all were
defined--but they are nowhere near full of defined characters, yet.
\begin<<8880>>tex2html_deferred<<8880>>\par\end<<8881>>tex2html_deferred<<8881>>
Another myth is that the 256-character blocks have something to do
with languages--that each block would define the characters used by a
language or a set of languages. This is also untrue. The division into
blocks exists, but it is almost completely accidental--an artifact of
how the characters have been and still are allocated. Instead, there is
a concept called \htmladdnormallink<<8249>>scripts<<8249>>
<<8250>>http://en.wikipedia.org/wiki/Unicode\_scripts<<8250>>, which is more useful: there is 
\begin<<7021>>itemize<<7021>>
\item \htmladdnormallink<<8251>>Latin script<<8251>>
<<8252>>http://en.wikipedia.org/wiki/Latin\_characters\_in\_Unicode<<8252>>,
\item \htmladdnormallink<<8253>>Greek script<<8253>>
<<8254>>http://en.wikipedia.org/wiki/Greek\_alphabet\#Greek\_in\_Unicode<<8254>>,
\end<<7026>>itemize<<7026>>
 and so on. Scripts usually span varied parts of several
blocks. For further information see \htmladdnormallink<<8255>><<8257>>\begin<<8882>>tex2html_deferred<<8882>>\tt\end<<8883>>tex2html_deferred<<8883>>Unicode::UCD<<8257>><<8255>>
<<8256>>http://search.cpan.org/perldoc/?Unicode::UCD<<8256>>:
\begin<<8884>>tex2html_deferred<<8884>>\par\end<<8885>>tex2html_deferred<<8885>>
\begin<<7028>>tex2html_preform<<7028>><tex2html_verbatim_mark>verbatim1460#\end<<7029>>tex2html_preform<<7029>>
\begin<<8886>>tex2html_deferred<<8886>>\par\end<<8887>>tex2html_deferred<<8887>>
The Unicode code points are just abstract numbers. To input and output
these abstract numbers, the numbers must be encoded or serialised
somehow. Unicode defines several character encoding forms, of which UTF-8
is perhaps the most popular. UTF-8 is a variable length encoding that
encodes Unicode characters as 1 to 6 bytes (only 4 with the currently
defined characters). Other encodings include UTF-16 and UTF-32 and their
big- and little-endian variants (UTF-8 is byte-order independent) The
ISO/IEC 10646 defines the UCS-2 and UCS-4 encoding forms.
\end<<7030>>quote<<7030>>
\end<<7031>>it<<7031>>
\begin<<8888>>tex2html_deferred<<8888>>\par\end<<8889>>tex2html_deferred<<8889>>
 
  \paragraph<<8258>>Operadores, <<8262>>\begin<<8890>>tex2html_deferred<<8890>>\tt\end<<8891>>tex2html_deferred<<8891>>STDOUT<<8262>> y Unicode<<8258>>
  \begin<<8259>>tabular<<8259>><<8260>>c<<8260>>
  \end<<8261>>tabular<<8261>>

\begin<<8892>>tex2html_deferred<<8892>>\par\end<<8893>>tex2html_deferred<<8893>>
Considere el siguiente programa:
\begin<<7033>>tex2html_preform<<7033>><tex2html_verbatim_mark>verbatim1461#\end<<7034>>tex2html_preform<<7034>>
Cuando lo ejecutamos obtenemos la salida:
\begin<<7035>>tex2html_preform<<7035>><tex2html_verbatim_mark>verbatim1462#\end<<7036>>tex2html_preform<<7036>>
Perl tiene dos modos de procesamiento de datos: el \index<<8263>>modo byte<<8263>>\emph<<8264>>modo byte<<8264>> y el \index<<8265>>modo carácter<<8265>>\emph<<8266>>modo carácter<<8266>>.
El modo por defecto es el \emph<<7039>>modo byte<<7039>>.
Este modo es conveniente cuando se trabaja con ficheros binarios (p. ej. una imagen JPEG) 
y con texto codificado con un código que requiere un sólo byte por carácter como es el caso
de Latin 1.
\begin<<8894>>tex2html_deferred<<8894>>\par\end<<8895>>tex2html_deferred<<8895>>
En efecto, la cadena <tex2html_verb_mark>1118<tex2html_verb_mark> 
- que es una cadena unicode codificada en UTF-8 -
tiene una longitud de 15 bytes. El asunto es que 
no es lo mismo la longitud en bytes que la longitud en caracteres cuando nos salimos de ASCII
y Latin1. Si queremos
que  <<8267>>\begin<<8896>>tex2html_deferred<<8896>>\tt\end<<8897>>tex2html_deferred<<8897>>length<<8267>>  devuelva la longitud en caracteres usemos  <<8268>>\begin<<8898>>tex2html_deferred<<8898>>\tt\end<<8899>>tex2html_deferred<<8899>>utf8<<8268>> :
\begin<<7042>>tex2html_preform<<7042>><tex2html_verbatim_mark>verbatim1463#\end<<7043>>tex2html_preform<<7043>>
Al ejecutar obtenemos la longitud en caracteres:
\begin<<7044>>tex2html_preform<<7044>><tex2html_verbatim_mark>verbatim1464#\end<<7045>>tex2html_preform<<7045>>
Ahora <tex2html_verb_mark>1119<tex2html_verb_mark> retorna la longitud en caracteres.
\begin<<8900>>tex2html_deferred<<8900>>\par\end<<8901>>tex2html_deferred<<8901>>
Obsérvese el mensaje de advertencia.  Si queremos asegurar el buen funcionamiento
de la salida por <tex2html_verb_mark>1120<tex2html_verb_mark> con caracteres codificados en UTF-8 
debemos
llamar a  <<8269>>\begin<<8902>>tex2html_deferred<<8902>>\tt\end<<8903>>tex2html_deferred<<8903>>binmode<<8269>>  sobre <tex2html_verb_mark>1121<tex2html_verb_mark> con la capa <tex2html_verb_mark>1122<tex2html_verb_mark>:
\begin<<8904>>tex2html_deferred<<8904>>\par\end<<8905>>tex2html_deferred<<8905>>
\begin<<7047>>tex2html_preform<<7047>><tex2html_verbatim_mark>verbatim1465#\end<<7048>>tex2html_preform<<7048>>
El mensaje de advertencia desaparece:
\begin<<7049>>tex2html_preform<<7049>><tex2html_verbatim_mark>verbatim1466#\end<<7050>>tex2html_preform<<7050>>
Usando la opción <tex2html_verb_mark>1123<tex2html_verb_mark> del intérprete Perl se puede conseguir el mismo resultado:
\begin<<8906>>tex2html_deferred<<8906>>\par\end<<8907>>tex2html_deferred<<8907>>
\begin<<7051>>tex2html_preform<<7051>><tex2html_verbatim_mark>verbatim1467#\end<<7052>>tex2html_preform<<7052>>
\begin<<8908>>tex2html_deferred<<8908>>\par\end<<8909>>tex2html_deferred<<8909>>
Lea <tex2html_verb_mark>1124<tex2html_verb_mark> \htmladdnormallink<<8270>><<8272>>\begin<<8910>>tex2html_deferred<<8910>>\tt\end<<8911>>tex2html_deferred<<8911>>perlrun<<8272>><<8270>>
 <<8271>>http://search.cpan.org/perldoc?perlrun<<8271>> para mas información sobre estas
opciones:
\begin<<8912>>tex2html_deferred<<8912>>\par\end<<8913>>tex2html_deferred<<8913>>
\begin<<7054>>tex2html_preform<<7054>><tex2html_verbatim_mark>verbatim1468#\end<<7055>>tex2html_preform<<7055>>
\begin<<8914>>tex2html_deferred<<8914>>\par\end<<8915>>tex2html_deferred<<8915>>
En Perl las cadenas tienen un flag que indica si la representación interna 
de la cadena es utf-8.
La función <tex2html_verb_mark>1125<tex2html_verb_mark> de \htmladdnormallink<<8273>><<8275>>\begin<<8916>>tex2html_deferred<<8916>>\tt\end<<8917>>tex2html_deferred<<8917>>utf8<<8275>><<8273>>
<<8274>>http://search.cpan.org/perldoc/?utf8<<8274>> permite conocer
si una cadena esta almacenada internamente como utf-8:
\begin<<7057>>tex2html_preform<<7057>><tex2html_verbatim_mark>verbatim1469#\end<<7058>>tex2html_preform<<7058>>
Al ejecutar produce la salida:
\begin<<7059>>tex2html_preform<<7059>><tex2html_verbatim_mark>verbatim1470#\end<<7060>>tex2html_preform<<7060>>
\begin<<8918>>tex2html_deferred<<8918>>\par\end<<8919>>tex2html_deferred<<8919>>
 
  \paragraph<<8276>>Ficheros Unicode en <<8280>>\begin<<8920>>tex2html_deferred<<8920>>\tt\end<<8921>>tex2html_deferred<<8921>>vim<<8280>><<8276>>
  \begin<<8277>>tabular<<8277>><<8278>>c<<8278>>
  \end<<8279>>tabular<<8279>>

\begin<<8922>>tex2html_deferred<<8922>>\par\end<<8923>>tex2html_deferred<<8923>>
La documentación de vim sobre modo \htmladdnormallink<<8281>><<8283>>\begin<<8924>>tex2html_deferred<<8924>>\tt\end<<8925>>tex2html_deferred<<8925>>Multi-byte support<<8283>><<8281>>
<<8282>>http://vimdoc.sourceforge.net/htmldoc/mbyte.html\#mbyte-utf8<<8282>>
relativa a unicode dice:
\begin<<7064>>it<<7064>>
\begin<<7065>>quote<<7065>>
Useful commands:
\begin<<7066>>itemize<<7066>>
\item <tex2html_verb_mark>1126<tex2html_verb_mark> shows the decimal, hexadecimal and octal value of the character under
  the cursor.  If there are composing characters these are shown too.  (If the
  message is truncated, use ;SPMquot;:messages;SPMquot;).
\item <tex2html_verb_mark>1127<tex2html_verb_mark> shows the bytes used in a UTF-8 character, also the composing
  characters, as hex numbers.
\item <tex2html_verb_mark>1128<tex2html_verb_mark> forces using UTF-8 for all files.  The
  default is to use the current locale for 'encoding' and set 'fileencodings'
  to automatically detect the encoding of a file.
\end<<7067>>itemize<<7067>>
\begin<<8926>>tex2html_deferred<<8926>>\par\end<<8927>>tex2html_deferred<<8927>>
....
\begin<<8928>>tex2html_deferred<<8928>>\par\end<<8929>>tex2html_deferred<<8929>>
If your current \htmladdnormallink<<8284>><<8286>>\begin<<8930>>tex2html_deferred<<8930>>\tt\end<<8931>>tex2html_deferred<<8931>>locale<<8286>><<8284>>
<<8285>>http://manpages.debian.net/cgi-bin/man.cgi?query=locale<<8285>> is in an utf-8 encoding, Vim will automatically start
in utf-8 mode.
\begin<<8932>>tex2html_deferred<<8932>>\par\end<<8933>>tex2html_deferred<<8933>>
If you are using another locale:
\begin<<8934>>tex2html_deferred<<8934>>\par\end<<8935>>tex2html_deferred<<8935>>
\begin<<7069>>tex2html_preform<<7069>><tex2html_verbatim_mark>verbatim1471#\end<<7070>>tex2html_preform<<7070>>
\begin<<8936>>tex2html_deferred<<8936>>\par\end<<8937>>tex2html_deferred<<8937>>
\end<<7071>>quote<<7071>>
\end<<7072>>it<<7072>>
En nuestro caso, tenemos las \htmladdnormallink<<8287>><<8289>>\begin<<8938>>tex2html_deferred<<8938>>\tt\end<<8939>>tex2html_deferred<<8939>>locale<<8289>><<8287>>
<<8288>>http://manpages.debian.net/cgi-bin/man.cgi?query=locale<<8288>> usando utf-8:
\begin<<7074>>tex2html_preform<<7074>><tex2html_verbatim_mark>verbatim1472#\end<<7075>>tex2html_preform<<7075>>
\begin<<8940>>tex2html_deferred<<8940>>\par\end<<8941>>tex2html_deferred<<8941>>
Hay varias formas de crear ficheros Unicode en lenguajes 
fuera del rango del  <<8290>>\begin<<8942>>tex2html_deferred<<8942>>\tt\end<<8943>>tex2html_deferred<<8943>>latin1<<8290>>  con \htmladdnormallink<<8291>><<8293>>\begin<<8944>>tex2html_deferred<<8944>>\tt\end<<8945>>tex2html_deferred<<8945>>vim<<8293>><<8291>><<8292>>http://www.vim.org/<<8292>><<7077>><<7077>>.
\begin<<8946>>tex2html_deferred<<8946>>\par\end<<8947>>tex2html_deferred<<8947>>
Los caracteres unicode en la línea 3 del siguiente fichero
han sido generados en \htmladdnormallink<<7078>>vim<<7078>><<7079>>http://vimdoc.sourceforge.net/htmldoc/mbyte.html\#unicode<<7079>> insertandolos
mediante su codificación usando la secuencia <tex2html_verb_mark>1129<tex2html_verb_mark>. 
\begin<<7080>>tex2html_preform<<7080>><tex2html_verbatim_mark>verbatim1473#\end<<7081>>tex2html_preform<<7081>>
En concreto los códigos creo que fueron: <tex2html_verb_mark>1130<tex2html_verb_mark>, <tex2html_verb_mark>1131<tex2html_verb_mark>, <tex2html_verb_mark>1132<tex2html_verb_mark>, <tex2html_verb_mark>1133<tex2html_verb_mark>, <tex2html_verb_mark>1134<tex2html_verb_mark> y <tex2html_verb_mark>1135<tex2html_verb_mark>.
\begin<<7082>>tex2html_preform<<7082>><tex2html_verbatim_mark>verbatim1474#\end<<7083>>tex2html_preform<<7083>>
Una forma mas cómoda de insertar caracteres Unicode en \htmladdnormallink<<8294>><<8296>>\begin<<8948>>tex2html_deferred<<8948>>\tt\end<<8949>>tex2html_deferred<<8949>>vim<<8296>><<8294>><<8295>>http://www.vim.org/<<8295>><<7084>><<7084>> es usar 
 <<8297>>\begin<<8950>>tex2html_deferred<<8950>>\tt\end<<8951>>tex2html_deferred<<8951>>keymaps<<8297>> :
\begin<<7086>>enumerate<<7086>>
\item
Vea que keymaps están disponibles ejecutando el comando \htmladdnormallink<<8298>><<8300>>\begin<<8952>>tex2html_deferred<<8952>>\tt\end<<8953>>tex2html_deferred<<8953>>vim<<8300>><<8298>><<8299>>http://www.vim.org/<<8299>><<7087>><<7087>>:
\begin<<8954>>tex2html_deferred<<8954>>\par\end<<8955>>tex2html_deferred<<8955>>
\begin<<7088>>tex2html_preform<<7088>><tex2html_verbatim_mark>verbatim1475#\end<<7089>>tex2html_preform<<7089>>
Para entender el comando anterior hay que tener en cuenta que:
\begin<<8956>>tex2html_deferred<<8956>>\par\end<<8957>>tex2html_deferred<<8957>>
\begin<<7090>>itemize<<7090>>
\item
La función \htmladdnormallink<<8301>><<8303>>\begin<<8958>>tex2html_deferred<<8958>>\tt\end<<8959>>tex2html_deferred<<8959>>globpath<<8303>><<8301>>
<<8302>>http://vimdoc.sourceforge.net/htmldoc/eval.html\#globpath()<<8302>> tiene la sintáxis  
<tex2html_verb_mark>1136<tex2html_verb_mark>
y realiza un <<7093>>\begin<<8960>>tex2html_deferred<<8960>>\it\end<<8961>>tex2html_deferred<<8961>>glob<<7093>> de <tex2html_verb_mark>1137<tex2html_verb_mark> sobre la lista de directorios
en <tex2html_verb_mark>1138<tex2html_verb_mark>.
\item
La función \htmladdnormallink<<8304>><<8306>>\begin<<8962>>tex2html_deferred<<8962>>\tt\end<<8963>>tex2html_deferred<<8963>>rtp<<8306>><<8304>>
<<8305>>http://vimdoc.sourceforge.net/htmldoc/options.html\#'rtp'<<8305>> devuelve el <<7096>>\begin<<8964>>tex2html_deferred<<8964>>\it\end<<8965>>tex2html_deferred<<8965>>run-time path<<7096>> de \htmladdnormallink<<8307>><<8309>>\begin<<8966>>tex2html_deferred<<8966>>\tt\end<<8967>>tex2html_deferred<<8967>>vim<<8309>><<8307>><<8308>>http://www.vim.org/<<8308>><<7097>><<7097>>
\item
El comando \htmladdnormallink<<8310>><<8312>>\begin<<8968>>tex2html_deferred<<8968>>\tt\end<<8969>>tex2html_deferred<<8969>>echo<<8312>><<8310>>
<<8311>>http://vimdoc.sourceforge.net/htmldoc/eval.html\#:echo<<8311>> <tex2html_verb_mark>1139<tex2html_verb_mark> muestra los valores
de <tex2html_verb_mark>1140<tex2html_verb_mark>, .. separados por espacios.
\end<<7100>>itemize<<7100>>
\begin<<8970>>tex2html_deferred<<8970>>\par\end<<8971>>tex2html_deferred<<8971>>
Esto mostrará algo como:
\begin<<7101>>tex2html_preform<<7101>><tex2html_verbatim_mark>verbatim1476#\end<<7102>>tex2html_preform<<7102>>
Como se ve el convenio de nombres para los keymaps es:
\begin<<7103>>tex2html_preform<<7103>><tex2html_verbatim_mark>verbatim1477#\end<<7104>>tex2html_preform<<7104>>
Sigue un ejemplo de fichero de keymap:
\begin<<7105>>tex2html_preform<<7105>><tex2html_verbatim_mark>verbatim1478#\end<<7106>>tex2html_preform<<7106>>
\item
Ahora ejecute el comando:
\begin<<7107>>tex2html_preform<<7107>><tex2html_verbatim_mark>verbatim1479#\end<<7108>>tex2html_preform<<7108>>
Cuando estamos en modo <<7109>>\begin<<8972>>tex2html_deferred<<8972>>\it\end<<8973>>tex2html_deferred<<8973>>inserción<<7109>> podemos conmutar
entre los dos keymaps tecleando
\begin<<8974>>tex2html_deferred<<8974>>\par\end<<8975>>tex2html_deferred<<8975>>
\begin<<7110>>tex2html_preform<<7110>><tex2html_verbatim_mark>verbatim1480#\end<<7111>>tex2html_preform<<7111>>
o bien
\begin<<7112>>tex2html_preform<<7112>><tex2html_verbatim_mark>verbatim1481#\end<<7113>>tex2html_preform<<7113>>
\begin<<8976>>tex2html_deferred<<8976>>\par\end<<8977>>tex2html_deferred<<8977>>
\item
Compruebe con que codificación está trabajando <tex2html_verb_mark>1141<tex2html_verb_mark>:
\begin<<7114>>tex2html_preform<<7114>><tex2html_verbatim_mark>verbatim1482#\end<<7115>>tex2html_preform<<7115>>
Es posible cambiar la codificación con la que se está editando:
\begin<<7116>>tex2html_preform<<7116>><tex2html_verbatim_mark>verbatim1483#\end<<7117>>tex2html_preform<<7117>>
Esto no modifica la codificación del fichero.
\item
Para saber mas sobre como utilizar Unicode y keymaps en \htmladdnormallink<<8313>><<8315>>\begin<<8978>>tex2html_deferred<<8978>>\tt\end<<8979>>tex2html_deferred<<8979>>vim<<8315>><<8313>><<8314>>http://www.vim.org/<<8314>><<7118>><<7118>> 
lea las ayudas sobre los tópicos:
\begin<<7119>>itemize<<7119>>
\item <tex2html_verb_mark>1142<tex2html_verb_mark> \htmladdnormallink<<8316>><<8318>>\begin<<8980>>tex2html_deferred<<8980>>\tt\end<<8981>>tex2html_deferred<<8981>>mbyte.txt<<8318>><<8316>>
<<8317>>http://vimdoc.sourceforge.net/htmldoc/mbyte.html\#mbyte.txt<<8317>>                     
\item <tex2html_verb_mark>1143<tex2html_verb_mark> \htmladdnormallink<<8319>><<8321>>\begin<<8982>>tex2html_deferred<<8982>>\tt\end<<8983>>tex2html_deferred<<8983>>mbyte-keymap<<8321>><<8319>>
<<8320>>http://vimdoc.sourceforge.net/htmldoc/mbyte.html#mbyte-keymap<<8320>> 
\end<<7124>>itemize<<7124>>
\end<<7125>>enumerate<<7125>>
\begin<<8984>>tex2html_deferred<<8984>>\par\end<<8985>>tex2html_deferred<<8985>>
 
  \paragraph<<8322>>Apertura de ficheros UTF-8<<8322>>
  \begin<<8323>>tabular<<8323>><<8324>>c<<8324>>
  \end<<8325>>tabular<<8325>>

\begin<<8986>>tex2html_deferred<<8986>>\par\end<<8987>>tex2html_deferred<<8987>>
Use  la forma con tres argumentos de <tex2html_verb_mark>1144<tex2html_verb_mark> y especifique
la capa <tex2html_verb_mark>1145<tex2html_verb_mark> para que la entrada/salida a ese fichero
se procesada por dicha capa. Por ejemplo:
\begin<<8988>>tex2html_deferred<<8988>>\par\end<<8989>>tex2html_deferred<<8989>>
\begin<<7127>>tex2html_preform<<7127>><tex2html_verbatim_mark>verbatim1484#\end<<7128>>tex2html_preform<<7128>>
\begin<<8990>>tex2html_deferred<<8990>>\par\end<<8991>>tex2html_deferred<<8991>>
Al ejecutar produce una salida como esta:
\begin<<7129>>tex2html_preform<<7129>><tex2html_verbatim_mark>verbatim1485#\end<<7130>>tex2html_preform<<7130>>
\begin<<8992>>tex2html_deferred<<8992>>\par\end<<8993>>tex2html_deferred<<8993>>
 
  \paragraph<<8326>>El Módulo <<8330>>\begin<<8994>>tex2html_deferred<<8994>>\tt\end<<8995>>tex2html_deferred<<8995>>charnames<<8330>><<8326>>
  \begin<<8327>>tabular<<8327>><<8328>>c<<8328>>
  \end<<8329>>tabular<<8329>>

\begin<<8996>>tex2html_deferred<<8996>>\par\end<<8997>>tex2html_deferred<<8997>>
El módulo <tex2html_verb_mark>1146<tex2html_verb_mark> facilita la introducción de caracteres unicode:
\begin<<7132>>tex2html_preform<<7132>><tex2html_verbatim_mark>verbatim1486#\end<<7133>>tex2html_preform<<7133>>
Cuando se ejecuta produce una salida como:
\begin<<7134>>tex2html_preform<<7134>><tex2html_verbatim_mark>verbatim1487#\end<<7135>>tex2html_preform<<7135>>
Obsérvese como la salida para <tex2html_verb_mark>1147<tex2html_verb_mark> no muestra la letra griega 
<tex2html_verb_mark>1148<tex2html_verb_mark> sino el correspondiente símbolo Katakana <tex2html_verb_mark>1149<tex2html_verb_mark>: atención a las
colisiones entre alfabetos.
\begin<<8998>>tex2html_deferred<<8998>>\par\end<<8999>>tex2html_deferred<<8999>>
Las funciones <tex2html_verb_mark>1150<tex2html_verb_mark> y <tex2html_verb_mark>1151<tex2html_verb_mark> son recíprocas
y nos dan la relación nombre-código de un carácter:
\begin<<7136>>tex2html_preform<<7136>><tex2html_verbatim_mark>verbatim1488#\end<<7137>>tex2html_preform<<7137>>
 
  \paragraph<<8331>>Expresiones Regulares y Unicode<<8331>>
  \begin<<8332>>tabular<<8332>><<8333>>c<<8333>>
  \end<<8334>>tabular<<8334>>

\begin<<9000>>tex2html_deferred<<9000>>\par\end<<9001>>tex2html_deferred<<9001>>
Usando <tex2html_verb_mark>1152<tex2html_verb_mark> es posible usar operadores 
como <tex2html_verb_mark>1153<tex2html_verb_mark> y expresiones regulares sobre cadenas UTF-8:
\begin<<7139>>tex2html_preform<<7139>><tex2html_verbatim_mark>verbatim1489#\end<<7140>>tex2html_preform<<7140>>
Al ejecutar, este programa produce la salida:
\begin<<7141>>tex2html_preform<<7141>><tex2html_verbatim_mark>verbatim1490#\end<<7142>>tex2html_preform<<7142>>
\begin<<9002>>tex2html_deferred<<9002>>\par\end<<9003>>tex2html_deferred<<9003>>
 
  \paragraph<<8335>>Macros: Dígitos y Words<<8335>>
  \begin<<8336>>tabular<<8336>><<8337>>c<<8337>>
  \end<<8338>>tabular<<8338>>

\begin<<9004>>tex2html_deferred<<9004>>\par\end<<9005>>tex2html_deferred<<9005>>
Macros como <tex2html_verb_mark>1154<tex2html_verb_mark> han sido generalizadas.
Los digitos Devanagari tienen códigos
del 2406 (0x966) al 2415 (0x96F):
\begin<<7144>>tex2html_preform<<7144>><tex2html_verbatim_mark>verbatim1491#\end<<7145>>tex2html_preform<<7145>>
El siguiente ejemplo muestra que  expresiones regulares como <tex2html_verb_mark>1155<tex2html_verb_mark> 
reconocen los digitos Devanagari:
\begin<<7146>>tex2html_preform<<7146>><tex2html_verbatim_mark>verbatim1492#\end<<7147>>tex2html_preform<<7147>>
\begin<<9006>>tex2html_deferred<<9006>>\par\end<<9007>>tex2html_deferred<<9007>>
Como se indica en el programa la conversión automática de dígitos en 
otros juegos de caracteres no funciona. Véase la ejecución:
\begin<<9008>>tex2html_deferred<<9008>>\par\end<<9009>>tex2html_deferred<<9009>>
\begin<<7148>>tex2html_preform<<7148>><tex2html_verbatim_mark>verbatim1493#\end<<7149>>tex2html_preform<<7149>>
\begin<<9010>>tex2html_deferred<<9010>>\par\end<<9011>>tex2html_deferred<<9011>>
Lo mismo ocurre con la macro<tex2html_verb_mark>1156<tex2html_verb_mark>:
\begin<<9012>>tex2html_deferred<<9012>>\par\end<<9013>>tex2html_deferred<<9013>>
\begin<<7150>>tex2html_preform<<7150>><tex2html_verbatim_mark>verbatim1494#\end<<7151>>tex2html_preform<<7151>>
\begin<<9014>>tex2html_deferred<<9014>>\par\end<<9015>>tex2html_deferred<<9015>>
 
  \paragraph<<8339>>Semántica de Carácter versus Semántica de Byte<<8339>>
  \begin<<8340>>tabular<<8340>><<8341>>c<<8341>>
  \end<<8342>>tabular<<8342>>

\begin<<9016>>tex2html_deferred<<9016>>\par\end<<9017>>tex2html_deferred<<9017>>
Cuando se procesan datos codificados en UTF-8 el punto casa
con un carácter UTF-8. La macro <tex2html_verb_mark>1157<tex2html_verb_mark> puede ser 
utilizada para casar un byte:
\begin<<9018>>tex2html_deferred<<9018>>\par\end<<9019>>tex2html_deferred<<9019>>
\begin<<7153>>tex2html_preform<<7153>><tex2html_verbatim_mark>verbatim1495#\end<<7154>>tex2html_preform<<7154>>
\begin<<9020>>tex2html_deferred<<9020>>\par\end<<9021>>tex2html_deferred<<9021>>
El mismo efecto de <tex2html_verb_mark>1158<tex2html_verb_mark> puede lograrse mediante el
pragma <tex2html_verb_mark>1159<tex2html_verb_mark> el cual cambia la semántica de caracteres
a bytes:
\begin<<9022>>tex2html_deferred<<9022>>\par\end<<9023>>tex2html_deferred<<9023>>
\begin<<7155>>tex2html_preform<<7155>><tex2html_verbatim_mark>verbatim1496#\end<<7156>>tex2html_preform<<7156>>
\begin<<9024>>tex2html_deferred<<9024>>\par\end<<9025>>tex2html_deferred<<9025>>
 
  \paragraph<<8343>>Caja e Inversión de Cadenas Unicode<<8343>>
  \begin<<8344>>tabular<<8344>><<8345>>c<<8345>>
  \end<<8346>>tabular<<8346>>

\begin<<9026>>tex2html_deferred<<9026>>\par\end<<9027>>tex2html_deferred<<9027>>
El siguiente ejemplo ilustra el uso de 
las funciones de cambio de caja 
(tales como  <<8347>>\begin<<9028>>tex2html_deferred<<9028>>\tt\end<<9029>>tex2html_deferred<<9029>>uc<<8347>> ,  <<8348>>\begin<<9030>>tex2html_deferred<<9030>>\tt\end<<9031>>tex2html_deferred<<9031>>lc<<8348>> ,  <<8349>>\begin<<9032>>tex2html_deferred<<9032>>\tt\end<<9033>>tex2html_deferred<<9033>>lcfirst<<8349>>  y  <<8350>>\begin<<9034>>tex2html_deferred<<9034>>\tt\end<<9035>>tex2html_deferred<<9035>>ucfirst<<8350>> )
asi como el uso de  <<8351>>\begin<<9036>>tex2html_deferred<<9036>>\tt\end<<9037>>tex2html_deferred<<9037>>reverse<<8351>>  con cadenas unicode:
\begin<<7163>>tex2html_preform<<7163>><tex2html_verbatim_mark>verbatim1497#\end<<7164>>tex2html_preform<<7164>>
Al ejecutarse, el programa produce la salida:
\begin<<9038>>tex2html_deferred<<9038>>\par\end<<9039>>tex2html_deferred<<9039>>
\begin<<7165>>tex2html_preform<<7165>><tex2html_verbatim_mark>verbatim1498#\end<<7166>>tex2html_preform<<7166>>
\begin<<9040>>tex2html_deferred<<9040>>\par\end<<9041>>tex2html_deferred<<9041>>
 
  \paragraph<<8352>>Propiedades<<8352>>
  \begin<<8353>>tabular<<8353>><<8354>>c<<8354>>
  \end<<8355>>tabular<<8355>>

\begin<<9042>>tex2html_deferred<<9042>>\par\end<<9043>>tex2html_deferred<<9043>>
El estandar Unicode declara que cadenas particulares de caracteres
pueden tener propiedades particulares y que una expresión regular puede
casar sobre esas propiedades utilizando la notación <tex2html_verb_mark>1160<tex2html_verb_mark>:
\begin<<9044>>tex2html_deferred<<9044>>\par\end<<9045>>tex2html_deferred<<9045>>
\begin<<7168>>tex2html_preform<<7168>><tex2html_verbatim_mark>verbatim1499#\end<<7169>>tex2html_preform<<7169>>
Al ejecutar este script obtenemos:
\begin<<9046>>tex2html_deferred<<9046>>\par\end<<9047>>tex2html_deferred<<9047>>
\begin<<7170>>tex2html_preform<<7170>><tex2html_verbatim_mark>verbatim1500#\end<<7171>>tex2html_preform<<7171>>
\begin<<9048>>tex2html_deferred<<9048>>\par\end<<9049>>tex2html_deferred<<9049>>
El módulo \htmladdnormallink<<8356>><<8358>>\begin<<9050>>tex2html_deferred<<9050>>\tt\end<<9051>>tex2html_deferred<<9051>>Unicode::Properties<<8358>><<8356>>
 <<8357>>http://search.cpan.org/perldoc?Unicode::Properties<<8357>> permite obtener las 
propiedades de un carácter:
\begin<<9052>>tex2html_deferred<<9052>>\par\end<<9053>>tex2html_deferred<<9053>>
\begin<<7173>>tex2html_preform<<7173>><tex2html_verbatim_mark>verbatim1501#\end<<7174>>tex2html_preform<<7174>>
\begin<<9054>>tex2html_deferred<<9054>>\par\end<<9055>>tex2html_deferred<<9055>>
 
  \paragraph<<8359>>Conversores<<8359>>
  \begin<<8360>>tabular<<8360>><<8361>>c<<8361>>
  \end<<8362>>tabular<<8362>>

\begin<<9056>>tex2html_deferred<<9056>>\par\end<<9057>>tex2html_deferred<<9057>>
Hay un buen número de utilidades de conversión 
\begin<<9058>>tex2html_deferred<<9058>>\par\end<<9059>>tex2html_deferred<<9059>>
\begin<<7176>>itemize<<7176>>
\item
 <<8363>>\begin<<9060>>tex2html_deferred<<9060>>\tt\end<<9061>>tex2html_deferred<<9061>>unicode<<8363>>  permite hacer consultas sobre los caracteres unicode:
\begin<<9062>>tex2html_deferred<<9062>>\par\end<<9063>>tex2html_deferred<<9063>>
\begin<<7178>>tex2html_preform<<7178>><tex2html_verbatim_mark>verbatim1502#\end<<7179>>tex2html_preform<<7179>>
\begin<<9064>>tex2html_deferred<<9064>>\par\end<<9065>>tex2html_deferred<<9065>>
\item
 <<8364>>\begin<<9066>>tex2html_deferred<<9066>>\tt\end<<9067>>tex2html_deferred<<9067>>iconv<<8364>>  permite la conversión entre codificaciones. El
siguiente programa usa <tex2html_verb_mark>1161<tex2html_verb_mark>
para convertir ficheros latin1 a utf-8:
\begin<<7181>>tex2html_preform<<7181>><tex2html_verbatim_mark>verbatim1503#\end<<7182>>tex2html_preform<<7182>>
\item  <<8365>>\begin<<9068>>tex2html_deferred<<9068>>\tt\end<<9069>>tex2html_deferred<<9069>>piconv<<8365>>  viene con las distribuciones de Perl superiores a la 5.8
\item  <<8366>>\begin<<9070>>tex2html_deferred<<9070>>\tt\end<<9071>>tex2html_deferred<<9071>>paps<<8366>>  permite imprimir ficheros de texto conteniendo unicode
\begin<<9072>>tex2html_deferred<<9072>>\par\end<<9073>>tex2html_deferred<<9073>>
\begin<<7185>>tex2html_preform<<7185>><tex2html_verbatim_mark>verbatim1504#\end<<7186>>tex2html_preform<<7186>>
\end<<7187>>itemize<<7187>>
\begin<<9074>>tex2html_deferred<<9074>>\par\end<<9075>>tex2html_deferred<<9075>>
 
  \paragraph<<8367>>Véase también<<8367>>
  \begin<<8368>>tabular<<8368>><<8369>>c<<8369>>
  \end<<8370>>tabular<<8370>>

\begin<<9076>>tex2html_deferred<<9076>>\par\end<<9077>>tex2html_deferred<<9077>>
\begin<<7189>>itemize<<7189>>
\item La documentación en \htmladdnormallink<<8371>><<8373>>\begin<<9078>>tex2html_deferred<<9078>>\tt\end<<9079>>tex2html_deferred<<9079>>perluniintro<<8373>><<8371>>
 <<8372>>http://search.cpan.org/perldoc?perluniintro<<8372>> (<tex2html_verb_mark>1162<tex2html_verb_mark>) 
\item La documentación en \htmladdnormallink<<8374>><<8376>>\begin<<9080>>tex2html_deferred<<9080>>\tt\end<<9081>>tex2html_deferred<<9081>>perlunicode<<8376>><<8374>>
 <<8375>>http://search.cpan.org/perldoc?perlunicode<<8375>>
\item Enrique Nell: \htmladdnormallink<<7192>>Unicode for Perl Programmers<<7192>><<7193>>http://www.haboogo.com/programming/Unicode\%20en\%20Perl.pdf<<7193>>
\item \htmladdnormallink<<7194>>Unicode 5.2 Character Code Charts<<7194>><<7195>>http://www.unicode.org/charts/<<7195>>
\item \htmladdnormallink<<7196>>Perl Unicode Advice<<7196>><<7197>>http://juerd.nl/site.plp/perluniadvice<<7197>>
\item \htmladdnormallink<<7198>>Unicode-processing issues in Perl and how to cope with it<<7198>><<7199>>http://ahinea.com/en/tech/perl-unicode-struggle.html<<7199>>
\end<<7200>>itemize<<7200>>
\begin<<9082>>tex2html_deferred<<9082>>\par\end<<9083>>tex2html_deferred<<9083>>
<tex2html_endfile>#./unicode/unicode.tex#
\begin<<9084>>tex2html_deferred<<9084>>\par\end<<9085>>tex2html_deferred<<9085>>
\section<<7201>>Expresiones Regulares en Otros Lenguajes<<7201>>
\label<<7202>>section:otroslenguajes<<7202>>
\begin<<9086>>tex2html_deferred<<9086>>\par\end<<9087>>tex2html_deferred<<9087>>
 
  \paragraph<<8377>>Vim<<8377>>
  \begin<<8378>>tabular<<8378>><<8379>>c<<8379>>
  \end<<8380>>tabular<<8380>>

\begin<<9088>>tex2html_deferred<<9088>>\par\end<<9089>>tex2html_deferred<<9089>>
\begin<<7204>>itemize<<7204>>
\item \htmladdnormallink<<8381>>Learn vi/vim in 50 lines and 15 minutes<<8381>>
<<8382>>http://www.perlmonks.org/?node_id=333737<<8382>>
\item  \htmladdnormallink<<7207>>VIM Regular Expressions<<7207>><<7208>>http://www.geocities.com/volontir/<<7208>>
\item \htmladdnormallink<<8383>>Editing features for advanced users<<8383>>
<<8384>>http://www.perlmonks.org/?node_id=141765<<8384>>
\item \htmladdnormallink<<7211>>Vim documentation: pattern<<7211>><<7212>>http://www.vim.org/htmldoc/pattern.html<<7212>>
\item \htmladdnormallink<<7213>>Vim Regular Expressions Chart<<7213>><<7214>>http://www.softpanorama.org/Editors/Vimorama/vim\_regular\_expressions.shtml<<7214>>
\end<<7215>>itemize<<7215>>
\begin<<9090>>tex2html_deferred<<9090>>\par\end<<9091>>tex2html_deferred<<9091>>
 
  \paragraph<<8385>>Java<<8385>>
  \begin<<8386>>tabular<<8386>><<8387>>c<<8387>>
  \end<<8388>>tabular<<8388>>

\begin<<9092>>tex2html_deferred<<9092>>\par\end<<9093>>tex2html_deferred<<9093>>
El siguiente ejemplo muestra un programa estilo <tex2html_verb_mark>1163<tex2html_verb_mark>: solicita
una expresión regular para aplicarla luego a una serie de entradas 
leídas desde la entrada estandar.
\begin<<7217>>tex2html_preform<<7217>><tex2html_verbatim_mark>verbatim1505#\end<<7218>>tex2html_preform<<7218>>
Ejecución:
\begin<<7219>>tex2html_preform<<7219>><tex2html_verbatim_mark>verbatim1506#\end<<7220>>tex2html_preform<<7220>>
\begin<<9094>>tex2html_deferred<<9094>>\par\end<<9095>>tex2html_deferred<<9095>>
Véase también 
\htmladdnormallink
<<7221>>Java Regular Expressions<<7221>>
<<7222>>http://java.sun.com/docs/books/tutorial/essential/regex/<<7222>>
\begin<<9096>>tex2html_deferred<<9096>>\par\end<<9097>>tex2html_deferred<<9097>>
 
  \paragraph<<8389>>bash<<8389>>
  \begin<<8390>>tabular<<8390>><<8391>>c<<8391>>
  \end<<8392>>tabular<<8392>>

\begin<<9098>>tex2html_deferred<<9098>>\par\end<<9099>>tex2html_deferred<<9099>>
Esta es una versión en <tex2html_verb_mark>1164<tex2html_verb_mark> del conversor de temperaturas
visto en las secciones anteriores:
\begin<<9100>>tex2html_deferred<<9100>>\par\end<<9101>>tex2html_deferred<<9101>>
\begin<<7224>>tex2html_preform<<7224>><tex2html_verbatim_mark>verbatim1507#\end<<7225>>tex2html_preform<<7225>>
\begin<<9102>>tex2html_deferred<<9102>>\par\end<<9103>>tex2html_deferred<<9103>>
 
  \paragraph<<8393>>C<<8393>>
  \begin<<8394>>tabular<<8394>><<8395>>c<<8395>>
  \end<<8396>>tabular<<8396>>

\begin<<9104>>tex2html_deferred<<9104>>\par\end<<9105>>tex2html_deferred<<9105>>
\begin<<7227>>tex2html_preform<<7227>><tex2html_verbatim_mark>verbatim1508#\end<<7228>>tex2html_preform<<7228>>
Compilación:
\begin<<7229>>tex2html_preform<<7229>><tex2html_verbatim_mark>verbatim1509#\end<<7230>>tex2html_preform<<7230>>
\begin<<9106>>tex2html_deferred<<9106>>\par\end<<9107>>tex2html_deferred<<9107>>
Cuando se ejecuta espera un patrón en la línea de comandos
y pasa a leer desde la entrada estandar. Las cadenas que casan
se muestran resaltadas:
\begin<<7231>>tex2html_preform<<7231>><tex2html_verbatim_mark>verbatim1510#\end<<7232>>tex2html_preform<<7232>>
\noindent \underline<<7233>>435<<7233>> <<7234>>\begin<<9108>>tex2html_deferred<<9108>>\tt\end<<9109>>tex2html_deferred<<9109>>otro<<7234>> \underline<<7235>>23<<7235>>
\begin<<7236>>tex2html_preform<<7236>><tex2html_verbatim_mark>verbatim1511#\end<<7237>>tex2html_preform<<7237>>
\begin<<9110>>tex2html_deferred<<9110>>\par\end<<9111>>tex2html_deferred<<9111>>
 
  \paragraph<<8397>>Python<<8397>>
  \begin<<8398>>tabular<<8398>><<8399>>c<<8399>>
  \end<<8400>>tabular<<8400>>

\begin<<9112>>tex2html_deferred<<9112>>\par\end<<9113>>tex2html_deferred<<9113>>
\begin<<7239>>tex2html_preform<<7239>><tex2html_verbatim_mark>verbatim1512#\end<<7240>>tex2html_preform<<7240>>
\begin<<9114>>tex2html_deferred<<9114>>\par\end<<9115>>tex2html_deferred<<9115>>
 
  \paragraph<<8401>>Ruby<<8401>>
  \begin<<8402>>tabular<<8402>><<8403>>c<<8403>>
  \end<<8404>>tabular<<8404>>

\begin<<9116>>tex2html_deferred<<9116>>\par\end<<9117>>tex2html_deferred<<9117>>
\begin<<7242>>tex2html_preform<<7242>><tex2html_verbatim_mark>verbatim1513#\end<<7243>>tex2html_preform<<7243>>
\begin<<9118>>tex2html_deferred<<9118>>\par\end<<9119>>tex2html_deferred<<9119>>
 
  \paragraph<<8405>>Javascript<<8405>>
  \begin<<8406>>tabular<<8406>><<8407>>c<<8407>>
  \end<<8408>>tabular<<8408>>

\begin<<9120>>tex2html_deferred<<9120>>\par\end<<9121>>tex2html_deferred<<9121>>
\begin<<7245>>tex2html_preform<<7245>><tex2html_verbatim_mark>verbatim1514#\end<<7246>>tex2html_preform<<7246>>
\begin<<9122>>tex2html_deferred<<9122>>\par\end<<9123>>tex2html_deferred<<9123>>
\section<<7247>>Casos de Estudio<<7247>>
\begin<<9124>>tex2html_deferred<<9124>>\par\end<<9125>>tex2html_deferred<<9125>>
\subsection<<7248>>Secuencias de números de tamaño fijo<<7248>>
\label<<7249>>section:numeros<<7249>>
El siguiente problema y sus soluciones se describen en el libro de J.E.F. Friedl
\cite<<7250>>friedl<<7250>>.
Supongamos que tenemos un texto conteniendo códigos que son 
números de tamaño fijo, digamos 
seis dígitos, todos pegados, sin separadores entre ellos, como sigue:
\begin<<9126>>tex2html_deferred<<9126>>\par\end<<9127>>tex2html_deferred<<9127>>
\begin<<7251>>center<<7251>>
\begin<<7252>>tt<<7252>> 
012345678901<<7253>>\begin<<9128>>tex2html_deferred<<9128>>\bf\end<<9129>>tex2html_deferred<<9129>>123334<<7253>>234567890123<<7254>>\begin<<9130>>tex2html_deferred<<9130>>\bf\end<<9131>>tex2html_deferred<<9131>>125934<<7254>>890123345126
\end<<7255>>tt<<7255>> 
\end<<7256>>center<<7256>>
\begin<<9132>>tex2html_deferred<<9132>>\par\end<<9133>>tex2html_deferred<<9133>>
El problema es encontrar los códigos que comienzan por <<7257>>\begin<<9134>>tex2html_deferred<<9134>>\tt\end<<9135>>tex2html_deferred<<9135>>12<<7257>>. En negrita 
se han resaltado las soluciones.  Son soluciones sólo aquellas que, comienzan
por <tex2html_verb_mark>1165<tex2html_verb_mark> en una posición múltiplo de seis. 
Una solución es:
\begin<<9136>>tex2html_deferred<<9136>>\par\end<<9137>>tex2html_deferred<<9137>>
\begin<<7258>>center<<7258>>
\begin<<7259>>tex2html_preform<<7259>><tex2html_verbatim_mark>verbatim1515#\end<<7260>>tex2html_preform<<7260>>
\end<<7261>>center<<7261>>
\begin<<9138>>tex2html_deferred<<9138>>\par\end<<9139>>tex2html_deferred<<9139>>
que genera una lista con los números y luego selecciona los que comienzan por
<tex2html_verb_mark>1166<tex2html_verb_mark>.
Otra solución es:
\begin<<9140>>tex2html_deferred<<9140>>\par\end<<9141>>tex2html_deferred<<9141>>
\begin<<7262>>center<<7262>>
\begin<<7263>>tex2html_preform<<7263>><tex2html_verbatim_mark>verbatim1516#\end<<7264>>tex2html_preform<<7264>>
\end<<7265>>center<<7265>>
\begin<<9142>>tex2html_deferred<<9142>>\par\end<<9143>>tex2html_deferred<<9143>>
que aprovecha que la expresión regular devolverá una lista vacía cuando
el número no empieza por <tex2html_verb_mark>1167<tex2html_verb_mark>:
\begin<<7266>>tex2html_preform<<7266>><tex2html_verbatim_mark>verbatim1517#\end<<7267>>tex2html_preform<<7267>>
Obsérvese que se esta utilizando también que el operador <tex2html_verb_mark>1168<tex2html_verb_mark> no es \emph<<7268>>greedy<<7268>>.
\begin<<9144>>tex2html_deferred<<9144>>\par\end<<9145>>tex2html_deferred<<9145>>
¿Se puede resolver el problema usando sólamente una expresión regular?
Obsérvese que esta solución ``casi funciona'':
\begin<<9146>>tex2html_deferred<<9146>>\par\end<<9147>>tex2html_deferred<<9147>>
\begin<<7269>>center<<7269>>
\begin<<7270>>tex2html_preform<<7270>><tex2html_verbatim_mark>verbatim1518#\end<<7271>>tex2html_preform<<7271>>
\end<<7272>>center<<7272>>
\begin<<9148>>tex2html_deferred<<9148>>\par\end<<9149>>tex2html_deferred<<9149>>
recoge la secuencia mas corta de grupos de seis dígitos que no casan, seguida 
de una secuencia que casa. 
El problema que tiene esta solución 
es al final, cuando se han casado todas las soluciones, entonces 
la búsqueda exhaustiva hará que nos muestre soluciones que no comienzan en posiciones
múltiplo de seis. Por eso encuentra <tex2html_verb_mark>1169<tex2html_verb_mark>:
\begin<<7273>>center<<7273>>
\begin<<7274>>tt<<7274>> 
012345678901<<7275>>\begin<<9150>>tex2html_deferred<<9150>>\bf\end<<9151>>tex2html_deferred<<9151>>123334<<7275>>234567890123<<7276>>\begin<<9152>>tex2html_deferred<<9152>>\bf\end<<9153>>tex2html_deferred<<9153>>125934<<7276>>890<<7277>>\begin<<9154>>tex2html_deferred<<9154>>\bf\end<<9155>>tex2html_deferred<<9155>>123345<<7277>>126
\end<<7278>>tt<<7278>> 
\end<<7279>>center<<7279>>
Por eso, Friedl propone esta solución:
\begin<<9156>>tex2html_deferred<<9156>>\par\end<<9157>>tex2html_deferred<<9157>>
\begin<<7280>>center<<7280>>
\begin<<7281>>tex2html_preform<<7281>><tex2html_verbatim_mark>verbatim1519#\end<<7282>>tex2html_preform<<7282>>
\end<<7283>>center<<7283>>
\begin<<9158>>tex2html_deferred<<9158>>\par\end<<9159>>tex2html_deferred<<9159>>
Se asume que existe al menos un éxito en la entrada inicial.
Que es un extraordinario ejemplo de como el uso de paréntesis de agrupamiento
simplifica y mejora la legibilidad de la solución. Es fantástico también el uso
del operador de predicción negativo.
\begin<<9160>>tex2html_deferred<<9160>>\par\end<<9161>>tex2html_deferred<<9161>>
 
  \paragraph<<8409>>Solución usando el ancla <<8413>>\begin<<9162>>tex2html_deferred<<9162>>\tt\end<<9163>>tex2html_deferred<<9163>>\begin<<8820>>tex2html_wrap_inline<<8820>>$\backslash$\end<<8821>>tex2html_wrap_inline<<8821>>\space G<<8413>><<8409>>
  \begin<<8410>>tabular<<8410>><<8411>>c<<8411>>
  \end<<8412>>tabular<<8412>>

\begin<<9164>>tex2html_deferred<<9164>>\par\end<<9165>>tex2html_deferred<<9165>>
El ancla <tex2html_verb_mark>1170<tex2html_verb_mark> ha sido concebida para su uso con la opción <tex2html_verb_mark>1171<tex2html_verb_mark>.
Casa con el punto en la cadena en el que terminó el último emparejamiento.
Cuando se trata del primer intento o no se está usando <tex2html_verb_mark>1172<tex2html_verb_mark>, usar <tex2html_verb_mark>1173<tex2html_verb_mark>
es lo mismo que usar <tex2html_verb_mark>1174<tex2html_verb_mark>.
\begin<<9166>>tex2html_deferred<<9166>>\par\end<<9167>>tex2html_deferred<<9167>>
Mediante el uso de este ancla es posible formular la siguiente solución 
al problema planteado:
\begin<<9168>>tex2html_deferred<<9168>>\par\end<<9169>>tex2html_deferred<<9169>>
\begin<<7285>>center<<7285>>
\begin<<7286>>tex2html_preform<<7286>><tex2html_verbatim_mark>verbatim1520#\end<<7287>>tex2html_preform<<7287>>
\end<<7288>>center<<7288>>
\begin<<9170>>tex2html_deferred<<9170>>\par\end<<9171>>tex2html_deferred<<9171>>
 
  \paragraph<<8414>>Sustitución<<8414>>
  \begin<<8415>>tabular<<8415>><<8416>>c<<8416>>
  \end<<8417>>tabular<<8417>>

\begin<<9172>>tex2html_deferred<<9172>>\par\end<<9173>>tex2html_deferred<<9173>>
Si lo que se quiere es sustituir las secuencias deseadas es poisble hacerlo con 
la siguiente expresión regular:
\begin<<7290>>tex2html_preform<<7290>><tex2html_verbatim_mark>verbatim1521#\end<<7291>>tex2html_preform<<7291>>
\begin<<9174>>tex2html_deferred<<9174>>\par\end<<9175>>tex2html_deferred<<9175>>
\subsection<<7292>>Palabras Repetidas<<7292>>
\label<<7293>>section:repetidas<<7293>>
Su jefe le pide una herramienta que compruebe la aparición de
duplicaciones consecutivas en un texto texto (como esta esta y la anterior anterior).
La solución debe cumplir las siguientes especificaciones:
\begin<<7294>>itemize<<7294>>
\item
Aceptar cualquier número de ficheros. Resaltar las apariciones
de duplicaciones. Cada línea del informe debe estar precedida del nombre del fichero.
\item
Funcionar no sólo cuando la duplicación ocurre en la misma línea.
\item
Funcionar independientemente del \emph<<7295>>case<<7295>> y de los blancos usados en medio
de ambas palabras.
\item
Las palabras en cuestión pueden estar separadas por \emph<<7296>>tags<<7296>> <tex2html_verb_mark>1175<tex2html_verb_mark>.
\end<<7297>>itemize<<7297>>
\begin<<9176>>tex2html_deferred<<9176>>\par\end<<9177>>tex2html_deferred<<9177>>
<tex2html_verbatim_mark>rawhtml1522#<tex2html_comment_mark>1373
\begin<<9178>>tex2html_deferred<<9178>>\par\end<<9179>>tex2html_deferred<<9179>>
<tex2html_verbatim_mark>rawhtml1523#
\begin<<9180>>tex2html_deferred<<9180>>\par\end<<9181>>tex2html_deferred<<9181>>
\subsection<<7298>>Análisis de cadenas con datos separados por comas<<7298>>
\label<<7299>>section:csv<<7299>>
Supongamos que tenemos cierto texto en <tex2html_verb_mark>1176<tex2html_verb_mark> proveniente
de un fichero <tex2html_verb_mark>1177<tex2html_verb_mark> (\emph<<7300>>Comma Separated Values<<7300>>). Esto es
el fichero contiene líneas con el formato:
\begin<<9182>>tex2html_deferred<<9182>>\par\end<<9183>>tex2html_deferred<<9183>>
\begin<<7301>>tex2html_preform<<7301>><tex2html_verbatim_mark>verbatim1524#\end<<7302>>tex2html_preform<<7302>>
\begin<<9184>>tex2html_deferred<<9184>>\par\end<<9185>>tex2html_deferred<<9185>>
Esta línea representa cinco campos.
Es razonable querer guardar esta información en un \emph<<7303>>array<<7303>>,
digamos <tex2html_verb_mark>1178<tex2html_verb_mark>, de manera que <tex2html_verb_mark>1179<tex2html_verb_mark>,
<tex2html_verb_mark>1180<tex2html_verb_mark>, etc.
Esto no sólo implica descomponer la cadena en campos sino
también quitar las comillas de los campos entrecomillados.
La primera solución que se nos ocurre es hacer uso de la
función <tex2html_verb_mark>1181<tex2html_verb_mark>:
\begin<<9186>>tex2html_deferred<<9186>>\par\end<<9187>>tex2html_deferred<<9187>>
\begin<<7304>>tex2html_preform<<7304>><tex2html_verbatim_mark>verbatim1525#\end<<7305>>tex2html_preform<<7305>>
\begin<<9188>>tex2html_deferred<<9188>>\par\end<<9189>>tex2html_deferred<<9189>>
Pero esta solución deja las comillas dobles en  los campos
entrecomillados.  Peor aún, los campos entrecomillados pueden contener
comas, en cuyo caso  la división proporcionada por <tex2html_verb_mark>1182<tex2html_verb_mark> sería
errónea. 
\begin<<9190>>tex2html_deferred<<9190>>\par\end<<9191>>tex2html_deferred<<9191>>
\begin<<7306>>tex2html_preform<<7306>><tex2html_verbatim_mark>verbatim1526#\end<<7307>>tex2html_preform<<7307>>
\begin<<9192>>tex2html_deferred<<9192>>\par\end<<9193>>tex2html_deferred<<9193>>
Las subrutinas  en Perl reciben sus argumentos en el \emph<<7308>>array<<7308>>
<tex2html_verb_mark>1183<tex2html_verb_mark>. Si la lista de argumentos contiene listas, estas 
son ``aplanadas'' en una única lista. Si, como es el caso, la subrutina
ha sido declarada antes de la llamada, los argumentos pueden
escribirse sin paréntesis que les rodeen:
\begin<<7309>>tex2html_preform<<7309>><tex2html_verbatim_mark>verbatim1527#\end<<7310>>tex2html_preform<<7310>>
\begin<<9194>>tex2html_deferred<<9194>>\par\end<<9195>>tex2html_deferred<<9195>>
Otro modo de llamar una subrutina es usando el prefijo <tex2html_verb_mark>1184<tex2html_verb_mark>,
pero sin proporcionar lista de argumentos.
\begin<<7311>>tex2html_preform<<7311>><tex2html_verbatim_mark>verbatim1528#\end<<7312>>tex2html_preform<<7312>>
En este caso se le pasa a la rutina el valor actual del  \emph<<7313>>array<<7313>> <tex2html_verb_mark>1185<tex2html_verb_mark>.
\begin<<9196>>tex2html_deferred<<9196>>\par\end<<9197>>tex2html_deferred<<9197>>
Los operadores <tex2html_verb_mark>1186<tex2html_verb_mark> (usado en la línea 17) y <tex2html_verb_mark>1187<tex2html_verb_mark> trabajan
sobre el final del \emph<<7314>>array<<7314>>. De manera análoga los operadores
<tex2html_verb_mark>1188<tex2html_verb_mark> y <tex2html_verb_mark>1189<tex2html_verb_mark> lo hacen sobre el comienzo.
El operador ternario <tex2html_verb_mark>1190<tex2html_verb_mark> trabaja de manera análoga como lo hace en C.
\begin<<9198>>tex2html_deferred<<9198>>\par\end<<9199>>tex2html_deferred<<9199>>
El código del <tex2html_verb_mark>1191<tex2html_verb_mark> podría sustituirse por este otro:
\begin<<7315>>tex2html_preform<<7315>><tex2html_verbatim_mark>verbatim1529#\end<<7316>>tex2html_preform<<7316>>
Puesto que la variable <tex2html_verb_mark>1192<tex2html_verb_mark> contiene la cadena que ha casado
con el último paréntesis que haya casado en el ultimo ``matching''.
\begin<<9200>>tex2html_deferred<<9200>>\par\end<<9201>>tex2html_deferred<<9201>>
La segunda parte del código muestra que existe un 
módulo en Perl, el módulo <tex2html_verb_mark>1193<tex2html_verb_mark> que proporciona la rutina <tex2html_verb_mark>1194<tex2html_verb_mark> que hace la misma función que nuestra subrutina.
\begin<<9202>>tex2html_deferred<<9202>>\par\end<<9203>>tex2html_deferred<<9203>>
Sigue un ejemplo de ejecución:
\begin<<7317>>tex2html_preform<<7317>><tex2html_verbatim_mark>verbatim1530#\end<<7318>>tex2html_preform<<7318>>
\begin<<9204>>tex2html_deferred<<9204>>\par\end<<9205>>tex2html_deferred<<9205>>
\subsection<<7319>>Las Expresiones Regulares como Exploradores de un Árbol de Soluciones<<7319>>
\begin<<9206>>tex2html_deferred<<9206>>\par\end<<9207>>tex2html_deferred<<9207>>
 
  \paragraph<<8418>>Números Primos<<8418>>
  \begin<<8419>>tabular<<8419>><<8420>>c<<8420>>
  \end<<8421>>tabular<<8421>>

\begin<<9208>>tex2html_deferred<<9208>>\par\end<<9209>>tex2html_deferred<<9209>>
El siguiente programa evalúa si un número es primo o no:
\begin<<7321>>tex2html_preform<<7321>><tex2html_verbatim_mark>verbatim1531#\end<<7322>>tex2html_preform<<7322>>
Siguen varias ejecuciones:
\begin<<7323>>tex2html_preform<<7323>><tex2html_verbatim_mark>verbatim1532#\end<<7324>>tex2html_preform<<7324>>
\begin<<9210>>tex2html_deferred<<9210>>\par\end<<9211>>tex2html_deferred<<9211>>
 
  \paragraph<<8422>>Ecuaciones Diofánticas: Una solución<<8422>>
  \begin<<8423>>tabular<<8423>><<8424>>c<<8424>>
  \end<<8425>>tabular<<8425>>

\begin<<9212>>tex2html_deferred<<9212>>\par\end<<9213>>tex2html_deferred<<9213>>
Según dice la entrada \htmladdnormallink<<8426>>Diophantine\_equation<<8426>>
<<8427>>http://en.wikipedia.org/wiki/Diophantine\_equation<<8427>> en la wikipedia:
\begin<<9214>>tex2html_deferred<<9214>>\par\end<<9215>>tex2html_deferred<<9215>>
\begin<<7327>>it<<7327>>
\begin<<7328>>quotation<<7328>>
In mathematics, a Diophantine equation is an indeterminate polynomial equation that allows the variables to be integers only. 
\end<<7329>>quotation<<7329>>
\end<<7330>>it<<7330>>
\begin<<9216>>tex2html_deferred<<9216>>\par\end<<9217>>tex2html_deferred<<9217>>
La siguiente sesión con el depurador muestra como se puede 
resolver una ecuación lineal diofántica con coeficientes 
positivos usando una expresión regular:
\begin<<9218>>tex2html_deferred<<9218>>\par\end<<9219>>tex2html_deferred<<9219>>
\begin<<7331>>tex2html_preform<<7331>><tex2html_verbatim_mark>verbatim1533#\end<<7332>>tex2html_preform<<7332>>
\begin<<9220>>tex2html_deferred<<9220>>\par\end<<9221>>tex2html_deferred<<9221>>
 
  \paragraph<<8428>>Ecuaciones Diofánticas: Todas las soluciones<<8428>>
  \begin<<8429>>tabular<<8429>><<8430>>c<<8430>>
  \end<<8431>>tabular<<8431>>

\begin<<9222>>tex2html_deferred<<9222>>\par\end<<9223>>tex2html_deferred<<9223>>
Usando el verbo <tex2html_verb_mark>1195<tex2html_verb_mark> es posible obtener todas las soluciones:
\begin<<7334>>tex2html_preform<<7334>><tex2html_verbatim_mark>verbatim1534#\end<<7335>>tex2html_preform<<7335>>
\begin<<9224>>tex2html_deferred<<9224>>\par\end<<9225>>tex2html_deferred<<9225>>
 
  \paragraph<<8432>>Ecuaciones Diofánticas: Resolutor general<<8432>>
  \begin<<8433>>tabular<<8433>><<8434>>c<<8434>>
  \end<<8435>>tabular<<8435>>

\begin<<9226>>tex2html_deferred<<9226>>\par\end<<9227>>tex2html_deferred<<9227>>
El siguiente programa recibe en línea de comandos los coeficientes y 
término inependeinte de una ecuación lineal diofántica con coeficientes 
positivos y muestra todas las soluciones. El
algoritmo primero crea una cadena conteniendo 
el código Perl que contiene la expresión regular adecuada 
para pasar luego a evaluarlo:
\begin<<7337>>tex2html_preform<<7337>><tex2html_verbatim_mark>verbatim1535#\end<<7338>>tex2html_preform<<7338>>
Sigue un ejemplo de ejecución:
\begin<<7339>>tex2html_preform<<7339>><tex2html_verbatim_mark>verbatim1536#\end<<7340>>tex2html_preform<<7340>>
\begin<<9228>>tex2html_deferred<<9228>>\par\end<<9229>>tex2html_deferred<<9229>>
 
  \paragraph<<8436>>Las  Tres Hijas<<8436>>
  \begin<<8437>>tabular<<8437>><<8438>>c<<8438>>
  \end<<8439>>tabular<<8439>>

\label<<7342>>parrfo:lastreshijas<<7342>>
\begin<<9230>>tex2html_deferred<<9230>>\par\end<<9231>>tex2html_deferred<<9231>>
En la páginas de Retos Matemáticos de
\begin<<9232>>tex2html_deferred<<9232>>\par\end<<9233>>tex2html_deferred<<9233>>
\htmladdnormallink<<7343>>DIVULGAMAT<<7343>><<7344>>http://divulgamat.ehu.es/weborriak/RetosMatematicos/Problemas/Prob15.asp<<7344>>
\begin<<9234>>tex2html_deferred<<9234>>\par\end<<9235>>tex2html_deferred<<9235>>
puede encontrarse el siguiente problema:
\begin<<9236>>tex2html_deferred<<9236>>\par\end<<9237>>tex2html_deferred<<9237>>
\begin<<8206>>theorem_type<<8206>>[exercise][exercise][section][][][]
Dos matemáticos se vieron en la calle después de muchos años sin coincidir.
\begin<<9238>>tex2html_deferred<<9238>>\par\end<<9239>>tex2html_deferred<<9239>>
\begin<<7346>>itemize<<7346>>
\item  ¡Hola!, ¿qué tal?, ¿te casaste?, y... ¿cuántos hijos tienes?
\item  Pues tengo tres hijas.
\item  ¿y qué años tienen?
\item  ¡A ver si lo adivinas!: el producto de las edades de las tres es 36, y su suma es el número del portal que ves enfrente...
\item  ¡Me falta un dato!
\item  ¡Ah, sí!, ¡la mayor toca el piano!
\end<<7347>>itemize<<7347>>
\begin<<9240>>tex2html_deferred<<9240>>\par\end<<9241>>tex2html_deferred<<9241>>
¿Qué edad tendrán las tres hijas?
\begin<<9242>>tex2html_deferred<<9242>>\par\end<<9243>>tex2html_deferred<<9243>>
¿Podemos ayudarnos de una expresión regular para resolver el problema?
Al ejecutar el siguiente programa:
\begin<<9244>>tex2html_deferred<<9244>>\par\end<<9245>>tex2html_deferred<<9245>>
\begin<<7348>>tex2html_preform<<7348>><tex2html_verbatim_mark>verbatim1537#\end<<7349>>tex2html_preform<<7349>>
\begin<<9246>>tex2html_deferred<<9246>>\par\end<<9247>>tex2html_deferred<<9247>>
obtenemos la salida:
\begin<<9248>>tex2html_deferred<<9248>>\par\end<<9249>>tex2html_deferred<<9249>>
\begin<<7350>>tex2html_preform<<7350>><tex2html_verbatim_mark>verbatim1538#\end<<7351>>tex2html_preform<<7351>>
\begin<<9250>>tex2html_deferred<<9250>>\par\end<<9251>>tex2html_deferred<<9251>>
Explique el funcionamiento del programa. 
A la vista de la salida ¿Cuáles eran las 
edades de las hijas?\end<<8207>>theorem_type<<8207>>
\begin<<9252>>tex2html_deferred<<9252>>\par\end<<9253>>tex2html_deferred<<9253>>
 
  \paragraph<<8440>>Mochila 0-1<<8440>>
  \begin<<8441>>tabular<<8441>><<8442>>c<<8442>>
  \end<<8443>>tabular<<8443>>

\begin<<9254>>tex2html_deferred<<9254>>\par\end<<9255>>tex2html_deferred<<9255>>
Para una definición del problema vea la sección 
\htmladdnormallink<<7354>>El Problema de la Mochila 0-1<<7354>><<7355>>http://nereida.deioc.ull.es/~lhp/perlexamples/node205.html<<7355>>
en los apuntes de LHP
\begin<<8208>>theorem_type<<8208>>[exercise][exercise][section][][][]
¿Sería capaz de resolver usando expresiones regulares el problema de la mochila 0-1?
\begin<<9256>>tex2html_deferred<<9256>>\par\end<<9257>>tex2html_deferred<<9257>>
¡Si lo logra merece el premio a la solución mas freak que se haya encontrado para dicho problema!\end<<8209>>theorem_type<<8209>>
\begin<<9258>>tex2html_deferred<<9258>>\par\end<<9259>>tex2html_deferred<<9259>>
 
  \paragraph<<8444>>Véase también<<8444>>
  \begin<<8445>>tabular<<8445>><<8446>>c<<8446>>
  \end<<8447>>tabular<<8447>>

\begin<<9260>>tex2html_deferred<<9260>>\par\end<<9261>>tex2html_deferred<<9261>>
Véase  también:
\begin<<7359>>itemize<<7359>>
\item
Véase el nodo en \htmladdnormallink<<8448>>PerlMonks<<8448>>
<<8449>>http://www.perlmonks.org/?node_id=796576<<8449>> \emph<<7361>>The Oldest Plays the Piano<<7361>>
\item
\htmladdnormallink<<7362>>Solving Algebraic Equations Using Regular Expressions<<7362>><<7363>>http://blog.stevenlevithan.com/archives/algebra-with-regexes<<7363>>
\end<<7364>>itemize<<7364>>
\begin<<9262>>tex2html_deferred<<9262>>\par\end<<9263>>tex2html_deferred<<9263>>
\subsection<<7365>>Número de substituciones realizadas<<7365>>
El operador de substitución devuelve el número de substituciones
realizadas, que puede ser mayor que uno si se usa la opción
<tex2html_verb_mark>1196<tex2html_verb_mark>. En cualquier otro caso retorna el valor falso.
\begin<<7366>>tex2html_preform<<7366>><tex2html_verbatim_mark>verbatim1539#\end<<7367>>tex2html_preform<<7367>>
El resultado de la ejecución es el siguiente:
\begin<<7368>>tex2html_preform<<7368>><tex2html_verbatim_mark>verbatim1540#\end<<7369>>tex2html_preform<<7369>>
\begin<<9264>>tex2html_deferred<<9264>>\par\end<<9265>>tex2html_deferred<<9265>>
\subsection<<7370>>Expandiendo y comprimiendo tabs<<7370>>
Este programa convierte los tabs en el número apropiado de blancos.
<tex2html_verbatim_mark>rawhtml1541#
Sigue un ejemplo de ejecución:
<tex2html_verbatim_mark>rawhtml1542#
\begin<<9266>>tex2html_deferred<<9266>>\par\end<<9267>>tex2html_deferred<<9267>>
\begin<<8210>>theorem_type<<8210>>[exercise][exercise][section][][][]
¿Funciona igual si se cambia el bucle <tex2html_verb_mark>1197<tex2html_verb_mark> por una opción <tex2html_verb_mark>1198<tex2html_verb_mark>?
<tex2html_verbatim_mark>rawhtml1543#
¿Porqué?\end<<8211>>theorem_type<<8211>>
\begin<<9268>>tex2html_deferred<<9268>>\par\end<<9269>>tex2html_deferred<<9269>>
\subsection<<7373>>Modificación de Múltiples Ficheros: one liner<<7373>>
Aunque no es la forma de uso habitual, Perl puede ser utilizado en ``modo sed'' para modificar el texto en múltiples ficheros: 
\begin<<9270>>tex2html_deferred<<9270>>\par\end<<9271>>tex2html_deferred<<9271>>
<tex2html_verb_mark>1199<tex2html_verb_mark>
\begin<<9272>>tex2html_deferred<<9272>>\par\end<<9273>>tex2html_deferred<<9273>>
Este programa sustituye la palabra original (g)lobalmente e i)gnorando el ``case'') en todos los ficheros <tex2html_verb_mark>1200<tex2html_verb_mark> y para cada uno de ellos crea una copia de seguridad <tex2html_verb_mark>1201<tex2html_verb_mark>. 
\begin<<9274>>tex2html_deferred<<9274>>\par\end<<9275>>tex2html_deferred<<9275>>
Otro ejemplo: la sustitución que sigue ocurre en todos los ficheros <tex2html_verb_mark>1202<tex2html_verb_mark> en todos
los subdirectorios de los subdirectorios que comiencen por <tex2html_verb_mark>1203<tex2html_verb_mark>:
\begin<<9276>>tex2html_deferred<<9276>>\par\end<<9277>>tex2html_deferred<<9277>>
\begin<<7374>>tex2html_preform<<7374>><tex2html_verbatim_mark>verbatim1544#\end<<7375>>tex2html_preform<<7375>>
\begin<<9278>>tex2html_deferred<<9278>>\par\end<<9279>>tex2html_deferred<<9279>>
Las \index<<8450>>opciones de línea<<8450>>\emph<<8451>>opciones de línea<<8451>> de comandos significan lo siguiente:
\begin<<9280>>tex2html_deferred<<9280>>\par\end<<9281>>tex2html_deferred<<9281>>
\begin<<7377>>itemize<<7377>>
\item[-e] puede usarse para definir el script en la línea de comandos. Multiples -e te permiten escribir un multi-script. Cuando se usa -e, perl
      no busca por un fichero de script entre la lista de argumentos. 
\begin<<9282>>tex2html_deferred<<9282>>\par\end<<9283>>tex2html_deferred<<9283>>
\item[-p] La opción \index<<8452>>Opción de perl -p<<8452>><<8453>><<8454>>\begin<<9284>>tex2html_deferred<<9284>>\tt\end<<9285>>tex2html_deferred<<9285>>-p<<8454>><<8453>> hace que perl incluya un bucle alrededor de tu ``script'' al estilo sed: 
\begin<<7380>>tex2html_preform<<7380>><tex2html_verbatim_mark>verbatim1545#\end<<7381>>tex2html_preform<<7381>>
\item[-n] Nótese que las líneas se imprimen automáticamente. Para suprimir la impresión usa la opción 
\index<<8455>>Opción de perl -n<<8455>><<8456>><<8457>>\begin<<9286>>tex2html_deferred<<9286>>\tt\end<<9287>>tex2html_deferred<<9287>>-n<<8457>><<8456>> 
\begin<<9288>>tex2html_deferred<<9288>>\par\end<<9289>>tex2html_deferred<<9289>>
\item[-i[ext]] La opción \index<<8458>>Opción de perl -i<<8458>><<8459>><<8460>>\begin<<9290>>tex2html_deferred<<9290>>\tt\end<<9291>>tex2html_deferred<<9291>>-i<<8460>><<8459>> Expresa que los ficheros procesados serán modificados. Se renombra el fichero de entrada <tex2html_verb_mark>1204<tex2html_verb_mark> a <tex2html_verb_mark>1205<tex2html_verb_mark>, abriendo el de salida con el mismo nombre del fichero de entrada <tex2html_verb_mark>1206<tex2html_verb_mark>.
      Se selecciona dicho fichero como de salida por defecto para las sentencias <tex2html_verb_mark>1207<tex2html_verb_mark>. Si se proporciona una extensión se hace una copia de seguridad. Si no, no se hace copia de seguridad.
\end<<7386>>itemize<<7386>>
\begin<<9292>>tex2html_deferred<<9292>>\par\end<<9293>>tex2html_deferred<<9293>>
En general las opciones pueden ponerse en la primera
línea del ``script'', donde se indica el intérprete. 
Asi pues, decir 
\begin<<9294>>tex2html_deferred<<9294>>\par\end<<9295>>tex2html_deferred<<9295>>
<tex2html_verb_mark>1208<tex2html_verb_mark> 
\begin<<9296>>tex2html_deferred<<9296>>\par\end<<9297>>tex2html_deferred<<9297>>
es equivalente a usar el ``script'': 
\begin<<7387>>tex2html_preform<<7387>><tex2html_verbatim_mark>verbatim1546#\end<<7388>>tex2html_preform<<7388>>
\begin<<9298>>tex2html_deferred<<9298>>\par\end<<9299>>tex2html_deferred<<9299>>
\section<<7389>>tr y split<<7389>>
\label<<7390>>section:tr<<7390>>
El operador de traducción permite la conversión de unos caracteres por otros. 
Tiene la sintáxis:
\begin<<9300>>tex2html_deferred<<9300>>\par\end<<9301>>tex2html_deferred<<9301>>
\begin<<7391>>tabular<<7391>><<7392>>l<<7392>>
<tex2html_verb_mark>1209<tex2html_verb_mark>\\ 
<tex2html_verb_mark>1210<tex2html_verb_mark>\\ 
\end<<7393>>tabular<<7393>>
\begin<<9302>>tex2html_deferred<<9302>>\par\end<<9303>>tex2html_deferred<<9303>>
El operador permite el reemplazo carácter a carácter, por ejemplo:
\begin<<7394>>tex2html_preform<<7394>><tex2html_verbatim_mark>verbatim1547#\end<<7395>>tex2html_preform<<7395>>
El operador devuelve el número de carácteres reeemplazados
o suprimidos. 
\begin<<7396>>tex2html_preform<<7396>><tex2html_verbatim_mark>verbatim1548#\end<<7397>>tex2html_preform<<7397>>
\begin<<9304>>tex2html_deferred<<9304>>\par\end<<9305>>tex2html_deferred<<9305>>
Si se especifica el modificador <tex2html_verb_mark>1211<tex2html_verb_mark>, cualquier carácter en  <tex2html_verb_mark>1212<tex2html_verb_mark>
que no figure en <tex2html_verb_mark>1213<tex2html_verb_mark> es eliminado.
\begin<<7398>>tex2html_preform<<7398>><tex2html_verbatim_mark>verbatim1549#\end<<7399>>tex2html_preform<<7399>>
\begin<<9306>>tex2html_deferred<<9306>>\par\end<<9307>>tex2html_deferred<<9307>>
Si se especifica el modificador <tex2html_verb_mark>1214<tex2html_verb_mark>, las secuencias de carácteres
consecutivos que serían traducidas al mismo carácter son comprimidas a una sola:
\begin<<9308>>tex2html_deferred<<9308>>\par\end<<9309>>tex2html_deferred<<9309>>
\begin<<7400>>tex2html_preform<<7400>><tex2html_verbatim_mark>verbatim1550#\end<<7401>>tex2html_preform<<7401>>
\begin<<9310>>tex2html_deferred<<9310>>\par\end<<9311>>tex2html_deferred<<9311>>
Observa que si la cadena <tex2html_verb_mark>1215<tex2html_verb_mark> es vacía,
no se introduce ninguna modificación.
\begin<<9312>>tex2html_deferred<<9312>>\par\end<<9313>>tex2html_deferred<<9313>>
Si se especifica el modificador <tex2html_verb_mark>1216<tex2html_verb_mark>, se complementa <tex2html_verb_mark>1217<tex2html_verb_mark>;
esto es, se buscan los caracteres que no están en <tex2html_verb_mark>1218<tex2html_verb_mark>.
\begin<<9314>>tex2html_deferred<<9314>>\par\end<<9315>>tex2html_deferred<<9315>>
\begin<<7402>>tex2html_preform<<7402>><tex2html_verbatim_mark>verbatim1551#\end<<7403>>tex2html_preform<<7403>>
\begin<<9316>>tex2html_deferred<<9316>>\par\end<<9317>>tex2html_deferred<<9317>>
Cuando se dan múltiples traducciones para un mismo carácter, solo la primera es utilizada:
\begin<<9318>>tex2html_deferred<<9318>>\par\end<<9319>>tex2html_deferred<<9319>>
\begin<<7404>>tex2html_preform<<7404>><tex2html_verbatim_mark>verbatim1552#\end<<7405>>tex2html_preform<<7405>>
\begin<<9320>>tex2html_deferred<<9320>>\par\end<<9321>>tex2html_deferred<<9321>>
traducirá <tex2html_verb_mark>1219<tex2html_verb_mark> por <tex2html_verb_mark>1220<tex2html_verb_mark>.
\begin<<9322>>tex2html_deferred<<9322>>\par\end<<9323>>tex2html_deferred<<9323>>
El siguiente \emph<<7406>>script<<7406>> busca una expresión regular en el fichero de <tex2html_verb_mark>1221<tex2html_verb_mark>
e imprime los \emph<<7407>>login<<7407>> de los usuarios que casan con dicha cadena.
Para evitar posibles confusiones con las vocales acentuadas
se usa el operador <tex2html_verb_mark>1222<tex2html_verb_mark>.
\begin<<9324>>tex2html_deferred<<9324>>\par\end<<9325>>tex2html_deferred<<9325>>
\begin<<7408>>tex2html_preform<<7408>><tex2html_verbatim_mark>verbatim1553#\end<<7409>>tex2html_preform<<7409>>
\begin<<9326>>tex2html_deferred<<9326>>\par\end<<9327>>tex2html_deferred<<9327>>
Ejecución (suponemos que el nombre del fichero anterior es <tex2html_verb_mark>1223<tex2html_verb_mark>):
\begin<<7410>>tex2html_preform<<7410>><tex2html_verbatim_mark>verbatim1554#\end<<7411>>tex2html_preform<<7411>>
\begin<<9328>>tex2html_deferred<<9328>>\par\end<<9329>>tex2html_deferred<<9329>>
Para familiarizarte con este operador, codifica y prueba el siguiente
código:
\begin<<9330>>tex2html_deferred<<9330>>\par\end<<9331>>tex2html_deferred<<9331>>
\begin<<7412>>tex2html_preform<<7412>><tex2html_verbatim_mark>verbatim1555#\end<<7413>>tex2html_preform<<7413>>
\begin<<9332>>tex2html_deferred<<9332>>\par\end<<9333>>tex2html_deferred<<9333>>
Perl construye la tabla de traducción en ``tiempo de compilación''. Por ello
ni <tex2html_verb_mark>1224<tex2html_verb_mark> ni <tex2html_verb_mark>1225<tex2html_verb_mark> son susceptibles de 
ser interpolados. Esto significa que si queremos usar variables tenemos
que recurrir a la función <tex2html_verb_mark>1226<tex2html_verb_mark>.
\begin<<9334>>tex2html_deferred<<9334>>\par\end<<9335>>tex2html_deferred<<9335>>
La expresión pasada como parámetro a <tex2html_verb_mark>1227<tex2html_verb_mark> en la línea 8 es analizada y ejecutada como si 
se tratara de un pequeño programa Perl. Cualquier asignación a variables permanece
después del <tex2html_verb_mark>1228<tex2html_verb_mark>, asi como cualquier definición de subrutina. 
El código dentro de <tex2html_verb_mark>1229<tex2html_verb_mark> se trata como si fuera un bloque, de manera
que cualesquiera variables locales (declaradas con <tex2html_verb_mark>1230<tex2html_verb_mark>) desaparecen
al final del bloque.
\begin<<9336>>tex2html_deferred<<9336>>\par\end<<9337>>tex2html_deferred<<9337>>
La variable <tex2html_verb_mark>1231<tex2html_verb_mark> contiene el mensaje de error asociado con la
última ejecución del comando <tex2html_verb_mark>1232<tex2html_verb_mark>. Si es nula es que el último comando
se ejecuto correctamente.
Aqui tienes un ejemplo de llamada:
\begin<<9338>>tex2html_deferred<<9338>>\par\end<<9339>>tex2html_deferred<<9339>>
\begin<<7414>>tex2html_preform<<7414>><tex2html_verbatim_mark>verbatim1556#\end<<7415>>tex2html_preform<<7415>>
\begin<<9340>>tex2html_deferred<<9340>>\par\end<<9341>>tex2html_deferred<<9341>>
\section<<8181>><<7416>>\begin<<9342>>tex2html_deferred<<9342>>\tt\end<<9343>>tex2html_deferred<<9343>>Pack<<7416>> y <<7417>>\begin<<9344>>tex2html_deferred<<9344>>\tt\end<<9345>>tex2html_deferred<<9345>>Unpack<<7417>><<8181>>
\label<<7418>>section:pack<<7418>>
El operador <tex2html_verb_mark>1233<tex2html_verb_mark> trabaja de forma parecida a <tex2html_verb_mark>1234<tex2html_verb_mark>.
Su primer argumento es una cadena, seguida de una lista de valores
a formatear y devuelve una cadena:
\begin<<7419>>tex2html_preform<<7419>><tex2html_verbatim_mark>verbatim1557#\end<<7420>>tex2html_preform<<7420>>
el inverso es el operador <tex2html_verb_mark>1235<tex2html_verb_mark>
\begin<<7421>>tex2html_preform<<7421>><tex2html_verbatim_mark>verbatim1558#\end<<7422>>tex2html_preform<<7422>>
La cadena de formato es una lista de especificadores que indican el
tipo del dato que se va a empaquetar/desempaquetar. Cada especificador
puede opcionalmente seguirse de un contador de repetición
que indica el número de elementos a formatear. Si se pone un
asterisco (<tex2html_verb_mark>1236<tex2html_verb_mark>) se indica que la especificación
se aplica a todos los elementos restantes de la lista.
\begin<<9346>>tex2html_deferred<<9346>>\par\end<<9347>>tex2html_deferred<<9347>>
\begin<<7423>>tabular<<7423>><<7424>>|l|l|l<<7424>>
Formato  ;SPMamp; Descripción \\ 
A ;SPMamp; Una cadena completada con blancos\\ 
a ;SPMamp; Una cadena completada con ceros\\ 
B ;SPMamp; Una cadena binaria en orden descendente\\ 
b ;SPMamp; Una cadena binaria en orden ascendente\\ 
H ;SPMamp; Una cadena hexadecimal, los nibble altos primero\\ 
h ;SPMamp; Una cadena hexadecimal, los nibble bajos primero\\ 
\end<<7425>>tabular<<7425>>
\begin<<9348>>tex2html_deferred<<9348>>\par\end<<9349>>tex2html_deferred<<9349>>
Ejemplo de uso del formato <tex2html_verb_mark>1237<tex2html_verb_mark>:
\begin<<7426>>tex2html_preform<<7426>><tex2html_verbatim_mark>verbatim1559#\end<<7427>>tex2html_preform<<7427>>
La variable <tex2html_verb_mark>1238<tex2html_verb_mark> tiene ahora dos cadenas. Una es <tex2html_verb_mark>1239<tex2html_verb_mark> la otra es <tex2html_verb_mark>1240<tex2html_verb_mark>.
Veamos un ejemplo con el formato <tex2html_verb_mark>1241<tex2html_verb_mark>:
\begin<<7428>>tex2html_preform<<7428>><tex2html_verbatim_mark>verbatim1560#\end<<7429>>tex2html_preform<<7429>>
\begin<<9350>>tex2html_deferred<<9350>>\par\end<<9351>>tex2html_deferred<<9351>>
\section<<8461>>Práctica: Un lenguaje para Componer Invitaciones<<8461>>
   \index<<8462>>Práctica!Un lenguaje para Componer Invitaciones<<8462>>
  
\label<<7431>>practica:invitaciones<<7431>>
\begin<<9352>>tex2html_deferred<<9352>>\par\end<<9353>>tex2html_deferred<<9353>>
En el capítulo 6 (sección 6.4.2.2) del libro 
\htmladdnormallink<<7432>>The LaTex Web Companion<<7432>><<7433>>http://books.google.es/books?id=B93uJGLZhAoC\&lpg=PP1\&ots=-JFhDfZPwN\&dq=The\%20LaTEX\%20web\%20companion\&hl=en\&pg=PP1\#v=onepage\&q=\&f=false<<7433>>
se define un lenguaje para componer textos para enviar invitaciones.
\begin<<9354>>tex2html_deferred<<9354>>\par\end<<9355>>tex2html_deferred<<9355>>
Para escribir una invitación en ese lenguaje escribiríamos algo así:
\begin<<9356>>tex2html_deferred<<9356>>\par\end<<9357>>tex2html_deferred<<9357>>
\begin<<7434>>tex2html_preform<<7434>><tex2html_verbatim_mark>verbatim1561#\end<<7435>>tex2html_preform<<7435>>
\begin<<9358>>tex2html_deferred<<9358>>\par\end<<9359>>tex2html_deferred<<9359>>
La sintáxis del lenguaje queda reflejada en la siguiente 
\index<<8463>>Document Type Definition<<8463>>\emph<<8464>>Document Type Definition<<8464>> (\index<<8465>>DTD<<8465>>\emph<<8466>>DTD<<8466>>) que aparece en la sección 6.4.3
del libro de Goosens:
\begin<<9360>>tex2html_deferred<<9360>>\par\end<<9361>>tex2html_deferred<<9361>>
\begin<<7438>>tex2html_preform<<7438>><tex2html_verbatim_mark>verbatim1562#\end<<7439>>tex2html_preform<<7439>>
\begin<<9362>>tex2html_deferred<<9362>>\par\end<<9363>>tex2html_deferred<<9363>>
El  objetivo de esta práctica es escribir un programa Perl
que usando las extensiones para expresiones regulares presentes 
en la versión 5.10 reconozca el lenguaje anterior.
\begin<<9364>>tex2html_deferred<<9364>>\par\end<<9365>>tex2html_deferred<<9365>>
Véase también:
\begin<<9366>>tex2html_deferred<<9366>>\par\end<<9367>>tex2html_deferred<<9367>>
\begin<<7440>>itemize<<7440>>
\item
\htmladdnormallink<<7441>>The LaTex Web Companion<<7441>><<7442>>http://books.google.es/books?id=B93uJGLZhAoC\&lpg=PP1\&ots=-JFhDfZPwN\&dq=The\%20LaTEX\%20web\%20companion\&hl=en\&pg=PP1\#v=onepage\&q=\&f=false<<7442>>
\item
\htmladdnormallink<<7443>>Examples from The LaTeX Web Companion<<7443>><<7444>>http://www.ctan.org/tex-archive/info/examples/lwc/<<7444>> (véanse los subdirectorios
correspondietnes a los capítulos 6 y 7)
\end<<7445>>itemize<<7445>>
\begin<<9368>>tex2html_deferred<<9368>>\par\end<<9369>>tex2html_deferred<<9369>>
\section<<7446>>Analisis Sintáctico con Expresiones Regulares Perl<<7446>>
\begin<<9370>>tex2html_deferred<<9370>>\par\end<<9371>>tex2html_deferred<<9371>>
\subsection<<7447>>Introducción al Anaĺisis Sintáctico con Expresiones Regulares<<7447>>
\begin<<9372>>tex2html_deferred<<9372>>\par\end<<9373>>tex2html_deferred<<9373>>
Como se ha comentado en la sección
\ref<<7448>>subsection:regexp510lenrec<<7448>>
Perl 5.10 permite el reconocimiento de expresiones
definidas mediante gramáticas recursivas, siempre que 
estas puedan ser analizadas por un analizador recursivo descendente.
Sin embargo, las expresiones regulares Perl 5.10 
hace difícil construir una representación 
del árbol de análisis sintáctico abstracto. Además, la necesidad
de explicitar en la regexp los blancos existentes entre los símbolos
hace que la descripción sea menos robusta y menos legible.
\begin<<9374>>tex2html_deferred<<9374>>\par\end<<9375>>tex2html_deferred<<9375>>
 
  \paragraph<<8467>>Ejemplo: Traducción de expresiones aritméticas en infijo a postfijo<<8467>>
  \begin<<8468>>tabular<<8468>><<8469>>c<<8469>>
  \end<<8470>>tabular<<8470>>

\begin<<9376>>tex2html_deferred<<9376>>\par\end<<9377>>tex2html_deferred<<9377>>
El siguiente ejemplo muestra una expresión regular
que traduce expresiones de diferencias en infijo
a postfijo.
\begin<<9378>>tex2html_deferred<<9378>>\par\end<<9379>>tex2html_deferred<<9379>>
Se usa una variable <tex2html_verb_mark>1242<tex2html_verb_mark> 
para calcular la traducción de
la subexpresión vista hasta el momento.
\begin<<9380>>tex2html_deferred<<9380>>\par\end<<9381>>tex2html_deferred<<9381>>
La gramática original que consideramos
es recursiva a izquierdas:
\begin<<7450>>tex2html_preform<<7450>><tex2html_verbatim_mark>verbatim1563#\end<<7451>>tex2html_preform<<7451>>
aplicando las técnicas explicadas en
\ref<<7452>>subsection:eliminaleftrec<<7452>> y en 
el nodo de perlmonks
\htmladdnormallink<<8471>>553889<<8471>>
<<8472>>http://www.perlmonks.org/?node_id=Operator Associativity and Eliminating Left-Recursion in Parse::RecDescent<<8472>>
transformamos la gramática en:
\begin<<7455>>tex2html_preform<<7455>><tex2html_verbatim_mark>verbatim1564#\end<<7456>>tex2html_preform<<7456>>
\begin<<9382>>tex2html_deferred<<9382>>\par\end<<9383>>tex2html_deferred<<9383>>
Sigue el código:
<tex2html_verbatim_mark>rawhtml1565#
La variable <tex2html_verb_mark>1243<tex2html_verb_mark> contiene el valor que casó con el último paréntesis.
Al ejecutar el código anterior obtenemos:
\begin<<9384>>tex2html_deferred<<9384>>\par\end<<9385>>tex2html_deferred<<9385>>
Véase la ejecución:
\begin<<7457>>tex2html_preform<<7457>><tex2html_verbatim_mark>verbatim1566#\end<<7458>>tex2html_preform<<7458>>
\begin<<9386>>tex2html_deferred<<9386>>\par\end<<9387>>tex2html_deferred<<9387>>
Como se ve, el recorrido primero profundo se 
traduce en la reconstrucción de una derivación a derechas.
\begin<<9388>>tex2html_deferred<<9388>>\par\end<<9389>>tex2html_deferred<<9389>>
 
  \paragraph<<8473>>Accediendo a los atributos de paréntesis anteriores mediante acciones intermedias<<8473>>
  \begin<<8474>>tabular<<8474>><<8475>>c<<8475>>
  \end<<8476>>tabular<<8476>>

\begin<<9390>>tex2html_deferred<<9390>>\par\end<<9391>>tex2html_deferred<<9391>>
Es difícil extender el ejemplo anterior a lenguajes mas complejos debido a la 
limitación de que sólo se dispone de acceso al último paréntesis vía <tex2html_verb_mark>1244<tex2html_verb_mark>.
En muchos casos es necesario poder acceder a paréntesis/atributos anteriores.
\begin<<9392>>tex2html_deferred<<9392>>\par\end<<9393>>tex2html_deferred<<9393>>
El siguiente código considera el caso de expresiones con sumas, restas, multiplicaciones
y divisiones. Utiliza la variable <tex2html_verb_mark>1245<tex2html_verb_mark> y una acción intermedia (líneas 51-53) 
para almacenar el segundo paréntesis necesitado:
<tex2html_verbatim_mark>rawhtml1567#
\begin<<9394>>tex2html_deferred<<9394>>\par\end<<9395>>tex2html_deferred<<9395>>
Sigue una ejecución:
\begin<<7460>>tex2html_preform<<7460>><tex2html_verbatim_mark>verbatim1568#\end<<7461>>tex2html_preform<<7461>>
\begin<<9396>>tex2html_deferred<<9396>>\par\end<<9397>>tex2html_deferred<<9397>>
 
  \paragraph<<8477>>Accediendo a los atributos de paréntesis anteriores mediante <<8481>>\begin<<9398>>tex2html_deferred<<9398>>\tt\end<<9399>>tex2html_deferred<<9399>>@-<<8481>><<8477>>
  \begin<<8478>>tabular<<8478>><<8479>>c<<8479>>
  \end<<8480>>tabular<<8480>>

\begin<<9400>>tex2html_deferred<<9400>>\par\end<<9401>>tex2html_deferred<<9401>>
Sigue una solución alternativa que obvia la necesidad de introducir
incómodas acciones intermedias. Utilizamos 
las variables <tex2html_verb_mark>1246<tex2html_verb_mark> y <tex2html_verb_mark>1247<tex2html_verb_mark>:
\begin<<9402>>tex2html_deferred<<9402>>\par\end<<9403>>tex2html_deferred<<9403>>
\begin<<7463>>it<<7463>>\begin<<7464>>quotation<<7464>>
Since Perl 5.6.1 the special variables <tex2html_verb_mark>1248<tex2html_verb_mark> and <tex2html_verb_mark>1249<tex2html_verb_mark> can functionally replace
<tex2html_verb_mark>1250<tex2html_verb_mark>, <tex2html_verb_mark>1251<tex2html_verb_mark> and <tex2html_verb_mark>1252<tex2html_verb_mark>. These arrays contain pointers to the beginning and end of
each match (see \htmladdnormallink<<8482>><<8484>>\begin<<9404>>tex2html_deferred<<9404>>\tt\end<<9405>>tex2html_deferred<<9405>>perlvar<<8484>><<8482>>
<<8483>>http://search.cpan.org/perldoc/?perlvar<<8483>> for the full story), so they give you essentially
the same information, but without the risk of excessive string copying.
\end<<7466>>quotation<<7466>>\end<<7467>>it<<7467>>
\begin<<9406>>tex2html_deferred<<9406>>\par\end<<9407>>tex2html_deferred<<9407>>
Véanse los párrafos en las páginas
\pageref<<7468>>parrafo:fincas<<7468>>, \pageref<<7469>>parrafo:iniciocas<<7469>>) y
\pageref<<7470>>parrafo:lastpar<<7470>> para mas información sobre <tex2html_verb_mark>1253<tex2html_verb_mark> y <tex2html_verb_mark>1254<tex2html_verb_mark>.
\begin<<9408>>tex2html_deferred<<9408>>\par\end<<9409>>tex2html_deferred<<9409>>
Nótese la función <tex2html_verb_mark>1255<tex2html_verb_mark> en las líneas
21-28. <tex2html_verb_mark>1256<tex2html_verb_mark> nos retorna lo que casó con el último paréntesis,
<tex2html_verb_mark>1257<tex2html_verb_mark> lo que casó con el penúltimo, etc.
\begin<<9410>>tex2html_deferred<<9410>>\par\end<<9411>>tex2html_deferred<<9411>>
<tex2html_verbatim_mark>rawhtml1569#
\begin<<9412>>tex2html_deferred<<9412>>\par\end<<9413>>tex2html_deferred<<9413>>
Ahora accedemos a los atributos asociados con los dos paréntesis,
en la regla de <tex2html_verb_mark>1258<tex2html_verb_mark> usando la función <tex2html_verb_mark>1259<tex2html_verb_mark>:
\begin<<9414>>tex2html_deferred<<9414>>\par\end<<9415>>tex2html_deferred<<9415>>
\begin<<7471>>tex2html_preform<<7471>><tex2html_verbatim_mark>verbatim1570#\end<<7472>>tex2html_preform<<7472>>
\begin<<9416>>tex2html_deferred<<9416>>\par\end<<9417>>tex2html_deferred<<9417>>
Sigue una ejecución del programa:
\begin<<9418>>tex2html_deferred<<9418>>\par\end<<9419>>tex2html_deferred<<9419>>
\begin<<7473>>tex2html_preform<<7473>><tex2html_verbatim_mark>verbatim1571#\end<<7474>>tex2html_preform<<7474>>
\begin<<9420>>tex2html_deferred<<9420>>\par\end<<9421>>tex2html_deferred<<9421>>
 
  \paragraph<<8485>>Accediendo a los atributos de paréntesis anteriores mediante paréntesis 
con nombre<<8485>>
  \begin<<8486>>tabular<<8486>><<8487>>c<<8487>>
  \end<<8488>>tabular<<8488>>

\begin<<9422>>tex2html_deferred<<9422>>\par\end<<9423>>tex2html_deferred<<9423>>
Una nueva solución: dar nombre a los paréntesis y acceder a los mismos:
\begin<<7476>>tex2html_preform<<7476>><tex2html_verbatim_mark>verbatim1572#\end<<7477>>tex2html_preform<<7477>>
\begin<<9424>>tex2html_deferred<<9424>>\par\end<<9425>>tex2html_deferred<<9425>>
Sigue el código completo:
\begin<<9426>>tex2html_deferred<<9426>>\par\end<<9427>>tex2html_deferred<<9427>>
<tex2html_verbatim_mark>rawhtml1573#
\begin<<9428>>tex2html_deferred<<9428>>\par\end<<9429>>tex2html_deferred<<9429>>
Ejecución:
\begin<<7478>>tex2html_preform<<7478>><tex2html_verbatim_mark>verbatim1574#\end<<7479>>tex2html_preform<<7479>>
\begin<<9430>>tex2html_deferred<<9430>>\par\end<<9431>>tex2html_deferred<<9431>>
 
  \paragraph<<8489>>Véase También<<8489>>
  \begin<<8490>>tabular<<8490>><<8491>>c<<8491>>
  \end<<8492>>tabular<<8492>>

\begin<<7481>>itemize<<7481>>
\item
El nodo <<7482>>\begin<<9432>>tex2html_deferred<<9432>>\it\end<<9433>>tex2html_deferred<<9433>>Backreference variables in code embedded inside Perl 5.10 regexps<<7482>> en 
\htmladdnormallink<<8493>>PerlMonks<<8493>>
<<8494>>http://www.perlmonks.org/?node_id=794424<<8494>>
\begin<<9434>>tex2html_deferred<<9434>>\par\end<<9435>>tex2html_deferred<<9435>>
\item
El nodo <<7484>>\begin<<9436>>tex2html_deferred<<9436>>\it\end<<9437>>tex2html_deferred<<9437>>Strange behavior of @- and @+ in perl5.10 regexps<<7484>> en 
\htmladdnormallink<<8495>>PerlMonks<<8495>>
<<8496>>http://www.perlmonks.org/?node_id=794736<<8496>>
\begin<<9438>>tex2html_deferred<<9438>>\par\end<<9439>>tex2html_deferred<<9439>>
\end<<7486>>itemize<<7486>>
\begin<<9440>>tex2html_deferred<<9440>>\par\end<<9441>>tex2html_deferred<<9441>>
\subsection<<7487>>Construyendo el AST con Expresiones Regulares 5.10<<7487>>
\begin<<9442>>tex2html_deferred<<9442>>\par\end<<9443>>tex2html_deferred<<9443>>
Construiremos en esta sección un traductor de infijo a postfijo
utilizando una aproximación general: construiremos una representación
del Abstract Syntax Tree o AST (véase la sección 
\ref<<7488>>section:aat<<7488>>
Árbol de Análisis Abstracto para una definición detallada de que es un árbol sintáctico).
\begin<<9444>>tex2html_deferred<<9444>>\par\end<<9445>>tex2html_deferred<<9445>>
Como la aplicación es un poco mas compleja la hemos dividido en varios ficheros.
Esta es la estructura:
\begin<<9446>>tex2html_deferred<<9446>>\par\end<<9447>>tex2html_deferred<<9447>>
\begin<<7489>>tex2html_preform<<7489>><tex2html_verbatim_mark>verbatim1575#\end<<7490>>tex2html_preform<<7490>>
\begin<<9448>>tex2html_deferred<<9448>>\par\end<<9449>>tex2html_deferred<<9449>>
La salida del programa puede ser dividida en tres partes.
La primera muestra una antiderivación a derechas inversa:
\begin<<7491>>tex2html_preform<<7491>><tex2html_verbatim_mark>verbatim1576#\end<<7492>>tex2html_preform<<7492>>
Que leída de abajo a arriba nos da una derivación a derechas de la cadena <tex2html_verb_mark>1260<tex2html_verb_mark>:
\begin<<7493>>tex2html_preform<<7493>><tex2html_verbatim_mark>verbatim1577#\end<<7494>>tex2html_preform<<7494>>
La segunda parte nos muestra la representación del AST para la entrada dada (<tex2html_verb_mark>1261<tex2html_verb_mark>):
\begin<<7495>>tabular<<7495>><<8183>>|p<<7496>>5cm<<7496>>|p<<7497>>4cm<<7497>>|<<8183>>
\begin<<7498>>tex2html_preform<<7498>><tex2html_verbatim_mark>verbatim1578#\end<<7499>>tex2html_preform<<7499>>
;SPMamp;
<tex2html_verbatim_mark>rawhtml1579#
\end<<7500>>tabular<<7500>>
\begin<<9450>>tex2html_deferred<<9450>>\par\end<<9451>>tex2html_deferred<<9451>>
La última parte de la salida nos muestra la traducción a postfijo
de la expresión en infijo
suministrada en la entrada (<tex2html_verb_mark>1262<tex2html_verb_mark>):
\begin<<7501>>tex2html_preform<<7501>><tex2html_verbatim_mark>verbatim1580#\end<<7502>>tex2html_preform<<7502>>
\begin<<9452>>tex2html_deferred<<9452>>\par\end<<9453>>tex2html_deferred<<9453>>
 
  \paragraph<<8497>>Programa Principal: usando la pila de atributos<<8497>>
  \begin<<8498>>tabular<<8498>><<8499>>c<<8499>>
  \end<<8500>>tabular<<8500>>

\begin<<9454>>tex2html_deferred<<9454>>\par\end<<9455>>tex2html_deferred<<9455>>
La gramática original que consideramos
es recursiva a izquierdas:
\begin<<7504>>tex2html_preform<<7504>><tex2html_verbatim_mark>verbatim1581#\end<<7505>>tex2html_preform<<7505>>
aplicando las técnicas explicadas en
\ref<<7506>>subsection:eliminarecesquem<<7506>>
es posible transformar la gramática 
en una no recursiva por la izquierda:
\begin<<7507>>tex2html_preform<<7507>><tex2html_verbatim_mark>verbatim1582#\end<<7508>>tex2html_preform<<7508>>
\begin<<9456>>tex2html_deferred<<9456>>\par\end<<9457>>tex2html_deferred<<9457>>
Ahora bien, no basta con transformar la gramática en una equivalente.
Lo que tenemos como punto de partida no es una gramática sino un \index<<8501>>esquema de traducción<<8501>>\emph<<8502>>esquema de traducción<<8502>>
(véase la sección 
\ref<<7510>>section:esquemas<<7510>>)
que construye el AST asociado con la expresión.
Nuestro esquema de traducción conceptual es algo así:
\begin<<7511>>tex2html_preform<<7511>><tex2html_verbatim_mark>verbatim1583#\end<<7512>>tex2html_preform<<7512>>
\begin<<9458>>tex2html_deferred<<9458>>\par\end<<9459>>tex2html_deferred<<9459>>
Lo que queremos conseguir un conjunto de acciones semánticas
asociadas para gramática no recursiva que sea equivalente 
a este.
\begin<<9460>>tex2html_deferred<<9460>>\par\end<<9461>>tex2html_deferred<<9461>>
Este es el programa resultante una vez aplicadas las transformaciones.
La implementación de la asociación entre símbolos y atributos la realizamos
manualmente mediante una pila de atributos:
\begin<<7513>>tex2html_preform<<7513>><tex2html_verbatim_mark>verbatim1584#\end<<7514>>tex2html_preform<<7514>>
\begin<<9462>>tex2html_deferred<<9462>>\par\end<<9463>>tex2html_deferred<<9463>>
 
  \paragraph<<8503>>Las Clases representando a los AST<<8503>>
  \begin<<8504>>tabular<<8504>><<8505>>c<<8505>>
  \end<<8506>>tabular<<8506>>

\begin<<9464>>tex2html_deferred<<9464>>\par\end<<9465>>tex2html_deferred<<9465>>
Cada nodo del AST es un objeto. La clase del nodo nos dice que tipo de nodo es.
Así los nodos de la clase <tex2html_verb_mark>1263<tex2html_verb_mark> agrupan a los nódos de multiplicación y división.
Los nodos de la clase <tex2html_verb_mark>1264<tex2html_verb_mark> agrupan a los nódos de suma y resta.
El procedimiento general es asociar un método <tex2html_verb_mark>1265<tex2html_verb_mark> con cada clase de nodo.
De esta forma se logra el polimorfismo necesario: cada clase de nodo sabe como traducirse
y el método <tex2html_verb_mark>1266<tex2html_verb_mark> de cada clase puede escribirse como
\begin<<7516>>itemize<<7516>>
\item Obtener los resultados de llamar a <tex2html_verb_mark>1267<tex2html_verb_mark> para cada uno
de los nodos hijos <tex2html_verb_mark>1268<tex2html_verb_mark>. Por ejemplo, si el nodo fuera un nodo <tex2html_verb_mark>1269<tex2html_verb_mark>
de un hipotético lenguaje de programación, se llamaría a los métodos <tex2html_verb_mark>1270<tex2html_verb_mark> sobre sus tres hijos
<tex2html_verb_mark>1271<tex2html_verb_mark>, <tex2html_verb_mark>1272<tex2html_verb_mark> y <tex2html_verb_mark>1273<tex2html_verb_mark>.
\item Combinar los resultados para producir la traducción adecuada del nodo actual.
\end<<7517>>itemize<<7517>>
Es esta combinación la que mas puede cambiar según el tipo de nodo. Así, en el caso de 
el nodo <tex2html_verb_mark>1274<tex2html_verb_mark> el seudocódigo para la traducción sería algo parecido a esto:
\begin<<9466>>tex2html_deferred<<9466>>\par\end<<9467>>tex2html_deferred<<9467>>
\begin<<7518>>tex2html_preform<<7518>><tex2html_verbatim_mark>verbatim1585#\end<<7519>>tex2html_preform<<7519>>
\begin<<9468>>tex2html_deferred<<9468>>\par\end<<9469>>tex2html_deferred<<9469>>
Siguiendo estas observaciones el código de <tex2html_verb_mark>1275<tex2html_verb_mark> queda así:
\begin<<7520>>tex2html_preform<<7520>><tex2html_verbatim_mark>verbatim1586#\end<<7521>>tex2html_preform<<7521>>
\begin<<9470>>tex2html_deferred<<9470>>\par\end<<9471>>tex2html_deferred<<9471>>
Véase también:
\begin<<7522>>itemize<<7522>>
\item \htmladdnormallink<<8507>><<8509>>\begin<<9472>>tex2html_deferred<<9472>>\tt\end<<9473>>tex2html_deferred<<9473>>Class::Accessor<<8509>><<8507>>
 <<8508>>http://search.cpan.org/perldoc?Class::Accessor<<8508>>
\end<<7524>>itemize<<7524>>
\begin<<9474>>tex2html_deferred<<9474>>\par\end<<9475>>tex2html_deferred<<9475>>
 
  \paragraph<<8510>>Accediendo a los paréntesis lejanos: El módulo <<8514>>\begin<<9476>>tex2html_deferred<<9476>>\tt\end<<9477>>tex2html_deferred<<9477>>Regexp::Paren<<8514>><<8510>>
  \begin<<8511>>tabular<<8511>><<8512>>c<<8512>>
  \end<<8513>>tabular<<8513>>

\begin<<9478>>tex2html_deferred<<9478>>\par\end<<9479>>tex2html_deferred<<9479>>
En esta solución utilizamos 
las variables <tex2html_verb_mark>1276<tex2html_verb_mark> y <tex2html_verb_mark>1277<tex2html_verb_mark> para construir una función que nos 
permite acceder a lo que casó con 
los últimos paréntesis con memoria:
\begin<<9480>>tex2html_deferred<<9480>>\par\end<<9481>>tex2html_deferred<<9481>>
\begin<<7526>>it<<7526>>\begin<<7527>>quotation<<7527>>
Since Perl 5.6.1 the special variables <tex2html_verb_mark>1278<tex2html_verb_mark> and <tex2html_verb_mark>1279<tex2html_verb_mark> can functionally replace
<tex2html_verb_mark>1280<tex2html_verb_mark>, <tex2html_verb_mark>1281<tex2html_verb_mark> and <tex2html_verb_mark>1282<tex2html_verb_mark>. These arrays contain pointers to the beginning and end of
each match (see \htmladdnormallink<<8515>><<8517>>\begin<<9482>>tex2html_deferred<<9482>>\tt\end<<9483>>tex2html_deferred<<9483>>perlvar<<8517>><<8515>>
<<8516>>http://search.cpan.org/perldoc/?perlvar<<8516>> for the full story), so they give you essentially
the same information, but without the risk of excessive string copying.
\end<<7529>>quotation<<7529>>\end<<7530>>it<<7530>>
\begin<<9484>>tex2html_deferred<<9484>>\par\end<<9485>>tex2html_deferred<<9485>>
Véanse los párrafos en las páginas
\pageref<<7531>>parrafo:fincas<<7531>>, \pageref<<7532>>parrafo:iniciocas<<7532>>) y
\pageref<<7533>>parrafo:lastpar<<7533>> para mas información sobre <tex2html_verb_mark>1283<tex2html_verb_mark> y <tex2html_verb_mark>1284<tex2html_verb_mark>.
\begin<<9486>>tex2html_deferred<<9486>>\par\end<<9487>>tex2html_deferred<<9487>>
<tex2html_verb_mark>1285<tex2html_verb_mark> nos retorna lo que casó con el último paréntesis,
<tex2html_verb_mark>1286<tex2html_verb_mark> lo que casó con el penúltimo, etc.
\begin<<9488>>tex2html_deferred<<9488>>\par\end<<9489>>tex2html_deferred<<9489>>
\begin<<7534>>tex2html_preform<<7534>><tex2html_verbatim_mark>verbatim1587#\end<<7535>>tex2html_preform<<7535>>
\begin<<9490>>tex2html_deferred<<9490>>\par\end<<9491>>tex2html_deferred<<9491>>
Al ejecutar <tex2html_verb_mark>1287<tex2html_verb_mark> podemos ver la documentación
incluida (véase la documentación en \htmladdnormallink<<8518>><<8520>>\begin<<9492>>tex2html_deferred<<9492>>\tt\end<<9493>>tex2html_deferred<<9493>>perlpod<<8520>><<8518>>
<<8519>>http://search.cpan.org/perldoc/?perlpod<<8519>> y \htmladdnormallink<<8521>><<8523>>\begin<<9494>>tex2html_deferred<<9494>>\tt\end<<9495>>tex2html_deferred<<9495>>perlpodspec<<8523>><<8521>>
<<8522>>http://search.cpan.org/perldoc/?perlpodspec<<8522>>
así como la sección \htmladdnormallink<<8524>>La Documentación en Perl<<8524>>
 <<8525>>http://www.google.es/search?q=site:nereida.deioc.ull.es+La Documentación en Perl;SPMamp;ie=UTF-8;SPMamp;hl=es<<8525>> 
para mas detalles):
\begin<<9496>>tex2html_deferred<<9496>>\par\end<<9497>>tex2html_deferred<<9497>>
\begin<<7539>>tabular<<7539>><<8185>>|p<<7540>>22cm<<7540>>|<<8185>>
\hline
\begin<<7541>>tex2html_preform<<7541>><tex2html_verbatim_mark>verbatim1588#\end<<7542>>tex2html_preform<<7542>>\\ 
\hline
\end<<7543>>tabular<<7543>>
\begin<<9498>>tex2html_deferred<<9498>>\par\end<<9499>>tex2html_deferred<<9499>>
\section<<8530>>Práctica: Traducción de <<8532>>\begin<<9500>>tex2html_deferred<<9500>>\tt\end<<9501>>tex2html_deferred<<9501>>invitation<<8532>> a <<8533>>\begin<<9502>>tex2html_deferred<<9502>>\tt\end<<9503>>tex2html_deferred<<9503>>HTML<<8533>><<8530>>
   \index<<8531>>Práctica!Traducción de <<8534>>\begin<<9504>>tex2html_deferred<<9504>>\tt\end<<9505>>tex2html_deferred<<9505>>invitation<<8534>> a <<8535>>\begin<<9506>>tex2html_deferred<<9506>>\tt\end<<9507>>tex2html_deferred<<9507>>HTML<<8535>><<8531>>
  
\begin<<9508>>tex2html_deferred<<9508>>\par\end<<9509>>tex2html_deferred<<9509>>
Esta práctica es continuación
de la práctica <<7546>>\begin<<9510>>tex2html_deferred<<9510>>\it\end<<9511>>tex2html_deferred<<9511>>un lenguaje para componer invitaciones<<7546>>
especificada en la sección
\ref<<7547>>practica:invitaciones<<7547>>.
\begin<<9512>>tex2html_deferred<<9512>>\par\end<<9513>>tex2html_deferred<<9513>>
El objetivo es traducir la entrada escrita en el lenguaje de invitaciones
a HTML. La traducción del ejemplo anterior debería ser parecida a esta:
\begin<<7548>>tabular<<7548>><<8187>>|p<<7549>>12cm<<7549>>|p<<7550>>12cm<<7550>>|<<8187>>
\hline
\begin<<7551>>tex2html_preform<<7551>><tex2html_verbatim_mark>verbatim1589#\end<<7552>>tex2html_preform<<7552>>
;SPMamp;
\begin<<7553>>tex2html_preform<<7553>><tex2html_verbatim_mark>verbatim1590#\end<<7554>>tex2html_preform<<7554>>\\ 
\hline
\end<<7555>>tabular<<7555>>
Para ver el resultado en su navegador visite el fichero
\htmladdnormallink<<7556>>invitation.html<<7556>><<7557>>invitation.html<<7557>>
\begin<<9514>>tex2html_deferred<<9514>>\par\end<<9515>>tex2html_deferred<<9515>>
Su programa deberá producir un Abstract Syntax Tree.
Los nodos serán objetos. Cada clase (<tex2html_verb_mark>1288<tex2html_verb_mark>, <tex2html_verb_mark>1289<tex2html_verb_mark>, etc.)
deberá de disponer de un método <tex2html_verb_mark>1290<tex2html_verb_mark>.
\begin<<9516>>tex2html_deferred<<9516>>\par\end<<9517>>tex2html_deferred<<9517>>
Para simplificar el proceso de traducción a <tex2html_verb_mark>1291<tex2html_verb_mark> se sugiere  utilizar una 
hoja de estilo parecida a la siguiente (tomada de la seción 7.4.4 del citado libro de Goosens):
\begin<<7558>>tex2html_preform<<7558>><tex2html_verbatim_mark>verbatim1591#\end<<7559>>tex2html_preform<<7559>>
\begin<<9518>>tex2html_deferred<<9518>>\par\end<<9519>>tex2html_deferred<<9519>>
Véase también:
\begin<<9520>>tex2html_deferred<<9520>>\par\end<<9521>>tex2html_deferred<<9521>>
\begin<<7560>>itemize<<7560>>
\item
\htmladdnormallink<<7561>>The LaTex Web Companion<<7561>><<7562>>http://books.google.es/books?id=B93uJGLZhAoC\&lpg=PP1\&ots=-JFhDfZPwN\&dq=The\%20LaTEX\%20web\%20companion\&hl=en\&pg=PP1\#v=onepage\&q=\&f=false<<7562>>
\item
\htmladdnormallink<<7563>>Examples from The LaTeX Web Companion<<7563>><<7564>>http://www.ctan.org/tex-archive/info/examples/lwc/<<7564>> (véanse los subdirectorios
correspondietnes a los capítulos 6 y 7)
\item
\htmladdnormallink<<7565>>CSS Tutorial<<7565>><<7566>>http://www.w3schools.com/css/<<7566>>
\item
\htmladdnormallink<<7567>>Edición extremadamente simple de HTML<<7567>><<7568>>http://www.psicobyte.com/html/index.html<<7568>>
\item
\htmladdnormallink<<7569>>Perl-XML Frequently Asked Questions<<7569>><<7570>>http://perl-xml.sourceforge.net/faq/<<7570>>
\end<<7571>>itemize<<7571>>
\begin<<9522>>tex2html_deferred<<9522>>\par\end<<9523>>tex2html_deferred<<9523>>
\section<<8188>>Análisis Sintáctico con <<7572>>\begin<<9524>>tex2html_deferred<<9524>>\tt\end<<9525>>tex2html_deferred<<9525>>Regexp::Grammars<<7572>><<8188>>
\begin<<9526>>tex2html_deferred<<9526>>\par\end<<9527>>tex2html_deferred<<9527>>
El módulo \htmladdnormallink<<8536>><<8538>>\begin<<9528>>tex2html_deferred<<9528>>\tt\end<<9529>>tex2html_deferred<<9529>>Regexp::Grammars<<8538>><<8536>>
 <<8537>>http://search.cpan.org/perldoc?Regexp::Grammars<<8537>> escrito por \htmladdnormallink<<8539>>Damian Conway<<8539>>
<<8540>>http://en.wikipedia.org/wiki/Damian\_Conway<<8540>> extiende
las expresiones regulares Perl con 
la capacidad de generar representaciones del árbol 
de análisis sintáctico abstracto y obviando la necesidad 
de explicitar los blancos. El módulo necesita para funcionar una versión de Perl superior
o igual a la 5.10. 
\begin<<9530>>tex2html_deferred<<9530>>\par\end<<9531>>tex2html_deferred<<9531>>
\subsection<<7576>>Introducción<<7576>>
\begin<<9532>>tex2html_deferred<<9532>>\par\end<<9533>>tex2html_deferred<<9533>>
 
  \paragraph<<8541>>El Problema<<8541>>
  \begin<<8542>>tabular<<8542>><<8543>>c<<8543>>
  \end<<8544>>tabular<<8544>>

\begin<<9534>>tex2html_deferred<<9534>>\par\end<<9535>>tex2html_deferred<<9535>>
La documentación de \htmladdnormallink<<8545>><<8547>>\begin<<9536>>tex2html_deferred<<9536>>\tt\end<<9537>>tex2html_deferred<<9537>>Regexp::Grammars<<8547>><<8545>>
 <<8546>>http://search.cpan.org/perldoc?Regexp::Grammars<<8546>><<7578>><<7578>> establece cual es el problema que aborda 
el módulo:
\begin<<7579>>it<<7579>>\begin<<7580>>quotation<<7580>>
\ldots Perl5.10 makes possible to use regexes to recognize complex,
hierarchical--and even recursive--textual structures. The problem is that
Perl 5.10 doesn’t provide any support for extracting that
hierarchical data into nested data structures. In other words,
using Perl 5.10 you can match complex data, but not parse it into an internally useful form.
\begin<<9538>>tex2html_deferred<<9538>>\par\end<<9539>>tex2html_deferred<<9539>>
An additional problem when using Perl 5.10 regexes to match
complex data formats is that you have to make sure you remember
to insert whitespace- matching constructs (such as <tex2html_verb_mark>1292<tex2html_verb_mark>) at every
possible position where the data might contain ignorable whitespace. This
reduces the readability of such patterns, and increases the chance of
errors (typically caused by overlooking a location where whitespace
might appear).
\begin<<9540>>tex2html_deferred<<9540>>\par\end<<9541>>tex2html_deferred<<9541>>
 
  \paragraph<<8548>>Una solución: <<8552>>\begin<<9542>>tex2html_deferred<<9542>>\tt\end<<9543>>tex2html_deferred<<9543>>Regexp::Grammars<<8552>><<8548>>
  \begin<<8549>>tabular<<8549>><<8550>>c<<8550>>
  \end<<8551>>tabular<<8551>>

\begin<<9544>>tex2html_deferred<<9544>>\par\end<<9545>>tex2html_deferred<<9545>>
The \htmladdnormallink<<8553>><<8555>>\begin<<9546>>tex2html_deferred<<9546>>\tt\end<<9547>>tex2html_deferred<<9547>>Regexp::Grammars<<8555>><<8553>>
 <<8554>>http://search.cpan.org/perldoc?Regexp::Grammars<<8554>><<7582>><<7582>> module solves both those problems.
\begin<<9548>>tex2html_deferred<<9548>>\par\end<<9549>>tex2html_deferred<<9549>>
If you import the module into a particular lexical scope, it preprocesses
any regex in that scope, so as to implement a number of extensions to the
standard Perl 5.10 regex syntax. These extensions simplify the task of
defining and calling subrules within a grammar, and allow those subrule
calls to capture and retain the components of they match in a proper
hierarchical manner.
\begin<<9550>>tex2html_deferred<<9550>>\par\end<<9551>>tex2html_deferred<<9551>>
\end<<7583>>quotation<<7583>>\end<<7584>>it<<7584>>
\begin<<9552>>tex2html_deferred<<9552>>\par\end<<9553>>tex2html_deferred<<9553>>
 
  \paragraph<<8556>>La sintaxis de una expresión regular <<8560>>\begin<<9554>>tex2html_deferred<<9554>>\tt\end<<9555>>tex2html_deferred<<9555>>Regexp::Grammars<<8560>><<8556>>
  \begin<<8557>>tabular<<8557>><<8558>>c<<8558>>
  \end<<8559>>tabular<<8559>>

\begin<<9556>>tex2html_deferred<<9556>>\par\end<<9557>>tex2html_deferred<<9557>>
Las expresiones regulares \htmladdnormallink<<8561>><<8563>>\begin<<9558>>tex2html_deferred<<9558>>\tt\end<<9559>>tex2html_deferred<<9559>>Regexp::Grammars<<8563>><<8561>>
 <<8562>>http://search.cpan.org/perldoc?Regexp::Grammars<<8562>><<7586>><<7586>> aumentan las regexp Perl 5.10. La sintáxis
se expande y se modifica:
\begin<<9560>>tex2html_deferred<<9560>>\par\end<<9561>>tex2html_deferred<<9561>>
\begin<<7587>>it<<7587>>\begin<<7588>>quotation<<7588>>
A \htmladdnormallink<<8564>><<8566>>\begin<<9562>>tex2html_deferred<<9562>>\tt\end<<9563>>tex2html_deferred<<9563>>Regexp::Grammars<<8566>><<8564>>
 <<8565>>http://search.cpan.org/perldoc?Regexp::Grammars<<8565>><<7589>><<7589>> specification consists of a pattern (which may include both standard Perl 5.10 regex syntax, as well as special
\htmladdnormallink<<8567>><<8569>>\begin<<9564>>tex2html_deferred<<9564>>\tt\end<<9565>>tex2html_deferred<<9565>>Regexp::Grammars<<8569>><<8567>>
 <<8568>>http://search.cpan.org/perldoc?Regexp::Grammars<<8568>> directives), followed by one or more rule or token definitions.
\end<<7591>>quotation<<7591>>\end<<7592>>it<<7592>>
\begin<<9566>>tex2html_deferred<<9566>>\par\end<<9567>>tex2html_deferred<<9567>>
Sigue un ejemplo:
\begin<<9568>>tex2html_deferred<<9568>>\par\end<<9569>>tex2html_deferred<<9569>>
\begin<<7593>>tex2html_preform<<7593>><tex2html_verbatim_mark>verbatim1592#\end<<7594>>tex2html_preform<<7594>>
\begin<<9570>>tex2html_deferred<<9570>>\par\end<<9571>>tex2html_deferred<<9571>>
\begin<<7595>>it<<7595>>\begin<<7596>>quote<<7596>>
Note that there is no need to explicitly place <tex2html_verb_mark>1293<tex2html_verb_mark> 
subpatterns throughout the rules; that is taken care of automatically.
\begin<<9572>>tex2html_deferred<<9572>>\par\end<<9573>>tex2html_deferred<<9573>>
\ldots
\begin<<9574>>tex2html_deferred<<9574>>\par\end<<9575>>tex2html_deferred<<9575>>
The initial pattern (<tex2html_verb_mark>1294<tex2html_verb_mark>) acts like the \emph<<7597>>top<<7597>> rule of the grammar, and must
be matched completely for the grammar to match.
\begin<<9576>>tex2html_deferred<<9576>>\par\end<<9577>>tex2html_deferred<<9577>>
The rules and tokens are declarations only and they are not directly
matched.  Instead, they act like subroutines, and are invoked by name
from the initial pattern (or from within a rule or token).
\begin<<9578>>tex2html_deferred<<9578>>\par\end<<9579>>tex2html_deferred<<9579>>
Each rule or token extends from the directive that introduces it up to
either the next rule or token directive, or (in the case of the final
rule or token) to the end of the grammar.  
\begin<<9580>>tex2html_deferred<<9580>>\par\end<<9581>>tex2html_deferred<<9581>>
\end<<7598>>quote<<7598>>\end<<7599>>it<<7599>>
\begin<<9582>>tex2html_deferred<<9582>>\par\end<<9583>>tex2html_deferred<<9583>>
 
  \paragraph<<8570>>El hash <<8574>>\begin<<9584>>tex2html_deferred<<9584>>\tt\end<<9585>>tex2html_deferred<<9585>>\%/<<8574>>: Una representación del AST<<8570>>
  \begin<<8571>>tabular<<8571>><<8572>>c<<8572>>
  \end<<8573>>tabular<<8573>>

Al ejecutar el programa anterior con entrada <tex2html_verb_mark>1295<tex2html_verb_mark> produce:
\begin<<7601>>tex2html_preform<<7601>><tex2html_verbatim_mark>verbatim1593#\end<<7602>>tex2html_preform<<7602>>
\begin<<9586>>tex2html_deferred<<9586>>\par\end<<9587>>tex2html_deferred<<9587>>
\begin<<7603>>it<<7603>>\begin<<7604>>quotation<<7604>>
Each rule calls the
subrules specified within it, and then return a hash containing whatever
result each of those subrules returned, with each result indexed by the
subrule’s name.
\begin<<9588>>tex2html_deferred<<9588>>\par\end<<9589>>tex2html_deferred<<9589>>
In this way, each level of the hierarchical regex can generate hashes
recording everything its own subrules matched, so when the entire pattern
matches, it produces a tree of nested hashes that represent the structured
data the pattern matched.
\begin<<9590>>tex2html_deferred<<9590>>\par\end<<9591>>tex2html_deferred<<9591>>
\ldots
\begin<<9592>>tex2html_deferred<<9592>>\par\end<<9593>>tex2html_deferred<<9593>>
In addition each result-hash has one extra key: the empty string. The
value for this key is whatever string the entire subrule call matched.
\end<<7605>>quotation<<7605>>\end<<7606>>it<<7606>>
\begin<<9594>>tex2html_deferred<<9594>>\par\end<<9595>>tex2html_deferred<<9595>>
 
  \paragraph<<8575>>Diferencias entre <<8579>>\begin<<9596>>tex2html_deferred<<9596>>\tt\end<<9597>>tex2html_deferred<<9597>>token<<8579>> y <<8580>>\begin<<9598>>tex2html_deferred<<9598>>\tt\end<<9599>>tex2html_deferred<<9599>>rule<<8580>><<8575>>
  \begin<<8576>>tabular<<8576>><<8577>>c<<8577>>
  \end<<8578>>tabular<<8578>>

\begin<<9600>>tex2html_deferred<<9600>>\par\end<<9601>>tex2html_deferred<<9601>>
\begin<<7609>>it<<7609>>\begin<<7610>>quotation<<7610>>
The difference between a token and a rule is that a token treats any
whitespace within it exactly as a normal Perl regular expression would.
That is, a sequence of whitespace in a token is ignored if the <tex2html_verb_mark>1296<tex2html_verb_mark>
modifier is in effect, or else matches the same literal sequence of
whitespace characters (if <tex2html_verb_mark>1297<tex2html_verb_mark> is not in effect).
\begin<<9602>>tex2html_deferred<<9602>>\par\end<<9603>>tex2html_deferred<<9603>>
\end<<7611>>quotation<<7611>>\end<<7612>>it<<7612>>
\begin<<9604>>tex2html_deferred<<9604>>\par\end<<9605>>tex2html_deferred<<9605>>
En el ejemplo anterior el comportamiento es el mismo si se reescribe la regla 
para el token <tex2html_verb_mark>1298<tex2html_verb_mark> como:
\begin<<7613>>tex2html_preform<<7613>><tex2html_verbatim_mark>verbatim1594#\end<<7614>>tex2html_preform<<7614>>
En este otro ejemplo mostramos que la diferencia entre token y rule
es significativa:
\begin<<7615>>tex2html_preform<<7615>><tex2html_verbatim_mark>verbatim1595#\end<<7616>>tex2html_preform<<7616>>
\begin<<9606>>tex2html_deferred<<9606>>\par\end<<9607>>tex2html_deferred<<9607>>
Al ejecutar este programa vemos la diferencia en la interpretación de los blancos:
\begin<<7617>>tex2html_preform<<7617>><tex2html_verbatim_mark>verbatim1596#\end<<7618>>tex2html_preform<<7618>>
Obsérvese como la entrada <tex2html_verb_mark>1299<tex2html_verb_mark> es rechazada mientras
que la entrada <tex2html_verb_mark>1300<tex2html_verb_mark> es aceptada.
\begin<<9608>>tex2html_deferred<<9608>>\par\end<<9609>>tex2html_deferred<<9609>>
 
  \paragraph<<8581>>Redefinición de los espacios en blanco<<8581>>
  \begin<<8582>>tabular<<8582>><<8583>>c<<8583>>
  \end<<8584>>tabular<<8584>>

\begin<<9610>>tex2html_deferred<<9610>>\par\end<<9611>>tex2html_deferred<<9611>>
\begin<<7620>>it<<7620>>\begin<<7621>>quotation<<7621>>
In a rule, any sequence of whitespace (except those at the very start
and the very end of the rule) is treated as matching the implicit subrule
<tex2html_verb_mark>1301<tex2html_verb_mark>, which is automatically predefined to match optional whitespace 
(i.e. <tex2html_verb_mark>1302<tex2html_verb_mark>).
\begin<<9612>>tex2html_deferred<<9612>>\par\end<<9613>>tex2html_deferred<<9613>>
You can explicitly define a <tex2html_verb_mark>1303<tex2html_verb_mark> token to change that default
behaviour. For example, you could alter the definition of whitespace
to include Perlish comments, by adding an explicit <tex2html_verb_mark>1304<tex2html_verb_mark>:
\begin<<9614>>tex2html_deferred<<9614>>\par\end<<9615>>tex2html_deferred<<9615>>
\begin<<7622>>tex2html_preform<<7622>><tex2html_verbatim_mark>verbatim1597#\end<<7623>>tex2html_preform<<7623>>
\begin<<9616>>tex2html_deferred<<9616>>\par\end<<9617>>tex2html_deferred<<9617>>
But be careful not to define <tex2html_verb_mark>1305<tex2html_verb_mark> as a rule, as this will lead
to all kinds of infinitely recursive unpleasantness.
\end<<7624>>quotation<<7624>>\end<<7625>>it<<7625>>
El siguiente ejemplo ilustra como redefinir <tex2html_verb_mark>1306<tex2html_verb_mark>:
\begin<<7626>>tex2html_preform<<7626>><tex2html_verbatim_mark>verbatim1598#\end<<7627>>tex2html_preform<<7627>>
Ahora podemos introducir comentarios en la entrada:
\begin<<7628>>tex2html_preform<<7628>><tex2html_verbatim_mark>verbatim1599#\end<<7629>>tex2html_preform<<7629>>
\begin<<9618>>tex2html_deferred<<9618>>\par\end<<9619>>tex2html_deferred<<9619>>
 
  \paragraph<<8585>>Llamando a las subreglas<<8585>>
  \begin<<8586>>tabular<<8586>><<8587>>c<<8587>>
  \end<<8588>>tabular<<8588>>

\begin<<9620>>tex2html_deferred<<9620>>\par\end<<9621>>tex2html_deferred<<9621>>
\begin<<7631>>it<<7631>>\begin<<7632>>quotation<<7632>>
To invoke a rule to match at any point, just enclose the rule’s name
in angle brackets (like in \htmladdnormallink<<8589>>Perl 6<<8589>>
<<8590>>http://en.wikipedia.org/wiki/Perl\_6<<8590>>). There must be no space between the
opening bracket and the rulename. For example:
\begin<<9622>>tex2html_deferred<<9622>>\par\end<<9623>>tex2html_deferred<<9623>>
\begin<<7635>>tex2html_preform<<7635>><tex2html_verbatim_mark>verbatim1600#\end<<7636>>tex2html_preform<<7636>>
\begin<<9624>>tex2html_deferred<<9624>>\par\end<<9625>>tex2html_deferred<<9625>>
If you need to match a literal pattern that would otherwise look like a subrule call, just backslash-escape the leading angle:
\begin<<9626>>tex2html_deferred<<9626>>\par\end<<9627>>tex2html_deferred<<9627>>
\begin<<7637>>tex2html_preform<<7637>><tex2html_verbatim_mark>verbatim1601#\end<<7638>>tex2html_preform<<7638>>
\end<<7639>>quotation<<7639>>\end<<7640>>it<<7640>>
\begin<<9628>>tex2html_deferred<<9628>>\par\end<<9629>>tex2html_deferred<<9629>>
El siguiente programa ilustra algunos puntos discutidos en la cita anterior:
\begin<<7641>>tex2html_preform<<7641>><tex2html_verbatim_mark>verbatim1602#\end<<7642>>tex2html_preform<<7642>>
\begin<<9630>>tex2html_deferred<<9630>>\par\end<<9631>>tex2html_deferred<<9631>>
Obsérvense los blancos en <tex2html_verb_mark>1307<tex2html_verb_mark> y en <tex2html_verb_mark>1308<tex2html_verb_mark>.
Pese a ello el programa funciona:
\begin<<9632>>tex2html_deferred<<9632>>\par\end<<9633>>tex2html_deferred<<9633>>
\begin<<7643>>tex2html_preform<<7643>><tex2html_verbatim_mark>verbatim1603#\end<<7644>>tex2html_preform<<7644>>
\begin<<9634>>tex2html_deferred<<9634>>\par\end<<9635>>tex2html_deferred<<9635>>
 
  \paragraph<<8591>>Eliminación del anidamiento de ramas unarias en <<8595>>\begin<<9636>>tex2html_deferred<<9636>>\tt\end<<9637>>tex2html_deferred<<9637>>\%/<<8595>><<8591>>
  \begin<<8592>>tabular<<8592>><<8593>>c<<8593>>
  \end<<8594>>tabular<<8594>>

\begin<<9638>>tex2html_deferred<<9638>>\par\end<<9639>>tex2html_deferred<<9639>>
\begin<<7646>>it<<7646>>\begin<<7647>>quotation<<7647>>
\ldots Note, however, that if the result-hash at any level contains only the
empty-string key (i.e. the subrule did not call any sub-subrules or
save any of their nested result-hashes), then the hash is <<7648>>\begin<<9640>>tex2html_deferred<<9640>>\it\end<<9641>>tex2html_deferred<<9641>>unpacked<<7648>>
and just the matched substring itself if returned.
\begin<<9642>>tex2html_deferred<<9642>>\par\end<<9643>>tex2html_deferred<<9643>>
For example, if <tex2html_verb_mark>1309<tex2html_verb_mark> had been defined:
\begin<<9644>>tex2html_deferred<<9644>>\par\end<<9645>>tex2html_deferred<<9645>>
\begin<<7649>>tex2html_preform<<7649>><tex2html_verbatim_mark>verbatim1604#\end<<7650>>tex2html_preform<<7650>>
\begin<<9646>>tex2html_deferred<<9646>>\par\end<<9647>>tex2html_deferred<<9647>>
then a successful call to the rule would only add:
\begin<<9648>>tex2html_deferred<<9648>>\par\end<<9649>>tex2html_deferred<<9649>>
\begin<<7651>>tex2html_preform<<7651>><tex2html_verbatim_mark>verbatim1605#\end<<7652>>tex2html_preform<<7652>>
\begin<<9650>>tex2html_deferred<<9650>>\par\end<<9651>>tex2html_deferred<<9651>>
to the current result-hash.
\begin<<9652>>tex2html_deferred<<9652>>\par\end<<9653>>tex2html_deferred<<9653>>
This is a useful feature because it prevents a series of nested subrule
calls from producing very unwieldy data structures. For example, without
this automatic unpacking, even the simple earlier example:
\begin<<9654>>tex2html_deferred<<9654>>\par\end<<9655>>tex2html_deferred<<9655>>
\begin<<7653>>tex2html_preform<<7653>><tex2html_verbatim_mark>verbatim1606#\end<<7654>>tex2html_preform<<7654>>
\begin<<9656>>tex2html_deferred<<9656>>\par\end<<9657>>tex2html_deferred<<9657>>
would produce something needlessly complex, such as:
\begin<<9658>>tex2html_deferred<<9658>>\par\end<<9659>>tex2html_deferred<<9659>>
\begin<<7655>>tex2html_preform<<7655>><tex2html_verbatim_mark>verbatim1607#\end<<7656>>tex2html_preform<<7656>>
\end<<7657>>quotation<<7657>>\end<<7658>>it<<7658>>
\begin<<9660>>tex2html_deferred<<9660>>\par\end<<9661>>tex2html_deferred<<9661>>
El siguiente ejemplo ilustra este punto:
\begin<<7659>>tex2html_preform<<7659>><tex2html_verbatim_mark>verbatim1608#\end<<7660>>tex2html_preform<<7660>>
\begin<<9662>>tex2html_deferred<<9662>>\par\end<<9663>>tex2html_deferred<<9663>>
Sigue una ejecución del programa anterior:
\begin<<9664>>tex2html_deferred<<9664>>\par\end<<9665>>tex2html_deferred<<9665>>
\begin<<7661>>tex2html_preform<<7661>><tex2html_verbatim_mark>verbatim1609#\end<<7662>>tex2html_preform<<7662>>
\begin<<9666>>tex2html_deferred<<9666>>\par\end<<9667>>tex2html_deferred<<9667>>
 
  \paragraph<<8596>>Ámbito de uso de <<8600>>\begin<<9668>>tex2html_deferred<<9668>>\tt\end<<9669>>tex2html_deferred<<9669>>Regexp::Grammars<<8600>><<8596>>
  \begin<<8597>>tabular<<8597>><<8598>>c<<8598>>
  \end<<8599>>tabular<<8599>>

\begin<<9670>>tex2html_deferred<<9670>>\par\end<<9671>>tex2html_deferred<<9671>>
Cuando se usa \htmladdnormallink<<8601>><<8603>>\begin<<9672>>tex2html_deferred<<9672>>\tt\end<<9673>>tex2html_deferred<<9673>>Regexp::Grammars<<8603>><<8601>>
 <<8602>>http://search.cpan.org/perldoc?Regexp::Grammars<<8602>> como parte de 
un programa que utiliza otras regexes hay que evitar 
que \htmladdnormallink<<8604>><<8606>>\begin<<9674>>tex2html_deferred<<9674>>\tt\end<<9675>>tex2html_deferred<<9675>>Regexp::Grammars<<8606>><<8604>>
 <<8605>>http://search.cpan.org/perldoc?Regexp::Grammars<<8605>> procese las mismas. \htmladdnormallink<<8607>><<8609>>\begin<<9676>>tex2html_deferred<<9676>>\tt\end<<9677>>tex2html_deferred<<9677>>Regexp::Grammars<<8609>><<8607>>
 <<8608>>http://search.cpan.org/perldoc?Regexp::Grammars<<8608>>
reescribe las expresiones regulares durante la fase de preproceso. Esta por ello 
presenta las mismas limitaciones que cualquier otra forma de 
'source filtering' (véase \htmladdnormallink<<8610>><<8612>>\begin<<9678>>tex2html_deferred<<9678>>\tt\end<<9679>>tex2html_deferred<<9679>>perlfilter<<8612>><<8610>>
<<8611>>http://search.cpan.org/perldoc/?perlfilter<<8611>>). Por ello es una buena idea declarar
la gramática en un bloque <tex2html_verb_mark>1310<tex2html_verb_mark> restringiendo de esta forma el ámbito de 
acción del módulo.
\begin<<9680>>tex2html_deferred<<9680>>\par\end<<9681>>tex2html_deferred<<9681>>
\begin<<7668>>tex2html_preform<<7668>><tex2html_verbatim_mark>verbatim1610#\end<<7669>>tex2html_preform<<7669>>
\begin<<9682>>tex2html_deferred<<9682>>\par\end<<9683>>tex2html_deferred<<9683>>
\subsection<<7670>>Objetos<<7670>>
\begin<<9684>>tex2html_deferred<<9684>>\par\end<<9685>>tex2html_deferred<<9685>>
\begin<<7671>>it<<7671>>\begin<<7672>>quotation<<7672>>
When a grammar has parsed successfully, the <tex2html_verb_mark>1312<tex2html_verb_mark> variable will contain
a series of nested hashes (and possibly arrays) representing the
hierarchical structure of the parsed data.
\begin<<9686>>tex2html_deferred<<9686>>\par\end<<9687>>tex2html_deferred<<9687>>
Typically, the next step is to walk that tree, extracting or converting
or otherwise processing that information. If the tree has nodes of many
different types, it can be difficult to build a recursive subroutine
that can navigate it easily.
\begin<<9688>>tex2html_deferred<<9688>>\par\end<<9689>>tex2html_deferred<<9689>>
A much cleaner solution is possible if the nodes of the tree are proper
objects. In that case, you just define a <tex2html_verb_mark>1313<tex2html_verb_mark> method
for each of the classes, and have every node call that method on each
of its children.  The chain of <tex2html_verb_mark>1314<tex2html_verb_mark> calls would cascade down the
nodes of the tree, each one invoking the appropriate <tex2html_verb_mark>1315<tex2html_verb_mark> method
according to the type of node encountered.
\begin<<9690>>tex2html_deferred<<9690>>\par\end<<9691>>tex2html_deferred<<9691>>
The only problem is that, by default, \htmladdnormallink<<8613>><<8615>>\begin<<9692>>tex2html_deferred<<9692>>\tt\end<<9693>>tex2html_deferred<<9693>>Regexp::Grammars<<8615>><<8613>>
 <<8614>>http://search.cpan.org/perldoc?Regexp::Grammars<<8614>> returns a tree
of plain-old hashes, not <tex2html_verb_mark>1316<tex2html_verb_mark> objects. Fortunately, it's
easy to request that the result hashes be automatically blessed into
the appropriate classes, using the <tex2html_verb_mark>1317<tex2html_verb_mark> and <tex2html_verb_mark>1318<tex2html_verb_mark>
directives.
\begin<<9694>>tex2html_deferred<<9694>>\par\end<<9695>>tex2html_deferred<<9695>>
These directives are identical to the <tex2html_verb_mark>1319<tex2html_verb_mark> and <tex2html_verb_mark>1320<tex2html_verb_mark>
directives (respectively), except that the rule or token they create will
also bless the hash it normally returns, converting it to an object of
a class whose name is the same as the rule or token itself.
\begin<<9696>>tex2html_deferred<<9696>>\par\end<<9697>>tex2html_deferred<<9697>>
For example:
\begin<<9698>>tex2html_deferred<<9698>>\par\end<<9699>>tex2html_deferred<<9699>>
\begin<<7674>>tex2html_preform<<7674>><tex2html_verbatim_mark>verbatim1611#\end<<7675>>tex2html_preform<<7675>>
\begin<<9700>>tex2html_deferred<<9700>>\par\end<<9701>>tex2html_deferred<<9701>>
The <tex2html_verb_mark>1321<tex2html_verb_mark> of the rule or token may also be fully qualified. In
such cases, the rule or token is defined using only the final \emph<<7676>>short
name<<7676>>, but the result object is blessed using the fully qualified \emph<<7677>>long
name<<7677>>. For example:
\begin<<9702>>tex2html_deferred<<9702>>\par\end<<9703>>tex2html_deferred<<9703>>
\begin<<7678>>tex2html_preform<<7678>><tex2html_verbatim_mark>verbatim1612#\end<<7679>>tex2html_preform<<7679>>
\begin<<9704>>tex2html_deferred<<9704>>\par\end<<9705>>tex2html_deferred<<9705>>
This can be useful to ensure that returned objects don't collide with
other namespaces in your program.
\begin<<9706>>tex2html_deferred<<9706>>\par\end<<9707>>tex2html_deferred<<9707>>
Note that you can freely mix object-returning and plain-old-hash-returning
rules and tokens within a single grammar, though you have to be careful
not to subsequently try to call a method on any of the unblessed nodes.
\begin<<9708>>tex2html_deferred<<9708>>\par\end<<9709>>tex2html_deferred<<9709>>
\end<<7680>>quotation<<7680>>\end<<7681>>it<<7681>>
\begin<<9710>>tex2html_deferred<<9710>>\par\end<<9711>>tex2html_deferred<<9711>>
\subsection<<7682>>Renombrando los resultados de una subregla<<7682>>
\begin<<9712>>tex2html_deferred<<9712>>\par\end<<9713>>tex2html_deferred<<9713>>
 
  \paragraph<<8616>>Nombre de la regla versus Nombre del Resultado<<8616>>
  \begin<<8617>>tabular<<8617>><<8618>>c<<8618>>
  \end<<8619>>tabular<<8619>>

\begin<<9714>>tex2html_deferred<<9714>>\par\end<<9715>>tex2html_deferred<<9715>>
No siempre el nombre de la regla es el mas apropiado
para ser el nombre del resultado:
\begin<<9716>>tex2html_deferred<<9716>>\par\end<<9717>>tex2html_deferred<<9717>>
\begin<<7684>>it<<7684>>\begin<<7685>>quotation<<7685>>
It is not always convenient to have subrule results stored under the same
name as the rule itself. Rule names should be optimized for understanding
the behaviour of the parser, whereas result names should be optimized
for understanding the structure of the data. Often those two goals are
identical, but not always; sometimes rule names need to describe what the
data looks like, while result names need to describe what the data means.
\end<<7686>>quotation<<7686>>\end<<7687>>it<<7687>>
\begin<<9718>>tex2html_deferred<<9718>>\par\end<<9719>>tex2html_deferred<<9719>>
 
  \paragraph<<8620>>Colisión de nombres de reglas<<8620>>
  \begin<<8621>>tabular<<8621>><<8622>>c<<8622>>
  \end<<8623>>tabular<<8623>>

\begin<<9720>>tex2html_deferred<<9720>>\par\end<<9721>>tex2html_deferred<<9721>>
\begin<<7689>>it<<7689>>\begin<<7690>>quotation<<7690>>
For example, sometimes you need to call the same rule twice, to match two
syntactically identical components whose positions give then semantically
distinct meanings:
\begin<<9722>>tex2html_deferred<<9722>>\par\end<<9723>>tex2html_deferred<<9723>>
\begin<<7691>>tex2html_preform<<7691>><tex2html_verbatim_mark>verbatim1613#\end<<7692>>tex2html_preform<<7692>>
\begin<<9724>>tex2html_deferred<<9724>>\par\end<<9725>>tex2html_deferred<<9725>>
The problem here is that, if the second call to <tex2html_verb_mark>1322<tex2html_verb_mark> succeeds, its
result-hash will be stored under the key <tex2html_verb_mark>1323<tex2html_verb_mark>, clobbering the data
that was returned from the first call to <tex2html_verb_mark>1324<tex2html_verb_mark>.
\end<<7693>>quotation<<7693>>\end<<7694>>it<<7694>>
\begin<<9726>>tex2html_deferred<<9726>>\par\end<<9727>>tex2html_deferred<<9727>>
 
  \paragraph<<8624>>Aliasing<<8624>>
  \begin<<8625>>tabular<<8625>><<8626>>c<<8626>>
  \end<<8627>>tabular<<8627>>

\begin<<9728>>tex2html_deferred<<9728>>\par\end<<9729>>tex2html_deferred<<9729>>
\begin<<7696>>it<<7696>>\begin<<7697>>quotation<<7697>>
To avoid such problems, \htmladdnormallink<<8628>><<8630>>\begin<<9730>>tex2html_deferred<<9730>>\tt\end<<9731>>tex2html_deferred<<9731>>Regexp::Grammars<<8630>><<8628>>
 <<8629>>http://search.cpan.org/perldoc?Regexp::Grammars<<8629>> allows you to alias any
subrule call, so that it is still invoked by the original name, but its
result-hash is stored under a different key. The syntax for that is:
<tex2html_verb_mark>1325<tex2html_verb_mark>. For example:
\begin<<9732>>tex2html_deferred<<9732>>\par\end<<9733>>tex2html_deferred<<9733>>
\begin<<7699>>tex2html_preform<<7699>><tex2html_verbatim_mark>verbatim1614#\end<<7700>>tex2html_preform<<7700>>
\begin<<9734>>tex2html_deferred<<9734>>\par\end<<9735>>tex2html_deferred<<9735>>
Here, <tex2html_verb_mark>1326<tex2html_verb_mark> is called twice, with the first result-hash
being stored under the key <tex2html_verb_mark>1327<tex2html_verb_mark>, and the second result-hash being
stored under the key <tex2html_verb_mark>1328<tex2html_verb_mark>.
\begin<<9736>>tex2html_deferred<<9736>>\par\end<<9737>>tex2html_deferred<<9737>>
Note, however, that the alias before the <tex2html_verb_mark>1329<tex2html_verb_mark> must be a proper identifier
(i.e. a letter or underscore, followed by letters, digits, and/or
underscores). Aliases that start with an underscore and aliases named
<tex2html_verb_mark>1330<tex2html_verb_mark> have special meaning.
\end<<7701>>quotation<<7701>>\end<<7702>>it<<7702>>
\begin<<9738>>tex2html_deferred<<9738>>\par\end<<9739>>tex2html_deferred<<9739>>
 
  \paragraph<<8631>>Normalización de los resultados mediante aliasing<<8631>>
  \begin<<8632>>tabular<<8632>><<8633>>c<<8633>>
  \end<<8634>>tabular<<8634>>

\begin<<9740>>tex2html_deferred<<9740>>\par\end<<9741>>tex2html_deferred<<9741>>
\begin<<7704>>it<<7704>>\begin<<7705>>quotation<<7705>>
Aliases can also be useful for normalizing data that may appear in
different formats and sequences. For example:
\begin<<9742>>tex2html_deferred<<9742>>\par\end<<9743>>tex2html_deferred<<9743>>
\begin<<7706>>tex2html_preform<<7706>><tex2html_verbatim_mark>verbatim1615#\end<<7707>>tex2html_preform<<7707>>
\begin<<9744>>tex2html_deferred<<9744>>\par\end<<9745>>tex2html_deferred<<9745>>
Here, regardless of which order the old and new files are specified,
the result-hash always gets:
\begin<<9746>>tex2html_deferred<<9746>>\par\end<<9747>>tex2html_deferred<<9747>>
\begin<<7708>>tex2html_preform<<7708>><tex2html_verbatim_mark>verbatim1616#\end<<7709>>tex2html_preform<<7709>>
\end<<7710>>quotation<<7710>>\end<<7711>>it<<7711>>
\begin<<9748>>tex2html_deferred<<9748>>\par\end<<9749>>tex2html_deferred<<9749>>
 
  \paragraph<<8635>>Ejemplo<<8635>>
  \begin<<8636>>tabular<<8636>><<8637>>c<<8637>>
  \end<<8638>>tabular<<8638>>

\begin<<9750>>tex2html_deferred<<9750>>\par\end<<9751>>tex2html_deferred<<9751>>
El siguiente programa ilustra los comentarios de la documentación:
\begin<<9752>>tex2html_deferred<<9752>>\par\end<<9753>>tex2html_deferred<<9753>>
\begin<<7713>>tex2html_preform<<7713>><tex2html_verbatim_mark>verbatim1617#\end<<7714>>tex2html_preform<<7714>>
Cuando lo ejecutamos obtenemos:
\begin<<7715>>tex2html_preform<<7715>><tex2html_verbatim_mark>verbatim1618#\end<<7716>>tex2html_preform<<7716>>
\begin<<9754>>tex2html_deferred<<9754>>\par\end<<9755>>tex2html_deferred<<9755>>
\subsection<<7717>>Listas<<7717>>
\begin<<9756>>tex2html_deferred<<9756>>\par\end<<9757>>tex2html_deferred<<9757>>
 
  \paragraph<<8639>>El operador de cierre positivo<<8639>>
  \begin<<8640>>tabular<<8640>><<8641>>c<<8641>>
  \end<<8642>>tabular<<8642>>

\begin<<9758>>tex2html_deferred<<9758>>\par\end<<9759>>tex2html_deferred<<9759>>
\begin<<7719>>it<<7719>>
\begin<<7720>>quotation<<7720>>
If a subrule call is quantified with a repetition specifier:
\begin<<9760>>tex2html_deferred<<9760>>\par\end<<9761>>tex2html_deferred<<9761>>
\begin<<7721>>tex2html_preform<<7721>><tex2html_verbatim_mark>verbatim1619#\end<<7722>>tex2html_preform<<7722>>
\begin<<9762>>tex2html_deferred<<9762>>\par\end<<9763>>tex2html_deferred<<9763>>
then each repeated match overwrites the corresponding entry in the
surrounding rule’s result-hash, so only the result of the final
repetition will be
retained. That is, if the above example matched the string  <tex2html_verb_mark>1331<tex2html_verb_mark>, 
then the result-hash would contain:
\begin<<9764>>tex2html_deferred<<9764>>\par\end<<9765>>tex2html_deferred<<9765>>
\begin<<7723>>tex2html_preform<<7723>><tex2html_verbatim_mark>verbatim1620#\end<<7724>>tex2html_preform<<7724>>
\end<<7725>>quotation<<7725>>\end<<7726>>it<<7726>>
\begin<<9766>>tex2html_deferred<<9766>>\par\end<<9767>>tex2html_deferred<<9767>>
 
  \paragraph<<8643>>Operadores de listas y espacios en blanco<<8643>>
  \begin<<8644>>tabular<<8644>><<8645>>c<<8645>>
  \end<<8646>>tabular<<8646>>

\begin<<9768>>tex2html_deferred<<9768>>\par\end<<9769>>tex2html_deferred<<9769>>
Existe un caveat con el uso de los operadores de repetición
y el manejo de los blancos. Véase el siguiente programa:
\begin<<7728>>tex2html_preform<<7728>><tex2html_verbatim_mark>verbatim1621#\end<<7729>>tex2html_preform<<7729>>
Obsérvese el uso explícito 
de espacios <tex2html_verb_mark>1332<tex2html_verb_mark> en la definición de <tex2html_verb_mark>1333<tex2html_verb_mark>.
\begin<<9770>>tex2html_deferred<<9770>>\par\end<<9771>>tex2html_deferred<<9771>>
Sigue un ejemplo de ejecución:
\begin<<7730>>tex2html_preform<<7730>><tex2html_verbatim_mark>verbatim1622#\end<<7731>>tex2html_preform<<7731>>
\begin<<9772>>tex2html_deferred<<9772>>\par\end<<9773>>tex2html_deferred<<9773>>
Si se eliminan los blancos de la definición de 
<tex2html_verb_mark>1334<tex2html_verb_mark>: 
\begin<<7732>>tex2html_preform<<7732>><tex2html_verbatim_mark>verbatim1623#\end<<7733>>tex2html_preform<<7733>>
se obtiene una conducta que puede sorprender:
\begin<<7734>>tex2html_preform<<7734>><tex2html_verbatim_mark>verbatim1624#\end<<7735>>tex2html_preform<<7735>>
\begin<<9774>>tex2html_deferred<<9774>>\par\end<<9775>>tex2html_deferred<<9775>>
La explicación está en la documentación: véase la sección \htmladdnormallink<<8647>>Grammar Syntax<<8647>>
 <<8648>>http://search.cpan.org/~dconway/Regexp-Grammars/lib/Regexp/Grammars.pm\#Grammar\_syntax<<8648>>:
\begin<<7738>>it<<7738>>\begin<<7739>>quotation<<7739>>
<tex2html_verb_mark>1335<tex2html_verb_mark>
\begin<<9776>>tex2html_deferred<<9776>>\par\end<<9777>>tex2html_deferred<<9777>>
Define a rule whose name is specified by the supplied identifier.
\begin<<9778>>tex2html_deferred<<9778>>\par\end<<9779>>tex2html_deferred<<9779>>
Everything following the <tex2html_verb_mark>1336<tex2html_verb_mark> directive (up to the next <tex2html_verb_mark>1337<tex2html_verb_mark> or <tex2html_verb_mark>1338<tex2html_verb_mark> directive) 
is treated as part of the rule being defined.
\begin<<9780>>tex2html_deferred<<9780>>\par\end<<9781>>tex2html_deferred<<9781>>
\emph<<7740>>Any whitespace in the rule is replaced by a call to the<<7740>> <tex2html_verb_mark>1339<tex2html_verb_mark> subrule (which defaults to matching <tex2html_verb_mark>1340<tex2html_verb_mark>, but may be explicitly redefined).
\begin<<9782>>tex2html_deferred<<9782>>\par\end<<9783>>tex2html_deferred<<9783>>
\end<<7741>>quotation<<7741>>\end<<7742>>it<<7742>>
También podríamos haber resuelto el problema introduciendo un
blanco explícito dentro del cierre positivo:
\begin<<9784>>tex2html_deferred<<9784>>\par\end<<9785>>tex2html_deferred<<9785>>
\begin<<7743>>tex2html_preform<<7743>><tex2html_verbatim_mark>verbatim1625#\end<<7744>>tex2html_preform<<7744>>
\begin<<9786>>tex2html_deferred<<9786>>\par\end<<9787>>tex2html_deferred<<9787>>
 
  \paragraph<<8649>>Una Solución al problema de recordar los resultados de una lista: El uso de brackets<<8649>>
  \begin<<8650>>tabular<<8650>><<8651>>c<<8651>>
  \end<<8652>>tabular<<8652>>

\begin<<9788>>tex2html_deferred<<9788>>\par\end<<9789>>tex2html_deferred<<9789>>
\begin<<7746>>it<<7746>>\begin<<7747>>quotation<<7747>>
Usually, that’s not the desired outcome, so \htmladdnormallink<<8653>><<8655>>\begin<<9790>>tex2html_deferred<<9790>>\tt\end<<9791>>tex2html_deferred<<9791>>Regexp::Grammars<<8655>><<8653>>
 <<8654>>http://search.cpan.org/perldoc?Regexp::Grammars<<8654>> provides
another mechanism by which to call a subrule; one that saves all
repetitions of its results.
\begin<<9792>>tex2html_deferred<<9792>>\par\end<<9793>>tex2html_deferred<<9793>>
A regular subrule call consists of the rule’s name surrounded by angle
brackets. If, instead, you surround the rule’s name with  <tex2html_verb_mark>1341<tex2html_verb_mark>
(angle and square brackets) like so:
\begin<<9794>>tex2html_deferred<<9794>>\par\end<<9795>>tex2html_deferred<<9795>>
\begin<<7749>>tex2html_preform<<7749>><tex2html_verbatim_mark>verbatim1626#\end<<7750>>tex2html_preform<<7750>>
\begin<<9796>>tex2html_deferred<<9796>>\par\end<<9797>>tex2html_deferred<<9797>>
then the rule is invoked in exactly the same way, but the result of that
submatch is pushed onto an array nested inside the appropriate result-hash
entry. In other words, if the above example matched the same  
<tex2html_verb_mark>1342<tex2html_verb_mark> string, the result-hash would contain:
\begin<<9798>>tex2html_deferred<<9798>>\par\end<<9799>>tex2html_deferred<<9799>>
\begin<<7751>>tex2html_preform<<7751>><tex2html_verbatim_mark>verbatim1627#\end<<7752>>tex2html_preform<<7752>>
\end<<7753>>quotation<<7753>>
\end<<7754>>it<<7754>>
\begin<<9800>>tex2html_deferred<<9800>>\par\end<<9801>>tex2html_deferred<<9801>>
Teniendo en cuenta lo dicho anteriormente sobre los blancos
dentro de los cuantificadores, es necesario introducir
blancos dentro del operador de repetición:
\begin<<7755>>tex2html_preform<<7755>><tex2html_verbatim_mark>verbatim1628#\end<<7756>>tex2html_preform<<7756>>
Al ejecutar este programa obtenemos:
\begin<<7757>>tex2html_preform<<7757>><tex2html_verbatim_mark>verbatim1629#\end<<7758>>tex2html_preform<<7758>>
\begin<<9802>>tex2html_deferred<<9802>>\par\end<<9803>>tex2html_deferred<<9803>>
 
  \paragraph<<8656>>Otra forma de resolver las colisiones de nombres: salvarlos en una lista<<8656>>
  \begin<<8657>>tabular<<8657>><<8658>>c<<8658>>
  \end<<8659>>tabular<<8659>>

\begin<<9804>>tex2html_deferred<<9804>>\par\end<<9805>>tex2html_deferred<<9805>>
\begin<<7760>>it<<7760>>\begin<<7761>>quotation<<7761>>
This \emph<<7762>>listifying subrule call<<7762>> can also be useful for non-repeated
subrule calls, if the same subrule is invoked in several places in a
grammar. For example if a cmdline option could be given either one or
two values, you might parse it:
\begin<<9806>>tex2html_deferred<<9806>>\par\end<<9807>>tex2html_deferred<<9807>>
\begin<<7763>>tex2html_preform<<7763>><tex2html_verbatim_mark>verbatim1630#\end<<7764>>tex2html_preform<<7764>>
\begin<<9808>>tex2html_deferred<<9808>>\par\end<<9809>>tex2html_deferred<<9809>>
The result-hash entry for <tex2html_verb_mark>1343<tex2html_verb_mark> would then always contain an array,
with either one or two elements, depending on the input being parsed.
\end<<7765>>quotation<<7765>>\end<<7766>>it<<7766>>
Sigue un ejemplo:
\begin<<7767>>tex2html_preform<<7767>><tex2html_verbatim_mark>verbatim1631#\end<<7768>>tex2html_preform<<7768>>
Veamos su comportamiento con diferentes entradas:
\begin<<7769>>tex2html_preform<<7769>><tex2html_verbatim_mark>verbatim1632#\end<<7770>>tex2html_preform<<7770>>
\begin<<9810>>tex2html_deferred<<9810>>\par\end<<9811>>tex2html_deferred<<9811>>
 
  \paragraph<<8660>>Aliasing de listas<<8660>>
  \begin<<8661>>tabular<<8661>><<8662>>c<<8662>>
  \end<<8663>>tabular<<8663>>

\begin<<9812>>tex2html_deferred<<9812>>\par\end<<9813>>tex2html_deferred<<9813>>
\begin<<7772>>it<<7772>>\begin<<7773>>quotation<<7773>>
Listifying subrules can also be given aliases, just like ordinary
subrules. The alias is always specified inside the square brackets:
\begin<<9814>>tex2html_deferred<<9814>>\par\end<<9815>>tex2html_deferred<<9815>>
\begin<<7774>>tex2html_preform<<7774>><tex2html_verbatim_mark>verbatim1633#\end<<7775>>tex2html_preform<<7775>>
\begin<<9816>>tex2html_deferred<<9816>>\par\end<<9817>>tex2html_deferred<<9817>>
Here, the sizes are parsed using the <tex2html_verb_mark>1344<tex2html_verb_mark> rule, 
but saved in the result-hash in an array under the key <tex2html_verb_mark>1345<tex2html_verb_mark>.
\end<<7776>>quotation<<7776>>\end<<7777>>it<<7777>>
\begin<<9818>>tex2html_deferred<<9818>>\par\end<<9819>>tex2html_deferred<<9819>>
Sigue un ejemplo:
\begin<<7778>>tex2html_preform<<7778>><tex2html_verbatim_mark>verbatim1634#\end<<7779>>tex2html_preform<<7779>>
Veamos el resultado de una ejecución:
\begin<<7780>>tex2html_preform<<7780>><tex2html_verbatim_mark>verbatim1635#\end<<7781>>tex2html_preform<<7781>>
\begin<<9820>>tex2html_deferred<<9820>>\par\end<<9821>>tex2html_deferred<<9821>>
 
  \paragraph<<8664>>Caveat: Cierres y Warnings<<8664>>
  \begin<<8665>>tabular<<8665>><<8666>>c<<8666>>
  \end<<8667>>tabular<<8667>>

\begin<<9822>>tex2html_deferred<<9822>>\par\end<<9823>>tex2html_deferred<<9823>>
En este ejemplo aparece <tex2html_verb_mark>1346<tex2html_verb_mark> sin 
corchetes ni paréntesis:
\begin<<9824>>tex2html_deferred<<9824>>\par\end<<9825>>tex2html_deferred<<9825>>
\begin<<7783>>tex2html_preform<<7783>><tex2html_verbatim_mark>verbatim1636#\end<<7784>>tex2html_preform<<7784>>
Este programa produce un mensaje de advertencia:
\begin<<7785>>tex2html_preform<<7785>><tex2html_verbatim_mark>verbatim1637#\end<<7786>>tex2html_preform<<7786>>
\begin<<9826>>tex2html_deferred<<9826>>\par\end<<9827>>tex2html_deferred<<9827>>
Si se quiere evitar el mensaje y se está dispuesto a asumir la pérdida
de los valores asociados con los elementos de la lista se deberán poner 
el operando entre paréntesis (con o sin memoria).
\begin<<9828>>tex2html_deferred<<9828>>\par\end<<9829>>tex2html_deferred<<9829>>
Esto es lo que dice la documentación sobre este warning:
\begin<<9830>>tex2html_deferred<<9830>>\par\end<<9831>>tex2html_deferred<<9831>>
\begin<<7787>>it<<7787>>\begin<<7788>>quotation<<7788>>
<tex2html_verb_mark>1347<tex2html_verb_mark>
\begin<<9832>>tex2html_deferred<<9832>>\par\end<<9833>>tex2html_deferred<<9833>>
You specified a subrule call with a repetition qualifier, such as:
\begin<<9834>>tex2html_deferred<<9834>>\par\end<<9835>>tex2html_deferred<<9835>>
\begin<<7789>>tex2html_preform<<7789>><tex2html_verbatim_mark>verbatim1638#\end<<7790>>tex2html_preform<<7790>>
\begin<<9836>>tex2html_deferred<<9836>>\par\end<<9837>>tex2html_deferred<<9837>>
or:
\begin<<9838>>tex2html_deferred<<9838>>\par\end<<9839>>tex2html_deferred<<9839>>
\begin<<7791>>tex2html_preform<<7791>><tex2html_verbatim_mark>verbatim1639#\end<<7792>>tex2html_preform<<7792>>
\begin<<9840>>tex2html_deferred<<9840>>\par\end<<9841>>tex2html_deferred<<9841>>
Because each subrule call saves its result in a hash entry of the
same name, each repeated match will overwrite the previous ones,
so only the last match will ultimately be saved. If you want to
save all the matches, you need to tell \htmladdnormallink<<8668>><<8670>>\begin<<9842>>tex2html_deferred<<9842>>\tt\end<<9843>>tex2html_deferred<<9843>>Regexp::Grammars<<8670>><<8668>>
 <<8669>>http://search.cpan.org/perldoc?Regexp::Grammars<<8669>> to save the
sequence of results as a nested array within the hash entry, like so:
\begin<<9844>>tex2html_deferred<<9844>>\par\end<<9845>>tex2html_deferred<<9845>>
\begin<<7794>>tex2html_preform<<7794>><tex2html_verbatim_mark>verbatim1640#\end<<7795>>tex2html_preform<<7795>>
\begin<<9846>>tex2html_deferred<<9846>>\par\end<<9847>>tex2html_deferred<<9847>>
or:
\begin<<9848>>tex2html_deferred<<9848>>\par\end<<9849>>tex2html_deferred<<9849>>
\begin<<7796>>tex2html_preform<<7796>><tex2html_verbatim_mark>verbatim1641#\end<<7797>>tex2html_preform<<7797>>
\begin<<9850>>tex2html_deferred<<9850>>\par\end<<9851>>tex2html_deferred<<9851>>
If you really did intend to throw away every result but the final
one, you can silence the warning by placing the subrule call inside
any kind of parentheses. For example:
\begin<<9852>>tex2html_deferred<<9852>>\par\end<<9853>>tex2html_deferred<<9853>>
\begin<<7798>>tex2html_preform<<7798>><tex2html_verbatim_mark>verbatim1642#\end<<7799>>tex2html_preform<<7799>>
\begin<<9854>>tex2html_deferred<<9854>>\par\end<<9855>>tex2html_deferred<<9855>>
or:
\begin<<9856>>tex2html_deferred<<9856>>\par\end<<9857>>tex2html_deferred<<9857>>
\begin<<7800>>tex2html_preform<<7800>><tex2html_verbatim_mark>verbatim1643#\end<<7801>>tex2html_preform<<7801>>
\begin<<9858>>tex2html_deferred<<9858>>\par\end<<9859>>tex2html_deferred<<9859>>
\end<<7802>>quotation<<7802>>\end<<7803>>it<<7803>>
\begin<<9860>>tex2html_deferred<<9860>>\par\end<<9861>>tex2html_deferred<<9861>>
\subsection<<7804>>Pseudo sub-reglas<<7804>>
\begin<<9862>>tex2html_deferred<<9862>>\par\end<<9863>>tex2html_deferred<<9863>>
 
  \paragraph<<8671>>Subpatrones<<8671>>
  \begin<<8672>>tabular<<8672>><<8673>>c<<8673>>
  \end<<8674>>tabular<<8674>>

\begin<<9864>>tex2html_deferred<<9864>>\par\end<<9865>>tex2html_deferred<<9865>>
\begin<<7806>>it<<7806>>\begin<<7807>>quotation<<7807>>
Aliases can also be given to standard Perl subpatterns, as well as to
code blocks within a regex. The syntax for subpatterns is:
\begin<<9866>>tex2html_deferred<<9866>>\par\end<<9867>>tex2html_deferred<<9867>>
\begin<<7808>>tex2html_preform<<7808>><tex2html_verbatim_mark>verbatim1644#\end<<7809>>tex2html_preform<<7809>>
\begin<<9868>>tex2html_deferred<<9868>>\par\end<<9869>>tex2html_deferred<<9869>>
In other words, the syntax is exactly like an aliased subrule call, except
that the rule name is replaced with a set of parentheses containing the
subpattern. Any parentheses--capturing or non-capturing--will do.
\begin<<9870>>tex2html_deferred<<9870>>\par\end<<9871>>tex2html_deferred<<9871>>
The effect of aliasing a standard subpattern is to cause whatever that
subpattern matches to be saved in the result-hash, using the alias as
its key. For example:
\begin<<9872>>tex2html_deferred<<9872>>\par\end<<9873>>tex2html_deferred<<9873>>
\begin<<7810>>tex2html_preform<<7810>><tex2html_verbatim_mark>verbatim1645#\end<<7811>>tex2html_preform<<7811>>
\begin<<9874>>tex2html_deferred<<9874>>\par\end<<9875>>tex2html_deferred<<9875>>
Here, the <tex2html_verb_mark>1348<tex2html_verb_mark> is treated exactly like a regular <tex2html_verb_mark>1349<tex2html_verb_mark>,
but whatever substring it matches is saved in the result-hash under the
key <tex2html_verb_mark>1350<tex2html_verb_mark>.
\end<<7812>>quotation<<7812>>\end<<7813>>it<<7813>>
Sigue un ejemplo:
\begin<<7814>>tex2html_preform<<7814>><tex2html_verbatim_mark>verbatim1646#\end<<7815>>tex2html_preform<<7815>>
y una ejecución:
\begin<<7816>>tex2html_preform<<7816>><tex2html_verbatim_mark>verbatim1647#\end<<7817>>tex2html_preform<<7817>>
\begin<<9876>>tex2html_deferred<<9876>>\par\end<<9877>>tex2html_deferred<<9877>>
 
  \paragraph<<8675>>Bloques de código<<8675>>
  \begin<<8676>>tabular<<8676>><<8677>>c<<8677>>
  \end<<8678>>tabular<<8678>>

\begin<<9878>>tex2html_deferred<<9878>>\par\end<<9879>>tex2html_deferred<<9879>>
\begin<<7819>>it<<7819>>\begin<<7820>>quotation<<7820>>
The syntax for aliasing code blocks is:
\begin<<9880>>tex2html_deferred<<9880>>\par\end<<9881>>tex2html_deferred<<9881>>
\begin<<7821>>tex2html_preform<<7821>><tex2html_verbatim_mark>verbatim1648#\end<<7822>>tex2html_preform<<7822>>
\begin<<9882>>tex2html_deferred<<9882>>\par\end<<9883>>tex2html_deferred<<9883>>
Note, however, that the code block must be specified in the standard
Perl 5.10 regex notation: <tex2html_verb_mark>1351<tex2html_verb_mark>. A common mistake is to write:
\begin<<9884>>tex2html_deferred<<9884>>\par\end<<9885>>tex2html_deferred<<9885>>
\begin<<7823>>tex2html_preform<<7823>><tex2html_verbatim_mark>verbatim1649#\end<<7824>>tex2html_preform<<7824>>
\begin<<9886>>tex2html_deferred<<9886>>\par\end<<9887>>tex2html_deferred<<9887>>
instead, which will attempt to interpolate <tex2html_verb_mark>1352<tex2html_verb_mark> before the
regex is even compiled, as such variables are only \emph<<7825>>protected<<7825>> from
interpolation inside a <tex2html_verb_mark>1353<tex2html_verb_mark>.
\begin<<9888>>tex2html_deferred<<9888>>\par\end<<9889>>tex2html_deferred<<9889>>
When correctly specified, this construct executes the code in the block
and saves the result of that execution in the result-hash, using the
alias as its key. Aliased code blocks are useful for adding semantic
information based on which branch of a rule is executed. For example,
consider the <tex2html_verb_mark>1354<tex2html_verb_mark> alternatives shown earlier:
\begin<<9890>>tex2html_deferred<<9890>>\par\end<<9891>>tex2html_deferred<<9891>>
\begin<<7826>>tex2html_preform<<7826>><tex2html_verbatim_mark>verbatim1650#\end<<7827>>tex2html_preform<<7827>>
\begin<<9892>>tex2html_deferred<<9892>>\par\end<<9893>>tex2html_deferred<<9893>>
Using aliased code blocks, you could add an extra field to the result-
hash to describe which form of the command was detected, like so:
\begin<<9894>>tex2html_deferred<<9894>>\par\end<<9895>>tex2html_deferred<<9895>>
\begin<<7828>>tex2html_preform<<7828>><tex2html_verbatim_mark>verbatim1651#\end<<7829>>tex2html_preform<<7829>>
\begin<<9896>>tex2html_deferred<<9896>>\par\end<<9897>>tex2html_deferred<<9897>>
Now, if the rule matched, the result-hash would contain something like:
\begin<<9898>>tex2html_deferred<<9898>>\par\end<<9899>>tex2html_deferred<<9899>>
\begin<<7830>>tex2html_preform<<7830>><tex2html_verbatim_mark>verbatim1652#\end<<7831>>tex2html_preform<<7831>>
\end<<7832>>quotation<<7832>>\end<<7833>>it<<7833>>
\begin<<9900>>tex2html_deferred<<9900>>\par\end<<9901>>tex2html_deferred<<9901>>
El siguiente ejemplo ilustra lo dicho en la documentación.
En la línea 15 hemos introducido una regla para el control de 
errores\begin<<9902>>tex2html_deferred<<9902>>\footnote<<8195>>Versión de <<7834>>\tt Grammar.pm<<7834>> obtenida por email 
con las correcciones de Damian<<8195>>\end<<9903>>tex2html_deferred<<9903>>:
\begin<<7835>>tex2html_preform<<7835>><tex2html_verbatim_mark>verbatim1653#\end<<7836>>tex2html_preform<<7836>>
\begin<<9904>>tex2html_deferred<<9904>>\par\end<<9905>>tex2html_deferred<<9905>>
La ejecución muestra el comportamiento del programa con tres entradas válidas
y una errónea:
\begin<<7837>>tex2html_preform<<7837>><tex2html_verbatim_mark>verbatim1654#\end<<7838>>tex2html_preform<<7838>>
\begin<<9906>>tex2html_deferred<<9906>>\par\end<<9907>>tex2html_deferred<<9907>>
 
  \paragraph<<8679>>Pseudo subreglas y depuración<<8679>>
  \begin<<8680>>tabular<<8680>><<8681>>c<<8681>>
  \end<<8682>>tabular<<8682>>

\begin<<9908>>tex2html_deferred<<9908>>\par\end<<9909>>tex2html_deferred<<9909>>
\begin<<7840>>it<<7840>>\begin<<7841>>quotation<<7841>>
Note that, in addition to the semantics described above, aliased
subpatterns and code blocks also become visible to \htmladdnormallink<<8683>><<8685>>\begin<<9910>>tex2html_deferred<<9910>>\tt\end<<9911>>tex2html_deferred<<9911>>Regexp::Grammars<<8685>><<8683>>
 <<8684>>http://search.cpan.org/perldoc?Regexp::Grammars<<8684>>
integrated debugger (see \htmladdnormallink<<8686>>Debugging<<8686>>
 <<8687>>http://search.cpan.org/~dconway/Regexp-Grammars/lib/Regexp/Grammars.pm\#Debugging<<8687>>).
\end<<7845>>quotation<<7845>>\end<<7846>>it<<7846>>
\begin<<9912>>tex2html_deferred<<9912>>\par\end<<9913>>tex2html_deferred<<9913>>
\subsection<<7847>>Llamadas a subreglas desmemoriadas<<7847>>
\begin<<9914>>tex2html_deferred<<9914>>\par\end<<9915>>tex2html_deferred<<9915>>
\begin<<7848>>it<<7848>>\begin<<7849>>quotation<<7849>>
By default, every subrule call saves its result into the result-hash,
either under its own name, or under an alias.
\begin<<9916>>tex2html_deferred<<9916>>\par\end<<9917>>tex2html_deferred<<9917>>
However, sometimes you may want to refactor some literal part of a rule
into one or more subrules, without having those submatches added to the
result-hash. The syntax for calling a subrule, but ignoring its return
value is:
\begin<<9918>>tex2html_deferred<<9918>>\par\end<<9919>>tex2html_deferred<<9919>>
\begin<<7850>>tex2html_preform<<7850>><tex2html_verbatim_mark>verbatim1655#\end<<7851>>tex2html_preform<<7851>>
\begin<<9920>>tex2html_deferred<<9920>>\par\end<<9921>>tex2html_deferred<<9921>>
(which is stolen directly from Perl 6).
\begin<<9922>>tex2html_deferred<<9922>>\par\end<<9923>>tex2html_deferred<<9923>>
For example, you may prefer to rewrite a rule such as:
\begin<<9924>>tex2html_deferred<<9924>>\par\end<<9925>>tex2html_deferred<<9925>>
\begin<<7852>>tex2html_preform<<7852>><tex2html_verbatim_mark>verbatim1656#\end<<7853>>tex2html_preform<<7853>>
\begin<<9926>>tex2html_deferred<<9926>>\par\end<<9927>>tex2html_deferred<<9927>>
without any literal matching, like so:
\begin<<9928>>tex2html_deferred<<9928>>\par\end<<9929>>tex2html_deferred<<9929>>
\begin<<7854>>tex2html_preform<<7854>><tex2html_verbatim_mark>verbatim1657#\end<<7855>>tex2html_preform<<7855>>
\begin<<9930>>tex2html_deferred<<9930>>\par\end<<9931>>tex2html_deferred<<9931>>
Moreover, as the individual components inside the parentheses probably
aren't being captured for any useful purpose either, you could further
optimize that to:
\begin<<9932>>tex2html_deferred<<9932>>\par\end<<9933>>tex2html_deferred<<9933>>
\begin<<7856>>tex2html_preform<<7856>><tex2html_verbatim_mark>verbatim1658#\end<<7857>>tex2html_preform<<7857>>
\begin<<9934>>tex2html_deferred<<9934>>\par\end<<9935>>tex2html_deferred<<9935>>
Note that you can also use the dot modifier on an aliased subpattern:
\begin<<9936>>tex2html_deferred<<9936>>\par\end<<9937>>tex2html_deferred<<9937>>
\begin<<7858>>tex2html_preform<<7858>><tex2html_verbatim_mark>verbatim1659#\end<<7859>>tex2html_preform<<7859>>
\begin<<9938>>tex2html_deferred<<9938>>\par\end<<9939>>tex2html_deferred<<9939>>
This seemingly contradictory behaviour (of giving a subpattern a name,
then deliberately ignoring that name) actually does make sense in
one situation. Providing the alias makes the subpattern visible to the
debugger, while using the dot stops it from affecting the result-hash. See
\emph<<7860>>Debugging non-grammars<<7860>> for an example of this usage.
\end<<7861>>quotation<<7861>>\end<<7862>>it<<7862>>
\begin<<9940>>tex2html_deferred<<9940>>\par\end<<9941>>tex2html_deferred<<9941>>
 
  \paragraph<<8688>>Ejemplo: Números entre comas<<8688>>
  \begin<<8689>>tabular<<8689>><<8690>>c<<8690>>
  \end<<8691>>tabular<<8691>>

\begin<<9942>>tex2html_deferred<<9942>>\par\end<<9943>>tex2html_deferred<<9943>>
Por ejemplo, queremos reconocer listas de números separados por comas.
Supongamos también que queremos
darle un nombre a la expresión regular de separación.
Quizá, aunque no es el caso, porque la expresión
regular de separación sea suficientemente compleja.
Si no usamos la notación \emph<<7864>>punto<<7864>> la coma aparecerá en la estructura:
\begin<<9944>>tex2html_deferred<<9944>>\par\end<<9945>>tex2html_deferred<<9945>>
\begin<<7865>>tex2html_preform<<7865>><tex2html_verbatim_mark>verbatim1660#\end<<7866>>tex2html_preform<<7866>>
En efecto, aparece la clave <tex2html_verb_mark>1355<tex2html_verb_mark>:
\begin<<7867>>tex2html_preform<<7867>><tex2html_verbatim_mark>verbatim1661#\end<<7868>>tex2html_preform<<7868>>
Si cambiamos la llamada a la regla <tex2html_verb_mark>1356<tex2html_verb_mark> por 
<tex2html_verb_mark>1357<tex2html_verb_mark> 
\begin<<9946>>tex2html_deferred<<9946>>\par\end<<9947>>tex2html_deferred<<9947>>
\begin<<7869>>tex2html_preform<<7869>><tex2html_verbatim_mark>verbatim1662#\end<<7870>>tex2html_preform<<7870>>
eliminamos la aparición de la innecesaria clave:
\begin<<9948>>tex2html_deferred<<9948>>\par\end<<9949>>tex2html_deferred<<9949>>
\begin<<7871>>tex2html_preform<<7871>><tex2html_verbatim_mark>verbatim1663#\end<<7872>>tex2html_preform<<7872>>
\begin<<9950>>tex2html_deferred<<9950>>\par\end<<9951>>tex2html_deferred<<9951>>
\subsection<<7873>>Destilación del resultado<<7873>>
\begin<<9952>>tex2html_deferred<<9952>>\par\end<<9953>>tex2html_deferred<<9953>>
 
  \paragraph<<8692>>Destilación manual<<8692>>
  \begin<<8693>>tabular<<8693>><<8694>>c<<8694>>
  \end<<8695>>tabular<<8695>>

\begin<<9954>>tex2html_deferred<<9954>>\par\end<<9955>>tex2html_deferred<<9955>>
\begin<<7875>>it<<7875>>\begin<<7876>>quotation<<7876>>
\htmladdnormallink<<8696>><<8698>>\begin<<9956>>tex2html_deferred<<9956>>\tt\end<<9957>>tex2html_deferred<<9957>>Regexp::Grammars<<8698>><<8696>>
 <<8697>>http://search.cpan.org/perldoc?Regexp::Grammars<<8697>> also offers full manual control over the distillation
process. If you use the reserved word <tex2html_verb_mark>1358<tex2html_verb_mark> as the alias for a subrule
call:
\begin<<9958>>tex2html_deferred<<9958>>\par\end<<9959>>tex2html_deferred<<9959>>
\begin<<7878>>tex2html_preform<<7878>><tex2html_verbatim_mark>verbatim1664#\end<<7879>>tex2html_preform<<7879>>
\begin<<9960>>tex2html_deferred<<9960>>\par\end<<9961>>tex2html_deferred<<9961>>
or a subpattern match:
\begin<<9962>>tex2html_deferred<<9962>>\par\end<<9963>>tex2html_deferred<<9963>>
\begin<<7880>>tex2html_preform<<7880>><tex2html_verbatim_mark>verbatim1665#\end<<7881>>tex2html_preform<<7881>>
\begin<<9964>>tex2html_deferred<<9964>>\par\end<<9965>>tex2html_deferred<<9965>>
or a code block:
\begin<<9966>>tex2html_deferred<<9966>>\par\end<<9967>>tex2html_deferred<<9967>>
\begin<<7882>>tex2html_preform<<7882>><tex2html_verbatim_mark>verbatim1666#\end<<7883>>tex2html_preform<<7883>>
\begin<<9968>>tex2html_deferred<<9968>>\par\end<<9969>>tex2html_deferred<<9969>>
then the current rule will treat the return value of that subrule,
pattern, or code block as its complete result, and return that value
instead of the usual result-hash it constructs. This is the case even
if the result has other entries that would normally also be returned.
\begin<<9970>>tex2html_deferred<<9970>>\par\end<<9971>>tex2html_deferred<<9971>>
For example, in a rule like:
\begin<<9972>>tex2html_deferred<<9972>>\par\end<<9973>>tex2html_deferred<<9973>>
\begin<<7884>>tex2html_preform<<7884>><tex2html_verbatim_mark>verbatim1667#\end<<7885>>tex2html_preform<<7885>>
\begin<<9974>>tex2html_deferred<<9974>>\par\end<<9975>>tex2html_deferred<<9975>>
The use of <tex2html_verb_mark>1359<tex2html_verb_mark> aliases causes the rule to return either whatever
<tex2html_verb_mark>1360<tex2html_verb_mark> returns, or whatever <tex2html_verb_mark>1361<tex2html_verb_mark> returns (provided it's between
left and right parentheses).
\begin<<9976>>tex2html_deferred<<9976>>\par\end<<9977>>tex2html_deferred<<9977>>
Note that, in this second case, even though <tex2html_verb_mark>1362<tex2html_verb_mark> and <tex2html_verb_mark>1363<tex2html_verb_mark>
are captured to the result-hash, they are not returned, because the
<tex2html_verb_mark>1364<tex2html_verb_mark> alias overrides the normal \emph<<7886>>return the result-hash<<7886>> semantics and
returns only what its associated subrule (i.e. <tex2html_verb_mark>1365<tex2html_verb_mark>) produces.
\end<<7887>>quotation<<7887>>\end<<7888>>it<<7888>>
\begin<<9978>>tex2html_deferred<<9978>>\par\end<<9979>>tex2html_deferred<<9979>>
El siguiente ejemplo ilustra el uso del alias <tex2html_verb_mark>1366<tex2html_verb_mark>:
\begin<<9980>>tex2html_deferred<<9980>>\par\end<<9981>>tex2html_deferred<<9981>>
\begin<<7889>>tex2html_preform<<7889>><tex2html_verbatim_mark>verbatim1668#\end<<7890>>tex2html_preform<<7890>>
\begin<<9982>>tex2html_deferred<<9982>>\par\end<<9983>>tex2html_deferred<<9983>>
Veamos una ejecución:
\begin<<9984>>tex2html_deferred<<9984>>\par\end<<9985>>tex2html_deferred<<9985>>
\begin<<7891>>tex2html_preform<<7891>><tex2html_verbatim_mark>verbatim1669#\end<<7892>>tex2html_preform<<7892>>
Obsérvese como el árbol construido para la expresión <tex2html_verb_mark>1367<tex2html_verb_mark> 
se hunde a derechas dando lugar a una jerarquía errónea.
Para arreglar el problema sería necesario eliminar la 
recursividad por la izquierda en las reglas correspondientes.
\begin<<9986>>tex2html_deferred<<9986>>\par\end<<9987>>tex2html_deferred<<9987>>
 
  \paragraph<<8699>>Destilación en el programa<<8699>>
  \begin<<8700>>tabular<<8700>><<8701>>c<<8701>>
  \end<<8702>>tabular<<8702>>

\begin<<9988>>tex2html_deferred<<9988>>\par\end<<9989>>tex2html_deferred<<9989>>
\begin<<7894>>it<<7894>>\begin<<7895>>quotation<<7895>>
It's also possible to control what a rule returns from within a code
block. \htmladdnormallink<<8703>><<8705>>\begin<<9990>>tex2html_deferred<<9990>>\tt\end<<9991>>tex2html_deferred<<9991>>Regexp::Grammars<<8705>><<8703>>
 <<8704>>http://search.cpan.org/perldoc?Regexp::Grammars<<8704>> provides a set of reserved variables that give
direct access to the result-hash.
\begin<<9992>>tex2html_deferred<<9992>>\par\end<<9993>>tex2html_deferred<<9993>>
The result-hash itself can be accessed as <tex2html_verb_mark>1369<tex2html_verb_mark> within any code block
inside a rule. For example:
\begin<<9994>>tex2html_deferred<<9994>>\par\end<<9995>>tex2html_deferred<<9995>>
\begin<<7897>>tex2html_preform<<7897>><tex2html_verbatim_mark>verbatim1670#\end<<7898>>tex2html_preform<<7898>>
\begin<<9996>>tex2html_deferred<<9996>>\par\end<<9997>>tex2html_deferred<<9997>>
Here, the rule matches a product (aliased <tex2html_verb_mark>1370<tex2html_verb_mark> in the result-hash), then a
literal <tex2html_verb_mark>1371<tex2html_verb_mark>, then another product (aliased to <tex2html_verb_mark>1372<tex2html_verb_mark> in the result-hash). The
rule then executes the code block, which accesses the two saved values
(as <tex2html_verb_mark>1373<tex2html_verb_mark> and <tex2html_verb_mark>1374<tex2html_verb_mark>), adding them together. Because the block
is itself aliased to <tex2html_verb_mark>1375<tex2html_verb_mark>, the sum produced by the block becomes the
(only) result of the rule.
\begin<<9998>>tex2html_deferred<<9998>>\par\end<<9999>>tex2html_deferred<<9999>>
It is also possible to set the rule result from within a code block
(instead of aliasing it). The special \emph<<7899>>override<<7899>> return value is
represented by the special variable <tex2html_verb_mark>1376<tex2html_verb_mark>. So the previous example
could be rewritten:
\begin<<10000>>tex2html_deferred<<10000>>\par\end<<10001>>tex2html_deferred<<10001>>
\begin<<7900>>tex2html_preform<<7900>><tex2html_verbatim_mark>verbatim1671#\end<<7901>>tex2html_preform<<7901>>
Both forms are identical in effect. Any assignment to <tex2html_verb_mark>1377<tex2html_verb_mark> overrides
the normal \emph<<7902>>return all subrule results<<7902>> behaviour.
\begin<<10002>>tex2html_deferred<<10002>>\par\end<<10003>>tex2html_deferred<<10003>>
Assigning to <tex2html_verb_mark>1378<tex2html_verb_mark> directly is particularly handy if the result may
not always be \emph<<7903>>distillable<<7903>>, for example:
\begin<<10004>>tex2html_deferred<<10004>>\par\end<<10005>>tex2html_deferred<<10005>>
\begin<<7904>>tex2html_preform<<7904>><tex2html_verbatim_mark>verbatim1672#\end<<7905>>tex2html_preform<<7905>>
\begin<<10006>>tex2html_deferred<<10006>>\par\end<<10007>>tex2html_deferred<<10007>>
Note that you can also partially override the subrule return
behaviour. Normally, the subrule returns the complete text it matched
under the \emph<<7906>>empty key<<7906>> of its result-hash. That is, of course, 
<tex2html_verb_mark>1379<tex2html_verb_mark>,
so you can override just that behaviour by directly assigning to that
entry.
\begin<<10008>>tex2html_deferred<<10008>>\par\end<<10009>>tex2html_deferred<<10009>>
For example, if you have a rule that matches key/value pairs from a
configuration file, you might prefer that any trailing comments not
be included in the <<7907>>\begin<<10010>>tex2html_deferred<<10010>>\it\end<<10011>>tex2html_deferred<<10011>>matched text<<7907>> entry of the rule's result-hash. You
could hide such comments like so:
\begin<<10012>>tex2html_deferred<<10012>>\par\end<<10013>>tex2html_deferred<<10013>>
\begin<<7908>>tex2html_preform<<7908>><tex2html_verbatim_mark>verbatim1673#\end<<7909>>tex2html_preform<<7909>>
\begin<<10014>>tex2html_deferred<<10014>>\par\end<<10015>>tex2html_deferred<<10015>>
Some more examples of the uses of <tex2html_verb_mark>1380<tex2html_verb_mark>:
\begin<<10016>>tex2html_deferred<<10016>>\par\end<<10017>>tex2html_deferred<<10017>>
\begin<<7910>>tex2html_preform<<7910>><tex2html_verbatim_mark>verbatim1674#\end<<7911>>tex2html_preform<<7911>>
\begin<<10018>>tex2html_deferred<<10018>>\par\end<<10019>>tex2html_deferred<<10019>>
<tex2html_verb_mark>1381<tex2html_verb_mark> and <tex2html_verb_mark>1382<tex2html_verb_mark>
    are both aliases for the built-in read-only <tex2html_verb_mark>1383<tex2html_verb_mark>variable, 
which always contains the substring matched by 
the nearest preceding <tex2html_verb_mark>1384<tex2html_verb_mark> capture. 
<tex2html_verb_mark>1385<tex2html_verb_mark> still works perfectly well, but these are provided 
to improve the readability of code blocks and error messages respectively.
\end<<7912>>quotation<<7912>>\end<<7913>>it<<7913>>
\begin<<10020>>tex2html_deferred<<10020>>\par\end<<10021>>tex2html_deferred<<10021>>
El siguiente código implementa una calculadora
usando destilación en  el código:
\begin<<10022>>tex2html_deferred<<10022>>\par\end<<10023>>tex2html_deferred<<10023>>
\begin<<7914>>tex2html_preform<<7914>><tex2html_verbatim_mark>verbatim1675#\end<<7915>>tex2html_preform<<7915>>
\begin<<10024>>tex2html_deferred<<10024>>\par\end<<10025>>tex2html_deferred<<10025>>
\begin<<8212>>theorem_type<<8212>>[exercise][exercise][section][][][]
Cual es la salida del programa anterior para las entradas:
\begin<<7917>>itemize<<7917>>
\item <tex2html_verb_mark>1386<tex2html_verb_mark>
\item <tex2html_verb_mark>1387<tex2html_verb_mark>
\item <tex2html_verb_mark>1388<tex2html_verb_mark>
\end<<7918>>itemize<<7918>>\end<<8213>>theorem_type<<8213>>
\begin<<10026>>tex2html_deferred<<10026>>\par\end<<10027>>tex2html_deferred<<10027>>
\subsection<<7920>>Llamadas privadas a subreglas y subreglas privadas<<7920>>
\begin<<10028>>tex2html_deferred<<10028>>\par\end<<10029>>tex2html_deferred<<10029>>
\begin<<7921>>it<<7921>>\begin<<7922>>quotation<<7922>>
If a rule name (or an alias) begins with an underscore:
\begin<<10030>>tex2html_deferred<<10030>>\par\end<<10031>>tex2html_deferred<<10031>>
\begin<<7923>>tex2html_preform<<7923>><tex2html_verbatim_mark>verbatim1676#\end<<7924>>tex2html_preform<<7924>>
\begin<<10032>>tex2html_deferred<<10032>>\par\end<<10033>>tex2html_deferred<<10033>>
then matching proceeds as normal, and any result that is returned is
stored in the current result-hash in the usual way.
\begin<<10034>>tex2html_deferred<<10034>>\par\end<<10035>>tex2html_deferred<<10035>>
However, when any rule finishes (and just before it returns) it first
filters its result-hash, removing any entries whose keys begin with an
underscore. This means that any subrule with an underscored name (or with
an underscored alias) remembers its result, but only until the end of
the current rule. Its results are effectively private to the current rule.
\begin<<10036>>tex2html_deferred<<10036>>\par\end<<10037>>tex2html_deferred<<10037>>
This is especially useful in conjunction with result distillation.
\end<<7925>>quotation<<7925>>\end<<7926>>it<<7926>>
\begin<<10038>>tex2html_deferred<<10038>>\par\end<<10039>>tex2html_deferred<<10039>>
\subsection<<7927>>Mas sobre listas<<7927>>
\begin<<10040>>tex2html_deferred<<10040>>\par\end<<10041>>tex2html_deferred<<10041>>
 
  \paragraph<<8706>>Reconocimiento manual de listas<<8706>>
  \begin<<8707>>tabular<<8707>><<8708>>c<<8708>>
  \end<<8709>>tabular<<8709>>

\begin<<10042>>tex2html_deferred<<10042>>\par\end<<10043>>tex2html_deferred<<10043>>
 
  \paragraph<<8710>>Analizando listas manualmente<<8710>>
  \begin<<8711>>tabular<<8711>><<8712>>c<<8712>>
  \end<<8713>>tabular<<8713>>

\begin<<10044>>tex2html_deferred<<10044>>\par\end<<10045>>tex2html_deferred<<10045>>
El siguiente ejemplo muestra como construir un reconocedor de 
listas (posiblemente vacías) de números:
\begin<<7930>>tex2html_preform<<7930>><tex2html_verbatim_mark>verbatim1677#\end<<7931>>tex2html_preform<<7931>>
Sigue una ejecución:
\begin<<7932>>tex2html_preform<<7932>><tex2html_verbatim_mark>verbatim1678#\end<<7933>>tex2html_preform<<7933>>
\begin<<10046>>tex2html_deferred<<10046>>\par\end<<10047>>tex2html_deferred<<10047>>
 
  \paragraph<<8714>>Influencia del orden en el lenguaje reconocido<<8714>>
  \begin<<8715>>tabular<<8715>><<8716>>c<<8716>>
  \end<<8717>>tabular<<8717>>

\begin<<10048>>tex2html_deferred<<10048>>\par\end<<10049>>tex2html_deferred<<10049>>
Tenga en cuenta que el orden de las reglas
influye en el lenguaje reconocido. Véase lo que ocurre si cambiamos 
en el ejemplo anterior el orden de las reglas:
\begin<<7935>>tex2html_preform<<7935>><tex2html_verbatim_mark>verbatim1679#\end<<7936>>tex2html_preform<<7936>>
Al ejecutar se obtiene:
\begin<<7937>>tex2html_preform<<7937>><tex2html_verbatim_mark>verbatim1680#\end<<7938>>tex2html_preform<<7938>>
\begin<<10050>>tex2html_deferred<<10050>>\par\end<<10051>>tex2html_deferred<<10051>>
Por supuesto basta poner anclas en el patrón a buscar para forzar a que se reconozca
la lista completa:
\begin<<7939>>tex2html_preform<<7939>><tex2html_verbatim_mark>verbatim1681#\end<<7940>>tex2html_preform<<7940>>
En efecto, la nueva versión reconoce la lista:
\begin<<7941>>tex2html_preform<<7941>><tex2html_verbatim_mark>verbatim1682#\end<<7942>>tex2html_preform<<7942>>
\begin<<10052>>tex2html_deferred<<10052>>\par\end<<10053>>tex2html_deferred<<10053>>
Si se quiere mantener la producción vacía en primer lugar 
pero forzar el reconocimiento de la lista completa, se puede
hacer uso de un lookahead negativo:
\begin<<10054>>tex2html_deferred<<10054>>\par\end<<10055>>tex2html_deferred<<10055>>
\begin<<7943>>tex2html_preform<<7943>><tex2html_verbatim_mark>verbatim1683#\end<<7944>>tex2html_preform<<7944>>
Así, sólo se reducirá por la regla vacía si el siguiente token no es un
número. Sigue un ejemplo de ejecución:
\begin<<7945>>tex2html_preform<<7945>><tex2html_verbatim_mark>verbatim1684#\end<<7946>>tex2html_preform<<7946>>
\begin<<10056>>tex2html_deferred<<10056>>\par\end<<10057>>tex2html_deferred<<10057>>
 
  \paragraph<<8718>>Aplanamiento manual de listas<<8718>>
  \begin<<8719>>tabular<<8719>><<8720>>c<<8720>>
  \end<<8721>>tabular<<8721>>

\begin<<10058>>tex2html_deferred<<10058>>\par\end<<10059>>tex2html_deferred<<10059>>
¿Cómo podemos hacer que la estructura retornada por el reconocedor 
sea una lista?. Podemos añadir acciones como sigue:
\begin<<10060>>tex2html_deferred<<10060>>\par\end<<10061>>tex2html_deferred<<10061>>
\begin<<7948>>tex2html_preform<<7948>><tex2html_verbatim_mark>verbatim1685#\end<<7949>>tex2html_preform<<7949>>
\begin<<10062>>tex2html_deferred<<10062>>\par\end<<10063>>tex2html_deferred<<10063>>
Al ejecutarse este programa produce una salida como:
\begin<<10064>>tex2html_deferred<<10064>>\par\end<<10065>>tex2html_deferred<<10065>>
\begin<<7950>>tex2html_preform<<7950>><tex2html_verbatim_mark>verbatim1686#\end<<7951>>tex2html_preform<<7951>>
\begin<<10066>>tex2html_deferred<<10066>>\par\end<<10067>>tex2html_deferred<<10067>>
 
  \paragraph<<8722>>Los operadores de repetición<<8722>>
  \begin<<8723>>tabular<<8723>><<8724>>c<<8724>>
  \end<<8725>>tabular<<8725>>

\begin<<10068>>tex2html_deferred<<10068>>\par\end<<10069>>tex2html_deferred<<10069>>
Los operadores de repetición como <tex2html_verb_mark>1389<tex2html_verb_mark>, <tex2html_verb_mark>1390<tex2html_verb_mark>, etc. 
permiten simplificar el análisis de lenguajes de listas:
\begin<<7953>>tex2html_preform<<7953>><tex2html_verbatim_mark>verbatim1687#\end<<7954>>tex2html_preform<<7954>>
Los corchetes alrededor de <tex2html_verb_mark>1391<tex2html_verb_mark> hacen 
que el valor asociado con el patrón sea la lista de números.
Si no los ponemos el valor asociado sería el último valor de la lista.
\begin<<10070>>tex2html_deferred<<10070>>\par\end<<10071>>tex2html_deferred<<10071>>
 
  \paragraph<<8726>>Listas separadas por Algo<<8726>>
  \begin<<8727>>tabular<<8727>><<8728>>c<<8728>>
  \end<<8729>>tabular<<8729>>

\begin<<10072>>tex2html_deferred<<10072>>\par\end<<10073>>tex2html_deferred<<10073>>
\begin<<7956>>it<<7956>>\begin<<7957>>quotation<<7957>>
One of the commonest tasks in text parsing is to match a list of
unspecified length, in which items are separated by a fixed token. Things
like:
\begin<<10074>>tex2html_deferred<<10074>>\par\end<<10075>>tex2html_deferred<<10075>>
\begin<<7958>>tex2html_preform<<7958>><tex2html_verbatim_mark>verbatim1688#\end<<7959>>tex2html_preform<<7959>>
\begin<<10076>>tex2html_deferred<<10076>>\par\end<<10077>>tex2html_deferred<<10077>>
The usual construct required to parse these kinds of structures is either:
\begin<<10078>>tex2html_deferred<<10078>>\par\end<<10079>>tex2html_deferred<<10079>>
\begin<<7960>>tex2html_preform<<7960>><tex2html_verbatim_mark>verbatim1689#\end<<7961>>tex2html_preform<<7961>>
\begin<<10080>>tex2html_deferred<<10080>>\par\end<<10081>>tex2html_deferred<<10081>>
Or, more efficiently, but less prettily:
\begin<<10082>>tex2html_deferred<<10082>>\par\end<<10083>>tex2html_deferred<<10083>>
\begin<<7962>>tex2html_preform<<7962>><tex2html_verbatim_mark>verbatim1690#\end<<7963>>tex2html_preform<<7963>>
\begin<<10084>>tex2html_deferred<<10084>>\par\end<<10085>>tex2html_deferred<<10085>>
Because this is such a common requirement, \htmladdnormallink<<8730>><<8732>>\begin<<10086>>tex2html_deferred<<10086>>\tt\end<<10087>>tex2html_deferred<<10087>>Regexp::Grammars<<8732>><<8730>>
 <<8731>>http://search.cpan.org/perldoc?Regexp::Grammars<<8731>> provides a
cleaner way to specify the iterative version. The syntax is taken from
Perl 6:
\begin<<10088>>tex2html_deferred<<10088>>\par\end<<10089>>tex2html_deferred<<10089>>
\begin<<7965>>tex2html_preform<<7965>><tex2html_verbatim_mark>verbatim1691#\end<<7966>>tex2html_preform<<7966>>
\begin<<10090>>tex2html_deferred<<10090>>\par\end<<10091>>tex2html_deferred<<10091>>
This is a repetition specifier on the first subrule (hence the use of <tex2html_verb_mark>1392<tex2html_verb_mark>
as the marker, to reflect the repetitive behaviour of <tex2html_verb_mark>1393<tex2html_verb_mark>). However, the
number of repetitions is controlled by the second subrule: the first
subrule will be repeatedly matched for as long as the second subrule
matches immediately after it.
\begin<<10092>>tex2html_deferred<<10092>>\par\end<<10093>>tex2html_deferred<<10093>>
So, for example, you can match a sequence of numbers separated by
commas with:
\begin<<10094>>tex2html_deferred<<10094>>\par\end<<10095>>tex2html_deferred<<10095>>
\begin<<7967>>tex2html_preform<<7967>><tex2html_verbatim_mark>verbatim1692#\end<<7968>>tex2html_preform<<7968>>
\begin<<10096>>tex2html_deferred<<10096>>\par\end<<10097>>tex2html_deferred<<10097>>
Note that it's important to use the <tex2html_verb_mark>1394<tex2html_verb_mark> form for the items being
matched, so that all of them are saved in the result hash. You can also
save all the separators (if that's important):
\begin<<10098>>tex2html_deferred<<10098>>\par\end<<10099>>tex2html_deferred<<10099>>
\begin<<7969>>tex2html_preform<<7969>><tex2html_verbatim_mark>verbatim1693#\end<<7970>>tex2html_preform<<7970>>
\begin<<10100>>tex2html_deferred<<10100>>\par\end<<10101>>tex2html_deferred<<10101>>
The repeated item must be specified as a subrule call fo some kind,
but the separators may be specified either as a subrule or a bracketed
pattern. For example:
\begin<<10102>>tex2html_deferred<<10102>>\par\end<<10103>>tex2html_deferred<<10103>>
\begin<<7971>>tex2html_preform<<7971>><tex2html_verbatim_mark>verbatim1694#\end<<7972>>tex2html_preform<<7972>>
\begin<<10104>>tex2html_deferred<<10104>>\par\end<<10105>>tex2html_deferred<<10105>>
The separator must always be specified in matched delimiters of some kind:
either matching <tex2html_verb_mark>1395<tex2html_verb_mark> or matching <tex2html_verb_mark>1396<tex2html_verb_mark>. 
A common error is to write:
\begin<<10106>>tex2html_deferred<<10106>>\par\end<<10107>>tex2html_deferred<<10107>>
\begin<<7973>>tex2html_preform<<7973>><tex2html_verbatim_mark>verbatim1695#\end<<7974>>tex2html_preform<<7974>>
\begin<<10108>>tex2html_deferred<<10108>>\par\end<<10109>>tex2html_deferred<<10109>>
You can also use a pattern as the item matcher, but it must be aliased
into a subrule:
\begin<<10110>>tex2html_deferred<<10110>>\par\end<<10111>>tex2html_deferred<<10111>>
\begin<<7975>>tex2html_preform<<7975>><tex2html_verbatim_mark>verbatim1696#\end<<7976>>tex2html_preform<<7976>>
\end<<7977>>quotation<<7977>>\end<<7978>>it<<7978>>
\begin<<10112>>tex2html_deferred<<10112>>\par\end<<10113>>tex2html_deferred<<10113>>
 
  \paragraph<<8733>>Ejemplo: Listas de números separados por comas<<8733>>
  \begin<<8734>>tabular<<8734>><<8735>>c<<8735>>
  \end<<8736>>tabular<<8736>>

\begin<<10114>>tex2html_deferred<<10114>>\par\end<<10115>>tex2html_deferred<<10115>>
Veamos un ejemplo sencillo:
\begin<<10116>>tex2html_deferred<<10116>>\par\end<<10117>>tex2html_deferred<<10117>>
\begin<<7980>>tex2html_preform<<7980>><tex2html_verbatim_mark>verbatim1697#\end<<7981>>tex2html_preform<<7981>>
Sigue un ejemplo de ejecución:
\begin<<10118>>tex2html_deferred<<10118>>\par\end<<10119>>tex2html_deferred<<10119>>
\begin<<7982>>tex2html_preform<<7982>><tex2html_verbatim_mark>verbatim1698#\end<<7983>>tex2html_preform<<7983>>
\begin<<10120>>tex2html_deferred<<10120>>\par\end<<10121>>tex2html_deferred<<10121>>
 
  \paragraph<<8737>>Ejemplo: AST para las expresiones aritméticas<<8737>>
  \begin<<8738>>tabular<<8738>><<8739>>c<<8739>>
  \end<<8740>>tabular<<8740>>

\begin<<10122>>tex2html_deferred<<10122>>\par\end<<10123>>tex2html_deferred<<10123>>
Las expresiones aritméticas
puede definirse como una jerarquía de listas como
sigue:
\begin<<10124>>tex2html_deferred<<10124>>\par\end<<10125>>tex2html_deferred<<10125>>
\begin<<7985>>tex2html_preform<<7985>><tex2html_verbatim_mark>verbatim1699#\end<<7986>>tex2html_preform<<7986>>
\begin<<10126>>tex2html_deferred<<10126>>\par\end<<10127>>tex2html_deferred<<10127>>
Obsérvese el árbol generado para la expresión <tex2html_verb_mark>1397<tex2html_verb_mark>:
\begin<<7987>>tex2html_preform<<7987>><tex2html_verbatim_mark>verbatim1700#\end<<7988>>tex2html_preform<<7988>>
\begin<<10128>>tex2html_deferred<<10128>>\par\end<<10129>>tex2html_deferred<<10129>>
\subsection<<8196>>La directiva <<7989>>\begin<<10130>>tex2html_deferred<<10130>>\tt\end<<10131>>tex2html_deferred<<10131>>require<<7989>><<8196>>
\begin<<10132>>tex2html_deferred<<10132>>\par\end<<10133>>tex2html_deferred<<10133>>
La directiva <tex2html_verb_mark>1398<tex2html_verb_mark> es similar 
en su funcionamiento al paréntesis 5.10 <tex2html_verb_mark>1399<tex2html_verb_mark>
el cuál hace que el <tex2html_verb_mark>1400<tex2html_verb_mark> sea evaluado durante el tiempo de matching.
El resultado de la evaluación se trata como una expresión regular con la que deberá
casarse.
(véase la sección \ref<<7990>>subsection:tiempodematching<<7990>>
para mas detalles).
\begin<<10134>>tex2html_deferred<<10134>>\par\end<<10135>>tex2html_deferred<<10135>>
La sintáxis de la directiva <tex2html_verb_mark>1401<tex2html_verb_mark> es
\begin<<10136>>tex2html_deferred<<10136>>\par\end<<10137>>tex2html_deferred<<10137>>
\begin<<7991>>it<<7991>>\begin<<7992>>quotation<<7992>>
\begin<<7993>>tex2html_preform<<7993>><tex2html_verbatim_mark>verbatim1701#\end<<7994>>tex2html_preform<<7994>>
\begin<<10138>>tex2html_deferred<<10138>>\par\end<<10139>>tex2html_deferred<<10139>>
The code block is executed and if its final value is true, matching
continues from the same position. If the block's final value is false,
the match fails at that point and starts backtracking.
\end<<7995>>quotation<<7995>>\end<<7996>>it<<7996>>
\begin<<10140>>tex2html_deferred<<10140>>\par\end<<10141>>tex2html_deferred<<10141>>
\begin<<7997>>it<<7997>>\begin<<7998>>quotation<<7998>>
The <tex2html_verb_mark>1402<tex2html_verb_mark> directive is useful for testing conditions that it's
not easy (or even possible) to check within the syntax of the the regex
itself. For example:
\begin<<10142>>tex2html_deferred<<10142>>\par\end<<10143>>tex2html_deferred<<10143>>
\begin<<7999>>tex2html_preform<<7999>><tex2html_verbatim_mark>verbatim1702#\end<<8000>>tex2html_preform<<8000>>
\begin<<10144>>tex2html_deferred<<10144>>\par\end<<10145>>tex2html_deferred<<10145>>
A require expects a regex codeblock as its argument and succeeds if
the final value of that codeblock is true. If the final value is false,
the directive fails and the rule starts backtracking.
\begin<<10146>>tex2html_deferred<<10146>>\par\end<<10147>>tex2html_deferred<<10147>>
Note, in this example that the digits are matched with <tex2html_verb_mark>1403<tex2html_verb_mark> . \emph<<8001>>The
trailing<<8001>> <tex2html_verb_mark>1404<tex2html_verb_mark> prevents the <tex2html_verb_mark>1405<tex2html_verb_mark> repetition from backtracking to a smaller
number of digits if the <tex2html_verb_mark>1406<tex2html_verb_mark> fails.
\end<<8002>>quotation<<8002>>\end<<8003>>it<<8003>>
\begin<<10148>>tex2html_deferred<<10148>>\par\end<<10149>>tex2html_deferred<<10149>>
El programa <tex2html_verb_mark>1407<tex2html_verb_mark> ilustra el uso de la directiva:
\begin<<8004>>tex2html_preform<<8004>><tex2html_verbatim_mark>verbatim1703#\end<<8005>>tex2html_preform<<8005>>
Las condiciones usadas en el <tex2html_verb_mark>1408<tex2html_verb_mark> obligan a que cada 
quad\begin<<10150>>tex2html_deferred<<10150>>\footnote<<8197>>
A quad (pronounced KWAHD ) is a unit in a set of something that comes
in four units. The term is sometimes used to describe each of the four
numbers that constitute an Internet Protocol ( IP ) address. Thus, an
Internet address in its numeric form (which is also sometimes called a
dot address ) consists of four quads separated by ;SPMquot;dots;SPMquot; (periods). 
\par
A quad also means \emph<<8006>>a quarter<<8006>> in some usages. (A quarter as a U.S. coin
or monetary unit means \emph<<8007>>a quarter of a dollar,<<8007>> and in slang is sometimes
called \emph<<8008>>two bits.<<8008>> However, this usage does not mean two binary bits as
used in computers.)
<<8197>>\end<<10151>>tex2html_deferred<<10151>> sea menor que 256 y a que existan sólo cuatro quads.
\begin<<10152>>tex2html_deferred<<10152>>\par\end<<10153>>tex2html_deferred<<10153>>
Sigue un ejemplo de ejecución:
\begin<<8009>>tex2html_preform<<8009>><tex2html_verbatim_mark>verbatim1704#\end<<8010>>tex2html_preform<<8010>>
Obsérvese como no se aceptan blancos entre los puntos en esta versión.
¿Sabría explicar la causa?
\begin<<10154>>tex2html_deferred<<10154>>\par\end<<10155>>tex2html_deferred<<10155>>
\subsection<<8011>>Casando con las claves de un hash<<8011>>
\begin<<10156>>tex2html_deferred<<10156>>\par\end<<10157>>tex2html_deferred<<10157>>
\begin<<8012>>it<<8012>>\begin<<8013>>quotation<<8013>>
In some situations a grammar may need a rule that matches dozens,
hundreds, or even thousands of one-word alternatives. For example, when
matching command names, or valid userids, or English words. In such
cases it is often impractical (and always inefficient) to list all the
alternatives between <tex2html_verb_mark>1409<tex2html_verb_mark> alterators:
\begin<<10158>>tex2html_deferred<<10158>>\par\end<<10159>>tex2html_deferred<<10159>>
\begin<<8014>>tex2html_preform<<8014>><tex2html_verbatim_mark>verbatim1705#\end<<8015>>tex2html_preform<<8015>>
\begin<<10160>>tex2html_deferred<<10160>>\par\end<<10161>>tex2html_deferred<<10161>>
To simplify such cases, \htmladdnormallink<<8741>><<8743>>\begin<<10162>>tex2html_deferred<<10162>>\tt\end<<10163>>tex2html_deferred<<10163>>Regexp::Grammars<<8743>><<8741>>
 <<8742>>http://search.cpan.org/perldoc?Regexp::Grammars<<8742>> provides a special construct
that allows you to specify all the alternatives as the keys of a normal
hash. The syntax for that construct is simply to put the hash name inside
angle brackets (with no space between the angles and the hash name).
\begin<<10164>>tex2html_deferred<<10164>>\par\end<<10165>>tex2html_deferred<<10165>>
Which means that the rules in the previous example could also be written:
\begin<<10166>>tex2html_deferred<<10166>>\par\end<<10167>>tex2html_deferred<<10167>>
\begin<<8017>>tex2html_preform<<8017>><tex2html_verbatim_mark>verbatim1706#\end<<8018>>tex2html_preform<<8018>>
\begin<<10168>>tex2html_deferred<<10168>>\par\end<<10169>>tex2html_deferred<<10169>>
provided that the two hashes (<tex2html_verb_mark>1411<tex2html_verb_mark> and <tex2html_verb_mark>1412<tex2html_verb_mark>) 
are visible in the scope where the grammar is created.
\begin<<10170>>tex2html_deferred<<10170>>\par\end<<10171>>tex2html_deferred<<10171>>
Internally, the construct is converted to something equivalent to:
\begin<<10172>>tex2html_deferred<<10172>>\par\end<<10173>>tex2html_deferred<<10173>>
\begin<<8019>>tex2html_preform<<8019>><tex2html_verbatim_mark>verbatim1707#\end<<8020>>tex2html_preform<<8020>>
\begin<<10174>>tex2html_deferred<<10174>>\par\end<<10175>>tex2html_deferred<<10175>>
The special <tex2html_verb_mark>1413<tex2html_verb_mark> rule is created automatically, and defaults to <tex2html_verb_mark>1414<tex2html_verb_mark>,
but you can also define it explicitly to handle other kinds of keys. For
example:
\begin<<10176>>tex2html_deferred<<10176>>\par\end<<10177>>tex2html_deferred<<10177>>
\begin<<8021>>tex2html_preform<<8021>><tex2html_verbatim_mark>verbatim1708#\end<<8022>>tex2html_preform<<8022>>
\begin<<10178>>tex2html_deferred<<10178>>\par\end<<10179>>tex2html_deferred<<10179>>
Matching a hash key in this way is typically significantly faster than
matching a full set of alternations. Specifically, it is O(length of
longest potential key), instead of O(number of keys).
\end<<8023>>quotation<<8023>>\end<<8024>>it<<8024>>
\begin<<10180>>tex2html_deferred<<10180>>\par\end<<10181>>tex2html_deferred<<10181>>
 
  \paragraph<<8744>>Ejemplo de uso de la directiva hash<<8744>>
  \begin<<8745>>tabular<<8745>><<8746>>c<<8746>>
  \end<<8747>>tabular<<8747>>

\begin<<10182>>tex2html_deferred<<10182>>\par\end<<10183>>tex2html_deferred<<10183>>
Sigue un ejemplo:
\begin<<8026>>tex2html_preform<<8026>><tex2html_verbatim_mark>verbatim1709#\end<<8027>>tex2html_preform<<8027>>
\begin<<10184>>tex2html_deferred<<10184>>\par\end<<10185>>tex2html_deferred<<10185>>
Sigue un ejemplo de ejecución:
\begin<<10186>>tex2html_deferred<<10186>>\par\end<<10187>>tex2html_deferred<<10187>>
\begin<<8028>>tex2html_preform<<8028>><tex2html_verbatim_mark>verbatim1710#\end<<8029>>tex2html_preform<<8029>>
\begin<<10188>>tex2html_deferred<<10188>>\par\end<<10189>>tex2html_deferred<<10189>>
\subsection<<8030>>Depuración<<8030>>
\begin<<10190>>tex2html_deferred<<10190>>\par\end<<10191>>tex2html_deferred<<10191>>
\begin<<8031>>it<<8031>>\begin<<8032>>quotation<<8032>>
\htmladdnormallink<<8748>><<8750>>\begin<<10192>>tex2html_deferred<<10192>>\tt\end<<10193>>tex2html_deferred<<10193>>Regexp::Grammars<<8750>><<8748>>
 <<8749>>http://search.cpan.org/perldoc?Regexp::Grammars<<8749>> provides a number of features specifically designed to
help debug both grammars and the data they parse.
\begin<<10194>>tex2html_deferred<<10194>>\par\end<<10195>>tex2html_deferred<<10195>>
All debugging messages are written to a log file (which, by default, is
    just <tex2html_verb_mark>1415<tex2html_verb_mark>). However, you can specify a disk file explicitly by placing
    a <tex2html_verb_mark>1416<tex2html_verb_mark> directive \emph<<8034>>at the start of your grammar<<8034>>\begin<<10196>>tex2html_deferred<<10196>>\footnote<<8035>>no funcionará si no se pone al principio
    de la gramática<<8035>>\end<<10197>>tex2html_deferred<<10197>>:
\begin<<10198>>tex2html_deferred<<10198>>\par\end<<10199>>tex2html_deferred<<10199>>
\begin<<8036>>tex2html_preform<<8036>><tex2html_verbatim_mark>verbatim1711#\end<<8037>>tex2html_preform<<8037>>
\begin<<10200>>tex2html_deferred<<10200>>\par\end<<10201>>tex2html_deferred<<10201>>
You can also explicitly specify that messages go to the terminal:
\begin<<10202>>tex2html_deferred<<10202>>\par\end<<10203>>tex2html_deferred<<10203>>
\begin<<8038>>tex2html_preform<<8038>><tex2html_verbatim_mark>verbatim1712#\end<<8039>>tex2html_preform<<8039>>
\begin<<10204>>tex2html_deferred<<10204>>\par\end<<10205>>tex2html_deferred<<10205>>
 
  \paragraph<<8751>>Debugging grammar creation<<8751>>
  \begin<<8752>>tabular<<8752>><<8753>>c<<8753>>
  \end<<8754>>tabular<<8754>>

\begin<<10206>>tex2html_deferred<<10206>>\par\end<<10207>>tex2html_deferred<<10207>>
Whenever a log file has been directly specified, \htmladdnormallink<<8755>><<8757>>\begin<<10208>>tex2html_deferred<<10208>>\tt\end<<10209>>tex2html_deferred<<10209>>Regexp::Grammars<<8757>><<8755>>
 <<8756>>http://search.cpan.org/perldoc?Regexp::Grammars<<8756>>
automatically does verbose static analysis of your grammar. That is,
whenever it compiles a grammar containing an explicit <tex2html_verb_mark>1417<tex2html_verb_mark>
directive it logs a series of messages explaining how it has interpreted
the various components of that grammar. For example, the following
grammar:
\begin<<10210>>tex2html_deferred<<10210>>\par\end<<10211>>tex2html_deferred<<10211>>
\begin<<8042>>tex2html_preform<<8042>><tex2html_verbatim_mark>verbatim1713#\end<<8043>>tex2html_preform<<8043>>
\begin<<10212>>tex2html_deferred<<10212>>\par\end<<10213>>tex2html_deferred<<10213>>
would produce the following analysis in the terminal:
\begin<<10214>>tex2html_deferred<<10214>>\par\end<<10215>>tex2html_deferred<<10215>>
\begin<<8044>>tex2html_preform<<8044>><tex2html_verbatim_mark>verbatim1714#\end<<8045>>tex2html_preform<<8045>>
\begin<<10216>>tex2html_deferred<<10216>>\par\end<<10217>>tex2html_deferred<<10217>>
This kind of static analysis is a useful starting point in debugging a
\index<<8758>>miscreant grammar<<8758>>\emph<<8759>>miscreant grammar<<8759>>\begin<<10218>>tex2html_deferred<<10218>>\footnote<<8198>>
miscreant - \it<<8047>>One who has behaved badly, or illegally; One not restrained by
moral principles; an unscrupulous villain; One who holds an incorrect
religious belief; an unbeliever; Lacking in conscience or moral
principles; unscrupulous; Holding an incorrect religious belief.<<8047>>
<<8198>>\end<<10219>>tex2html_deferred<<10219>>, because it enables you to see what you actually
specified (as opposed to what you \emph<<8048>>thought<<8048>> you'd specified).
\begin<<10220>>tex2html_deferred<<10220>>\par\end<<10221>>tex2html_deferred<<10221>>
 
  \paragraph<<8760>>Debugging grammar execution<<8760>>
  \begin<<8761>>tabular<<8761>><<8762>>c<<8762>>
  \end<<8763>>tabular<<8763>>

\begin<<10222>>tex2html_deferred<<10222>>\par\end<<10223>>tex2html_deferred<<10223>>
\htmladdnormallink<<8764>><<8766>>\begin<<10224>>tex2html_deferred<<10224>>\tt\end<<10225>>tex2html_deferred<<10225>>Regexp::Grammars<<8766>><<8764>>
 <<8765>>http://search.cpan.org/perldoc?Regexp::Grammars<<8765>> also provides a simple interactive debugger, with which
you can observe the process of parsing and the data being collected in
any result-hash.
\begin<<10226>>tex2html_deferred<<10226>>\par\end<<10227>>tex2html_deferred<<10227>>
To initiate debugging, place a <tex2html_verb_mark>1418<tex2html_verb_mark> directive anywhere in your
grammar. When parsing reaches that directive the debugger will be
activated, and the command specified in the directive immediately
executed. The available commands are:
\begin<<10228>>tex2html_deferred<<10228>>\par\end<<10229>>tex2html_deferred<<10229>>
\begin<<8051>>tex2html_preform<<8051>><tex2html_verbatim_mark>verbatim1715#\end<<8052>>tex2html_preform<<8052>>
\begin<<10230>>tex2html_deferred<<10230>>\par\end<<10231>>tex2html_deferred<<10231>>
These directives can be placed anywhere within a grammar and take effect
    when that point is reached in the parsing. Hence, adding a
    <tex2html_verb_mark>1419<tex2html_verb_mark> directive is very much like setting a breakpoint at that
    point in the grammar. Indeed, a common debugging strategy is to turn
    debugging on and off only around a suspect part of the grammar:
\begin<<10232>>tex2html_deferred<<10232>>\par\end<<10233>>tex2html_deferred<<10233>>
\begin<<8053>>tex2html_preform<<8053>><tex2html_verbatim_mark>verbatim1716#\end<<8054>>tex2html_preform<<8054>>
\begin<<10234>>tex2html_deferred<<10234>>\par\end<<10235>>tex2html_deferred<<10235>>
Once the debugger is active, it steps through the parse, reporting rules
that are tried, matches and failures, backtracking and restarts, and the
parser's location within both the grammar and the text being matched.
That report looks like this:
\begin<<10236>>tex2html_deferred<<10236>>\par\end<<10237>>tex2html_deferred<<10237>>
\begin<<8055>>tex2html_preform<<8055>><tex2html_verbatim_mark>verbatim1717#\end<<8056>>tex2html_preform<<8056>>
\begin<<10238>>tex2html_deferred<<10238>>\par\end<<10239>>tex2html_deferred<<10239>>
The first column indicates the point in the input at which the parser is
trying to match, as well as any backtracking or forward searching it may
need to do. The remainder of the columns track the parser's hierarchical
traversal of the grammar, indicating which rules are tried, which
succeed, and what they match.
\begin<<10240>>tex2html_deferred<<10240>>\par\end<<10241>>tex2html_deferred<<10241>>
Provided the logfile is a terminal (as it is by default), the debugger
also pauses at various points in the parsing process--before trying a
rule, after a rule succeeds, or at the end of the parse--according to
the most recent command issued. When it pauses, you can issue a new
command by entering a single letter:
\begin<<10242>>tex2html_deferred<<10242>>\par\end<<10243>>tex2html_deferred<<10243>>
\begin<<8057>>tex2html_preform<<8057>><tex2html_verbatim_mark>verbatim1718#\end<<8058>>tex2html_preform<<8058>>
\begin<<10244>>tex2html_deferred<<10244>>\par\end<<10245>>tex2html_deferred<<10245>>
Note that these are the first letters of the corresponding <tex2html_verb_mark>1420<tex2html_verb_mark>
commands, listed earlier. Just hitting ENTER while the debugger is
paused repeats the previous command.
\begin<<10246>>tex2html_deferred<<10246>>\par\end<<10247>>tex2html_deferred<<10247>>
While the debugger is paused you can also type a <tex2html_verb_mark>1421<tex2html_verb_mark>, which will display
the result-hash for the current rule. This can be useful for detecting
which rule isn't returning the data you expected.
\end<<8059>>quotation<<8059>>\end<<8060>>it<<8060>>
\begin<<10248>>tex2html_deferred<<10248>>\par\end<<10249>>tex2html_deferred<<10249>>
Veamos un ejemplo. El siguiente programa activa el depurador:
\begin<<8061>>tex2html_preform<<8061>><tex2html_verbatim_mark>verbatim1719#\end<<8062>>tex2html_preform<<8062>>
Al ejecutar obtenemos
<tex2html_verbatim_mark>rawhtml1720#
\begin<<10250>>tex2html_deferred<<10250>>\par\end<<10251>>tex2html_deferred<<10251>>
\subsection<<8199>>Mensajes de <<8063>>\begin<<10252>>tex2html_deferred<<10252>>\tt\end<<10253>>tex2html_deferred<<10253>>log<<8063>> del usuario<<8199>>
\begin<<10254>>tex2html_deferred<<10254>>\par\end<<10255>>tex2html_deferred<<10255>>
\begin<<8064>>it<<8064>>\begin<<8065>>quotation<<8065>>
    Both static and interactive debugging send a series of predefined log
    messages to whatever log file you have specified. It is also possible to
    send additional, user-defined messages to the log, using the <tex2html_verb_mark>1422<tex2html_verb_mark>
    directive.
\begin<<10256>>tex2html_deferred<<10256>>\par\end<<10257>>tex2html_deferred<<10257>>
This directive expects either a simple text or a codeblock as its single
    argument. If the argument is a code block, that code is expected to
    return the text of the message; if the argument is anything else, that
    something else \emph<<8066>>is<<8066>> the literal message. For example:
\begin<<10258>>tex2html_deferred<<10258>>\par\end<<10259>>tex2html_deferred<<10259>>
\begin<<8067>>tex2html_preform<<8067>><tex2html_verbatim_mark>verbatim1721#\end<<8068>>tex2html_preform<<8068>>
\begin<<10260>>tex2html_deferred<<10260>>\par\end<<10261>>tex2html_deferred<<10261>>
User-defined log messages implemented using a codeblock can also specify
    a severity level. If the codeblock of a <tex2html_verb_mark>1423<tex2html_verb_mark> directive returns
    two or more values, the first is treated as a log message severity
    indicator, and the remaining values as separate lines of text to be
    logged. For example:
\begin<<10262>>tex2html_deferred<<10262>>\par\end<<10263>>tex2html_deferred<<10263>>
\begin<<8069>>tex2html_preform<<8069>><tex2html_verbatim_mark>verbatim1722#\end<<8070>>tex2html_preform<<8070>>
\begin<<10264>>tex2html_deferred<<10264>>\par\end<<10265>>tex2html_deferred<<10265>>
When they are encountered, user-defined log messages are interspersed
    between any automatic log messages (i.e. from the debugger), at the
    correct level of nesting for the current rule.
\end<<8071>>quotation<<8071>>\end<<8072>>it<<8072>>
\begin<<10266>>tex2html_deferred<<10266>>\par\end<<10267>>tex2html_deferred<<10267>>
\subsection<<8073>>Depuración de Regexps<<8073>>
\begin<<10268>>tex2html_deferred<<10268>>\par\end<<10269>>tex2html_deferred<<10269>>
\begin<<8074>>it<<8074>>\begin<<8075>>quotation<<8075>>
    It is possible to use \htmladdnormallink<<8767>><<8769>>\begin<<10270>>tex2html_deferred<<10270>>\tt\end<<10271>>tex2html_deferred<<10271>>Regexp::Grammars<<8769>><<8767>>
 <<8768>>http://search.cpan.org/perldoc?Regexp::Grammars<<8768>> without creating \emph<<8077>>any<<8077>> subrule
    definitions, simply to debug a recalcitrant regex. For example, if the
    following regex wasn't working as expected:
\begin<<10272>>tex2html_deferred<<10272>>\par\end<<10273>>tex2html_deferred<<10273>>
\begin<<8078>>tex2html_preform<<8078>><tex2html_verbatim_mark>verbatim1723#\end<<8079>>tex2html_preform<<8079>>
\begin<<10274>>tex2html_deferred<<10274>>\par\end<<10275>>tex2html_deferred<<10275>>
you could instrument it with aliased subpatterns and then debug it
    step-by-step, using \htmladdnormallink<<8770>><<8772>>\begin<<10276>>tex2html_deferred<<10276>>\tt\end<<10277>>tex2html_deferred<<10277>>Regexp::Grammars<<8772>><<8770>>
 <<8771>>http://search.cpan.org/perldoc?Regexp::Grammars<<8771>>:
\begin<<10278>>tex2html_deferred<<10278>>\par\end<<10279>>tex2html_deferred<<10279>>
\begin<<8081>>tex2html_preform<<8081>><tex2html_verbatim_mark>verbatim1724#\end<<8082>>tex2html_preform<<8082>>
\begin<<10280>>tex2html_deferred<<10280>>\par\end<<10281>>tex2html_deferred<<10281>>
Note the use of amnesiac aliased subpatterns to avoid needlessly
    building a result-hash. Alternatively, you could use listifying aliases
    to preserve the matching structure as an additional debugging aid:
\begin<<10282>>tex2html_deferred<<10282>>\par\end<<10283>>tex2html_deferred<<10283>>
\begin<<8083>>tex2html_preform<<8083>><tex2html_verbatim_mark>verbatim1725#\end<<8084>>tex2html_preform<<8084>>
\end<<8085>>quotation<<8085>>\end<<8086>>it<<8086>>
\begin<<10284>>tex2html_deferred<<10284>>\par\end<<10285>>tex2html_deferred<<10285>>
\subsection<<8087>>Manejo y recuperación de errores<<8087>>
\begin<<10286>>tex2html_deferred<<10286>>\par\end<<10287>>tex2html_deferred<<10287>>
En este punto debo decir que no he podido reproducir el comportamiento
de las directivas <tex2html_verb_mark>1424<tex2html_verb_mark> y <tex2html_verb_mark>1425<tex2html_verb_mark> tal y como las describe 
Conway en el manual de \htmladdnormallink<<8773>><<8775>>\begin<<10288>>tex2html_deferred<<10288>>\tt\end<<10289>>tex2html_deferred<<10289>>Regexp::Grammars<<8775>><<8773>>
 <<8774>>http://search.cpan.org/perldoc?Regexp::Grammars<<8774>><<8088>><<8088>>. 
\begin<<10290>>tex2html_deferred<<10290>>\par\end<<10291>>tex2html_deferred<<10291>>
El siguiente ejemplo ilustra un conjunto de técnicas de gestión de errores
que son independientes del soprote dado por \htmladdnormallink<<8776>><<8778>>\begin<<10292>>tex2html_deferred<<10292>>\tt\end<<10293>>tex2html_deferred<<10293>>Regexp::Grammars<<8778>><<8776>>
 <<8777>>http://search.cpan.org/perldoc?Regexp::Grammars<<8777>><<8089>><<8089>>.
\begin<<10294>>tex2html_deferred<<10294>>\par\end<<10295>>tex2html_deferred<<10295>>
Se trata de la misma calculadora explicada en la sección
\ref<<8090>>subsection:recicla<<8090>>.
\begin<<10296>>tex2html_deferred<<10296>>\par\end<<10297>>tex2html_deferred<<10297>>
\begin<<8091>>tex2html_preform<<8091>><tex2html_verbatim_mark>verbatim1726#\end<<8092>>tex2html_preform<<8092>>
\begin<<10298>>tex2html_deferred<<10298>>\par\end<<10299>>tex2html_deferred<<10299>>
Veamos algunas ejecuciones que incluyen entradas erróneas:
\begin<<8093>>tex2html_preform<<8093>><tex2html_verbatim_mark>verbatim1727#\end<<8094>>tex2html_preform<<8094>>
Obsérvese los mensajes de error repetidos para la entrada 
<tex2html_verb_mark>1426<tex2html_verb_mark>. Ellos son debidos a los reiterados intentos de
casar <tex2html_verb_mark>1427<tex2html_verb_mark> en la regla de recuperación de errores:
\begin<<8095>>tex2html_preform<<8095>><tex2html_verbatim_mark>verbatim1728#\end<<8096>>tex2html_preform<<8096>>
en este caso resulta imposible encontrar un factor.
Se puede cambiar la conducta indicando un <tex2html_verb_mark>1428<tex2html_verb_mark> antes de la
llamada a <tex2html_verb_mark>1429<tex2html_verb_mark>:
\begin<<8097>>tex2html_preform<<8097>><tex2html_verbatim_mark>verbatim1729#\end<<8098>>tex2html_preform<<8098>>
\begin<<10300>>tex2html_deferred<<10300>>\par\end<<10301>>tex2html_deferred<<10301>>
en este caso la conducta es abandonar en el caso de que no se pueda encontrar un <tex2html_verb_mark>1430<tex2html_verb_mark>:
\begin<<8099>>tex2html_preform<<8099>><tex2html_verbatim_mark>verbatim1730#\end<<8100>>tex2html_preform<<8100>>
\begin<<10302>>tex2html_deferred<<10302>>\par\end<<10303>>tex2html_deferred<<10303>>
\subsection<<8101>>Mensajes de Warning<<8101>>
\begin<<10304>>tex2html_deferred<<10304>>\par\end<<10305>>tex2html_deferred<<10305>>
\begin<<8102>>it<<8102>>\begin<<8103>>quotation<<8103>>
   Sometimes, you want to detect problems, but not invalidate the entire
   parse as a result. For those occasions, the module provides a \emph<<8104>>less
   stringent<<8104>> form of error reporting: the <tex2html_verb_mark>1431<tex2html_verb_mark> directive.
\begin<<10306>>tex2html_deferred<<10306>>\par\end<<10307>>tex2html_deferred<<10307>>
This directive is exactly the same as an <tex2html_verb_mark>1432<tex2html_verb_mark> in every respect
   except that it does not induce a failure to match at the point it
   appears.
\begin<<10308>>tex2html_deferred<<10308>>\par\end<<10309>>tex2html_deferred<<10309>>
The directive is, therefore, useful for reporting \emph<<8105>>non-fatal<<8105>> problems
   in a parse. For example:
\begin<<10310>>tex2html_deferred<<10310>>\par\end<<10311>>tex2html_deferred<<10311>>
\begin<<8106>>tex2html_preform<<8106>><tex2html_verbatim_mark>verbatim1731#\end<<8107>>tex2html_preform<<8107>>
\begin<<10312>>tex2html_deferred<<10312>>\par\end<<10313>>tex2html_deferred<<10313>>
Note that, because they do not induce failure, two or more
   <tex2html_verb_mark>1433<tex2html_verb_mark> directives can be ;SPMquot;stacked;SPMquot; in sequence, as in the
   previous example.
\begin<<10314>>tex2html_deferred<<10314>>\par\end<<10315>>tex2html_deferred<<10315>>
\end<<8108>>quotation<<8108>>\end<<8109>>it<<8109>>
\begin<<10316>>tex2html_deferred<<10316>>\par\end<<10317>>tex2html_deferred<<10317>>
\subsection<<8110>>Simplificando el AST<<8110>>
\begin<<10318>>tex2html_deferred<<10318>>\par\end<<10319>>tex2html_deferred<<10319>>
\begin<<8111>>tex2html_preform<<8111>><tex2html_verbatim_mark>verbatim1732#\end<<8112>>tex2html_preform<<8112>>
\begin<<10320>>tex2html_deferred<<10320>>\par\end<<10321>>tex2html_deferred<<10321>>
Ejecuciones:
\begin<<8113>>tex2html_preform<<8113>><tex2html_verbatim_mark>verbatim1733#\end<<8114>>tex2html_preform<<8114>>
\begin<<10322>>tex2html_deferred<<10322>>\par\end<<10323>>tex2html_deferred<<10323>>
\subsection<<8200>>Reciclando una <<8115>>\begin<<10324>>tex2html_deferred<<10324>>\tt\end<<10325>>tex2html_deferred<<10325>>Regexp::Grammar<<8115>><<8200>>
\label<<8116>>subsection:recicla<<8116>>
\begin<<10326>>tex2html_deferred<<10326>>\par\end<<10327>>tex2html_deferred<<10327>>
 
  \paragraph<<8779>>Ejecución<<8779>>
  \begin<<8780>>tabular<<8780>><<8781>>c<<8781>>
  \end<<8782>>tabular<<8782>>

\begin<<10328>>tex2html_deferred<<10328>>\par\end<<10329>>tex2html_deferred<<10329>>
El siguiente programa <tex2html_verb_mark>1434<tex2html_verb_mark>
recibe como entrada una expresión en infijo.
\begin<<10330>>tex2html_deferred<<10330>>\par\end<<10331>>tex2html_deferred<<10331>>
La ejecución consta de dos bucles.
En la primera parte se inyecta a la jerarquía de
clases de los AST generados para las expresiones en infijo
una semántica que permite 
evaluar la expresión:
\begin<<8118>>tex2html_preform<<8118>><tex2html_verbatim_mark>verbatim1734#\end<<8119>>tex2html_preform<<8119>>
En esta primera parte mostraremos además el AST
construido para la expresión infija de entrada.
<tex2html_verbatim_mark>rawhtml1735#
Observamos que la asociatividad es la correcta.
El <tex2html_verb_mark>1435<tex2html_verb_mark> final es el resultado de la evaluación de
<tex2html_verb_mark>1436<tex2html_verb_mark>.
\begin<<10332>>tex2html_deferred<<10332>>\par\end<<10333>>tex2html_deferred<<10333>>
La estructura del árbol se corresponde con la de la gramática:
\begin<<8120>>tex2html_preform<<8120>><tex2html_verbatim_mark>verbatim1736#\end<<8121>>tex2html_preform<<8121>>
\begin<<10334>>tex2html_deferred<<10334>>\par\end<<10335>>tex2html_deferred<<10335>>
Ahora, en una segunda parte sobreescribimos los métodos
<tex2html_verb_mark>1437<tex2html_verb_mark> que describen la semántica para producir una traducción
de infijo a postfijo:
\begin<<8122>>tex2html_preform<<8122>><tex2html_verbatim_mark>verbatim1737#\end<<8123>>tex2html_preform<<8123>>
Ahora al proporcionar la entrada <tex2html_verb_mark>1438<tex2html_verb_mark> obtenemos:
\begin<<8124>>tex2html_preform<<8124>><tex2html_verbatim_mark>verbatim1738#\end<<8125>>tex2html_preform<<8125>>
Aquí <tex2html_verb_mark>1439<tex2html_verb_mark> es el operador de negación unaria y <tex2html_verb_mark>1440<tex2html_verb_mark> es el operador
factorial.
\begin<<10336>>tex2html_deferred<<10336>>\par\end<<10337>>tex2html_deferred<<10337>>
 
  \paragraph<<8783>>Estructura de la aplicación<<8783>>
  \begin<<8784>>tabular<<8784>><<8785>>c<<8785>>
  \end<<8786>>tabular<<8786>>

\begin<<10338>>tex2html_deferred<<10338>>\par\end<<10339>>tex2html_deferred<<10339>>
Estos son los ficheros que integran la aplicación:
\begin<<10340>>tex2html_deferred<<10340>>\par\end<<10341>>tex2html_deferred<<10341>>
\begin<<8127>>tex2html_preform<<8127>><tex2html_verbatim_mark>verbatim1739#\end<<8128>>tex2html_preform<<8128>>
\begin<<10342>>tex2html_deferred<<10342>>\par\end<<10343>>tex2html_deferred<<10343>>
 
  \paragraph<<8787>>Programa principal<<8787>>
  \begin<<8788>>tabular<<8788>><<8789>>c<<8789>>
  \end<<8790>>tabular<<8790>>

\begin<<10344>>tex2html_deferred<<10344>>\par\end<<10345>>tex2html_deferred<<10345>>
En el programa principal definimos la gramática
y escribimos una subrutina <tex2html_verb_mark>1441<tex2html_verb_mark>
que realiza el parsing. 
\begin<<10346>>tex2html_deferred<<10346>>\par\end<<10347>>tex2html_deferred<<10347>>
<tex2html_verbatim_mark>rawhtml1740#
\begin<<10348>>tex2html_deferred<<10348>>\par\end<<10349>>tex2html_deferred<<10349>>
Los nodos del AST poseen un método <tex2html_verb_mark>1442<tex2html_verb_mark> que se encarga de 
realizar la traducción del nodo.
\begin<<10350>>tex2html_deferred<<10350>>\par\end<<10351>>tex2html_deferred<<10351>>
 
  \paragraph<<8791>>Las Clases de nodos del AST<<8791>>
  \begin<<8792>>tabular<<8792>><<8793>>c<<8793>>
  \end<<8794>>tabular<<8794>>

\begin<<10352>>tex2html_deferred<<10352>>\par\end<<10353>>tex2html_deferred<<10353>>
\begin<<8131>>tex2html_preform<<8131>><tex2html_verbatim_mark>verbatim1741#\end<<8132>>tex2html_preform<<8132>>
\begin<<10354>>tex2html_deferred<<10354>>\par\end<<10355>>tex2html_deferred<<10355>>
 
  \paragraph<<8795>>Definiendo <<8799>>\begin<<10356>>tex2html_deferred<<10356>>\tt\end<<10357>>tex2html_deferred<<10357>>sem<<8799>> para la evaluación de la expresión<<8795>>
  \begin<<8796>>tabular<<8796>><<8797>>c<<8797>>
  \end<<8798>>tabular<<8798>>

\begin<<10358>>tex2html_deferred<<10358>>\par\end<<10359>>tex2html_deferred<<10359>>
\begin<<8134>>tex2html_preform<<8134>><tex2html_verbatim_mark>verbatim1742#\end<<8135>>tex2html_preform<<8135>>
\begin<<10360>>tex2html_deferred<<10360>>\par\end<<10361>>tex2html_deferred<<10361>>
 
  \paragraph<<8800>>Definiendo <<8804>>\begin<<10362>>tex2html_deferred<<10362>>\tt\end<<10363>>tex2html_deferred<<10363>>sem<<8804>> para la traducción a postfijo<<8800>>
  \begin<<8801>>tabular<<8801>><<8802>>c<<8802>>
  \end<<8803>>tabular<<8803>>

\begin<<10364>>tex2html_deferred<<10364>>\par\end<<10365>>tex2html_deferred<<10365>>
\begin<<8137>>tex2html_preform<<8137>><tex2html_verbatim_mark>verbatim1743#\end<<8138>>tex2html_preform<<8138>>
\begin<<10366>>tex2html_deferred<<10366>>\par\end<<10367>>tex2html_deferred<<10367>>
\begin<<8214>>theorem_type<<8214>>[exercise][exercise][section][][][]
\begin<<8140>>itemize<<8140>>
\item Explique el significado de la primera línea del programa principal
\begin<<8141>>tex2html_preform<<8141>><tex2html_verbatim_mark>verbatim1744#\end<<8142>>tex2html_preform<<8142>>
\item Explique el significado de <tex2html_verb_mark>1443<tex2html_verb_mark> en <tex2html_verb_mark>1444<tex2html_verb_mark>:
\begin<<8143>>tex2html_preform<<8143>><tex2html_verbatim_mark>verbatim1745#\end<<8144>>tex2html_preform<<8144>>
\begin<<10368>>tex2html_deferred<<10368>>\par\end<<10369>>tex2html_deferred<<10369>>
\item Aisle las funciones relacionadas con la creación de semántica
como <tex2html_verb_mark>1445<tex2html_verb_mark>, <tex2html_verb_mark>1446<tex2html_verb_mark> y las llamadas a <tex2html_verb_mark>1447<tex2html_verb_mark>
en un módulo <tex2html_verb_mark>1448<tex2html_verb_mark> aparte. 
\begin<<10370>>tex2html_deferred<<10370>>\par\end<<10371>>tex2html_deferred<<10371>>
\item Añada un traductor de infijo a prefijo al código presentado 
en esta sección. Una expresión como
<tex2html_verb_mark>1449<tex2html_verb_mark>  se traducirá como <tex2html_verb_mark>1450<tex2html_verb_mark>
\end<<8145>>itemize<<8145>>\end<<8215>>theorem_type<<8215>>
\begin<<10372>>tex2html_deferred<<10372>>\par\end<<10373>>tex2html_deferred<<10373>>
\subsection<<8808>>Práctica: Calculadora con <<8810>>\begin<<10374>>tex2html_deferred<<10374>>\tt\end<<10375>>tex2html_deferred<<10375>>Regexp::Grammars<<8810>><<8808>>
   \index<<8809>>Práctica!Calculadora con <<8811>>\begin<<10376>>tex2html_deferred<<10376>>\tt\end<<10377>>tex2html_deferred<<10377>>Regexp::Grammars<<8811>><<8809>>
  
\begin<<10378>>tex2html_deferred<<10378>>\par\end<<10379>>tex2html_deferred<<10379>>
\begin<<8148>>itemize<<8148>>
\item Reforme la estructura del ejemplo para que tenga una jerarquía
de desarrollo de acuerdo a los estándares de Perl. Use \htmladdnormallink<<8812>><<8814>>\begin<<10380>>tex2html_deferred<<10380>>\tt\end<<10381>>tex2html_deferred<<10381>>h2xs<<8814>><<8812>>
<<8813>>http://search.cpan.org/perldoc/?h2xs<<8813>> 
o bien \htmladdnormallink<<8815>><<8817>>\begin<<10382>>tex2html_deferred<<10382>>\tt\end<<10383>>tex2html_deferred<<10383>>Module::Starter<<8817>><<8815>>
 <<8816>>http://search.cpan.org/perldoc?Module::Starter<<8816>>. Use el espacio de nombres <tex2html_verb_mark>1451<tex2html_verb_mark>.
Mueva el módulo <tex2html_verb_mark>1452<tex2html_verb_mark> a <tex2html_verb_mark>1453<tex2html_verb_mark>.
Lea el capítulo \htmladdnormallink<<8818>>Modulos<<8818>>
<<8819>>http://nereida.deioc.ull.es/~lhp/perlexamples/node170.html<<8819>> de los apuntes de LHP.
\begin<<10384>>tex2html_deferred<<10384>>\par\end<<10385>>tex2html_deferred<<10385>>
\item Defina el conjunto de pruebas que deberá pasar su traductor.
Añádalas como pruebas <tex2html_verb_mark>1454<tex2html_verb_mark>. Cuando la funcionalidad 
a comprobar esté operativa cambie su estatus.
\begin<<10386>>tex2html_deferred<<10386>>\par\end<<10387>>tex2html_deferred<<10387>>
\item Añada variables y la expresión de asignación:
\begin<<10388>>tex2html_deferred<<10388>>\par\end<<10389>>tex2html_deferred<<10389>>
\begin<<8153>>tex2html_preform<<8153>><tex2html_verbatim_mark>verbatim1746#\end<<8154>>tex2html_preform<<8154>>
que será traducida a postfijo como:
\begin<<10390>>tex2html_deferred<<10390>>\par\end<<10391>>tex2html_deferred<<10391>>
\begin<<8155>>tex2html_preform<<8155>><tex2html_verbatim_mark>verbatim1747#\end<<8156>>tex2html_preform<<8156>>
El operador de asignación es asociativo a derechas.
El valor devuelto por una expresión de asignación es el valor asignado.
\begin<<10392>>tex2html_deferred<<10392>>\par\end<<10393>>tex2html_deferred<<10393>>
Use un hash para implantar la relación nombre-valor
en el caso de la evaluación
\begin<<10394>>tex2html_deferred<<10394>>\par\end<<10395>>tex2html_deferred<<10395>>
\item Introduzca la expresión bloque:
\begin<<10396>>tex2html_deferred<<10396>>\par\end<<10397>>tex2html_deferred<<10397>>
\begin<<8157>>tex2html_preform<<8157>><tex2html_verbatim_mark>verbatim1748#\end<<8158>>tex2html_preform<<8158>>
\begin<<10398>>tex2html_deferred<<10398>>\par\end<<10399>>tex2html_deferred<<10399>>
Los bloques son listas entre llaves de expresiones separadas por punto y coma.
El valor retornado por una expresión bloque es el último evaluado 
en el bloque.
\begin<<10400>>tex2html_deferred<<10400>>\par\end<<10401>>tex2html_deferred<<10401>>
El símbolo de arranque de la gramática (esto es, el patrón regular
contra el que hay que casar) será la expresión bloque.
\begin<<10402>>tex2html_deferred<<10402>>\par\end<<10403>>tex2html_deferred<<10403>>
\item Introduzca las expresiones de comparación <tex2html_verb_mark>1455<tex2html_verb_mark>, <tex2html_verb_mark>1456<tex2html_verb_mark>, <tex2html_verb_mark>1457<tex2html_verb_mark>, <tex2html_verb_mark>1458<tex2html_verb_mark>, <tex2html_verb_mark>1459<tex2html_verb_mark> y <tex2html_verb_mark>1460<tex2html_verb_mark>
con la prioridad adecuada. Tenga en cuenta que una expresión como:
\begin<<8159>>tex2html_preform<<8159>><tex2html_verbatim_mark>verbatim1749#\end<<8160>>tex2html_preform<<8160>>
deberá entenderse como
\begin<<8161>>tex2html_preform<<8161>><tex2html_verbatim_mark>verbatim1750#\end<<8162>>tex2html_preform<<8162>>
Esto es, se traducirá como:
\begin<<8163>>tex2html_preform<<8163>><tex2html_verbatim_mark>verbatim1751#\end<<8164>>tex2html_preform<<8164>>
\begin<<10404>>tex2html_deferred<<10404>>\par\end<<10405>>tex2html_deferred<<10405>>
\item Introduzca la expresión <tex2html_verb_mark>1461<tex2html_verb_mark>. La parte del <tex2html_verb_mark>1462<tex2html_verb_mark>
será opcional:
\begin<<8165>>tex2html_preform<<8165>><tex2html_verbatim_mark>verbatim1752#\end<<8166>>tex2html_preform<<8166>>
un <tex2html_verb_mark>1463<tex2html_verb_mark> casa con el <tex2html_verb_mark>1464<tex2html_verb_mark> mas cercano. 
La sentencia:
\begin<<8167>>tex2html_preform<<8167>><tex2html_verbatim_mark>verbatim1753#\end<<8168>>tex2html_preform<<8168>>
se interpreta como:
\begin<<8169>>tex2html_preform<<8169>><tex2html_verbatim_mark>verbatim1754#\end<<8170>>tex2html_preform<<8170>>
y no como:
\begin<<8171>>tex2html_preform<<8171>><tex2html_verbatim_mark>verbatim1755#\end<<8172>>tex2html_preform<<8172>>
Se traducirá como:
\begin<<8173>>tex2html_preform<<8173>><tex2html_verbatim_mark>verbatim1756#\end<<8174>>tex2html_preform<<8174>>
\item Escriba un intérprete de la máquina orientada a pila definida en los apartados anteriores.
El código generado debería poder ejecutarse correctamente en el intérprete.
\end<<8175>>itemize<<8175>>
\begin<<10406>>tex2html_deferred<<10406>>\par\end<<10407>>tex2html_deferred<<10407>>
\chapter<<8176>>Análisis Sintáctico Descendente en JavaScript<<8176>>
\begin<<10408>>tex2html_deferred<<10408>>\par\end<<10409>>tex2html_deferred<<10409>>
